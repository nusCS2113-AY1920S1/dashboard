[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "test {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "jacoco {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    toolVersion \u003d \"0.8.4\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    reportsDir \u003d file(\"$buildDir/customJacocoReportDir\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    mainClassName \u003d \"compal.MainLauncher\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"COMPal\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    archiveVersion \u003d \"1.4\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    compile group: \u0027com.opencsv\u0027, name: \u0027opencsv\u0027, version: \u00274.6\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    compile group: \u0027org.mnode.ical4j\u0027, name: \u0027ical4j\u0027, version: \u00273.0.11\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    compile group: \u0027org.json\u0027, name: \u0027json\u0027, version: \u002720190722\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "jar {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        attributes \u0027Main-Class\u0027: \u0027compal.MainLauncher\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    from {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LTPZ": 1,
      "SholihinK": 49,
      "jaedonkey": 1,
      "yueyeah": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/compal/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.LogicManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.ListCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.ui.UiManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.ui.UiUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": " * Initializes GUI."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private UiUtil uiUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private LogicManager logicManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(Main.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Constructs a new Main object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public Main() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.uiUtil \u003d new UiUtil();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.ui \u003d new UiManager(uiUtil);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.logicManager \u003d new LogicManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logger.info(\"Starting COMPal\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Initializes and sets up the GUI."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param primaryStage The stage for GUI."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void start(Stage primaryStage) throws ParseException, ParserException, CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        CommandResult cmdResult \u003d logicManager.logicExecute(\"list\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (ListCommand.LIST_EMPTY.equals(cmdResult.feedbackToUser)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            createData();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        cmdResult \u003d logicManager.logicExecute(\"view week\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        uiUtil.printg(\"Hello there!\\n\\n\" + cmdResult.feedbackToUser);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void createData() throws ParseException, ParserException, CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        //monday"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\"event CS2101 Tutorial /date 30/09/2019 03/10/2019 \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"/start 0800 /end 1000 /final-date 14/11/2019 /priority high\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\"event GEQ TUT /date 30/09/2019 /start 1000 /end 1200 \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"/final-date 04/11/2019 /priority medium /interval 14\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\"event CS2105 TUT /date 30/09/2019 \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"/start 1300 /end 1400 /priority high /final-date 11/11/2019\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\"event CS2105 Lecture /date 30/09/2019 /start 1400 /end 1600 \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"/final-date 14/11/2019 /priority high\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        logicManager.logicExecute(\"event Lunch Appointment /date 18/11/2019 /start 1200 /end 1400 \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            + \"/priority medium\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\"event quick breakfast /date 11/11/2019 /start 0800 /end 0805 \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"/priority high\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\"event team meeting /date 11/11/2019 /start 0800 /end 0900 \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"/priority low\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\"event job interview at google /date 11/11/2019 /start 0900 /end 1000 \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"/priority medium\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\"event ST2334 Lecture /date 01/10/2019 03/10/2019\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \" /start 1000 /end 1200 /final-date 14/11/2019\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        logicManager.logicExecute(\"event CCA Training /date 01/10/2019 03/10/2019\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            + \" /start 1900 /end 2200 /final-date 14/11/2019 /priority medium\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\"event CS2106 Lecture /date 02/10/2019 /start 1400 /end 1600 \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"/final-date 13/11/2019 /priority low\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\"event CS2113T TUT /date 02/10/2019 /start 1700 \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"/end 1800 /final-date 13/11/2019 /priority high\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        logicManager.logicExecute(\"event Lunch Appointment /date 20/11/2019 /start 1330 /end 1430 \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                + \"/priority medium\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\"event CS2113T Lecture /date 04/10/2019 /start 1600 /end 1800\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \" /final-date 15/11/2019 /priority high\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        logicManager.logicExecute(\"event Part-time Job /date 10/08/2019 /start 0800 /end 1600\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                + \" /final-date 23/11/2019 /priority medium\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\"deadline CS2106 Assignment 3 /date 16/10/2019 /end 1400 /priority low\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\"deadline CS2106 Assignment 4 /date 02/10/2019 /end 1400 /priority low\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\"deadline CS2106 Assignment 5 /date 16/11/2019 \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"/end 1400 /priority medium\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\"deadline CS2113T Weekly Update /date 01/10/2019 \""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"/end 2359 /final-date 04/11/2019 /priority high\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\"deadline CS2105 Assignment 1 /date 09/10/2019 /end 2359 /priority high\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\"deadline CS2105 Assignment 2 /date 30/10/2019 /end 2359 /priority high\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\"deadline CS2105 Assignment 3 /date 13/11/2019 /end 2359 /priority high\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        logicManager.logicExecute(\"deadline GEQ1000 Philosophy Quiz /date 08/09/2019 /end 2359 /priority low\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        logicManager.logicExecute(\"deadline GEQ1000 Physics Quiz /date 22/09/2019 /end 2359 /priority low\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        logicManager.logicExecute(\"deadline GEQ1000 Computational Thinking Quiz /date 13/10/2019 /end 2359 \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            + \"/priority low\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        logicManager.logicExecute(\"deadline GEQ1000 Engineering Quiz /date 27/10/2019 /end 2359 /priority low\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        logicManager.logicExecute(\"deadline GEQ1000 Economics Quiz /date 10/11/2019 /end 2359 /priority low\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        logicManager.logicExecute(\"deadline GEQ1000 Design Quiz /date 17/11/2019 /end 2359 /priority low\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        logicManager.logicExecute(\"deadline GEQ1000 Design Wallet /date 17/11/2019 /end 2359 /priority low\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        logicManager.logicExecute(\"deadline GEQ1000 Final Reflection Draft /date 20/10/2019 /end 2359 /priority low\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        logicManager.logicExecute(\"deadline GEQ1000 Final Reflection Paper /date 17/11/2019 /end 2359 \""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            + \"/priority low\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        logicManager.logicExecute(\"deadline CS2101 Prepare OP2 Slides \u0026 Script /date 02/11/2019 /end 2359 \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            + \"/priority high\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        logicManager.logicExecute(\"deadline CS2101/CS2113T PPP Submission /date 11/11/2019 /end 2359 /priority high\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        logicManager.logicExecute(\"deadline CS2101/CS2113T UG Submission /date 11/11/2019 /end 2359 /priority high\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        logicManager.logicExecute(\"deadline CS2101/CS2113T DG Submission /date 11/11/2019 /end 2359 /priority high\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\" event CS2113T Exam /date 23/11/2019\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \" /start 1300 /end 1500 /priority high\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\" event CS2105 Exam /date 02/12/2019\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \" /start 1700 /end 1900 /priority high\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\"event CS2106 Exam \""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"/date 03/12/2019 /start 0900 /end 1100 /priority high\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\"event ST2334 Exam \""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"/date 03/12/2019 /start 1700 /end 1900 /priority high\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\"event ST2334 Exam \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"/date 03/12/2019 /start 1700 /end 1900 /priority high\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\"done /id 112 /status y\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\"done /id 113 /status y\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\"done /id 104 /status y\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\"done /id 102 /status y\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\"done /id 105 /status y\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\"done /id 109 /status y\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\"done /id 114 /status y\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\"done /id 106 /status y\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logicManager.logicExecute(\"done /id 101 /status y\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 30,
      "SholihinK": 106,
      "jaedonkey": 11
    }
  },
  {
    "path": "src/main/java/compal/MainLauncher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class MainLauncher {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Main.main(args);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 7
    }
  },
  {
    "path": "src/main/java/compal/commons/CompalUtils.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "package compal.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import netscape.javascript.JSObject;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import org.json.JSONException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import org.json.JSONObject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.nio.charset.Charset;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "public class CompalUtils {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    //@@author yueyeah"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Converts a date string to a Date object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param dateStr The date string to be converted."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return The date string in the form of a Date object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static Date stringToDate(String dateStr) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Date date \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            date \u003d format.parse(dateStr);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    //@@author yueyeah"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Converts a Date object to a date string. Correct type for creating a Task object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param date The date in the form of a Date object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return The date in the form of a String object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static String dateToString(Date date) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return format.format(date);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Get the month from a given date."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param date Date object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return Month as integer. JANUARY is 0 (not 1) and so on."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static int getMonth(Date date) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        calendar.setTime(date);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return calendar.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Get the year from a given date."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param date Date object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return Year as integer."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static int getYear(Date date) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        calendar.setTime(date);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    //@@author yueyeah"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Finds out if a start time is before an end time. If the start time is after end time,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * it is likely that the end time is on the next day."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param startTimeString The start time in the form of a String object."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param endTimeString The end time in the form of a String object."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return True if the start time is before the end time, False if not."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static boolean isTimeInSequence(String startTimeString, String endTimeString) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        int startTimeInt \u003d Integer.valueOf(startTimeString);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        int endTimeInt \u003d Integer.valueOf(endTimeString);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return (startTimeInt \u003c endTimeInt);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    //@@author yueyeah"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Increases date by week, to assign event slots for each week."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param initialDate The date to increment"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return Final date one week later than initialDate"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static Date incrementDateByDays(Date initialDate, int numOfDays) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        calendar.setTime(initialDate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        calendar.add(Calendar.DATE, numOfDays);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Date finalDate \u003d calendar.getTime();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return finalDate;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Read the raw json from the json url given."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param url json url."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return Raw Json."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @throws IOException To print out the entire stack trace of the exception."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @throws JSONException To print out the entire stack trace of the exception."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static JSONObject readJsonFromNusmods(String url) throws IOException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        InputStream inputStream \u003d new URL(url).openStream();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        JSONObject moduleJson \u003d new JSONObject();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            BufferedReader bufferedReader \u003d new BufferedReader(new InputStreamReader(inputStream,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    Charset.defaultCharset()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int currChar;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            while (true) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                currChar \u003d bufferedReader.read();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                if (currChar \u003d\u003d -1) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                stringBuilder.append((char) currChar);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            moduleJson \u003d new JSONObject(stringBuilder.toString());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            inputStream.close();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return moduleJson;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyeah": 134
    }
  },
  {
    "path": "src/main/java/compal/commons/LogUtils.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * Loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * at the {@code INFO} level."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class LogUtils {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static final String LOG_FILE_NAME \u003d \"COMPal.log\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                FileHandler fileHandlerTemp \u003d new FileHandler(LOG_FILE_NAME, true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                fileHandlerTemp.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                fileHandlerTemp.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                fileHandler \u003d fileHandlerTemp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clasz) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (clasz \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return getLogger(clasz.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 54
    }
  },
  {
    "path": "src/main/java/compal/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.parser.ParserManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.storage.TaskStorageManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "//@@author SholihinK"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * The LogicManager Class handles the logic of Wallet."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class LogicManager {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static final String BYE_TOKEN \u003d \"bye.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ParserManager parserManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private TaskStorageManager taskStorageManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Construct logic manager class."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public LogicManager() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.parserManager \u003d new ParserManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.taskStorageManager \u003d new TaskStorageManager();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Passes user input to parserManager to be processed. parserManager returns suitable"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * command object to carry out the user\u0027s aim."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public CommandResult logicExecute(String fullCommand) throws CommandException, ParserException, ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        ArrayList\u003cTask\u003e taskArrList \u003d new ArrayList\u003c\u003e(taskStorageManager.loadData());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.taskList.setArrList(taskArrList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logger.info(\"User input received:\" + fullCommand + \". Sending it to be parsed\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Command command \u003d parserManager.processCmd(fullCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        CommandResult cmdResult \u003d command.commandExecute(taskList);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        //save to file if required"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (cmdResult.requireSaving) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            logger.info(\"Updating tasks.txt file\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            taskList.sortTask(taskList.getArrList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            taskStorageManager.saveData(taskList.getArrList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (cmdResult.feedbackToUser.equals(BYE_TOKEN)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            logger.info(\"Exiting COMPal!\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return cmdResult;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LTPZ": 1,
      "SholihinK": 68,
      "jaedonkey": 1
    }
  },
  {
    "path": "src/main/java/compal/logic/command/ByeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "//@@author SholihinK"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Bye\\n\\t\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"Format: bye\\n\\t\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"e.g. \\\"bye\\\"\\n\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"This command will exit COMPal. Have a nice day! :)\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public CommandResult commandExecute(TaskList task) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return new CommandResult(\"bye.\", true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 17
    }
  },
  {
    "path": "src/main/java/compal/logic/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param task {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public abstract CommandResult commandExecute(TaskList task) throws CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 14,
      "yueyeah": 3
    }
  },
  {
    "path": "src/main/java/compal/logic/command/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "//@@author SholihinK"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public final boolean requireSaving;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Return command results."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param feedbackToUser the string feedback"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param requireSaving  if command require saving"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean requireSaving) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.requireSaving \u003d requireSaving;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 26
    }
  },
  {
    "path": "src/main/java/compal/logic/command/DeadlineCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.CompalUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.model.tasks.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "//@@author LTPZ"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "//@@author yueyeah"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * Add a deadline type task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"deadline\\n\\t\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"Format: deadline DESCRIPTION /date DATE... /end END_TIME [/interval INTERVAL] \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"[/priority PRIORITY] [/final-date FINAL_DATE]\\n\\n\\t\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"Note: content in \\\"[]\\\": optional\\n\\t\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"You can switch the order of any two blocks (a block starts with \\\"/\\\" and ends by the next block)\\n\\t\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"content in CAP: need to be fulfilled by the user\\n\\t\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"content separated by \\\"|\\\": must choose exactly one from them\\n\\t\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"\\\"...\\\" means you can add multiple. e.g. DATE... means you can add 01/01/2019 02/01/2019\\n\\t\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"For DATE and FINAL_DATE: dd/mm/yyyy is the date format. e.g. 01/01/2000\\n\\t\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"For END_TIME: HHmm is the time format. e.g. 1740\\n\\t\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"For PRIORITY: must be \\\"low\\\" or \\\"medium\\\" or \\\"high\\\"\\n\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"This command will add a task which has a deadline date and time\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"Examples:\\n\\t\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"deadline cs2106as /date 01/01/2019 /end 1000\\n\\t\\t\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"add a task which ends at 01/01/2019 10:00am with default priority low\\n\\t\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"deadline dinner /date 01/01/2019 02/01/2019 /end 1800 /final-date 10/01/2019\\n\\t\\t\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"add a task which ends on 01/01/2019 and 02/01/2019 6pm and repeat weekly(default) until 10/01/2019\\n\\t\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"deadline diary /date 01/01/2019 /end 2359 /final-date 10/01/2019 /interval 1\\n\\t\\t\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"add a task which ends on 01/01/2019 23:59pm and repeat daily until 10/01/2019\\n\\t\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"deadline cs2106as /date 01/01/2019 /end 1000 /priority high\\n\\t\\t\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"dd a task which ends at 01/01/2019 10:00am with priority high\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String MESSAGE_SUCCESSFULLY_ADDED \u003d \"\\nThe following deadline were added: \\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String underscoreErrorMsg \u003d \"Descriptions should not have underscores!\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String MESSAGE_REPEATED_DEADLINE \u003d \"\\nLooks like you already added the task before! \\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"Use the edit command on the task ID given below!\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private ArrayList\u003cString\u003e startDateList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private Task.Priority priority;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private String finalDateString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private int interval;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(DeadlineCommand.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * This is the constructor."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param description   description of deadline."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param priority      priority of deadline."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param startDateList date of deadline."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param endTime       end time of deadline."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public DeadlineCommand(String description, Task.Priority priority, ArrayList\u003cString\u003e startDateList,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                           String endTime, String finalDateString, int interval) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.startDateList \u003d startDateList;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.finalDateString \u003d finalDateString;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.interval \u003d interval;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public CommandResult commandExecute(TaskList taskList) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (description.contains(\"_\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            throw new CommandException(underscoreErrorMsg);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        logger.info(\"Executing deadline command\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Date finalDate \u003d CompalUtils.stringToDate(finalDateString);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        StringBuilder finalList \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        for (String startDateString : startDateList) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Date startDate \u003d CompalUtils.stringToDate(startDateString);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            while (!startDate.after(finalDate)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                startDateString \u003d CompalUtils.dateToString(startDate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                boolean doesNotExist \u003d true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                for (Task task : taskList.getArrList()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    if (task.getSymbol().equals(\"D\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                            \u0026\u0026 task.getStringMainDate().equals(startDateString)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                            \u0026\u0026 task.getStringEndTime().equals(endTime)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                            \u0026\u0026 task.getDescription().equalsIgnoreCase(description)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                        finalList.append(MESSAGE_REPEATED_DEADLINE.concat(task.toString() + \"\\n\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                        doesNotExist \u003d false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                if (doesNotExist) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    Deadline indivDeadline \u003d new Deadline(description, priority, startDateString, endTime);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    taskList.addTask(indivDeadline);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    finalList.append(MESSAGE_SUCCESSFULLY_ADDED.concat(indivDeadline.toString() + \"\\n\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                startDate \u003d CompalUtils.incrementDateByDays(startDate, interval);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return new CommandResult(finalList.toString(), true);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LTPZ": 9,
      "SholihinK": 4,
      "jaedonkey": 1,
      "yueyeah": 97
    }
  },
  {
    "path": "src/main/java/compal/logic/command/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "//@@author yueyeah"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * A Command object that handles looking for a task in the tasklist that corresponds to the given taskID,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * and removes that specified task from the tasklist."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * CONSTANTS."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"delete\\n\\t\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"Format: delete /id TASK_ID\\n\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"Note: content in CAP: need to be fulfilled by the user\\n\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"This command will delete a task with id TASK_ID\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"Examples:\\n\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"delete /id 1\\n\\t\\t\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"delete task with id 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static final String MESSAGE_INVALID_ID \u003d \"Error: Id input does not exist!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static final String MESSAGE_OUTPUT \u003d \"The following task has been deleted: \\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private int taskID;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Constructor for DeleteCommand object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param taskID The ID of the target task to be deleted."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public DeleteCommand(int taskID) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.taskID \u003d taskID;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Looks for the task that corresponds to the taskID, and removes that task from the tasklist."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param taskList The list of tasks."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return CommandResult object that contains the output to be printed for the user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @throws CommandException If no task in the tasklist corresponds to the taskID."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public CommandResult commandExecute(TaskList taskList) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            task \u003d taskList.getTaskById(taskID);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_ID);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String finalString \u003d MESSAGE_OUTPUT + task.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        taskList.removeTaskById(taskID);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return new CommandResult(finalString, true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyeah": 55
    }
  },
  {
    "path": "src/main/java/compal/logic/command/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "//@@author SholihinK"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * Mark a task as done or undone."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(DoneCommand.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"done\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"Format: done /id TASK_ID /status Y|N\\n\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"Note: content in CAP: need to be fulfilled by the user\\n\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"Y is for marking a task as done, N for unmarking a task\\n\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"This command will mark a task as done\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"Examples:\\n\\t\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"done /id 1 /status Y\\n\\t\\t\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"mark the task with id 1 as done\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_INVALID_INPUT \u003d \"Error: Invalid status input!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_INVALID_ID \u003d \"Error: Id input does not exist!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String COMMAND_PREFIX \u003d \"Noted. I have mark the below task as done: \\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String COMMAND_PREFIX1 \u003d \"Whoops. You already have marked the tasked below as done: \\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String COMMAND_PREFIX2 \u003d \"Noted. I have mark the below task as not done: \\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String COMMAND_PREFIX3 \u003d \"Whoops. This tasks is still not completed done: \\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private int taskID;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String status;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public DoneCommand(int taskID, String status) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.taskID \u003d taskID;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public CommandResult commandExecute(TaskList taskList) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logger.info(\"Attempting to execute for done command\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            task \u003d taskList.getTaskById(taskID);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_ID);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (status.equalsIgnoreCase(\"y\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (task.isDone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                return new CommandResult(COMMAND_PREFIX1.concat(task.toString()), false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                task.markAsDone();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                logger.info(\"Successfully executed done command\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                return new CommandResult(COMMAND_PREFIX.concat(task.toString()), true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (status.equalsIgnoreCase(\"n\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (task.isDone) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                task.markAsNotDone();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                logger.info(\"Successfully executed done command\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                return new CommandResult(COMMAND_PREFIX2.concat(task.toString()), true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                return new CommandResult(COMMAND_PREFIX3.concat(task.toString()), false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_INPUT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 74
    }
  },
  {
    "path": "src/main/java/compal/logic/command/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.commons.CompalUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "//@@author jaedonkey"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"edit\\n\\t\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            + \"Format: edit /id TASK_ID \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            + \"[/description NEW_DESCRIPTION] [/date NEW_DATE] [/start NEW_START_TIME] [/end NEW_END_TIME] \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            + \"[/priority NEW_PRIORITY]\\n\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            + \"Note: content in \\\"[]\\\": optional\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            + \"You can switch the order of any two blocks (a block starts with \\\"/\\\" and ends by the next block)\\n\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            + \"content in CAP: need to be fulfilled by the user\\n\\t\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            + \"content separated by \\\"|\\\": must choose exactly one from them\\n\\t\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            + \"For NEW_DATE: dd/mm/yyyy is the date format. e.g. 01/01/2000\\n\\t\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            + \"For NEW_START_DATE and NEW_END_TIME: HHmm is the time format. e.g. 1740\\n\\t\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            + \"For NEW_PRIORITY: must be \\\"low\\\" or \\\"medium\\\" or \\\"high\\\"\\n\\t\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            + \"For this command you need to at least choose one from all optional blocks\\n\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            + \"This command will edit a task\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            + \"Examples:\\n\\t\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            + \"edit /id 0 /description sleep /date 01/01/2019 /start 2300 /end 1200 /priority high\\n\\t\\t\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            + \"edit the task with id 0 to have description sleep on 01/01/2019 from 11pm till 12am of the next day\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private int taskId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private Task.Priority priority;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(EditCommand.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private static final String deadlineStartDateMsg \u003d \"Deadline has no start time! Please omit /start \u003cdate\u003e!\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private static final String invalidTaskIdMsg \u003d \"Task ID invalid! Please try again!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private static final String underscoreErrorMsg \u003d \"Descriptions should not have underscores!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private static final String noValidEditsMsg \u003d \"Whoops! Looks like that\u0027s an invalid command!\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        + \"This is how you use the edit command:\\n\\n\" + MESSAGE_USAGE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    //@@author jaedonkey"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Constructs an edit command object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @param taskId      id of task to edit"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @param description new description"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @param date        new date"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @param startTime   new start time"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @param endTime     new end time"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @param priority    new priority level"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public EditCommand(int taskId, String description, Date date, String startTime, String endTime,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                       Task.Priority priority) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public CommandResult commandExecute(TaskList taskList) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        logger.info(\"Executing edit command\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        Task toEdit;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            toEdit \u003d taskList.getTaskById(taskId);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            throw new CommandException(invalidTaskIdMsg);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        if (description \u003d\u003d null \u0026\u0026 date \u003d\u003d null \u0026\u0026 startTime \u003d\u003d null \u0026\u0026 endTime \u003d\u003d null \u0026\u0026 priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            throw new CommandException(noValidEditsMsg);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        if (description !\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            if (description.contains(\"_\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                throw new CommandException(underscoreErrorMsg);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            toEdit.setDescription(description);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        if (date !\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            toEdit.setMainDate(CompalUtils.dateToString(date));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        if (startTime !\u003d null) { //dealine has no start time"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            if (!toEdit.getSymbol().equalsIgnoreCase(\"D\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                toEdit.setStartTime(startTime);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                throw new CommandException(deadlineStartDateMsg);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        if (endTime !\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            toEdit.setEndTime(endTime);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        if (priority !\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            toEdit.setPriority(priority);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        return new CommandResult(\"Your task has been edited:\\n\" + toEdit.toString(), true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaedonkey": 112
    }
  },
  {
    "path": "src/main/java/compal/logic/command/EventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.commons.CompalUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.model.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "//@@author yueyeah"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * A Command object that handles the creation of events, and adds them to the tasklist."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * Contains functionality to add multiple recurring events."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"event\\n\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        + \"Format: event DESCRIPTION /date DATE... /start START_TIME /end END_TIME [/interval INTERVAL] \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        + \"[/priority PRIORITY] [/final-date FINAL_DATE]\\n\\n\\t\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        + \"Note: content in \\\"[]\\\": optional\\n\\t\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        + \"You can switch the order of any two blocks (a block starts with \\\"/\\\" and ends by the next block)\\n\\t\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        + \"content in CAP: need to be fulfilled by the user\\n\\t\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        + \"content separated by \\\"|\\\": must choose exactly one from them\\n\\t\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        + \"\\\"...\\\" means you can add multiple. e.g. DATE... means you can add 01/01/2019 02/01/2019\\n\\t\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        + \"For DATE and FINAL_DATE: dd/mm/yyyy is the date format. e.g. 01/01/2000\\n\\t\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        + \"For START_TIME and END_TIME: HHmm is the time format. e.g. 1740\\n\\t\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        + \"For PRIORITY: must be \\\"low\\\" or \\\"medium\\\" or \\\"high\\\"\\n\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        + \"This command will add a task which has a date, start time and end time\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        + \"Examples:\\n\\t\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        + \"event cs2106 meeting /date 01/01/2019 /start 0800 /end 1000\\n\\t\\t\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        + \"add a task which last from 01/01/2019 8am to 10am with default priority low\\n\\t\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        + \"event cs2106 meeting /date 01/01/2019 /start 0800 /end 0600\\n\\t\\t\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        + \"add a task which last from 01/01/2019 8am to 02/01/2019 6am with default priority low\\n\\t\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        + \"event dinner /date 01/01/2019 02/01/2019 /start 1730 /end 1800 /final-date 10/01/2019\\n\\t\\t\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        + \"add a task which happens on 01/01/2019 and 02/01/2019 5:30pm to 6pm\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        + \"and repeat weekly(default) until 10/01/2019\\n\\t\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        + \"event sleep /date 01/01/2019 /start 2300 /end 0700 /final-date 10/01/2019 /interval 1\\n\\t\\t\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        + \"add a task which happens on 01/01/2019 and 02/01/2019 23:00pm to 07:00am the next day\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        + \"and repeat daily until 10/01/2019\\n\\t\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        + \"event cs2106as /date 01/01/2019 /start 0800 /end 1000 /priority high\\n\\t\\t\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        + \"add a task which last from 01/01/2019 8am to 10am with default priority high\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String MESSAGE_GREETING \u003d \"\\nThe following tasks were added: \\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String underscoreErrorMsg \u003d \"Descriptions should not have underscores!\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String MESSAGE_REPEATED_EVENT \u003d \"\\nLooks like you already added the task before! \\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        + \"Use the edit command on the task ID given below:\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final int DEFAULT_DAY_INTERVAL \u003d 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private ArrayList\u003cString\u003e startDateList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private Task.Priority priority;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private String finalDateString;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private int interval;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Constructor for the Event Command object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param description     Description of the event"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param startDateList   List of dates when the event will start"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param priority        Priority assigned to the event"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param startTime       Start time of the event"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param endTime         End time of the event"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param finalDateString Final possible date that the event will occur"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param interval        Optional interval between each recurring event."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public EventCommand(String description, ArrayList\u003cString\u003e startDateList, Task.Priority priority, String startTime,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                        String endTime, String finalDateString, int interval) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.startDateList \u003d startDateList;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.finalDateString \u003d finalDateString;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.interval \u003d interval;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public CommandResult commandExecute(TaskList taskList) throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (description.contains(\"_\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            throw new CommandException(underscoreErrorMsg);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        boolean isInOneDay \u003d CompalUtils.isTimeInSequence(startTime, endTime);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String finalList \u003d \"\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Date finalDate \u003d CompalUtils.stringToDate(finalDateString);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        for (String startDateString : startDateList) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Date startDate \u003d CompalUtils.stringToDate(startDateString);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            while (!startDate.after(finalDate)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                String eventAdditionString \u003d createAndAddEvent(isInOneDay, taskList, startDate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                finalList +\u003d eventAdditionString;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                startDate \u003d CompalUtils.incrementDateByDays(startDate, interval);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return new CommandResult(finalList, true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    //@@author yueyeah"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Handles the creation of Event object, and addition of Event object into TaskList."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Abstracts out the handling of events that drag over the end of the first day into the start of second day."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param isInOneDay True if duration of event is within one day, False if drags on to next day."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param taskList   The list of tasks, which the event will be added to."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param startDate  The start date of the task, in the form of a Date object."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return The string output of the addition of the task, to be returned to logic manager as a command result."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public String createAndAddEvent(boolean isInOneDay, TaskList taskList, Date startDate) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String startDateString \u003d CompalUtils.dateToString(startDate);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String trailingDateString;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (isInOneDay) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            trailingDateString \u003d startDateString;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Date trailingDate \u003d CompalUtils.incrementDateByDays(startDate, DEFAULT_DAY_INTERVAL);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            trailingDateString \u003d CompalUtils.dateToString(trailingDate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        for (Task task : taskList.getArrList()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            if (task.getSymbol().equals(\"E\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                \u0026\u0026 task.getStringMainDate().equals(startDateString)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                \u0026\u0026 task.getStringTrailingDate().equals(trailingDateString)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                \u0026\u0026 task.getStringStartTime().equals(startTime)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                \u0026\u0026 task.getStringEndTime().equals(endTime)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                \u0026\u0026 task.getDescription().equalsIgnoreCase(description)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                return (MESSAGE_REPEATED_EVENT.concat(task.toString() + \"\\n\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Event indivEvent \u003d new Event(description, priority, startDateString, trailingDateString, startTime, endTime);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        taskList.addTask(indivEvent);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return MESSAGE_GREETING.concat(indivEvent.toString() + \"\\n\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyeah": 136
    }
  },
  {
    "path": "src/main/java/compal/logic/command/ExportCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import net.fortuna.ical4j.data.CalendarOutputter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import net.fortuna.ical4j.model.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import net.fortuna.ical4j.model.DateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import net.fortuna.ical4j.model.component.VAlarm;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import net.fortuna.ical4j.model.component.VEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import net.fortuna.ical4j.model.property.Action;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import net.fortuna.ical4j.model.property.CalScale;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import net.fortuna.ical4j.model.property.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import net.fortuna.ical4j.model.property.DtEnd;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import net.fortuna.ical4j.model.property.DtStart;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import net.fortuna.ical4j.model.property.ProdId;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import net.fortuna.ical4j.model.property.Summary;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import net.fortuna.ical4j.model.property.Uid;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import net.fortuna.ical4j.model.property.Version;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import net.fortuna.ical4j.util.RandomUidGenerator;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import net.fortuna.ical4j.util.UidGenerator;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"export\\n\\t\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        + \"Format: export /file-name FILE_NAME\\n\\n\\t\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        + \"Note: content in CAP: need to be fulfilled by the user\\n\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"This command will export COMPal current schedule to an ics file\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"Examples:\\n\\t\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"export /file-name cal\\n\\t\\t\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"export COMPal schedule to cal.ics.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_UNABLE_CREATE_FILE \u003d \"Error: Unable to create file! Try again!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_UNABLE_CREATE_CAL \u003d \"Error: Unable to output to calender!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Your COMPal schedule has been successfully exported!\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_EMPTY_LIST \u003d \"Looks like your schedule is empty and theres nothing to export!\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(ExportCommand.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Construct the ExportCommand class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param fileName the file to be exported to"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public ExportCommand(String fileName) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.fileName \u003d fileName.concat(\".ics\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public CommandResult commandExecute(TaskList taskList) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logger.info(\"Attempting to execute export command\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        ArrayList\u003cTask\u003e toList \u003d taskList.getArrList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (toList.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new CommandException(MESSAGE_EMPTY_LIST);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Calendar calendar \u003d createIcsCal(taskList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        FileOutputStream fileOutput;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            fileOutput \u003d new FileOutputStream(fileName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new CommandException(MESSAGE_UNABLE_CREATE_FILE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        CalendarOutputter calendarOutputter \u003d new CalendarOutputter();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            calendarOutputter.output(calendar, fileOutput);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new CommandException(MESSAGE_UNABLE_CREATE_CAL);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logger.info(\"Successfully executed export command\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS.concat(\"Your file is saved to \" + fileName), false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Create ics calender object."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param taskList the current tasklist"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return ics calendar"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static Calendar createIcsCal(TaskList taskList) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Calendar calendar \u003d new Calendar();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        calendar.getProperties().add(new ProdId(\"-//COMPal Inc//COMPal Calendar//EN\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        calendar.getProperties().add(Version.VERSION_2_0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        calendar.getProperties().add(CalScale.GREGORIAN);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        ArrayList\u003cTask\u003e toList \u003d taskList.getArrList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (Task t : toList) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            VEvent event \u003d new VEvent();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            event.getProperties().add(new Summary(t.getDescription()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            event.getProperties().add(new Description(\" Priority:\" + t.getPriority()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            final DtStart dtStart;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (\"E\".equals(t.getSymbol())) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                dtStart \u003d new DtStart(new DateTime(t.getStartTime()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                dtStart \u003d new DtStart(new DateTime(t.getEndTime()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            event.getProperties().add(dtStart);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            final DtEnd dtEnd \u003d new DtEnd(new DateTime(t.getEndTime()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            event.getProperties().add(dtEnd);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            UidGenerator ug \u003d new RandomUidGenerator();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            Uid uid \u003d ug.generateUid();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            event.getProperties().add(uid);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (t.hasReminder()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                VAlarm reminder;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (t.getSymbol().equals(\"E\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    reminder \u003d new VAlarm(new DateTime(t.getStartTime()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    reminder \u003d new VAlarm(new DateTime(t.getEndTime()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                reminder.getProperties(t.getDescription());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                reminder.getProperties().add(Action.DISPLAY);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                reminder.getProperties().add(new Description(t.getDescription()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                event.getAlarms().add(reminder);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            calendar.getComponents().add(event);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return calendar;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LTPZ": 2,
      "SholihinK": 135
    }
  },
  {
    "path": "src/main/java/compal/logic/command/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"find\\n\\t\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"Format: find KEYWORD\\n\\n\\t\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"Note: content in CAP: need to be fulfilled by the user\\n\\n\\t\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"This command will search for all tasks containing the description\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"Examples:\\n\\t\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"find cs2106\\n\\t\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"show all tasks containing cs2106 in their description\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private String keyWord;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(FindCommand.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public FindCommand(String keyWord) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        this.keyWord \u003d keyWord;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public CommandResult commandExecute(TaskList taskList) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        logger.info(\"Executing find command\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        if (taskList.getArrList().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            return new CommandResult(\"You have no tasks at the moment!\",false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        boolean isEmpty \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        for (Task task : taskList.getArrList()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            if (task.getDescription().toUpperCase().contains(keyWord.toUpperCase())) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                if (isEmpty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                    sb.append(\"Your search result for the keyword \").append(keyWord).append(\": \\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                    isEmpty \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                sb.append(task.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        if (isEmpty) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            return new CommandResult(\"No result found for \" + keyWord,false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        return new CommandResult(sb.toString(),false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LTPZ": 7,
      "jaedonkey": 45
    }
  },
  {
    "path": "src/main/java/compal/logic/command/FindFreeSlotCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "//@@author Catherinetan99"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "public class FindFreeSlotCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(FindFreeSlotCommand.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"findfreeslot\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            + \"Format: findfreeslot /date DATE /hour HOUR /min MINUTE\\n\\n\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            + \"Note: content in CAP: need to be fulfilled by the user\\n\\t\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            + \"You can switch the order of any two blocks (a block starts with \\\"/\\\" and ends by the next block)\\n\\t\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            + \"For DATE: dd/mm/yyyy is the date format. e.g. 01/01/2000\\n\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            + \"This command will show all free time slots on that day with HOUR hours MINUTE minutes\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            + \"Examples:\\n\\t\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            + \"findfreeslot /date 01/01/2019 /hour 1 /min 10\\n\\t\\t\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            + \"find all free time slots which is longer than 1h10min on 01/01/2019\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public static final String MESSAGE_LIMIT_EXCEEDED \u003d \"Error: Input entered is out of range!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private static final long MAX_DURATION \u003d 86400000;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private int hour;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private int min;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Constructs FindFreeSlotCommand object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param date input date"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param hour input hour"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param min input minute"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public FindFreeSlotCommand(Date date, int hour, int min) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        this.hour \u003d hour;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        this.min \u003d min;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Returns a list of free time slots available on the input date with the input hour and min."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param taskList List of all tasks"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return list of free time slots"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @throws CommandException if command cannot be executed"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public CommandResult commandExecute(TaskList taskList) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        logger.info(\"Attempting to execute for findfreeslot command\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Date startPointer;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Date oneDayAfter;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Date currentDateAndTime \u003d calendar.getTime();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Calendar calendar1 \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        calendar1.setTime(date);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        calendar1.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        oneDayAfter \u003d calendar1.getTime();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        ArrayList\u003cTask\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        TaskList resultTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        resultTaskList.setArrList(arrayList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        for (Task task : taskList.getArrList()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            if (!task.getStringEndTime().equals(\"-\") \u0026\u0026 !task.getStringStartTime().equals(\"-\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                    \u0026\u0026 task.getEndTime().after(currentDateAndTime)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                if (task.getMainDate().equals(date)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                        \u0026\u0026 (task.getStringTrailingDate().equals(\"-\") || task.getTrailingDate().equals(date))) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                    resultTaskList.addTask(task);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                } else if (task.getMainDate().equals(date) \u0026\u0026 !task.getStringTrailingDate().equals(\"-\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                    Task addedTask \u003d task;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                    addedTask.setEndTime(\"2359\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                    resultTaskList.addTask(addedTask);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                } else if (!task.getStringTrailingDate().equals(\"-\") \u0026\u0026 task.getTrailingDate().equals(date)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                    Task addedTask \u003d task;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                    addedTask.setStartTime(\"0000\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                    DateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                    addedTask.setMainDate(dateFormat.format(date));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                    resultTaskList.addTask(addedTask);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        resultTaskList.sortTask(arrayList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        calendar.set(Calendar.HOUR_OF_DAY, 0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        calendar.set(Calendar.MINUTE, 0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        calendar.set(Calendar.SECOND, 0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        calendar.set(Calendar.MILLISECOND, 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Date currentDate \u003d calendar.getTime();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        if (isEqualDate(date, currentDate)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            if (arrayList.isEmpty()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                startPointer \u003d currentDateAndTime;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            } else if (arrayList.get(0).getEndTime().after(currentDateAndTime)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                startPointer \u003d arrayList.get(0).getEndTime();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                startPointer \u003d currentDateAndTime;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            startPointer \u003d date;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        ArrayList\u003cString\u003e finalList;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        long duration \u003d calculateDuration(hour, min);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        if ((duration \u003e MAX_DURATION) || (hour \u003e 24) || (min \u003e 1440)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            throw new CommandException(MESSAGE_LIMIT_EXCEEDED);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        finalList \u003d getFreeSlots(arrayList, startPointer, oneDayAfter, duration);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String result \u003d printResult(finalList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        //arrayList.clear();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        //finalList.clear();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        logger.info(\"Successfully executed findfreeslot command\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return new CommandResult(result, false);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Returns a String array of free time slots with input duration."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param arrayList list of tasks on input date"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param startTime start time"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param endTime date of next day"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param duration duration of time slot needed"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public ArrayList\u003cString\u003e getFreeSlots(ArrayList\u003cTask\u003e arrayList, Date startTime, Date endTime, long duration) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Date startPointer \u003d startTime;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Date endPointer;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        ArrayList\u003cString\u003e stringArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        for (int i \u003d 0; i \u003c arrayList.size(); i++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            endPointer \u003d arrayList.get(i).getStartTime();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            if ((endPointer.getTime() - startPointer.getTime()) \u003e\u003d duration) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                String start \u003d simpleDateFormat.format(startPointer);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                String end \u003d simpleDateFormat.format(endPointer);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                stringArrayList.add(start + \" to \" + end + \"\\n\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            if (startPointer.getTime() \u003c arrayList.get(i).getEndTime().getTime()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                startPointer \u003d arrayList.get(i).getEndTime();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        if ((endTime.getTime() - startPointer.getTime()) \u003e\u003d duration) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            String start \u003d simpleDateFormat.format(startPointer);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            stringArrayList.add(start + \" to 2400\\n\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return stringArrayList;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Returns a String to be printed as the result."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param arrayList list of available time slots"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return result String"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public String printResult(ArrayList\u003cString\u003e arrayList) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        StringBuilder finalList \u003d new StringBuilder();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        SimpleDateFormat simpleDateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String stringDate \u003d simpleDateFormat.format(date);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        if (arrayList.isEmpty()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            return (\"You have no available slots on \" + stringDate + \" ! :(\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        finalList.append(\"Here are the available time slots for \" + stringDate + \":\\n\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d arrayList.size(); i++) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            finalList.append(i + \". \" + arrayList.get(i - 1));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return finalList.toString();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Returns true if the dates are equal, returns false otherwise."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param date1 First date input"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param date2 Second date input"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return true of dates are equal, false otherwise"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public boolean isEqualDate(Date date1, Date date2) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return date1.equals(date2);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Gets duration in milliseconds."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param hour Hour input"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param min Minute input"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return Duration in milliseconds"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public long calculateDuration(int hour, int min) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return (hour * 60 + min) * 60000;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 214
    }
  },
  {
    "path": "src/main/java/compal/logic/command/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "//@@author LTPZ"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"help\\n\\t\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"Format: 1. help|TRASH_COMMAND\\n\\t\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"2. help COMMAND_NAME\\n\\n\\t\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"Note: content in CAP: need to be fulfilled by the user\\n\\n\\t\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"This command will tell you how to use command(s)\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"Examples:\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"help\\n\\t\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"show all list of commands\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"idk\\n\\t\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"show all list of commands\\n\\t\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"help deadline\\n\\t\\t\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"show how to use deadline command\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_EXIT \u003d \"bye\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_VIEW \u003d \"view\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_SET_REMINDER \u003d \"set-reminder\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_VIEW_REMINDER \u003d \"view-reminder\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_IMPORT \u003d \"import\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_EXPORT \u003d \"export\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_HELP \u003d \"help\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_FIND_FREE_SLOT \u003d \"findfreeslot\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_EDIT \u003d \"edit\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_NUSMODS \u003d \"nusmods\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_QUOTE \u003d \"quote\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String HELP_STRING \u003d \"Seems like you need some help? Check these commands:\\n\\n\\t\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"bye: exit the program\\n\\t\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"deadline: add deadline type tasks\\n\\t\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"delete: delete one task\\n\\t\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"edit: edit one task\\n\\t\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"event: add event type tasks\\n\\t\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"export: export your own timetable\\n\\t\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"find: search for tasks containing key word\\n\\t\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"findfreeslot: find a free slot with existing timetable\\n\\t\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"help: learn how to use all commands\\n\\t\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"import: import your own timetable\\n\\t\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"list: list all the task stored in COMPal\\n\\t\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"set-reminder: set reminder for a task\\n\\t\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"view: get the daily/weekly/monthly view of timetable\\n\\t\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"view-reminder: get all tasks with reminder\\n\\t\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"nusmods: import your timetable from NUSMODS\\n\\t\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"quote: read some random quotes\\n\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"if you want to know how to use any of them\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"you can type \\\"help \u003cname of command\u003e\\\"  for further information!\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"e.g. \\\"help findfreeslot\\\", \\\"help deadline\\\"\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"Have a nice day with COMPal! :)\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String WRONG_COMMAND \u003d \"Sorry, the description of the command is incorrect\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            + \"please check the following again:\\n\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(HelpCommand.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public HelpCommand(String restOfInput) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        this.type \u003d restOfInput.split(\"_\", 2)[0];"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        this.command \u003d restOfInput.split(\"_\", 2)[1];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public CommandResult commandExecute(TaskList task) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        logger.info(\"Executing help command\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        if (!\"help\".equals(type))  {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            return new CommandResult(HELP_STRING, false);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            case \"\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                return new CommandResult(HELP_STRING, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            case CMD_EXIT:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                return new CommandResult(ByeCommand.MESSAGE_USAGE, false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            case CMD_VIEW:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                return new CommandResult(ViewCommand.MESSAGE_USAGE, false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            case CMD_SET_REMINDER:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                return new CommandResult(SetReminderCommand.MESSAGE_USAGE, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            case CMD_VIEW_REMINDER:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                return new CommandResult(ViewReminderCommand.MESSAGE_USAGE, false);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            case CMD_FIND_FREE_SLOT:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                return new CommandResult(FindFreeSlotCommand.MESSAGE_USAGE, false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            case CMD_DEADLINE:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                return new CommandResult(DeadlineCommand.MESSAGE_USAGE, false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            case CMD_DONE:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                return new CommandResult(DoneCommand.MESSAGE_USAGE, false);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            case CMD_FIND:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                return new CommandResult(FindCommand.MESSAGE_USAGE, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            case CMD_EVENT:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                return new CommandResult(EventCommand.MESSAGE_USAGE, false);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            case CMD_EDIT:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                return new CommandResult(EditCommand.MESSAGE_USAGE, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            case CMD_HELP:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                return new CommandResult(HelpCommand.MESSAGE_USAGE, false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            case CMD_LIST:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                return new CommandResult(ListCommand.MESSAGE_USAGE, false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            case CMD_DELETE:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                return new CommandResult(DeleteCommand.MESSAGE_USAGE, false);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            case CMD_IMPORT:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                return new CommandResult(ImportCommand.MESSAGE_USAGE, false);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            case CMD_EXPORT:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                return new CommandResult(ExportCommand.MESSAGE_USAGE, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            case CMD_NUSMODS:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                return new CommandResult(NusmodsCommand.MESSAGE_USAGE, false);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            case CMD_QUOTE:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                return new CommandResult(QuoteCommand.MESSAGE_USAGE, false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                return new CommandResult(WRONG_COMMAND + HelpCommand.MESSAGE_USAGE, false);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LTPZ": 123
    }
  },
  {
    "path": "src/main/java/compal/logic/command/ImportCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"import\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        + \"Format: import /file-name FILE_NAME\\n\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        + \"Note: content in CAP: need to be fulfilled by the user\\n\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"This command will import an ics file schedule to COMPal\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"Examples:\\n\\t\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"import /file-name cal\\n\\t\\t\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"import cal.ics schedule to COMPal.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"I have successfully imported the given file!\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"\\nThe results are below:\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_SUCCESS_PARTIAL \u003d \"I have tried importing the given file!\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"However some of the events could not be ported over! \\nThe results are below:\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_FILE_NON_EXIST \u003d \"Error: File specified to import does not exist!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_FILE_ICS_INCOMPATIBLE \u003d \"I have tried importing the given file!\\n\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"However it seems like it the given iCalendar file is fully incompatible\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"\\nto port over the schedule with COMPal currently!\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_FILE_NON_ICS \u003d \"Error: File is not a ICS file format that can be read from!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(ImportCommand.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String finalList \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private int attemptedImport \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private int successfulImport \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Construct the ExportCommand class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param fileName the file to be exported to"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public ImportCommand(String fileName) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.fileName \u003d fileName.concat(\".ics\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public CommandResult commandExecute(TaskList taskList) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logger.info(\"Attempting to execute import command\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        checkIfIcsFile();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        readFromFile(taskList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (finalList.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return new CommandResult(MESSAGE_FILE_ICS_INCOMPATIBLE, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logger.info(\"Successfully executed import command\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (successfulImport \u003d\u003d attemptedImport) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS.concat(finalList), true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_PARTIAL.concat(finalList), true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Read from file to import from."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @throws CommandException if file does not exist."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void readFromFile(TaskList taskList) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        final String icsBeginEvent \u003d \"BEGIN:VEVENT\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        final String icsEndEvent \u003d \"END:VEVENT\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        BufferedReader reader;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        StringBuilder eventString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            reader \u003d new BufferedReader(new FileReader(fileName));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String line \u003d reader.readLine();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            while (line !\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (icsBeginEvent.equals(line)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    while (!icsEndEvent.equals(line)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        eventString.append(line).append(\"\\n\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        line \u003d reader.readLine();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    attemptedImport +\u003d 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                createTasks(eventString.toString(), taskList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                eventString.delete(0, eventString.length());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                line \u003d reader.readLine();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new CommandException(MESSAGE_FILE_NON_EXIST);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Check if file reading from is truly a ics file format."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @throws CommandException if file is not a ics file"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void checkIfIcsFile() throws CommandException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        final String icsHeader \u003d \"BEGIN:VCALENDAR\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        final String icsProdId \u003d \"PRODID\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        final String icsVersion \u003d \"VERSION\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        final String icsCalGre \u003d \"CALSCALE:GREGORIAN\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        BufferedReader reader;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        File f \u003d new File(fileName);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (!f.exists()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new CommandException(MESSAGE_FILE_NON_EXIST);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            reader \u003d new BufferedReader(new FileReader(fileName));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String lineOne \u003d reader.readLine();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String lineTwo \u003d reader.readLine();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String lineThree \u003d reader.readLine();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String lineFour \u003d reader.readLine();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (!lineOne.equals(icsHeader) \u0026\u0026 !lineTwo.contains(icsProdId)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                \u0026\u0026 !lineThree.contains(icsVersion) \u0026\u0026 !lineFour.equals(icsCalGre)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                throw new CommandException(MESSAGE_FILE_NON_ICS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } catch (IOException | NullPointerException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new CommandException(MESSAGE_FILE_NON_ICS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Create a task object from eventString."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param eventString The string of the event read from ics"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void createTasks(String eventString, TaskList taskList) throws CommandException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (eventString.isEmpty()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String taskDesc \u003d getDesc(eventString);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Task.Priority taskPriority \u003d getPriority(eventString);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String taskStartTime \u003d getStartTime(eventString);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String taskStartDate \u003d getStartDate(eventString);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String taskEndTime \u003d getEndTime(eventString);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String taskEndDate \u003d getEndDate(eventString);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Boolean hasReminder \u003d getReminder(eventString);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (taskStartDate.isEmpty() || taskStartTime.isEmpty()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (taskEndDate.isEmpty()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            taskEndDate \u003d taskStartDate;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (taskEndTime.isEmpty()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            taskEndTime \u003d taskStartTime;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if ((taskStartDate.equals(taskEndDate) \u0026\u0026 taskStartTime.equals(taskEndTime))) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            int interval \u003d 7;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            ArrayList\u003cString\u003e startDateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            startDateList.add(taskStartDate);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            DeadlineCommand deadline \u003d new DeadlineCommand(taskDesc, taskPriority, startDateList,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                taskEndTime, taskEndDate, interval);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            successfulImport +\u003d 1;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            finalList +\u003d deadline.commandExecute(taskList).feedbackToUser + \"\\n\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (hasReminder) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                for (Task t : taskList.getArrList()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    if (t.getSymbol().equals(\"D\")"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        \u0026\u0026 t.getDescription().equals(taskDesc)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        \u0026\u0026 t.getStringEndTime().equals(taskEndTime)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        \u0026\u0026 t.getStringMainDate().equals(taskEndDate)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        new SetReminderCommand(t.getId(), \"y\").commandExecute(taskList);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            int interval \u003d 7;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            ArrayList\u003cString\u003e startDateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            startDateList.add(taskStartDate);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            EventCommand event \u003d new EventCommand(taskDesc, startDateList, taskPriority, taskStartTime,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                taskEndTime, taskEndDate, interval);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            successfulImport +\u003d 1;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            finalList +\u003d event.commandExecute(taskList).feedbackToUser + \"\\n\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (hasReminder) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                for (Task t : taskList.getArrList()) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    if (t.getSymbol().equals(\"E\")"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        \u0026\u0026 t.getDescription().equals(taskDesc)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        \u0026\u0026 t.getStringStartTime().equals(taskStartTime)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        \u0026\u0026 t.getStringEndTime().equals(taskEndTime)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        \u0026\u0026 t.getStringMainDate().equals(taskStartDate)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        \u0026\u0026 t.getStringTrailingDate().equals(taskEndDate)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        new SetReminderCommand(t.getId(), \"y\").commandExecute(taskList);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private Boolean getReminder(String eventString) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        final String alarmToken \u003d \"BEGIN:VALARM\";"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return eventString.contains(alarmToken);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String getDesc(String eventString) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        final String summaryToken \u003d \"SUMMARY:\";"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String taskDesc \u003d \"\";"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (eventString.contains(summaryToken)) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            int startPoint \u003d eventString.indexOf(summaryToken);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String statusStartInput \u003d eventString.substring(startPoint);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            Scanner scanner \u003d new Scanner(statusStartInput);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String temp \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String[] parts \u003d temp.split(\":\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            taskDesc \u003d parts[1];"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return taskDesc;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private Task.Priority getPriority(String eventString) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        final String descToken \u003d \"DESCRIPTION:\";"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        final String priorityToken \u003d \"Priority:\";"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Task.Priority taskPriority \u003d Task.Priority.low;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (eventString.contains(descToken) \u0026\u0026 eventString.contains(priorityToken)) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            int startPoint \u003d eventString.indexOf(priorityToken);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String statusStartInput \u003d eventString.substring(startPoint);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            Scanner scanner \u003d new Scanner(statusStartInput);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String temp \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String[] parts \u003d temp.split(\":\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String tempPriority \u003d parts[1];"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            switch (tempPriority) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            case \"high\":"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                taskPriority \u003d Task.Priority.high;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            case \"medium\":"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                taskPriority \u003d Task.Priority.medium;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            case \"low\":"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                taskPriority \u003d Task.Priority.low;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return taskPriority;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String getStartTime(String eventString) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        final String startToken \u003d \"DTSTART:\";"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String taskStartTime \u003d \"\";"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (eventString.contains(startToken)) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            int startPoint \u003d eventString.indexOf(startToken);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String statusStartInput \u003d eventString.substring(startPoint);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            Scanner scanner \u003d new Scanner(statusStartInput);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String temp \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String[] parts \u003d temp.split(\":\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String[] dateTime \u003d parts[1].split(\"T\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            taskStartTime \u003d dateTime[1].substring(0, 4);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return taskStartTime;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String getStartDate(String eventString) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        final String startToken \u003d \"DTSTART:\";"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String taskStartDate \u003d \"\";"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (eventString.contains(startToken)) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            int startPoint \u003d eventString.indexOf(startToken);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String statusStartInput \u003d eventString.substring(startPoint);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            Scanner scanner \u003d new Scanner(statusStartInput);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String temp \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String[] parts \u003d temp.split(\":\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String[] dateTime \u003d parts[1].split(\"T\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String year \u003d dateTime[0].substring(0, 4);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String month \u003d dateTime[0].substring(4, 6);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String day \u003d dateTime[0].substring(6);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            taskStartDate \u003d day + \"/\" + month + \"/\" + year;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return taskStartDate;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String getEndDate(String eventString) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        final String endToken \u003d \"DTEND:\";"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String taskEndDate \u003d \"\";"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (eventString.contains(endToken)) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            int startPoint \u003d eventString.indexOf(endToken);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String statusStartInput \u003d eventString.substring(startPoint);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            Scanner scanner \u003d new Scanner(statusStartInput);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String temp \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String[] parts \u003d temp.split(\":\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String[] dateTime \u003d parts[1].split(\"T\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String year \u003d dateTime[0].substring(0, 4);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String month \u003d dateTime[0].substring(4, 6);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String day \u003d dateTime[0].substring(6);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            taskEndDate \u003d day + \"/\" + month + \"/\" + year;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return taskEndDate;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String getEndTime(String eventString) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        final String endToken \u003d \"DTEND:\";"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String taskEndTime \u003d \"\";"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (eventString.contains(endToken)) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            int startPoint \u003d eventString.indexOf(endToken);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String statusStartInput \u003d eventString.substring(startPoint);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            Scanner scanner \u003d new Scanner(statusStartInput);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String temp \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String[] parts \u003d temp.split(\":\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String[] dateTime \u003d parts[1].split(\"T\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            taskEndTime \u003d dateTime[1].substring(0, 4);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return taskEndTime;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LTPZ": 2,
      "SholihinK": 339
    }
  },
  {
    "path": "src/main/java/compal/logic/command/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "//@@author SholihinK"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * The ListCommand Class handles all list commands."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"list\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"Format: list [/type TASK_TYPE] [/status done|ongoing|due]\\n\\n\\t\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"Note: content in \\\"[]\\\": optional\\n\\t\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"TASK_TYPE should be either \\\"deadline\\\" or \\\"event\\\"\\n\\t\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"content separated by \\\"|\\\": must choose exactly one from them\\n\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"This command will list all the deadline stored in COMPal that not due and incomplete.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"Examples:\\n\\t\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"list /type deadline /status n\\n\\t\\t\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"list all tasks with type deadline\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static final String LIST_PREFIX \u003d \"Here are the tasks in your list sorted by chronological start order: \\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String LIST_EMPTY \u003d \"Looks like there is nothing to list for this command!\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_INVALID_INPUT \u003d \"Error: Invalid status input!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String type \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String listPrefixTwo;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String status \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private boolean isDue \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private boolean isOngoing \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(ListCommand.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Construct the ListCommand class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param type the type to be display if valid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public ListCommand(String type) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        listPrefixTwo \u003d \"Here are the stored \" + type + \" in your list:\\n\\n\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (\"deadline\".equals(type)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            this.type \u003d \"D\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (\"event\".equals(type)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            this.type \u003d \"E\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Construct the  overload ListCommand class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param type   type to show"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param status if completed or not"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @throws ParserException if status is not y or no"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public ListCommand(String type, String status) throws ParserException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        listPrefixTwo \u003d \"Here are the stored \" + type + \" in your list\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (\"deadline\".equals(type)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            this.type \u003d \"D\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (\"event\".equals(type)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            this.type \u003d \"E\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            listPrefixTwo \u003d \"Here are the stored tasks in your list\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (\"done\".equalsIgnoreCase(status)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            this.status \u003d \"true\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            listPrefixTwo +\u003d \" which are completed:\\n\\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (\"ongoing\".equalsIgnoreCase(status)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            this.status \u003d \"false\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            isOngoing \u003d true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            listPrefixTwo +\u003d \" which are not completed and not due:\\n\\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (\"due\".equalsIgnoreCase(status)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            this.status \u003d \"false\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            isDue \u003d true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            listPrefixTwo +\u003d \" which are overdue:\\n\\n\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new ParserException(MESSAGE_INVALID_INPUT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public CommandResult commandExecute(TaskList taskList) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logger.info(\"Executing list command\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        ArrayList\u003cTask\u003e toList \u003d taskList.getArrList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        StringBuilder finalList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (type.isEmpty() \u0026\u0026 status.isEmpty()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            finalList \u003d new StringBuilder(LIST_PREFIX);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            finalList \u003d new StringBuilder(listPrefixTwo);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Date currentDate \u003d Calendar.getInstance().getTime();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (Task t : toList) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (type.isEmpty() \u0026\u0026 status.isEmpty()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                String taskString \u003d t.toString() + \"\\n\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                finalList.append(taskString);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } else if (!type.isEmpty() \u0026\u0026 status.isEmpty()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (t.getSymbol().equals(type)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    String taskString \u003d t.toString() + \"\\n\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    finalList.append(taskString);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } else if (type.isEmpty() \u0026\u0026 !status.isEmpty()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (isDue) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    if (t.getStringisDone().equals(status) \u0026\u0026 t.getDateObgDateAndEndTime().before(currentDate)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        String taskString \u003d t.toString() + \"\\n\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        finalList.append(taskString);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                } else if (isOngoing) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    if (t.getStringisDone().equals(status) \u0026\u0026 t.getDateObgDateAndEndTime().after(currentDate)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        String taskString \u003d t.toString() + \"\\n\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        finalList.append(taskString);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    if (t.getStringisDone().equals(status)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        String taskString \u003d t.toString() + \"\\n\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        finalList.append(taskString);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } else if (!status.isEmpty() \u0026\u0026 !type.isEmpty()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (isDue) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    if (t.getSymbol().equals(type) \u0026\u0026 t.getStringisDone().equals(status)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        \u0026\u0026 t.getDateObgDateAndEndTime().before(currentDate)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        String taskString \u003d t.toString() + \"\\n\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        finalList.append(taskString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                } else if (isOngoing) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    if (t.getSymbol().equals(type) \u0026\u0026 t.getStringisDone().equals(status)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        \u0026\u0026 t.getDateObgDateAndEndTime().after(currentDate)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        String taskString \u003d t.toString() + \"\\n\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        finalList.append(taskString);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    if (t.getSymbol().equals(type) \u0026\u0026 t.getStringisDone().equals(status)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        String taskString \u003d t.toString() + \"\\n\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        finalList.append(taskString);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (finalList.toString().equals(LIST_PREFIX) || finalList.toString().equals(listPrefixTwo)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            finalList \u003d new StringBuilder(LIST_EMPTY);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return new CommandResult(finalList.toString(), false);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 161
    }
  },
  {
    "path": "src/main/java/compal/logic/command/NusmodsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.commons.CompalUtils;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.model.tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import org.json.JSONArray;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import org.json.JSONObject;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * Below are the required import statements in case IntelliJ changes it back to"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * import java.util.* again. This helps to pass codacy static analysis. Cheers."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * import java.util.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "public class NusmodsCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Public Constants."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"NUSMODS\\n\\t\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"Format: nusmods /link NUSMODS_SHARE_LINK /semstart WEEK_1_MONDAY_DATE\\n\\n\\t\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"You can switch the order of any two blocks (a block starts with \\\"/\\\" and ends by the next block)\\n\\t\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"content in CAP: need to be fulfilled by the user\\n\\t\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"For WEEK_1_MONDAY_DATE: dd/mm/yyyy is the date format. e.g. 12/08/2019 for AY1920S1\\n\\t\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"This command will add an event for each lesson slot in your NUSMODS timetable.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"Examples:\\n\\t\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"nusmods /link https://nusmods.com/timetable/sem-1/share?CS2100\u003dLAB:06,TUT:08,LEC:1 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"/semstart 12/08/2019\\n\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static final String MESSAGE_INVALID_NUSMODS_LINK \u003d \"Invalid NUSMODS link!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static final String MESSAGE_INVALID_SEM_START_DATE \u003d \"Please enter the date of the Monday of Week 1 of \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"your targeted semester.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE \u003d \"We are unable to extract information from NUSMODS on this \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"module: \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static final String NUSMODS_URL_PREFIX \u003d \"https://api.nusmods.com/v2/\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static final String NUSMODS_URL_MIDDLE \u003d \"/modules/\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static final String NUSMODS_URL_JSON_TAIL \u003d \".json\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static final String MESSAGE_GREETING \u003d \"\\nThe following tasks were added: \\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Private Constants."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String TOKEN_MODULE_CODE \u003d \"\u003d\"; // CS2106\u003dTUT:08,LAB:04,LEC:1"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String TOKEN_LESSON_TYPE \u003d \",\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String TOKEN_LESSON_NUM \u003d \":\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String HYPHEN \u003d \"-\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String TOKEN_TUT \u003d \"TUT\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String TOKEN_LEC \u003d \"LEC\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String TOKEN_LAB \u003d \"LAB\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String TOKEN_REC \u003d \"REC\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final int MODULE_CODE_LESSON_DETAILS_LENGTH \u003d 2;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final int LESSON_TYPE_NUMBER_LENGTH \u003d 2;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final int FIRST_IDX \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final int SECOND_IDX \u003d 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final int JANUARY \u003d 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final int AUGUST \u003d 7;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final int SEM1 \u003d 1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final int SEM2 \u003d 2;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final int WEEK_1 \u003d 1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final int WEEK_6 \u003d 6;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final int DEFAULT_WEEK_INTERVAL \u003d 7;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final int MON_IDX \u003d 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final int TUE_IDX \u003d 2;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final int WED_IDX \u003d 3;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final int THU_IDX \u003d 4;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final int FRI_IDX \u003d 5;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final int SAT_IDX \u003d 6;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final int SUN_IDX \u003d 7;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String MON \u003d \"Monday\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String TUE \u003d \"Tuesday\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String WED \u003d \"Wednesday\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String THU \u003d \"Thursday\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String FRI \u003d \"Friday\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String SAT \u003d \"Saturday\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String SUN \u003d \"Sunday\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String JSONTOKEN_SEMESTER_DATA \u003d \"semesterData\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String JSONTOKEN_SEMESTER \u003d \"semester\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String JSONTOKEN_TIMETABLE \u003d \"timetable\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String JSONTOKEN_CLASSNO \u003d \"classNo\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String JSONTOKEN_LESSONTYPE \u003d \"lessonType\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String JSONTOKEN_LESSONWEEK \u003d \"weeks\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String JSONTOKEN_LESSONDAY \u003d \"day\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String JSONTOKEN_LESSONSTARTTIME \u003d \"startTime\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String JSONTOKEN_LESSONENDTIME \u003d \"endTime\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String JSON_TOKEN_TUT \u003d \"Tutorial\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String JSON_TOKEN_LAB \u003d \"Laboratory\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String JSON_TOKEN_REC \u003d \"Recitation\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String JSON_TOKEN_LEC \u003d \"Lecture\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Private Attributes."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private String semStartDateString;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private Date semStartDate;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private ArrayList\u003cString\u003e moduleDetailsList;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private int semesterNumber;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private String academicYear;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Constructor for NusmodsCommand."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param semStartDateString Date of Monday of Week 1."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param moduleDetailsList Module Details parsed from the NUSMODS URL."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public NusmodsCommand(String semStartDateString, ArrayList\u003cString\u003e moduleDetailsList) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.semStartDateString \u003d semStartDateString;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.moduleDetailsList \u003d moduleDetailsList;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.semStartDate \u003d CompalUtils.stringToDate(semStartDateString);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Set the academic year and semester number."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param semStartMonth Month taken from the date of Monday of Week 1."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param semStartYear Year taken from the date of Monday of Week 1."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @throws CommandException If the date given is not in the starting month of either Sem 1 or Sem 2."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public void setAcadYearSemNum(int semStartMonth, int semStartYear) throws CommandException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String semStartYearString \u003d String.valueOf(semStartYear);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (semStartMonth \u003d\u003d JANUARY) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            semesterNumber \u003d SEM2;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String acadYearSecondHalf \u003d String.valueOf(semStartYear + 1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            this.academicYear \u003d semStartYearString + HYPHEN + acadYearSecondHalf;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else if (semStartMonth \u003d\u003d AUGUST) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            semesterNumber \u003d SEM1;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String acadYearFirstHalf \u003d String.valueOf(semStartYear - 1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            this.academicYear \u003d acadYearFirstHalf + HYPHEN + semStartYearString;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_SEM_START_DATE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public CommandResult commandExecute(TaskList tasklist) throws CommandException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        int semStartMonth \u003d CompalUtils.getMonth(semStartDate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        int semStartYear \u003d CompalUtils.getYear(semStartDate);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        setAcadYearSemNum(semStartMonth, semStartYear);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String resultString \u003d new String();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        for (String moduleDetails : moduleDetailsList) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            // {   CS2106, [TUT:08,LAB:04,LEC:1]   }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String[] parsedModuleList \u003d moduleDetails.split(TOKEN_MODULE_CODE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            if (parsedModuleList.length !\u003d MODULE_CODE_LESSON_DETAILS_LENGTH) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                throw new CommandException(MESSAGE_INVALID_NUSMODS_LINK);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String moduleCode \u003d parsedModuleList[FIRST_IDX];"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            // {   TUT:08, LAB:04, LEC:1   }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            ArrayList\u003cString\u003e parsedLessonDetailsList \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    Arrays.asList(parsedModuleList[SECOND_IDX].split(TOKEN_LESSON_TYPE)));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            // get json from NUSMODS for this particular module (e.g. CS2106) and semester"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String nusmodsUrlString \u003d getNusmodsUrlString(moduleCode);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            JSONObject moduleJson;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                moduleJson \u003d CompalUtils.readJsonFromNusmods(nusmodsUrlString);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                // throw new CommandException(MESSAGE_INVALID_MODULE + moduleCode);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            JSONArray semesterDataArray \u003d moduleJson.getJSONArray(JSONTOKEN_SEMESTER_DATA);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            JSONObject semesterData;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            JSONArray timetable \u003d new JSONArray();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            for (int count \u003d 0; count \u003c semesterDataArray.length(); count++) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                semesterData \u003d semesterDataArray.getJSONObject(count);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                if ((int)semesterData.get(JSONTOKEN_SEMESTER) \u003d\u003d semesterNumber) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    timetable \u003d semesterData.getJSONArray(JSONTOKEN_TIMETABLE);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            // unable to insert feature for examDate."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            // examDate is not present in schemas of modules without exams. For those that have examDate,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            // examDuration is given but the start time of the exam is not given. It is possible to make"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            // examDate a deadline but does not make sense because exams are clearly fixed duration events."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            // {   TUT, 08   } for each lessonDetail, of course"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            ArrayList\u003cString[]\u003e lessonPairList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            for (String lessonDetail : parsedLessonDetailsList) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                String[] parsedLessonPair \u003d lessonDetail.split(TOKEN_LESSON_NUM);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                if (parsedLessonPair.length !\u003d LESSON_TYPE_NUMBER_LENGTH) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    throw new CommandException(MESSAGE_INVALID_NUSMODS_LINK);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                parsedLessonPair[FIRST_IDX] \u003d convertUrlLessonCodeToJsonToken(parsedLessonPair[FIRST_IDX]);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                lessonPairList.add(parsedLessonPair);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                // String lessonType \u003d parsedLessonList[FIRST_IDX];"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                // String lessonNum \u003d parsedLessonList[SECOND_IDX];"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                // ArrayList\u003cArrayList\u003cObject\u003e\u003e lessonDetailsList \u003d searchJson(timetable, lessonType, lessonNum);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                // resultString +\u003d createAndAddEvents(tasklist, lessonDetailsList, moduleCode);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            ArrayList\u003cArrayList\u003cObject\u003e\u003e lessonDetailsList \u003d searchJson(timetable, lessonPairList);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            resultString +\u003d createAndAddEvents(tasklist, lessonDetailsList, moduleCode);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return new CommandResult(resultString, true);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Generates the JSON server url to query."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param moduleCode The module code for the module to query."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return JSON server url."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public String getNusmodsUrlString(String moduleCode) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return NUSMODS_URL_PREFIX + academicYear + NUSMODS_URL_MIDDLE + moduleCode + NUSMODS_URL_JSON_TAIL;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Converts the lesson type provided in the NUSMODS URL to the equivalent JSON key, so that it"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * can be used for comparison."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param urlLessonCode Lesson type provided in the NUSMODS URL."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return return The equivalent JSON key."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public String convertUrlLessonCodeToJsonToken(String urlLessonCode) throws CommandException {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        switch (urlLessonCode) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        case TOKEN_LAB:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return JSON_TOKEN_LAB;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        case TOKEN_LEC:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return JSON_TOKEN_LEC;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        case TOKEN_TUT:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return JSON_TOKEN_TUT;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        case TOKEN_REC:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return JSON_TOKEN_REC;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_NUSMODS_LINK);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Searches through the timetable JSON for the details relevant to the particular lesson."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param timetableJson Entire timetable for module in JSON."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param lessonPairList An ArrayList of String Arrays. Each String array contains (converted) lesson type and"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *                       lesson number provided from parsing of NUSMODS link. This function will make one pass"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *                       through the timetable json, looking for a lesson json that matches the lesson type and"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *                       lesson number of a String array. This is more efficient than making a pass through the"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *                       timetable json for each String array (previous implementation)."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return An Arraylist of Arraylist of Objects."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *      Inner Arraylist of Objects contain all the weeks for each lesson, the day"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *      that the lesson is held on, the start time and end time for that lesson slot, lessonType and lessonNum."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *      Outer Arraylist to store multiple slots for certain lessons. E.g. lectures that occur twice every week"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *      will have 2 of the inner Arraylist of Objects."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @throws CommandException Invalid NUSMODS link provided."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public ArrayList\u003cArrayList\u003cObject\u003e\u003e searchJson(JSONArray timetableJson, ArrayList\u003cString[]\u003e lessonPairList)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        JSONObject lessonDetails;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        ArrayList\u003cArrayList\u003cObject\u003e\u003e lessonDetailsJsonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        for (int count \u003d 0; count \u003c timetableJson.length(); count++) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            lessonDetails \u003d timetableJson.getJSONObject(count);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String jsonLessonNum \u003d lessonDetails.getString(JSONTOKEN_CLASSNO);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String jsonLessonType \u003d lessonDetails.getString(JSONTOKEN_LESSONTYPE);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            if (isJsonLessonMatched(lessonPairList, jsonLessonNum, jsonLessonType)) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                ArrayList\u003cObject\u003e slotDetailsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                slotDetailsList.add(lessonDetails.getJSONArray(JSONTOKEN_LESSONWEEK)); // 0"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                slotDetailsList.add(lessonDetails.getString(JSONTOKEN_LESSONDAY)); // 1"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                slotDetailsList.add(lessonDetails.getString(JSONTOKEN_LESSONSTARTTIME)); // 2"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                slotDetailsList.add(lessonDetails.getString(JSONTOKEN_LESSONENDTIME)); // 3"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                slotDetailsList.add(jsonLessonType); // 4"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                slotDetailsList.add(jsonLessonNum); // 5"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                lessonDetailsJsonList.add(slotDetailsList);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                // do not break here. May have multiple lecture slots in one week, stored as separate JSONObjects."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return lessonDetailsJsonList;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Checks through the lesson pair list to find a pair that matches the lesson number and lesson type"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * provided by the Json from NUSMODS."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param lessonPairList ArrayList of lesson pairs. Each pair contains the lesson type and lesson number. Provided"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *                       by the parsing of the NUSMODS link."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param jsonLessonNum Lesson number provided from the parsing of NUSMODS json."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param jsonLessonType Lesson Type provided from the parsing of NUSMODS json."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return true if there is a matching lesson pair in the list, false if not."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public boolean isJsonLessonMatched(ArrayList\u003cString[]\u003e lessonPairList, String jsonLessonNum,"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                                       String jsonLessonType) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        for (String[] lessonPair : lessonPairList) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            if (lessonPair[FIRST_IDX].equals(jsonLessonType) \u0026\u0026 lessonPair[SECOND_IDX].equals(jsonLessonNum)) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Create Event objects for each lesson, add them to tasklist and return string for CommandResult."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param taskList The tasklist to add lesson Events to."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param lessonDetailsJsonList The list of lessonDetails. (May contain details for more than 1 slot)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param moduleCode The module code. Required for description of Event."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return String to be displayed, send to CommandResult."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @throws CommandException Invalid NUSMODS link."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public String createAndAddEvents(TaskList taskList, ArrayList\u003cArrayList\u003cObject\u003e\u003e lessonDetailsJsonList,"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                                     String moduleCode) throws CommandException {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String finalList \u003d \"\";"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        for (ArrayList\u003cObject\u003e slotDetailsList : lessonDetailsJsonList) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String lessonDay \u003d (String) slotDetailsList.get(1);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int daysToIncrementForEachSlot \u003d daysDiffFromMon(lessonDay);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String lessonStartTime \u003d (String) slotDetailsList.get(2);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String lessonEndTime \u003d (String) slotDetailsList.get(3);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            JSONArray lessonWeeks \u003d (JSONArray) slotDetailsList.get(0);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Date firstLessonDate \u003d CompalUtils.incrementDateByDays(this.semStartDate, daysToIncrementForEachSlot);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String description \u003d moduleCode + \" \" + slotDetailsList.get(4) + \" \" + slotDetailsList.get(5);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Task.Priority defaultLessonPriority \u003d Task.Priority.low; // area of improvement in the future"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            for (int weekIdx \u003d 0; weekIdx \u003c lessonWeeks.length(); weekIdx++) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                int actualWeekNum \u003d lessonWeeks.getInt(weekIdx);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                if (actualWeekNum \u003e WEEK_6) { // Increment by one more week for weeks after Recess Week"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    actualWeekNum++;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                Date currDate \u003d CompalUtils.incrementDateByDays(firstLessonDate,"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                        (actualWeekNum - WEEK_1) * DEFAULT_WEEK_INTERVAL);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                String currDateString \u003d CompalUtils.dateToString(currDate);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                Event indivSlot \u003d new Event(description, defaultLessonPriority, currDateString, currDateString,"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                        lessonStartTime, lessonEndTime);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                taskList.addTask(indivSlot);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                finalList \u003d finalList.concat(MESSAGE_GREETING.concat(indivSlot.toString() + \"\\n\"));"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return finalList;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Counts number of days between the current day and Monday."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Used to find out the number of days to increment the start date of each week."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param currDay The current day, extracted from the lesson details."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return The number of days between the current day and Monday."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public int daysDiffFromMon(String currDay) throws CommandException {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        switch (currDay) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        case MON:"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return MON_IDX - MON_IDX;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        case TUE:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return TUE_IDX - MON_IDX;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        case WED:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return WED_IDX - MON_IDX;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        case THU:"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return THU_IDX - MON_IDX;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        case FRI:"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return FRI_IDX - MON_IDX;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        case SAT:"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return SAT_IDX - MON_IDX;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        case SUN:"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return SUN_IDX - MON_IDX;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_NUSMODS_LINK);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyeah": 360
    }
  },
  {
    "path": "src/main/java/compal/logic/command/QuoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "public class QuoteCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Private Constants."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String CMD_TEAM \u003d \"team\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"quote\\n\\t\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"Format: 1. quote \\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"2. quote DEVELOPER_NAME\\n\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"content in CAP: need to be fulfilled by the user\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"This command will display random quotes. Try it out when you are bored!!\\n\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"Examples:\\n\\n\\t\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"quote team \\n\\t\\t\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"Show random quotes from all members of the developer team\\n\\n\\t\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"quote sholihin\\n\\t\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"quote peize\\n\\t\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"quote catherine\\n\\t\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"quote jaedon\\n\\t\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"quote junyi\\n\\t\\t\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"Show random quotes from specified team member\\n\\n\\t\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"quote\\n\\t\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"quote rtjentotn\\n\\t\\t\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"Show random quotes. Can be generic quotes or quotes from team members.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Private attributes."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private String restOfInput;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static Set\u003cString\u003e shoSet \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static Set\u003cString\u003e lpzSet \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static Set\u003cString\u003e catSet \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static Set\u003cString\u003e jaeSet \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static Set\u003cString\u003e yjySet \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static ArrayList\u003cString\u003e shoQuote \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static ArrayList\u003cString\u003e lpzQuote \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static ArrayList\u003cString\u003e catQuote \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static ArrayList\u003cString\u003e jaeQuote \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static ArrayList\u003cString\u003e yjyQuote \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static ArrayList\u003cString\u003e genQuote \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Constructor for QuoteCommand."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param restOfInput User input after quote command word."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public QuoteCommand(String restOfInput) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.restOfInput \u003d restOfInput.toLowerCase();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        shoSet.add(\"sho\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        shoSet.add(\"sholihin\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        lpzSet.add(\"jerry\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        lpzSet.add(\"lpz\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        lpzSet.add(\"peize\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        lpzSet.add(\"pz\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        catSet.add(\"cat\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        catSet.add(\"catherine\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        jaeSet.add(\"jaedon\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        jaeSet.add(\"jae\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        yjySet.add(\"junyi\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        initialiseShoQuotes();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        initialiseLpzQuotes();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        initialiseCatQuotes();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        initialiseJaeQuotes();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        initialiseYjyQuotes();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public CommandResult commandExecute(TaskList taskList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Random rand \u003d new Random();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        int randInt \u003d rand.nextInt(10000);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (shoSet.contains(restOfInput)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int index \u003d randInt % shoQuote.size();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return new CommandResult(shoQuote.get(index), false);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else if (lpzSet.contains(restOfInput)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int index \u003d randInt % lpzQuote.size();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return new CommandResult(lpzQuote.get(index), false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else if (catSet.contains(restOfInput)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int index \u003d randInt % (catQuote.size());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return new CommandResult(catQuote.get(index), false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else if (jaeSet.contains(restOfInput)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int index \u003d randInt % (jaeQuote.size());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return new CommandResult(jaeQuote.get(index), false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else if (yjySet.contains(restOfInput)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int index \u003d randInt % (yjyQuote.size());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return new CommandResult(yjyQuote.get(index), false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else if (restOfInput.equals(CMD_TEAM)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            ArrayList\u003cString\u003e teamQuotes \u003d initialiseTeamQuotes();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int index \u003d randInt % teamQuotes.size();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return new CommandResult(teamQuotes.get(index), false);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            ArrayList\u003cString\u003e allQuotes \u003d initialiseTeamQuotes();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            initialiseGenQuotes();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            allQuotes.addAll(genQuote);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int index \u003d randInt % allQuotes.size();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return new CommandResult(allQuotes.get(index), false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Put all team quotes into an ArrayList."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return ArrayList of quotes from all team members."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public ArrayList\u003cString\u003e initialiseTeamQuotes() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        ArrayList\u003cString\u003e teamQuotes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        teamQuotes.addAll(shoQuote);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        teamQuotes.addAll(lpzQuote);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        teamQuotes.addAll(catQuote);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        teamQuotes.addAll(jaeQuote);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        teamQuotes.addAll(yjyQuote);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return teamQuotes;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Add all quotes by Sho into shoQuote Arraylist."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public void initialiseShoQuotes() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        shoQuote.add(\"\\n\\nOkay timeline to fix all bugs is Friday night ahhh, Then document self-check is \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \"\\nSunday night. Then we on Monday stay back after 2101 finalise then submit then \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \"\\nstay back for demo prep and present \\n\\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Sholihin, Whatsapp message in lead-up to pitch\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        shoQuote.add(\"\\n\\nanywas when you guys test,besides bugs please say things you dont like too or\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \"\\nplaces of improvement\\n\\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Sholihin, Whatsapp message nearing the end of project \\n (Yes he made those typos too)\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        shoQuote.add(\"\\n\\nI\u0027ve done my 2105 assig, I\u0027ll pass it to you guys later \\n\\n\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Sholihin, Whatsapp message, being a total godsend\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        shoQuote.add(\"\\n\\nHosneslty idk why I can\u0027t sleep but I cmi TMR you guys know why \\n\\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Sholihin, Whatsapp message before consult, clearly indicating that he needs\\n to sleep\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        shoQuote.add(\"\\n\\nToday need stay back for anything after 2113t?\\n\\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    +  \"If not fuck it\\n\\n\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    +  \" - Sholihin, Whatsapp message echoing everyone\u0027s thoughts\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        shoQuote.add(\"\\n\\nI did baby\\n\\n\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \"But if not we could hug it out and share body heat\\n\\n\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Sholihin, Whatsapp reply to Jun Yi telling people to bring jacket as the \\n\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" aircon was on at full blast at Hon Sui Sen Library\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        shoQuote.add(\"\\n\\nI reward peize\\n\\n\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \"With the hot photo\\n\\n\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Sholihin, Whatsapp message trolling people\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        shoQuote.add(\"\\n\\nHey guys, i know this is abit late @ night but i got some important stuff to \\n\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \"write down\\n\\n\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Sholihin, usual introduction before unloading info via Whatsapp\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        shoQuote.add(\"\\n\\nBtw evdyeone do your own junit ah\\n\\n\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \"And only merge when Travis and codafy say can\\n\\n\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \"And thanks for today guys\\n\\n\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \"Hate the mod but atleast you guys made it easier\\n\\n\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Sholihin, sentimental Whatsapp message after second code restructure\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        shoQuote.add(\"\\n\\nWe late\\n\\n\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \"Bus got into accident\\n\\n\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Sholihin, the most unexpected Whatsapp message before CS2101 class\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        shoQuote.add(\"\\n\\nNo, I carry this around in my bag everyday.\\n\\n\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Sholihin, on his Polaroid camera\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        shoQuote.add(\"\\n\\nI think we have to stay back one day and restructure our code\\n\\n\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Sholihin, foreboding words before both code restructures\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        shoQuote.add(\"\\n\\nCode until cannot think already\\n\\n\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Sholihin, feelings after first code restructure\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Add all quotes by Peize into lpzQuote Arraylist."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public void initialiseLpzQuotes() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        lpzQuote.add(\"\\n\\nGuys you can check if I wrote anything wrong about your commands \\n\\n\""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Peize, Whatsapp message after slogging it out over help command\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        lpzQuote.add(\"\\n\\nFighting with Travis check now\\n\\n\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Peize, Whatsapp message at the start of an hours-long battle\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        lpzQuote.add(\"\\n\\nOkay thanks\\n\\n\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \"Can go back to sleep\\n\\n\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Peize, Whatsapp message after confirming that there wasn\u0027t any CS2101 lesson \\n\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" for the day\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        lpzQuote.add(\"\\n\\nI pushed some Junit testing classes\\n\\n\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Peize, frequent Whatsapp messages before Jun Yi breaks them the next day\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        lpzQuote.add(\"\\n\\nJun yi I just finished 2106 do u need it?\\n\\n\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Peize, Whatsapp message after doing the impossible\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        lpzQuote.add(\"\\n\\nOOOOOHHHHHHH, Cheng Long!!\\n\\n\""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Peize, after realising we were not talking about Jackie Chan\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        lpzQuote.add(\"\\n\\nOOOOOOOOOOooooooooohhhhhhhhhh!!!\\n\\n\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Peize\u0027s trademark exclamation\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Add all quotes by Cat into catQuote Arraylist."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public void initialiseCatQuotes() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        catQuote.add(\"\\n\\nSince we need to include a screenshot of our gui in the ppp, \""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \"shld we do sth like \\nthis? *Photo of well-labelled screenshot*\\n\\n\""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Catherine, Whatsapp message after mulling over PPP\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        catQuote.add(\"\\n\\nSurprisingly there\u0027s no merge conflict\\n\\n\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Catherine, Whatsapp message after merging lmf to master\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        catQuote.add(\"\\n\\nI can do it, I\u0027m gonna code later anyways\\n\\n\""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \"But if anything I not sure, I just ask yall\\n\\n\""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Catherine, Whatsapp message before merging lmf to master\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        catQuote.add(\"\\n\\nGuys, I just pulled from the lmf branch but the code cannot run haha\\n\\n\""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Catherine, Whatsapp message containing what she thought would be her last words\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        catQuote.add(\"\\n\\nI really thought it was going to take only half an hour!\\n\\n\""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Catherine, famous remarks on the final rush to submission\\n\""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" (we ended up spending the whole day)\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        catQuote.add(\"\\n\\nCan you guys please follow the command syntax that I\u0027ve put in the User Guide?\\n\\n\""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Catherine, wondering why no one did despite laying everything out clearly\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        catQuote.add(\"\\n\\nI think the amount of sugar I consume in a day is more than what you\\n\""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \"consume in a month.\\n\\n\""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Catherine on the amount of sugar Jun Yi consumes\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Add all quotes by Jaedon into jaeQuote Arraylist."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public void initialiseJaeQuotes() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        jaeQuote.add(\"\\n\\nYou are the jewel bro \\n\\n\""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Jaedon, Whatsapp reply to Sholihin\u0027s suggestion to go Jewel\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        jaeQuote.add(\"\\n\\nsure kerry\\n\\n\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \"\\n\\noh sorry *jerry\\n\\n\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \"\\n\\nwah your help command\\n\\n\""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \"\\n\\nis better than linux man page i swear\\n\\n\""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \"\\n\\ngood work on that haha\\n\\n\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Jaedon, Whatsapp message full of praise for Peize\u0027s comprehensive help\\n\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" command\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        jaeQuote.add(\"\\n\\nThis is just like what we pm each other sia\\n\\n\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Jaedon, reminiscing about his conversations with Sholihin\\n\""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" while trying to start a conversation in the Whatsapp group\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        jaeQuote.add(\"\\n\\ni can help to add later\\n\\n\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Jaedon, ever helpful Whatsapp message\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        jaeQuote.add(\"\\n\\nOkay im driving now ttyl\\n\\n\""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Jaedon, Whatsapp message telling us he intends to take over the driver of \\n\""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" the bus after the accident\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        jaeQuote.add(\"\\n\\nHey I brought herbal tea for everyone\\n\\n\""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Jaedon, much-needed care and affection in hazy weather\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        jaeQuote.add(\"\\n\\nI\u0027ll book the Discussion Room for the meeting tomorrow\\n\\n\""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Jaedon, preparing for weekly team meetings\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Add all quotes by Jun Yi into yjyQuote Arraylist."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public void initialiseYjyQuotes() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        yjyQuote.add(\"\\n\\nEr guys i will be late today \\n\\n\""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \"As in i will be extra late cos i REALLY overslept this time \\n\\n\""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Jun Yi, Whatsapp message on the day of pitch \\n (but honestly should be a message he sends \""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \"everyday)\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        yjyQuote.add(\"\\n\\nHow about Candice? I heard Candice is coming \\n\\n\""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \"Candice dick fit in your mouth \\n\\n\""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Jun Yi, Whatsapp message to counter \u0027Joe mama\u0027 joke\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        yjyQuote.add(\"\\n\\nchoose which one is easier for you\\n\\n\""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Jun Yi, Whatsapp message containing his default response to anything to do\\n\""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" with choices\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        yjyQuote.add(\"\\n\\nTake control. COMPal your life.\\n\\n\""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Jun Yi, README.md\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        yjyQuote.add(\"\\n\\nactually we all no need work so hard you know\\n\\n\""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \"we have 235 commits \\n\\n\""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Jun Yi, Whatsapp message before he had any idea what was to come\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        yjyQuote.add(\"\\n\\nI don\u0027t eat lunch.\\n\\n\""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Jun Yi, on lifestyle\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        yjyQuote.add(\"\\n\\nEh frag already frag already!\\n\\n\""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Jun Yi, watching Sholihin zone out while coding at the end of second code\\n\""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" restructure\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        yjyQuote.add(\"\\n\\nGETDATE, GETTIME, GETDATE, GETTIME!!!\\n\\n\""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    + \" - Jun Yi, freaking out during first code restructure\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Add all general quotes into genQuote Arraylist."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public void initialiseGenQuotes() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        genQuote.add(\"\\n\\nEmpty your memory, with a free(), like a pointer.\\n\""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"If you cast a pointer to a integer, it becomes the integer.\\n\""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"If you cast a pointer to a struct, it becomes the struct.\\n\""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"The pointer can crash, and can overflow.\\n\""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"Be a pointer my friend.\\n\""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \" - Dennis Ritchie\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        genQuote.add(\"\\n\\nAlways code as if the guy maintaining your code will be a violent psychopath\\n\""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"who knows where you live.\\n\\n\""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \" - John Woods\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        genQuote.add(\"\\n\\nAny fool can write code that a computer can understand.\\n\""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"Good programmers write code that humans can understand.\\n\\n\""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \" - Martin Fowler\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        genQuote.add(\"\\n\\nGive a man a program, frustrate him for a day.\\n\""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"Teach a man how to program, frustrate him for a lifetime.\\n\\n\""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \" - Muhammad Waseem\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        genQuote.add(\"\\n\\nSometimes I\u0027ll start a sentence and I don\u0027t even know where it\u0027s going.\\n\""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"I just hope I find it along the way\\n\\n\""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \" - Michael Scott\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        genQuote.add(\"\\n\\nThere\u0027s a lot of beauty in ordinary things. Isn\u0027t thant kind of the point?\\n\\n\""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \" - Pam Beesly\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        genQuote.add(\"\\n\\nWhy say lot word when few word do trick?\\n\\n\""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \" - Kevin Malone\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        genQuote.add(\"\\n\\nSoftware is like sex: It\u0027s better when it\u0027s free.\\n\\n\""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \" - Linus Torvalds\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        genQuote.add(\"\\n\\nTo iterate is human, to recurse divine.\\n\\n\""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \" - L. Peter Deutsch\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        genQuote.add(\"\\n\\nSometimes it pays to stay in bed on Monday, rather than spending the rest\\n\""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"of the week debugging Monday\u0027s code.\""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \" - Christopher Thompson\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        genQuote.add(\"\\n\\nFine, Java MIGHT be a good example of what a programming language should be\\n\""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"like. But Java applications are good examples of what applications SHOULDN\u0027T\\n\""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"be like.\\n\\n\""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \" - pixadel\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        genQuote.add(\"\\n\\nJava is, in many ways, C++--.\\n\\n\""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \" - Michael Feldman\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        genQuote.add(\"\\n\\nIf you fall, I will be there.\\n\\n\""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                +  \" - Floor\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        genQuote.add(\"\\n\\nOnly 3 things are infinite: \\n\""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \" 1. Universe.\\n\""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \" 2. Human Stupidity\\n\""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \" 3. Winrar\u0027s free trial\\n\""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \" - Albert Einstein\");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        genQuote.add(\"\\n\\nSoftware and cathedrals are much the same - first we build them,\\n\""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"then we pray.\\n\\n\""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \" - Sam Redwine\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyeah": 317
    }
  },
  {
    "path": "src/main/java/compal/logic/command/SetReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "//@@author Catherinetan99"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "public class SetReminderCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(SetReminderCommand.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"set-reminder\\n\\t\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            + \"Format: set-reminder /id TASK_ID /status Y|N\\n\\n\\t\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            + \"You can switch the order of any two blocks (a block starts with \\\"/\\\" and ends by the next block)\\n\\t\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            + \"Note: content in CAP: need to be fulfilled by the user\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            + \"content separated by \\\"|\\\": must choose exactly one from them\\n\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            + \"This command will set the reminder of the task with id TASK_ID to yes|no\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            + \"Examples:\\n\\t\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            + \"set-reminder /id 0 /status Y\\n\\t\\t\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            + \"set the reminder of task with id 0 to true\\n\\t\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            + \"set-reminder /id 1 /status N\\n\\t\\t\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            + \"set the reminder of task with id 1 to false\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public static final String MESSAGE_INVALID_STATUS_INPUT \u003d \"Error: Invalid status input! Enter Y or N.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public static final String COMMAND_PREFIX \u003d \"Noted. I have changed the reminder status of this task.\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public static final String MESSAGE_INVALID_ID \u003d \"Error: Invalid task ID!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private int taskID;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private String status;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public SetReminderCommand(int taskID, String status) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        this.taskID \u003d taskID;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public CommandResult commandExecute(TaskList taskList) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        logger.info(\"Attempting to execute for set-reminder command\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            task \u003d taskList.getTaskById(taskID);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_ID);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        boolean state;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        if (status.equalsIgnoreCase(\"y\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            state \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        } else if (status.equalsIgnoreCase(\"n\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            state \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_STATUS_INPUT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        task.setHasReminder(state);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        logger.info(\"Successfully executed set-reminder command\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return new CommandResult(COMMAND_PREFIX.concat(task.toString()), true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 63
    }
  },
  {
    "path": "src/main/java/compal/logic/command/ViewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.CompalUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.ui.CalendarUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "//@@author SholihinK"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * View the task in day,week or month format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"view\\n\\t\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"Format: view day|week|month [/date DATE] \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"[/type TASK_TYPE]\\n\\n\\t\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"Note: content in \\\\\\\"[]\\\\\\\": optional\\n\\t\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"You can switch the order of any two blocks (a block starts with \\\"/\\\" and ends by the next block)\\n\\t\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"content separated by \\\"|\\\": must choose exactly one from them\\n\\t\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"TASK_TYPE should be either \\\"deadline\\\" or \\\"event\\\"\\n\\t\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"DATE: dd/mm/yyyy is the date format. e.g. 01/01/2000\\n\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"This command will view the timetable in a daily/weekly/monthly view\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"Examples:\\n\\t\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"view day|week|month\\n\\t\\t\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"show the timetable of today and the list containing all tasks today|this week|this month\\n\\t\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"view week /date 01/01/2019\\n\\t\\t\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"show the list containing all tasks on the week of 01/01/2019\\n\\t\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"view day /date 01/01/2019 /type deadline:\\n\\t\\t\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"show the list containing all deadline type tasks on 01/01/2019\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private CalendarUtil calenderUtil;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String viewType;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String dateInput;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(ViewCommand.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Generate constructor for viewCommand."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param viewType  the view Type"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param dateInput the date of input"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public ViewCommand(String viewType, String dateInput) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.viewType \u003d viewType;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.dateInput \u003d dateInput;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.type \u003d \"\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        calenderUtil \u003d new CalendarUtil();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * override."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param typeToShow the type to be display only"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public ViewCommand(String viewType, String dateInput, String typeToShow) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.viewType \u003d viewType;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.dateInput \u003d dateInput;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (\"deadline\".equals(typeToShow)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            this.type \u003d \"D\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (\"event\".equals(typeToShow)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            this.type \u003d \"E\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        calenderUtil \u003d new CalendarUtil();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public CommandResult commandExecute(TaskList taskList) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logger.info(\"Executing view command\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        ArrayList\u003cTask\u003e currList \u003d taskList.getArrList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String[] dateParts \u003d dateInput.split(\"/\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int month \u003d Integer.parseInt(dateParts[1]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int year \u003d Integer.parseInt(dateParts[2]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String finalList \u003d \"\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        switch (viewType) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case \"month\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            finalList \u003d displayMonthView(month, year, currList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case \"week\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            finalList \u003d displayWeekView(dateInput, currList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case \"day\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            finalList \u003d finalList + (\"Your daily schedule for \" + dateInput + \" :\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            finalList \u003d finalList + displayDayView(dateInput, currList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            calenderUtil.dateViewRefresh(dateInput, type);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return new CommandResult(finalList, false);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * return all task for a given month."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param givenMonth the month input by user."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param givenYear  the year input by user."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param currList   the curr taskList of task."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return stringo output"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String displayMonthView(int givenMonth, int givenYear, ArrayList\u003cTask\u003e currList) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String[] months \u003d {\"\", \"January\", \"February\", \"March\", \"April\", \"May\", \"June\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        YearMonth yearMonthObject \u003d YearMonth.of(givenYear, givenMonth);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int days \u003d yearMonthObject.lengthOfMonth(); //28"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        StringBuilder monthlyTask \u003d new StringBuilder(\"Your monthly schedule for \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + months[givenMonth] + \" \" + givenYear + \" :\\n\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String tempDate;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String tempMonth;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String tempYear;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d days; i++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (i \u003c\u003d 9) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                tempDate \u003d \"0\" + i;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                tempDate \u003d Integer.toString(i);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (givenMonth \u003c\u003d 9) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                tempMonth \u003d \"0\" + givenMonth;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                tempMonth \u003d Integer.toString(givenMonth);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            tempYear \u003d Integer.toString(givenYear);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            monthlyTask.append(displayDayView(tempDate + \"/\" + tempMonth + \"/\" + tempYear, currList));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return monthlyTask.toString();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * return all task for a given week."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param dateInput the date of task input."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param currList  the curr taskList of task."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return string output"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String displayWeekView(String dateInput, ArrayList\u003cTask\u003e currList) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        cal.setTime(CompalUtils.stringToDate(dateInput));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int daysInWeek \u003d 7;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String[] dates \u003d new String[daysInWeek];"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        StringBuilder[] dailyTask \u003d new StringBuilder[daysInWeek];"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (int i \u003d 0; i \u003c daysInWeek; i++) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            dates[i] \u003d dateFormat.format(cal.getTime());//Date of Monday of current week"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            //calenderUtil.dateViewRefresh(dates[i]);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            dailyTask[i] \u003d new StringBuilder();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            cal.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        StringBuilder weeklyTask \u003d new StringBuilder(\"Your weekly schedule from \""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + dates[0] + \" to \" + dates[6] + \" :\\n\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (int i \u003d 0; i \u003c daysInWeek; i++) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            dailyTask[i].append(displayDayView(dates[i], currList));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            weeklyTask.append(dailyTask[i]);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return weeklyTask.toString();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * return all task for a given day."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param dateInput the date of task input."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param currList  the curr taskList of task."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return string output"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String displayDayView(String dateInput, ArrayList\u003cTask\u003e currList) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        StringBuilder allTask \u003d new StringBuilder();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (Task t : currList) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (!\"\".equals(type) \u0026\u0026 !t.getSymbol().equals(type)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (t.getStringMainDate().equals(dateInput)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                allTask.append(getAsStringView(t));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } else if (!t.getStringTrailingDate().equals(\"-\") \u0026\u0026 t.getStringTrailingDate().equals(dateInput)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                allTask.append(getAsStringView(t));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (allTask.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            allTask.append(\"\\n\\n\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Date givenDate \u003d CompalUtils.stringToDate(dateInput);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String dayOfWeek \u003d new SimpleDateFormat(\"EE\").format(givenDate);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String header \u003d \"\\n\" + \"_\".repeat(65) + \"\\n\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \" \".repeat((92)) + dayOfWeek + \",\" + dateInput + \"\\n\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return header + allTask.toString();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String getAsStringView(Task t) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        StringBuilder taskDetails \u003d new StringBuilder();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String rightArrow \u003d \"\\u2192\";"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        boolean isDone \u003d t.getisDone();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String status;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            status \u003d \"\\u2713\";"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            status \u003d \"\\u274C\";"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String startTime \u003d \"-\";"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String endTime \u003d \"-\";"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (t.getSymbol().equals(\"E\")) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (t.getStringMainDate().equals(t.getStringTrailingDate())) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                startTime \u003d t.getStringStartTime();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                endTime \u003d t.getStringEndTime();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                startTime \u003d t.getStringStartTime();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                endTime \u003d \"2359\";"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (t.getSymbol().equals(\"D\")) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            endTime \u003d t.getStringEndTime();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (\"-\".equals(startTime)) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            taskDetails.append(\"  Due: \").append(endTime)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                .append(\"\\n\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            taskDetails.append(\"  Time: \").append(startTime)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                .append(\" \").append(rightArrow)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                .append(\" \").append(endTime)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                .append(\"\\n\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int taskId \u003d t.getId();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Task.Priority priority \u003d t.getPriority();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskDetails"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            .append(\"  [Task ID:\").append(taskId).append(\"] \")"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            .append(\"[Priority:\").append(priority).append(\"]\\n\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String taskSymbol \u003d t.getSymbol();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String taskDescription \u003d t.getDescription();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskDetails.append(\"  [\").append(taskSymbol).append(\"] \")"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            .append(\"[\").append(status).append(\"] \")"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            .append(taskDescription).append(\"\\n\\n\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return taskDetails.toString();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 283
    }
  },
  {
    "path": "src/main/java/compal/logic/command/ViewReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "//@@author Catherinetan99"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "public class ViewReminderCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(ViewReminderCommand.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"view-reminder\\n\\t\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        + \"Format: view-reminder\\n\\n\\t\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        + \"This command will show all tasks with reminder on\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        + \"Examples:\\n\\t\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        + \"view-reminder\\n\\t\\t\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        + \"show all tasks with reminder on\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public static final String MESSAGE_UNABLE_TO_EXECUTE \u003d \"Unable to execute command!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public CommandResult commandExecute(TaskList taskList) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        logger.info(\"Attempting to execute for view-reminder command\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String taskReminders;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            taskReminders \u003d getTaskReminders(taskList.getArrList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            logger.info(\"Successfully executed view-reminder command\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            throw new CommandException(MESSAGE_UNABLE_TO_EXECUTE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return new CommandResult(taskReminders, false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Returns task reminders."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param currList List of tasks"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return String of tasks"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private String getTaskReminders(ArrayList\u003cTask\u003e currList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        StringBuilder taskReminder \u003d new StringBuilder(\"Here are your tasks:\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Date currentDate \u003d Calendar.getInstance().getTime();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        calendar.setTime(currentDate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        calendar.add(Calendar.DATE, 7);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Date dateAfter \u003d calendar.getTime();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        calendar.setTime(currentDate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        for (Task task : currList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            if (!task.getisDone() \u0026\u0026 ((task.getEndTime().before(dateAfter)) || task.gethasReminder())) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                String taskString \u003d task.toString() + \"\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                taskReminder.append(taskString);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return taskReminder.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 69
    }
  },
  {
    "path": "src/main/java/compal/logic/command/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.command.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.ui.UiUtil;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "//@@author SholihinK"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * This static inner class is the custom exception class extending Exception"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * that overwrites toString() for returning custom exception messages."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * It is thrown when command is unknown or when there are invalid arguments."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private UiUtil uiUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(CommandException.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public CommandException(String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        uiUtil \u003d new UiUtil();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logger.warning(\"Command exception detected :\" + description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        uiUtil.printg(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 38
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/ByeCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.ByeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "//@@author SholihinK"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class ByeCommandParser implements CommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(ByeCommandParser.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAM \u003d \"Whoops! Looks like that\u0027s an invalid command!\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"This is how you use the bye command:\\n\\n\" + ByeCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public Command parseCommand(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logger.info(\"Attempting to parse bye command\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (!restOfInput.isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new ParserException(MESSAGE_INVALID_PARAM);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logger.info(\"Successfully parse bye command\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return new ByeCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 27
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/CommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.commons.CompalUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * If you accidentally let IntelliJ import java.util.* again, and checkstyle complains,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * this below is the list of imports that are most important. Feel free to add on."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * import java.util.Scanner;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * import java.util.Set;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * import java.util.HashSet;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * import java.util.Date;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * import java.util.Calendar;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * import java.util.ArrayList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * import java.util.Arrays;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public interface CommandParser {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * TOKENS FOR PARSING BELOW."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    String TOKEN_TASK_ID \u003d \"/id\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    String TOKEN_STATUS \u003d \"/status\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    String TOKEN_SLASH \u003d \"/\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    String TOKEN_END_TIME \u003d \"/end\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    String TOKEN_DATE \u003d \"/date\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    String TOKEN_PRIORITY \u003d \"/priority\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    String TOKEN_DESCRIPTION \u003d \"/description\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    String TOKEN_START_TIME \u003d \"/start\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    String TOKEN_FINAL_DATE \u003d \"/final-date\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    char TOKEN_SLASH_CHAR \u003d \u0027/\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    String TOKEN_TYPE \u003d \"/type\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    String TOKEN_HOUR \u003d \"/hour\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    String TOKEN_MIN \u003d \"/min\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    String TOKEN_INTERVAL \u003d \"/interval\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    String TOKEN_FILE_NAME \u003d \"/file-name\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    String TOKEN_SEMSTART \u003d \"/semstart\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    String TOKEN_NUSMODS_LINK \u003d \"/link\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    String EMPTY_INPUT_STRING \u003d \"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    int DEFAULT_WEEK_NUMBER_OF_DAYS \u003d 7;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    int INDEX_ZERO \u003d 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * ERROR MESSAGES BELOW."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    String MESSAGE_MISSING_TOKEN \u003d \"Error: Missing token!\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    String MESSAGE_MISSING_INPUT \u003d \"Error: Missing input!\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    String MESSAGE_INVALID_TIME_FORMAT \u003d \"Invalid Time input!\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    String MESSAGE_INVALID_DATE_FORMAT \u003d \"Invalid Date input!\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    String MESSAGE_MISSING_DATE_ARG \u003d \"ArgumentError: Missing /date\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    String MESSAGE_EXCESSIVE_DATES \u003d \"Too many dates! Please limit to less than 7.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    String MESSAGE_MISSING_START_TIME_ARG \u003d \"ArgumentError: Missing /start\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    String MESSAGE_MISSING_END_TIME_ARG \u003d \"ArgumentError: Missing /end\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    String MESSAGE_MISSING_STATUS_ARG \u003d \"ArgumentError: Missing /status\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    String MESSAGE_MISSING_ID_ARG \u003d \"ArgumentError: Missing /id\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    String MESSAGE_MISSING_TYPE_ARG \u003d \"ArgumentError: Missing /type\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    String MESSAGE_INVALID_TYPE \u003d \"Error: The type does not exist!\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    String MESSAGE_INVALID_PRIORITY \u003d \"Invalid priority input\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    String MESSAGE_LIMIT_EXCEEDED \u003d \"Error: Input entered is out of range!\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    String MESSAGE_INVALID_FILE_NAME_FORMAT \u003d \"Error: Invalid file name for export!\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    String MESSAGE_INVALID_FINAL_TIME \u003d \"Error: Invalid final date time\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    String MESSAGE_MISSING_FILE_NAME_ARG \u003d \"ArgumentError: Missing /file-name\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    String MESSAGE_MISSING_FILE_NAME \u003d \"Error: Missing file name input!\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    String MESSAGE_INVALID_INTERVAL \u003d \"Invalid interval input\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    String MESSAGE_INVALID_PARAM \u003d \"Looks like there\u0027s an invalid parameter inserted!\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    String MESSAGE_MISSING_NUSMODS_LINK \u003d \"ArgumentError: Missing /link\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    String MESSAGE_INVALID_NUSMODS_LINK \u003d \"Invalid NUSMODS link!\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    String MESSAGE_MISSING_SEMSTART_ARG \u003d \"ArgumentError: Missing /semstart\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Method specification for different command parsers to parse user input."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param restOfInput String input of user after command word"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return a suitable Command object that will carry out the user\u0027s intention."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @throws ParserException Invalid input, varies for each command parser."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    Command parseCommand(String restOfInput) throws ParserException, ParseException;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * GETTERS FOR TOKENS BELOW"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    //@@author SholihinK"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Returns the type of task."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param restOfInput String input of user after command word"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return type"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @throws ParserException if the token (/task) is missing or task type"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *                         does not exist."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @author Sholihin"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    default String getType(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (restOfInput.contains(TOKEN_TYPE)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            int startPoint \u003d restOfInput.indexOf(TOKEN_TYPE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String typeStartInput \u003d restOfInput.substring(startPoint);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            Scanner scanner \u003d new Scanner(typeStartInput);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                throw new ParserException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String typeInput \u003d scanner.next();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            Set\u003cString\u003e taskTypes \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            taskTypes.add(\"deadline\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            taskTypes.add(\"event\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (taskTypes.contains(typeInput)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                return typeInput;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new ParserException(MESSAGE_INVALID_TYPE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new ParserException(MESSAGE_MISSING_TYPE_ARG);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    //@@author Catherinetan99"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Returns the reminder status in the String input."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param restOfInput String input of user after command word"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return reminder status"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @throws ParserException if the token (/status) or reminder status is missing"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    default String getTokenStatus(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        if (restOfInput.contains(TOKEN_STATUS)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            int startPoint \u003d restOfInput.indexOf(TOKEN_STATUS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            String statusStartInput \u003d restOfInput.substring(startPoint);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            Scanner scanner \u003d new Scanner(statusStartInput);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                throw new ParserException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            String statusField \u003d scanner.next();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            return statusField;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            throw new ParserException(MESSAGE_MISSING_STATUS_ARG);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Returns the hour in the String input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param restOfInput String input of user after command word"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return hour"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @throws ParserException if the token (/hour) or hour input is missing"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    default int getHour(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return getIntInput(restOfInput, TOKEN_HOUR);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Returns the min in the String input."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param restOfInput String input of user after command word"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return min"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @throws ParserException if the token (/min) or min input is missing"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    default int getMin(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return getIntInput(restOfInput, TOKEN_MIN);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Returns the task ID in the String input."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param restOfInput String input of user after command word"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return taskID"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @throws ParserException if the token (/id) or id number is missing"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    default int getTaskID(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return getIntInput(restOfInput, TOKEN_TASK_ID);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Returns the integer input based on token input."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param restOfInput String input of user after command word"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param token       token to extract result from"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return result extracted based on token"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @throws ParserException if token or input is missing or invalid"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private int getIntInput(String restOfInput, String token) throws ParserException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        if (restOfInput.contains(token)) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            int startPoint \u003d restOfInput.indexOf(token);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            String startInput \u003d restOfInput.substring(startPoint);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            Scanner scanner \u003d new Scanner(startInput);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                throw new ParserException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            String input \u003d scanner.next();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            if (input.length() \u003e\u003d 10) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                throw new ParserException(MESSAGE_LIMIT_EXCEEDED);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            if (input.equals(EMPTY_INPUT_STRING) || input.contains(TOKEN_SLASH)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                throw new ParserException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            int intInput;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            if (Pattern.matches(\"[0-9]+\", input)) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                intInput \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                throw new ParserException(\"Invalid \" + token.substring(1) + \" input!\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            if (scanner.hasNext() \u0026\u0026 (scanner.next().charAt(0) !\u003d TOKEN_SLASH_CHAR)) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                throw new ParserException(MESSAGE_INVALID_PARAM);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            return intInput;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            throw new ParserException(\"ArgumentError: Missing \" + token);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Check if there are more than 500 tasks to be added."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param startDate the start date of the tasks"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param endDate   the end date of the task"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param interval  the interval input by user."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @throws ParserException if more than 500 tasks are added at a time."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    default void isValidAmountTaskToAdd(String startDate, String endDate, int interval) throws ParserException {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Date startingDate \u003d CompalUtils.stringToDate(startDate);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Date endingDate \u003d CompalUtils.stringToDate(endDate);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        long diff \u003d endingDate.getTime() - startingDate.getTime();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        long dayAdded \u003d TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        int maxAddition \u003d 500;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        int toAdd \u003d (int) (dayAdded / interval);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        if (toAdd \u003e maxAddition) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            throw new ParserException(\"You cannot attempt to add more than 500 tasks at one go!\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Returns a date in the String input."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param restOfInput String input of user after command word"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return date"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @throws ParserException If date field is empty, date or date format is invalid,"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *                         date token (/date) is missing."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    default Date getDate(String restOfInput) throws ParserException, ParseException {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        if (restOfInput.contains(TOKEN_DATE)) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            int startPoint \u003d restOfInput.indexOf(TOKEN_DATE);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            String dateStartInput \u003d restOfInput.substring(startPoint);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            Scanner scanner \u003d new Scanner(dateStartInput);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                throw new ParserException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            String dateField \u003d scanner.next();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            if (dateField.equals(EMPTY_INPUT_STRING) || dateField.charAt(0) \u003d\u003d TOKEN_SLASH_CHAR) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                throw new ParserException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            if (!isDateValid(dateField)) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                throw new ParserException(MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            Date date \u003d new SimpleDateFormat(\"dd/MM/yyyy\").parse(dateField);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            throw new ParserException(MESSAGE_MISSING_DATE_ARG);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Returns if the input date is a future date."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param date input date"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return true if date is a future date, false otherwise"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    default boolean isFutureDate(Date date) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        calendar.set(Calendar.HOUR_OF_DAY, 0);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        calendar.set(Calendar.MINUTE, 0);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        calendar.set(Calendar.SECOND, 0);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        calendar.set(Calendar.MILLISECOND, 0);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Date currentDate \u003d calendar.getTime();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Calendar inputDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        inputDate.setTime(date);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return date.after(currentDate) || date.equals(currentDate);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    //@@author LTPZ"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     * Parses through user input for description field, and returns the description if present."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     * @param restOfInput String input of user after command word"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     * @return Description without date and time."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     * @throws ParserException If description field is missing, if there are no tokens present."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    default String getTokenDescription(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        if (!restOfInput.contains(TOKEN_SLASH)) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            throw new ParserException(MESSAGE_MISSING_TOKEN);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        int splitPoint \u003d restOfInput.indexOf(\" /\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        String desc \u003d restOfInput.substring(0, splitPoint).trim();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        int maxDesc \u003d 55;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        if (desc.length() \u003e maxDesc) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            throw new ParserException(\"Description length cannot be more than 55 character long!\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        } else if (desc.matches(EMPTY_INPUT_STRING)) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            throw new ParserException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        return desc;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    //@@author yueyeah"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Parses user input for optional interval token, and returns the interval specified."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param restOfInput String input of user after command word."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return Interval between each recurring Task if specified, 0 if not specified."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @throws ParserException if the token is present but interval is not specified."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    default int getTokenInterval(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        int interval \u003d DEFAULT_WEEK_NUMBER_OF_DAYS;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (restOfInput.contains(TOKEN_INTERVAL)) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int splitPoint \u003d restOfInput.indexOf(TOKEN_INTERVAL);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String intervalStartInput \u003d restOfInput.substring(splitPoint);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Scanner scanner \u003d new Scanner(intervalStartInput);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                throw new ParserException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    String stringInterval \u003d scanner.next();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    interval \u003d Integer.parseInt(stringInterval);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    if (scanner.hasNext()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                        String leftInput \u003d scanner.next();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                        if (!leftInput.substring(0, 1).equals(TOKEN_SLASH)) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                            throw new ParserException(MESSAGE_INVALID_PARAM);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    //float number"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    throw new ParserException(MESSAGE_INVALID_INTERVAL);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return interval;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    //@@author yueyeah"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Returns a date string if specified in the task."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param restOfInput Input description after initial command word."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return Date in the form of a string."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @throws ParserException If date field is empty, date or date format is invalid,"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *                         date token (/date) is missing."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    default ArrayList\u003cString\u003e getTokenDate(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (restOfInput.contains(TOKEN_DATE)) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int startPoint \u003d restOfInput.indexOf(TOKEN_DATE);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String dateStartInput \u003d restOfInput.substring(startPoint);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Scanner scanner \u003d new Scanner(dateStartInput);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                throw new ParserException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            ArrayList\u003cString\u003e startDateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int dateCount \u003d 0;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                String eachDateString \u003d scanner.next();"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                if (eachDateString.charAt(0) \u003d\u003d TOKEN_SLASH_CHAR) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    if (dateCount \u003d\u003d 0) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                        throw new ParserException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                dateCount++;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                if (dateCount \u003d\u003d DEFAULT_WEEK_NUMBER_OF_DAYS) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    throw new ParserException(MESSAGE_EXCESSIVE_DATES);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                if (isDateValid(eachDateString)) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    startDateList.add(eachDateString);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    throw new ParserException(MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return startDateList;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            throw new ParserException(MESSAGE_MISSING_DATE_ARG);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    //@@author yueyeah"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Returns a date string for the start of the semester (Monday of Week 1)."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param restOfInput Input description after initial command word."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return Semester Start Date in the form of a string."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @throws ParserException If date field is empty, date or date format is invalid,"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *                         date token (/semstart) is missing."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    default String getTokenSemStart(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (restOfInput.contains(TOKEN_SEMSTART)) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int startPoint \u003d restOfInput.indexOf(TOKEN_SEMSTART);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String semStartStartInput \u003d restOfInput.substring(startPoint);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Scanner scanner \u003d new Scanner(semStartStartInput);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                throw new ParserException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String semStartDateString \u003d scanner.next();"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            if (isDateValid(semStartDateString)) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                return semStartDateString;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                throw new ParserException(MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            throw new ParserException(MESSAGE_MISSING_SEMSTART_ARG);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    //@@author yueyeah"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Returns an Arraylist of Module Details from the NUSMODS link provided."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param restOfInput Input description after initial command word."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return ArrayList of Module Details"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @throws ParserException If link field is empty, link format is invalid,"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *                         NUSMODS link token (/link) is missing."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    default ArrayList\u003cString\u003e getTokenNusmodsLink(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (restOfInput.contains(TOKEN_NUSMODS_LINK)) {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int startPoint \u003d restOfInput.indexOf(TOKEN_NUSMODS_LINK);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String nusmodsLinkStartInput \u003d restOfInput.substring(startPoint);"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Scanner scanner \u003d new Scanner(nusmodsLinkStartInput);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                throw new ParserException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String nusmodsLinkString \u003d scanner.next();"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String regex \u003d \"^https://nusmods.com/timetable/sem-(1|2)/share[?].*\";"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Pattern pattern \u003d Pattern.compile(regex);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Matcher matcher \u003d pattern.matcher(nusmodsLinkString);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            if (!matcher.matches()) {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                throw new ParserException(MESSAGE_INVALID_NUSMODS_LINK);"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                String moduleString \u003d nusmodsLinkString.substring(42);"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                if (moduleString.isEmpty()) {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    throw new ParserException(MESSAGE_INVALID_NUSMODS_LINK);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    String[] moduleStringSplit \u003d moduleString.split(\"\u0026\");"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    return new ArrayList\u003c\u003e(Arrays.asList(moduleStringSplit));"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            throw new ParserException(MESSAGE_MISSING_NUSMODS_LINK);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    //@@author LTPZ"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     * Parses through user input for priority token, and returns the enum priority if present."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     * @param restOfInput String input of user after command word"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     * @return Task.Priority enum"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     * @throws ParserException if the priority is not given after the priority token"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    default Task.Priority getTokenPriority(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        Task.Priority priorityField;"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        if (restOfInput.contains(TOKEN_PRIORITY)) {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            int startPoint \u003d restOfInput.indexOf(TOKEN_PRIORITY);"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            String priorityStartInput \u003d restOfInput.substring(startPoint);"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            Scanner scanner \u003d new Scanner(priorityStartInput);"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                throw new ParserException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            String commandPriority \u003d scanner.next();"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            if (isPriorityValid(commandPriority)) {"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                priorityField \u003d Task.Priority.valueOf(commandPriority.toLowerCase());"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                throw new ParserException(MESSAGE_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            if (scanner.hasNext()) {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                String leftInput \u003d scanner.next();"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                if (!leftInput.substring(0, 1).equals(TOKEN_SLASH)) {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                    throw new ParserException(MESSAGE_INVALID_PARAM);"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            priorityField \u003d Task.Priority.low;"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        return priorityField;"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    //@@author yueyeah"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Parses through user input for /start token and return the start time."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param restOfInput String input of user after command word"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return Start time in the form of a String"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @throws ParserException if start time is not entered after the /start token, or /start token is missing"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    default String getTokenStartTime(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (restOfInput.contains(TOKEN_START_TIME)) {"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int startPoint \u003d restOfInput.indexOf(TOKEN_START_TIME);"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String startTimeStartInput \u003d restOfInput.substring(startPoint);"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Scanner scanner \u003d new Scanner(startTimeStartInput);"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                throw new ParserException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String startTimeField \u003d scanner.next();"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            if (isTimeValid(startTimeField)) {"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                return startTimeField;"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                throw new ParserException(MESSAGE_INVALID_TIME_FORMAT);"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            throw new ParserException(MESSAGE_MISSING_START_TIME_ARG);"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    //@@author LTPZ"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     * Parses through user input for /end token and return the end time."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     * @param restOfInput String input of user after command word"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     * @return End time in the form of a String"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     * @throws ParserException if end time is not entered after the /end token, or /end token is missing"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    default String getTokenEndTime(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        if (restOfInput.contains(TOKEN_END_TIME)) {"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            int startPoint \u003d restOfInput.indexOf(TOKEN_END_TIME);"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            String endTimeStartInput \u003d restOfInput.substring(startPoint);"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            Scanner scanner \u003d new Scanner(endTimeStartInput);"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                throw new ParserException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            String endTimeField \u003d scanner.next();"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            if (isTimeValid(endTimeField)) {"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                if (scanner.hasNext()) {"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                    String leftInput \u003d scanner.next();"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                    if (!leftInput.substring(0, 1).equals(TOKEN_SLASH)) {"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        throw new ParserException(MESSAGE_INVALID_PARAM);"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                return endTimeField;"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                throw new ParserException(MESSAGE_INVALID_TIME_FORMAT);"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            throw new ParserException(MESSAGE_MISSING_END_TIME_ARG);"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    //@@author yueyeah"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Parses through the user input for /final-date token and return the final date of iteration of events/deadline."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * The presence of the /final-date token must be checked first in the specialised"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * command parser calling this method."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param restOfInput String input of user after command word"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return Final date of iteration in the form of a String"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @throws ParserException if final date is not entered after the /final-date token"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    default String getTokenFinalDate(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        int startPoint \u003d restOfInput.indexOf(TOKEN_FINAL_DATE);"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String finalDateStartInput \u003d restOfInput.substring(startPoint);"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Scanner scanner \u003d new Scanner(finalDateStartInput);"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        scanner.next();"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            throw new ParserException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String finalDateField \u003d scanner.next();"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (isDateValid(finalDateField)) {"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            if (scanner.hasNext()) {"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                String leftInput \u003d scanner.next();"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                if (!leftInput.substring(0, 1).equals(TOKEN_SLASH)) {"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                    throw new ParserException(MESSAGE_INVALID_PARAM);"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return finalDateField;"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            throw new ParserException(MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    //@@author SholihinK"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * check if file name to read/write is valid and if file-name tag exist."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param restOfInput the rest of input"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return string of file name to write"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @throws ParserException if fileName is not valid"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    default String getFileName(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (restOfInput.contains(TOKEN_FILE_NAME)) {"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            int startPoint \u003d restOfInput.indexOf(TOKEN_FILE_NAME);"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String startInput \u003d restOfInput.substring(startPoint);"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            Scanner scanner \u003d new Scanner(startInput);"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                throw new ParserException(MESSAGE_MISSING_FILE_NAME);"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String fileName \u003d scanner.next();"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            File f \u003d new File(fileName);"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                f.getCanonicalPath();"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                return fileName;"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                throw new ParserException(MESSAGE_INVALID_FILE_NAME_FORMAT);"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new ParserException(MESSAGE_MISSING_FILE_NAME_ARG);"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * MISCELLANEOUS METHODS BELOW"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    //@@author SholihinK"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Check if the date input is of valid format."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param date the string of the date input"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return true or false."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @author Sholihin"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    default boolean isDateValid(String date) throws ParserException {"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String regex \u003d \"^(3[01]|[12][0-9]|0[1-9])/(1[0-2]|0[1-9])/[0-9]{4}$\";"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(regex);"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(date);"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new ParserException(MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        final String DATE_FORMAT \u003d \"dd/MM/yyyy\";"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            DateFormat df \u003d new SimpleDateFormat(DATE_FORMAT);"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            df.setLenient(false);"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            df.parse(date);"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new ParserException(MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    //@@author yueyeah"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Check if the time input is of valid format."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param time The time input in the form of a String."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return True if the time is of valid format, false if not."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    default boolean isTimeValid(String time) {"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String regex \u003d \"^(0[0-9]|1[0-9]|2[0-3])[0-5][0-9]$\";"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(regex);"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(time);"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return matcher.matches();"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    //@@author yueyeah"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Check if the priority input is valid."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param priority The priority input in the form of a String."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return True if the priority is valid, false if not."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    default boolean isPriorityValid(String priority) {"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String regex \u003d \"^(low|medium|high)$\";"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(regex);"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(priority);"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return matcher.matches();"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    //@author LTPZ"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Check if the final date is after start date."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param startDate The final date string"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param finalDate The start date string"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @throws ParserException if final date is not after the start date"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    default void isFinalDateAfterStartDate(String startDate, String finalDate) throws ParserException {"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Date dayStart \u003d CompalUtils.stringToDate(startDate);"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        c.setTime(dayStart);"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Date dateStart \u003d c.getTime();"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Date dayEnd \u003d CompalUtils.stringToDate(finalDate);"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        c.setTime(dayEnd);"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Date dateEnd \u003d c.getTime();"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (dateStart.after(dateEnd)) {"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            throw new ParserException(MESSAGE_INVALID_FINAL_TIME);"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    //@author LTPZ"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Check if the interval is positive."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param interval The interval input"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @throws ParserException if the interval is not positive"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    default void isValidInterval(int interval) throws ParserException {"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (interval \u003c\u003d 0) {"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            throw new ParserException(MESSAGE_INVALID_INTERVAL);"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    //@author LTPZ"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Check if there is any invalid key."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param key         The set of valid keys of the command"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param restOfInput The input command"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @throws ParserException if the command contains invalid keys"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    default void isValidKey(ArrayList\u003cString\u003e key, String restOfInput, String invalidParam)"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        throws ParserException {"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        ArrayList\u003cString\u003e copyofKeys \u003d new ArrayList\u003c\u003e(key);"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Scanner scanner \u003d new Scanner(restOfInput);"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String param \u003d scanner.next();"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            if (param.substring(0, 1).equals(TOKEN_SLASH) \u0026\u0026 !copyofKeys.contains(param)) {"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                throw new ParserException(invalidParam);"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            } else if (param.substring(0, 1).equals(TOKEN_SLASH)) {"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                copyofKeys.remove(param);"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    //@@author yueyeah"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Check if the user input contains the token. Used to check for optional arguments like /final-date."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param restOfInput String input of user after command word"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param token       The token to be checked"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return True if the token exists in the user input, False if not."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    default boolean hasToken(String restOfInput, String token) {"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return (restOfInput.contains(token));"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LTPZ": 106,
      "Catherinetan99": 180,
      "SholihinK": 128,
      "jaedonkey": 1,
      "yueyeah": 374,
      "-": 5
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/DeadlineCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.logic.command.DeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "// @@author yueyeah"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "// @@author LTPZ"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LTPZ"
        },
        "content": " * Command parser that parses arguments given by the user when adding deadline or recurring deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LTPZ"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "public class DeadlineCommandParser implements CommandParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(DeadlineCommand.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    private static final ArrayList\u003cString\u003e key \u003d new ArrayList\u003c\u003e(Arrays.asList(TOKEN_END_TIME,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            TOKEN_DATE, TOKEN_PRIORITY, TOKEN_FINAL_DATE, TOKEN_INTERVAL));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAM \u003d \"Whoops! Looks like that\u0027s an invalid command!\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        + \"This is how you use the deadline command:\\n\\n\" + DeadlineCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public Command parseCommand(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        logger.info(\"Attempting to parse deadline command\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        final String description \u003d getTokenDescription(restOfInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        final ArrayList\u003cString\u003e startDateList \u003d getTokenDate(restOfInput);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        final Task.Priority priority \u003d getTokenPriority(restOfInput);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        final String endTime \u003d getTokenEndTime(restOfInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        final int interval \u003d getTokenInterval(restOfInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        String finalDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        if (hasToken(restOfInput, TOKEN_FINAL_DATE)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            finalDate \u003d getTokenFinalDate(restOfInput);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            int lastStartDateIndex \u003d startDateList.size() - 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            finalDate \u003d startDateList.get(lastStartDateIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        isFinalDateAfterStartDate(startDateList.get(INDEX_ZERO), finalDate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        isValidInterval(interval);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        isValidAmountTaskToAdd(startDateList.get(0),finalDate,interval);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        isValidKey(key, restOfInput,MESSAGE_INVALID_PARAM);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        logger.info(\"Successfully parse deadline command\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        return new DeadlineCommand(description, priority, startDateList, endTime, finalDate, interval);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LTPZ": 47,
      "yueyeah": 2
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.logic.command.DeleteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.logic.command.EventCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "//@@author yueyeah"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object for deletion of task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "public class DeleteCommandParser implements CommandParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final ArrayList\u003cString\u003e key \u003d new ArrayList\u003c\u003e(Arrays.asList(TOKEN_TASK_ID));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAM \u003d \"Whoops! Looks like that\u0027s an invalid command!\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"This is how you use the event command:\\n\\n\" + EventCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public Command parseCommand(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        int taskID \u003d getTaskID(restOfInput);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        isValidKey(key,restOfInput,MESSAGE_INVALID_PARAM);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return new DeleteCommand(taskID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaedonkey": 4,
      "yueyeah": 22
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/DoneCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.DoneCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * Parses input arguments and creates a new DoneCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "//@@author SholihinK"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class DoneCommandParser implements CommandParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(DoneCommandParser.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAM \u003d \"Whoops! Looks like that\u0027s an invalid command!\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"This is how you use the done command:\\n\\n\" + DoneCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public Command parseCommand(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logger.info(\"Attempting to parse done command\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int taskID \u003d getTaskID(restOfInput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String[] args \u003d restOfInput.split(\" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (args.length \u003e 4) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new ParserException(MESSAGE_INVALID_PARAM);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String status \u003d getTokenStatus(restOfInput);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logger.info(\"Successfully parse done command\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return new DoneCommand(taskID, status);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 35
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.logic.command.EditCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "//@@author jaedonkey"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "public class EditCommandParser implements CommandParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private static final ArrayList\u003cString\u003e key \u003d new ArrayList\u003c\u003e(Arrays.asList(TOKEN_END_TIME, TOKEN_START_TIME,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            TOKEN_DATE, TOKEN_PRIORITY, TOKEN_TASK_ID, TOKEN_DESCRIPTION));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(EditCommandParser.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public Command parseCommand(String restOfInput) throws ParserException, ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        logger.info(\"Attempting to parse edit command\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        isValidKey(key, restOfInput,MESSAGE_INVALID_PARAM);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        int taskId \u003d getTaskID(restOfInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        String description \u003d getTokenDescription(restOfInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        Date date \u003d getDate(restOfInput);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        Task.Priority priority \u003d getTokenPriority(restOfInput);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        String startTime \u003d getTokenStartTime(restOfInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        String endTime \u003d getTokenEndTime(restOfInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        return new EditCommand(taskId, description, date, startTime, endTime, priority);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public Task.Priority getTokenPriority(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        Task.Priority priorityField;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        if (restOfInput.contains(TOKEN_PRIORITY)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            int startPoint \u003d restOfInput.indexOf(TOKEN_PRIORITY);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            String priorityStartInput \u003d restOfInput.substring(startPoint);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            Scanner scanner \u003d new Scanner(priorityStartInput);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                throw new ParserException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            String commandPriority \u003d scanner.next();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            if (isPriorityValid(commandPriority)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                priorityField \u003d Task.Priority.valueOf(commandPriority.toLowerCase());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                throw new ParserException(MESSAGE_INVALID_PRIORITY);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            priorityField \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        return priorityField;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public Date getDate(String restOfInput) throws ParserException, ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        if (restOfInput.contains(TOKEN_DATE)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            int startPoint \u003d restOfInput.indexOf(TOKEN_DATE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            String dateStartInput \u003d restOfInput.substring(startPoint);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            Scanner scanner \u003d new Scanner(dateStartInput);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                throw new ParserException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            String dateField \u003d scanner.next();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            if (dateField.equals(EMPTY_INPUT_STRING) || dateField.charAt(0) \u003d\u003d TOKEN_SLASH_CHAR) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                throw new ParserException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            if (!isDateValid(dateField)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                throw new ParserException(MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            Date date \u003d new SimpleDateFormat(\"dd/MM/yyyy\").parse(dateField);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public String getTokenDescription(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        if (restOfInput.contains(TOKEN_DESCRIPTION)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            int startPoint \u003d restOfInput.indexOf(TOKEN_DESCRIPTION);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            String descriptionStartInput \u003d restOfInput.substring(startPoint);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            Scanner scanner \u003d new Scanner(descriptionStartInput);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                throw new ParserException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            String sub \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            int splitPoint \u003d sub.indexOf(\" /\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            if (splitPoint \u003d\u003d -1) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                description \u003d sub;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                description \u003d sub.substring(0,splitPoint);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            System.out.println(\"No desc found!!!\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public String getTokenStartTime(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        if (restOfInput.contains(TOKEN_START_TIME)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            int startPoint \u003d restOfInput.indexOf(TOKEN_START_TIME);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            String startTimeStartInput \u003d restOfInput.substring(startPoint);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            Scanner scanner \u003d new Scanner(startTimeStartInput);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                throw new ParserException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            return scanner.next();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public String getTokenEndTime(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        if (restOfInput.contains(TOKEN_END_TIME)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            int startPoint \u003d restOfInput.indexOf(TOKEN_END_TIME);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            String endTimeStartInput \u003d restOfInput.substring(startPoint);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            Scanner scanner \u003d new Scanner(endTimeStartInput);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                throw new ParserException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            String endTimeField \u003d scanner.next();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            return endTimeField;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaedonkey": 145
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/EventCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.logic.command.EventCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "//@@author yueyeah"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * Command parser that parses arguments given by the user when adding event or recurring events."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "public class EventCommandParser implements CommandParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(EventCommand.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final ArrayList\u003cString\u003e key \u003d new ArrayList\u003c\u003e(Arrays.asList(TOKEN_END_TIME, TOKEN_START_TIME,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            TOKEN_DATE, TOKEN_PRIORITY, TOKEN_FINAL_DATE, TOKEN_INTERVAL));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAM \u003d \"Whoops! Looks like that\u0027s an invalid command!\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        + \"This is how you use the event command:\\n\\n\" + EventCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public Command parseCommand(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        logger.info(\"Attempting to parse event command\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        final String description \u003d getTokenDescription(restOfInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        final ArrayList\u003cString\u003e startDateList \u003d getTokenDate(restOfInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        final Task.Priority priority \u003d getTokenPriority(restOfInput);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        final String startTime \u003d getTokenStartTime(restOfInput);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        final String endTime \u003d getTokenEndTime(restOfInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        final int interval \u003d getTokenInterval(restOfInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String finalDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (hasToken(restOfInput, TOKEN_FINAL_DATE)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            finalDate \u003d getTokenFinalDate(restOfInput);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int lastStartDateIndex \u003d startDateList.size() - 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            finalDate \u003d startDateList.get(lastStartDateIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        isFinalDateAfterStartDate(startDateList.get(INDEX_ZERO), finalDate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        isValidInterval(interval);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        isValidAmountTaskToAdd(startDateList.get(0),finalDate,interval);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        isValidKey(key, restOfInput,MESSAGE_INVALID_PARAM);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        logger.info(\"Successfully parse event command\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return new EventCommand(description, startDateList, priority, startTime, endTime, finalDate, interval);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyeah": 48
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/ExportCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.ExportCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class ExportCommandParser implements CommandParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAM \u003d \"Looks like there\u0027s an invalid parameter inserted!\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"This is how you use the export command:\\n\\n\" + ExportCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(ExportCommandParser.class);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public Command parseCommand(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logger.info(\"Attempting to parse Export command\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String[] args \u003d restOfInput.split(\" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (args.length \u003e 2) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new ParserException(MESSAGE_INVALID_PARAM);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String fileName \u003d getFileName(restOfInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logger.info(\"Successfully parse Export command\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return new ExportCommand(fileName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 31
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.logic.command.FindCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "public class FindCommandParser implements CommandParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(FindCommandParser.class);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public Command parseCommand(String input) throws ParserException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        logger.info(\"Attempting to parse find command\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        return new FindCommand(input);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaedonkey": 21
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/FindFreeSlotCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.logic.command.FindFreeSlotCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "//@@author Catherinetan99"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "public class FindFreeSlotCommandParser implements CommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(FindFreeSlotCommandParser.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"Error: Date entered cannot be a past date!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAM \u003d \"Whoops! Looks like that\u0027s an invalid command!\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            + \"This is how you use the findfreeslot command:\\n\\n\" + FindFreeSlotCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public Command parseCommand(String restOfInput) throws ParserException, ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        logger.info(\"Attempting to parse findfreeslot command\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String[] args \u003d restOfInput.split(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        if (args.length \u003e 6) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            throw new ParserException(MESSAGE_INVALID_PARAM);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Date date \u003d getDate(restOfInput);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        if (!isFutureDate(date)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            throw new ParserException(MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        int hour \u003d getHour(restOfInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        int min \u003d getMin(restOfInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        logger.info(\"Successfully parse findfreeslot command\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return new FindFreeSlotCommand(date, hour, min);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 39
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/HelpCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.logic.command.HelpCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "//@@author LTPZ"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "public class HelpCommandParser implements CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(HelpCommand.class);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public Command parseCommand(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        logger.info(\"Attempting to parse help command\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        logger.info(\"Successfully parse help command\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        return new HelpCommand(restOfInput);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LTPZ": 20
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/ImportCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.ImportCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class ImportCommandParser implements CommandParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAM \u003d \"Looks like there\u0027s an invalid parameter inserted!\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"This is how you use the import command:\\n\\n\" + ImportCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(ImportCommandParser.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public Command parseCommand(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logger.info(\"Attempting to parse Import command\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String[] args \u003d restOfInput.split(\" \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (args.length \u003e 2) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new ParserException(MESSAGE_INVALID_PARAM);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String fileName \u003d getFileName(restOfInput);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logger.info(\"Successfully parse import command\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return new ImportCommand(fileName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 31
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/ListCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class ListCommandParser implements CommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(ListCommand.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static final ArrayList\u003cString\u003e key \u003d new ArrayList\u003c\u003e(Arrays.asList(TOKEN_STATUS, TOKEN_TYPE));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAM \u003d \"Whoops! Looks like there\u0027s an invalid \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"parameter inserted!\\n\" + \"This is how you use the list command:\\n\\n\" + ListCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public Command parseCommand(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logger.info(\"Attempting to parse list command\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        isValidKey(key, restOfInput, MESSAGE_INVALID_PARAM);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (restOfInput.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            logger.info(\"Successfully parse list command\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return new ListCommand(\"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (restOfInput.contains(TOKEN_TYPE) \u0026\u0026 restOfInput.contains(TOKEN_STATUS)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                String[] args \u003d restOfInput.split(\" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (args.length \u003e 4) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    throw new ParserException(MESSAGE_INVALID_PARAM);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                String type \u003d getType(restOfInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                String status \u003d getTokenStatus(restOfInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                logger.info(\"Successfully parse list command\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                return new ListCommand(type, status);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } else if (restOfInput.contains(TOKEN_STATUS) \u0026\u0026 !restOfInput.contains(TOKEN_TYPE)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                String[] args \u003d restOfInput.split(\" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (args.length \u003e 2) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    throw new ParserException(MESSAGE_INVALID_PARAM);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                String status \u003d getTokenStatus(restOfInput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                logger.info(\"Successfully parse list command\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                return new ListCommand(\"\", status);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } else if (!restOfInput.contains(TOKEN_STATUS) \u0026\u0026 restOfInput.contains(TOKEN_TYPE)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                String[] args \u003d restOfInput.split(\" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (args.length \u003e 2) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    throw new ParserException(MESSAGE_INVALID_PARAM);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                String type \u003d getType(restOfInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                logger.info(\"Successfully parse list command\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                return new ListCommand(type);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                throw new ParserException(MESSAGE_INVALID_PARAM);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 58
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/NusmodsCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.logic.command.NusmodsCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "public class NusmodsCommandParser implements CommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(NusmodsCommand.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final ArrayList\u003cString\u003e key \u003d new ArrayList\u003c\u003e(Arrays.asList(TOKEN_SEMSTART, TOKEN_NUSMODS_LINK));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAM \u003d \"Whoops! Looks like that\u0027s an invalid command!\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"This is how you use the NUSMODS command:\\n\\n\" + NusmodsCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public Command parseCommand(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        logger.info(\"Attempting to parse NUSMODS command\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        isValidKey(key, restOfInput,MESSAGE_INVALID_PARAM);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String semStartDateString \u003d getTokenSemStart(restOfInput);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        ArrayList\u003cString\u003e moduleDetailsList \u003d getTokenNusmodsLink(restOfInput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        logger.info(\"Successfully parse NUSMODS command\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return new NusmodsCommand(semStartDateString, moduleDetailsList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyeah": 27
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/ParserManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": " * Deals with user inputs."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class ParserManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //***Class Properties/Variables***---------------------------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_EXIT \u003d \"bye\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_VIEW \u003d \"view\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_SET_REMINDER \u003d \"set-reminder\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public static final String CMD_VIEW_REMINDER \u003d \"view-reminder\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public static final String CMD_FIND_FREE_SLOT \u003d \"findfreeslot\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public static final String CMD_EDIT \u003d \"edit\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String CMD_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String CMD_EXPORT \u003d \"export\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String CMD_IMPORT \u003d \"import\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static final String CMD_NUSMODS \u003d \"nusmods\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static final String CMD_QUOTE \u003d \"quote\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Processes command input by user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Based on the command input by user, it instantiates different command classes"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * and executes the respective methods implemented."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param userInput Entire user string input."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @throws ParserException If command input is unknown or user input is empty."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public Command processCmd(String userInput) throws ParserException, ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        userInput \u003d userInput.stripLeading();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String[] args \u003d userInput.split(\" \", 2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String commandWord \u003d args[0];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String restOfInput \u003d \"\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (args.length !\u003d 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            restOfInput \u003d args[1];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        case CMD_EXIT:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return new ByeCommandParser().parseCommand(restOfInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case CMD_VIEW:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return new ViewCommandParser().parseCommand(restOfInput);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        case CMD_SET_REMINDER:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            return new SetReminderCommandParser().parseCommand(restOfInput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        case CMD_VIEW_REMINDER:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            return new ViewReminderCommandParser().parseCommand(restOfInput);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        case CMD_FIND_FREE_SLOT:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            return new FindFreeSlotCommandParser().parseCommand(restOfInput);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case CMD_DEADLINE:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            return new DeadlineCommandParser().parseCommand(restOfInput);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case CMD_DONE:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return new DoneCommandParser().parseCommand(restOfInput);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case CMD_FIND:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            return new FindCommandParser().parseCommand(restOfInput);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        case CMD_EVENT:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return new EventCommandParser().parseCommand(restOfInput);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        case CMD_EDIT:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            return new EditCommandParser().parseCommand(restOfInput);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case CMD_LIST:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return new ListCommandParser().parseCommand(restOfInput);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        case CMD_DELETE:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return new DeleteCommandParser().parseCommand(restOfInput);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case CMD_EXPORT:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return new ExportCommandParser().parseCommand(restOfInput);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case CMD_IMPORT:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return new ImportCommandParser().parseCommand(restOfInput);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        case CMD_NUSMODS:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return new NusmodsCommandParser().parseCommand(restOfInput);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        case CMD_QUOTE:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return new QuoteCommandParser().parseCommand(restOfInput);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "            return new HelpCommandParser().parseCommand(commandWord + \"_\" + restOfInput);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        //suppose to return helpCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        //throw new ParserException(MESSAGE_INVALID_COMMAND);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "LTPZ": 13,
      "Catherinetan99": 15,
      "SholihinK": 27,
      "jaedonkey": 4,
      "yueyeah": 11,
      "-": 21
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/QuoteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.logic.command.QuoteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "public class QuoteCommandParser implements CommandParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(QuoteCommand.class);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public Command parseCommand(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        logger.info(\"Attempting to parse quote command\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        logger.info(\"Successfully parse quote command\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return new QuoteCommand(restOfInput);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yueyeah": 20
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/SetReminderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.logic.command.SetReminderCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "//@@author Catherinetan99"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "public class SetReminderCommandParser implements CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(SetReminderCommandParser.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAM \u003d \"Whoops! Looks like that\u0027s an invalid command!\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            + \"This is how you use the set-reminder command:\\n\\n\" + SetReminderCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public Command parseCommand(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        logger.info(\"Attempting to parse set-reminder command\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String[] args \u003d restOfInput.split(\" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        if (args.length \u003e 4) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            throw new ParserException(MESSAGE_INVALID_PARAM);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        int taskID \u003d getTaskID(restOfInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String status \u003d getTokenStatus(restOfInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        logger.info(\"Successfully parse set-reminder command\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return new SetReminderCommand(taskID, status);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 32
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/ViewCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.CompalUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.ViewCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "//@@author SholihinK"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * Parses input arguments and creates a new ViewCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class ViewCommandParser implements CommandParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static final ArrayList\u003cString\u003e key \u003d new ArrayList\u003c\u003e(Arrays.asList(TOKEN_DATE, TOKEN_TYPE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAM \u003d \"Whoops! Looks like that\u0027s an invalid command!\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        + \"This is how you use the view command:\\n\\n\" + ViewCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(ViewCommandParser.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * and returns an ViewCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param restOfInput parameter of the input string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return the prepared command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public Command parseCommand(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logger.info(\"Attempting to parse view command\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String[] viewArgs \u003d restOfInput.trim().split(\" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String emptyString \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String viewType \u003d viewArgs[0];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (emptyString.equals(viewType)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new ParserException(MESSAGE_MISSING_TOKEN);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        isValidKey(key, restOfInput, MESSAGE_INVALID_PARAM);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        switch (viewType) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case \"month\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case \"week\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case \"day\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String finalDate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (!restOfInput.contains(\"/date\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                Calendar currentDay \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                finalDate \u003d CompalUtils.dateToString(currentDay.getTime());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                ArrayList\u003cString\u003e startDateList \u003d getTokenDate(restOfInput);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int lastStartDateIndex \u003d startDateList.size() - 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                finalDate \u003d startDateList.get(lastStartDateIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            logger.info(\"Successfully parse view command\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (viewArgs.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                return new ViewCommand(viewType, finalDate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } else if (viewArgs.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (restOfInput.contains(\"/type\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    String type \u003d getType(restOfInput);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    return new ViewCommand(viewType, finalDate, type);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                } else if (restOfInput.contains(\"/date\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    return new ViewCommand(viewType, finalDate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    throw new ParserException(MESSAGE_INVALID_PARAM);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } else if (viewArgs.length \u003d\u003d 5) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                String type \u003d getType(restOfInput);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                return new ViewCommand(viewType, finalDate, type);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        throw new ParserException(MESSAGE_INVALID_PARAM);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 84
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/ViewReminderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.logic.command.ViewReminderCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "//@@author Catherinetan99"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "public class ViewReminderCommandParser implements CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(ViewReminderCommandParser.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public static final String MESSAGE_INVALID_PARAM \u003d \"Whoops! Looks like that\u0027s an invalid command!\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            + \"This is how you use the view-reminder command:\\n\\n\" + ViewReminderCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public Command parseCommand(String restOfInput) throws ParserException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        logger.info(\"Attempting to parse view-reminder command\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        if (restOfInput !\u003d null \u0026\u0026 !restOfInput.trim().isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            throw new ParserException(MESSAGE_INVALID_PARAM);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        logger.info(\"Successfully parse view-reminder command\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return new ViewReminderCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 28
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/exceptions/ParserException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.ui.UiUtil;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * This static inner class is the custom exception class extending Exception"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * that overwrites toString() for returning custom exception messages."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * It is thrown when command is unknown or when there are invalid arguments."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "//@@author SholihinK"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class ParserException extends Exception {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private UiUtil uiUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(ParserException.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public ParserException(String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        uiUtil \u003d new UiUtil();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        logger.warning(\"Parser exception detected :\" + description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        uiUtil.printg(description);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        compal.ui.UiUtil.tabWindow.getSelectionModel().select(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 38
    }
  },
  {
    "path": "src/main/java/compal/model/tasks/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.model.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": " * Represents assignment task type with a due date."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Constructs Deadline object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param description Description of deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param priority    priority level of task type."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param date        Due date of deadline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param endTime     End time of deadline"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public Deadline(String description, Priority priority, String date, String endTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        super(description, priority);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        super.symbol \u003d \"D\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        super.setMainDate(date);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        super.setEndTime(endTime);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 7,
      "SholihinK": 9,
      "jaedonkey": 5,
      "yueyeah": 1
    }
  },
  {
    "path": "src/main/java/compal/model/tasks/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.model.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": " * Represents event task type with a starting date and time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Constructs Event object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param description Description of event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param mainDate        Starting date of event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param startTime   Starting time of event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param priority    priority level of task type."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param endTime     End time of event."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param trailingDate End date of event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public Event(String description, Priority priority, String mainDate, String trailingDate, String startTime,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                 String endTime) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        super(description, priority);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        super.symbol \u003d \"E\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        super.setMainDate(mainDate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        super.setStartTime(startTime);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        super.setEndTime(endTime);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        super.setTrailingDate(trailingDate);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 8,
      "SholihinK": 8,
      "jaedonkey": 3,
      "yueyeah": 8
    }
  },
  {
    "path": "src/main/java/compal/model/tasks/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.model.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.commons.CompalUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": " * Represents task with description, status and reminder."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "public abstract class Task implements Serializable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public boolean isDone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    //***Class Properties/Variables***---------------------------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    protected String symbol;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private Date mainDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private Date trailingDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private Date startTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private Date endTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private boolean hasReminder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(Task.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Constructs Task object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param description Description."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    protected Task(String description, Priority priority) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        hasReminder \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Gets priority status (HIGH, MEDIUM, LOW) of task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return Priority status of task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Sets priority of task as HIGH, MEDIUM or LOW."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param priority Priority of task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Gets/returns task id."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Sets task id."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public void setId(int id) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Gets status icon (tick or cross) of task."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return Status icon (tick or cross) of task."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Gets status icon (tick or cross) of task in String."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @return Status icon (tick or cross) of task."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public String getStringisDone() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        return (isDone ? \"true\" : \"false\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Gets status icon (tick or cross) of task in Boolean."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return Status icon (tick or cross) of task."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public Boolean getisDone() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return (isDone);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Gets status icon (tick or cross) of task."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return Status icon (tick or cross) of task."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public Boolean gethasReminder() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return (hasReminder);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Gets status icon (tick or cross) of task."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @return Status icon (tick or cross) of task."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public String getStringhasReminder() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        return (hasReminder ? \"true\" : \"false\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Gets symbol of task."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return Symbol of task."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public String getSymbol() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return symbol;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Gets date of task in date format."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return Date of task."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public Date getMainDate() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return this.mainDate;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Formats dateInput then sets date as mainDate."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param dateInput Input date of task."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public void setMainDate(String dateInput) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Date mainDate \u003d CompalUtils.stringToDate(dateInput);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.mainDate \u003d mainDate;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Gets mainDate of task in string."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return mainDate of task."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public String getStringMainDate() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String mainDateString \u003d CompalUtils.dateToString(this.mainDate);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return mainDateString;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Gets trailingDate of Event in date format."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return trailingDate. Used for Event object only."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public Date getTrailingDate() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return this.trailingDate;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Formats dateInput then sets date as trailingDate."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param dateInput Input date for event. Used as the end date for event."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public void setTrailingDate(String dateInput) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.trailingDate \u003d CompalUtils.stringToDate(dateInput);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Gets trailingDate of task in string."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return trailingDate of task."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public String getStringTrailingDate() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (this.trailingDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return \"-\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String trailingDateString \u003d CompalUtils.dateToString(this.trailingDate);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return trailingDateString;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Gets durationHour of task."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return Hour duration of task."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Gets hasReminder of task."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @return whether the task has reminder. If task has reminder, return true. Else false."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public boolean hasReminder() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return hasReminder;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    //@@author Catherinetan99"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Gets start time of task in date format."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return Time of task."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public Date getStartTime() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        if (getStringStartTime().equals(\"-\")) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        calendar.setTime(mainDate);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String startTime \u003d getStringStartTime();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        int hour \u003d Integer.parseInt(startTime.substring(0, 2));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        int min \u003d Integer.parseInt(startTime.substring(2, 4));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        calendar.set(Calendar.HOUR, hour);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        calendar.set(Calendar.MINUTE, min);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return calendar.getTime();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Formats start timeInput then sets time as timeInput."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param timeInput Input time of task."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public void setStartTime(String timeInput) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Date time \u003d null;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            time \u003d format.parse(timeInput);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            logger.severe(\"Invalid start time input receive from tasks.txt!\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        this.startTime \u003d time;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Gets start time of task in string."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return Time of task."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public String getStringStartTime() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        if (this.startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            return \"-\";"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            return formatter.format(this.startTime);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Gets description of task."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return Description of task."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Sets the description of task."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public void setDescription(String newDescription) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        this.description \u003d newDescription;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Sets isDone as true."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Sets isDone as false."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public void markAsNotDone() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        isDone \u003d false;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Sets HasReminder."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public void setHasReminder(Boolean status) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        this.hasReminder \u003d status;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Returns the task as a formatted string."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * This function standardizes the displayed task format."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return Task as a formatted string."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        int strCase \u003d 0;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        if (getStringStartTime().equals(\"-\")) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            strCase \u003d 1;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        if (!getStringTrailingDate().equals(\"-\") \u0026\u0026 !getStringMainDate().equals(getStringTrailingDate())) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            strCase \u003d 2;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        switch (strCase) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            return \"\\n\" + \" \\nTask ID:\" + getId() + \"\\n\""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                + \"[\" + getSymbol() + \"]\" + \"[\" + getStatusIcon() + \"] \" + getDescription()"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                + \" \\nDate: \" + getStringMainDate() + \" \\nEnd Time: \" + getStringEndTime()"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                + \" \\nPriority: \" + getPriority() + \"\\n***************\";"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            return \"\\n\" + \" \\nTask ID:\" + getId() + \"\\n\""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                + \"[\" + getSymbol() + \"]\" + \"[\" + getStatusIcon() + \"] \" + getDescription()"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                + \" \\nStart Date: \" + getStringMainDate() + \" \\nStart Time: \" + getStringStartTime()"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                + \"\\nEnd Date: \" + getStringTrailingDate()"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                + \" \\nEnd Time: \" + getStringEndTime() + \" \\nPriority: \" + getPriority()"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                + \"\\n***************\";"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            return \"\\n\" + \" \\nTask ID:\" + getId() + \"\\n\""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                + \"[\" + getSymbol() + \"]\" + \"[\" + getStatusIcon() + \"] \" + getDescription()"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                + \" \\nDate: \" + getStringMainDate() + \" \\nStart Time: \" + getStringStartTime()"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                + \" \\nEnd Time: \" + getStringEndTime() + \" \\nPriority: \" + getPriority()"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                + \"\\n***************\";"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    //@@author jaedonkey"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Gets all the details of the task as a string, for saving into the text file."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @return saveString"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public String getAllDetailsAsString() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        StringBuilder list \u003d new StringBuilder();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(getId());"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(getSymbol());"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(getDescription());"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(getStringisDone());"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(getPriority().toString());"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(getStringMainDate());"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(getStringTrailingDate());"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(getStringStartTime());"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(getStringEndTime());"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(getStringhasReminder());"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        return list.toString();"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    //@@author jaedonkey"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Calculates the priority of the task based on the user defined priority (high/med/low) as well as"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * the time remaining until the date set for the task."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @deprecated not in use for now"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    @Deprecated"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public void calculateAndSetPriorityScore() {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        long score;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        switch (priority) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        case high:"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            score \u003d 100;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        case medium:"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            score \u003d 50;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        case low:"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            score \u003d 20;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            score \u003d 0;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        Date d \u003d new Date();"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        long diff \u003d d.getTime() - this.mainDate.getTime();"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        long diffHours \u003d diff / (60 * 60 * 1000);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        //System.out.println(\"Task:LOG: Difference is \" + diffHours);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        score +\u003d diffHours;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    //@@author Catherinetan99"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Gets the end time for the task."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return date end time"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public Date getEndTime() {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        if (getStringTrailingDate().equals(\"-\")) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            calendar.setTime(mainDate);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            calendar.setTime(trailingDate);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String endTime \u003d getStringEndTime();"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        int hour \u003d Integer.parseInt(endTime.substring(0, 2));"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        int min \u003d Integer.parseInt(endTime.substring(2, 4));"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        calendar.set(Calendar.HOUR, hour);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        calendar.set(Calendar.MINUTE, min);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return calendar.getTime();"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Formats end timeInput then sets end time as timeInput."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @param timeInput Input time of task."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public void setEndTime(String timeInput) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Date time \u003d null;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            time \u003d format.parse(timeInput);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            logger.severe(\"Invalid end time input receive from tasks.txt!\");"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        this.endTime \u003d time;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Gets end time of task in string."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return Time of task."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public String getStringEndTime() {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        if (this.endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            return \"-\";"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            return formatter.format(this.endTime);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Create a string of date and end time."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return string object of date and end time."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public String getStringDateAndEndTime() {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return getStringMainDate() + \" \" + getStringEndTime();"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Create a string of main or trailing date with end time."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return string object of date and end time."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public String getStringMainOrTrailingDateAndEndTime() {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return getStringMainOrTrailingDate() + \" \" + getStringEndTime();"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Create a string of main or trailing date."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return string object of date and end time."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public String getStringMainOrTrailingDate() {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        if (this.trailingDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            return getStringMainDate();"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            String trailingDateString \u003d CompalUtils.dateToString(this.trailingDate);"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            return trailingDateString;"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Create a date object of date and start time."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return date object of formatted time."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public Date getDateObgMainDateAndStartOrEndTime() {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            Date date \u003d sdf.parse(getStringDateAndStartOrEndTime());"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Create a string main date and start or end time."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return string object of date and end time."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public String getStringDateAndStartOrEndTime() {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return getStringMainDate() + \" \" + getStringStartOrEnd();"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Gets start time of task in string."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return Time of task."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public String getStringStartOrEnd() {"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        if (this.startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            return getStringEndTime();"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            return formatter.format(this.startTime);"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Create a date object of date and end time."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @return date object of formatted time."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public Date getDateObgDateAndEndTime() {"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        SimpleDateFormat sdf \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            Date date \u003d sdf.parse(getStringDateAndEndTime());"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    public enum Priority {"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        high, medium, low"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 349,
      "SholihinK": 53,
      "jaedonkey": 103,
      "yueyeah": 49
    }
  },
  {
    "path": "src/main/java/compal/model/tasks/TaskIdManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "package compal.model.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import java.util.BitSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "//@@author jaedonkey"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "public class TaskIdManager {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private BitSet idBitSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(TaskIdManager.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    TaskIdManager() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        BitSet bs \u003d readIdBitSet();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        if (bs !\u003d null) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            idBitSet \u003d (BitSet) readIdBitSet().clone();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            logger.info(\"No saved idbitset found\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            idBitSet \u003d new BitSet(1_000_000); //bitset of 1,000,000 bits (hard limit of no. of tasks)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    //@@author jaedonkey"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Synchronizes all edits made to the user file to the serial file holding the bitmap."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @param tl tasklist holding the arraylist of tasks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public void synchronizeTaskIds(TaskList tl) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        idBitSet.clear();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        for (Task t:tl.getArrList()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            idBitSet.set(t.getId());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    //@@author jaedonkey"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Assigns an ID to the task passed into it."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @param t task to be assigned an id"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public void generateAndSetId(Task t) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        int taskID;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        for (int i \u003d 0; i \u003c 1000000; i++) { //search for an unused task ID"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            if (!idBitSet.get(i)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                idBitSet.set(i);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                taskID \u003d i;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                t.setId(taskID);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                //System.out.println(\"Task assigned id of \" + taskID);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                writeIdBitSet();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        //if reached this point means bitmap full"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    //@@author jaedonkey"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Writes(saves) the current id bitset to file."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public void writeIdBitSet() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            ObjectOutputStream oos \u003d new ObjectOutputStream(new FileOutputStream(\"serial\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            oos.writeObject(idBitSet);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    //@@author jaedonkey"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Reads in the saved idbitset as an object and returns it."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @return saved idbitset"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public BitSet readIdBitSet() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        BitSet bs \u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            ObjectInputStream ois \u003d new ObjectInputStream(new FileInputStream(\"serial\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            bs \u003d (BitSet) ois.readObject();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        } catch (ClassNotFoundException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        return bs;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaedonkey": 102
    }
  },
  {
    "path": "src/main/java/compal/model/tasks/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.model.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ArrayList\u003cTask\u003e arrlist;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private TaskIdManager taskIdManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * Constructs TaskList object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        taskIdManager \u003d new TaskIdManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public ArrayList\u003cTask\u003e getArrList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return this.arrlist;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Sets the arrlist to arrlist. Called after loading data from file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @param arrlist arraylist to set the arrlist"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void setArrList(ArrayList\u003cTask\u003e arrlist) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.arrlist \u003d arrlist;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        //make sure any user edits are brought over to the binary file as well"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        taskIdManager.synchronizeTaskIds(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    //@@author jaedonkey"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Handles the adding of the tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * It tests for the task type, then parses it according to the correct syntax."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Used in parser.processCommands."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @param task Task to be added to the list of tasks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        //generate unique ID for task"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        taskIdManager.generateAndSetId(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        arrlist.add(task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    //@@author jaedonkey"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Returns a task that has an id value of id."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public Task getTaskById(int id) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        //search for task with id of id"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        for (Task t : arrlist) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            if (t.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                return t;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        throw null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    //@@author jaedonkey"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Removes a task that has an id value of id."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public void removeTaskById(int id) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        //search for task with id of id"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        for (Task t : arrlist) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            if (t.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                arrlist.remove(t);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    //@@author SholihinK"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Sorts all the tasks in arrlist by date."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param arrlist sorted"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void sortTask(ArrayList\u003cTask\u003e arrlist) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Comparator\u003cTask\u003e compareByPriority \u003d Comparator.comparing(Task::getDateObgMainDateAndStartOrEndTime)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            .thenComparing(Task::getStringMainOrTrailingDateAndEndTime).thenComparing(Task::getPriority);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        arrlist.sort(compareByPriority);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 1,
      "SholihinK": 34,
      "jaedonkey": 58
    }
  },
  {
    "path": "src/main/java/compal/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "//@@author jaedonkey"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": " * API of the Storage component."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "public interface Storage\u003cT\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    String saveFilePath \u003d null;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    T loadData();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    void saveData(T arrlist);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jaedonkey": 13,
      "-": 2
    }
  },
  {
    "path": "src/main/java/compal/storage/StorageParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "//@@author jaedonkey"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": " * Interface for parsing storage data."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": " * @author jaedonkey"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "public interface StorageParser\u003cT\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    T parseData(String[] parts);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 2,
      "jaedonkey": 10
    }
  },
  {
    "path": "src/main/java/compal/storage/TaskStorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "//@@author jaedonkey"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": " * Represents file used to store COMPal."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "public class TaskStorageManager implements Storage\u003cArrayList\u003cTask\u003e\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public static final String MESSAGE_ERROR_MK_FILE \u003d \"Error when trying to creating file.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public static final String DEFAULT_STORAGE \u003d \"./tasks.txt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(TaskStorageManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private TaskStorageParser tsp;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Prints message of storage initialized."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public TaskStorageManager() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        createFile();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        tsp \u003d new TaskStorageParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Creates the directory for storing data if it does not exist."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public void createFile() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        File file \u003d new File(DEFAULT_STORAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                file.createNewFile();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            } catch (IOException se) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                logger.warning(MESSAGE_ERROR_MK_FILE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Creates and loads task objects based on save text file into arraylist, then returns the arraylist."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @return ArrayList of stored item found in file."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @author jaedonkey"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public ArrayList\u003cTask\u003e loadData() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        logger.info(\"Loading tasks.txt into arraylist\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        ArrayList\u003cTask\u003e tempList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            File f \u003d new File(DEFAULT_STORAGE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(f));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            String st;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            while ((st \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                Task t;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                String[] parts \u003d st.split(\"_\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                //check if it is a valid task read"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                if (parts.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                t \u003d tsp.parseData(parts);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                //set tasks completion and reminder status"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                if (parts[3].equals(\"true\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                    t.markAsDone();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                if (parts[9].equals(\"true\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                    t.setHasReminder(true);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                //set task id"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                t.setId(Integer.parseInt(parts[0]));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                //add created task to list"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                tempList.add(t);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        return tempList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Saves ArrayList of tasks into file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @param tasks ArrayList of task stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @author jaedonkey"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public void saveData(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            sb.append(t.getAllDetailsAsString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            File f \u003d new File(DEFAULT_STORAGE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            PrintWriter pw \u003d new PrintWriter(f);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            pw.printf(\"%s\\n\", sb);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            pw.close();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            logger.info(\"Storage:WARNING: Save-file not found. Will generate new one.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        logger.info(\"File save successfully.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 14,
      "jaedonkey": 112
    }
  },
  {
    "path": "src/main/java/compal/storage/TaskStorageParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.commons.LogUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "//@@author jaedonkey"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": " * Returns Task object based on parts of data stored in the string array."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "public class TaskStorageParser implements StorageParser\u003cTask\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private static final String SYMBOL_DEADLINE \u003d \"D\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private static final String SYMBOL_EVENT \u003d \"E\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private static final Logger logger \u003d LogUtils.getLogger(TaskStorageParser.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public Task parseData(String[] parts) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        switch (parts[1]) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        case SYMBOL_DEADLINE:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            return new Deadline(parts[2], stringToPriority(parts[4]), parts[5], parts[8]);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        case SYMBOL_EVENT:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            return new Event(parts[2], stringToPriority(parts[4]), parts[5], parts[6], parts[7], parts[8]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            logger.info(\"Could not parse text. Returning what we managed to parse.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Returns Priority from a String describing the priority level."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @param priority task priority string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @return Priority enum"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private Task.Priority stringToPriority(String priority) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        return Task.Priority.valueOf(priority.toLowerCase());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 6,
      "jaedonkey": 40
    }
  },
  {
    "path": "src/main/java/compal/ui/CalendarUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "//@@author SholihinK"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class CalendarUtil {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public TabPane tabWindow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Constructor for Calender Util."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public CalendarUtil() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.tabWindow \u003d compal.ui.UiUtil.tabWindow;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Refresh view date."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param dateToStore date to view of daily calender"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void dateViewRefresh(String dateToStore,String type) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        DailyCalUi dc \u003d new DailyCalUi();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int totalTabSize \u003d tabWindow.getTabs().size();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (totalTabSize \u003e 1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            for (int i \u003d totalTabSize - 1; i \u003e\u003d 1; i--) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                tabWindow.getTabs().remove(i);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Tab dailyTab \u003d new Tab();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        dailyTab.setText(\"Daily Task: \" + dateToStore);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        dailyTab.setContent(dc.init(dateToStore,type));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        totalTabSize \u003d tabWindow.getTabs().size();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        tabWindow.getTabs().add(totalTabSize, dailyTab);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        tabWindow.getSelectionModel().select(1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 42
    }
  },
  {
    "path": "src/main/java/compal/ui/DailyCalUi.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.storage.TaskStorageManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.Group;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.shape.Line;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.text.TextAlignment;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "//@@author SholihinK"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * Create a timetable drawing onto DailyView scroll-pane within tab-pane."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "class DailyCalUi {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private TaskStorageManager taskStorageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String dateToDisplay;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private boolean[][] canStore \u003d new boolean[25][6];"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ScrollPane sp \u003d new ScrollPane();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private Group groupRoot \u003d new Group();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private Line[] horizontalLines \u003d new Line[50];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private Line[] verticalLines \u003d new Line[50];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private Text[] timeAM \u003d new Text[50];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private Text[] timePM \u003d new Text[50];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private int[] clockTime \u003d {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23};"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private double colOneXLayout \u003d 25;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private double colOneYLayout \u003d -25;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private int horizontalLineCounter \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private double horizontalYLayout \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private double horizontalXLayout \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private double[][] storedXAxis \u003d new double[25][6];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private double[][] storedYAxis \u003d new double[25][6];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private int startTime \u003d 8;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private int endTime \u003d 17;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ArrayList\u003cTask\u003e tempOriginalList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ArrayList\u003cTask\u003e dailyCalArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ArrayList\u003cTask\u003e deadlineArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String type \u003d \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    DailyCalUi() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.taskStorageManager \u003d new TaskStorageManager();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Initializer function set canStore array to true state."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private static void setTrue(boolean[][] array) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (boolean[] row : array) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            Arrays.fill(row, true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Initializer function to create final gui timetable."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return scrollPane final object state"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    ScrollPane init(String givenDate, String type) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        tempOriginalList \u003d taskStorageManager.loadData();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        setTrue(canStore);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        dateToDisplay \u003d givenDate;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        createDailyArrayList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        sp \u003d buildTimeTable();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return sp;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Create an array list of type task of that specific day."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Sorted by priority scoring and then time.."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Only display non-deadline events."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void createDailyArrayList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (Task t : tempOriginalList) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (t.getStringMainDate().equals(dateToDisplay)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (t.getSymbol().equals(\"D\") \u0026\u0026 !t.getisDone()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    deadlineArrayList.add(t);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                } else if ((t.getSymbol().equals(\"E\") \u0026\u0026 !t.getisDone())) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    if (!t.getStringMainDate().equals(t.getStringTrailingDate())) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        t.setEndTime(\"2359\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    dailyCalArrayList.add(t);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } else if (t.getStringTrailingDate().equals(dateToDisplay)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if ((t.getSymbol().equals(\"E\") \u0026\u0026 !t.getisDone())) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    t.setStartTime(\"0000\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    dailyCalArrayList.add(t);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (\"E\".equals(type)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            deadlineArrayList.clear();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (\"D\".equals(type)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            dailyCalArrayList.clear();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void buildDeadline() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        colOneYLayout -\u003d 50;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int plus \u003d 75;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Text header \u003d new Text();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        header.setText(\"Due today:\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        header.setY(colOneYLayout + 50);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        header.setX(colOneXLayout);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        groupRoot.getChildren().add(header);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (Task t : deadlineArrayList) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (counter \u003d\u003d  5) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            Rectangle rectangle \u003d new Rectangle(100, 50);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            rectangle.setFill(Color.ROSYBROWN);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            rectangle.setStroke(Color.BLACK);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            final StackPane stack \u003d new StackPane();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String tempText \u003d t.getDescription();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String tempId \u003d String.valueOf(t.getId());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (tempText.length() \u003e 15) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                tempText \u003d tempText.substring(0, 12) + \"...\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            final Text text \u003d new Text(\"Due: \" + t.getStringEndTime() + \"\\nID: [\" + tempId + \"]\\n \" + tempText);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            text.setFont(Font.font(\"Georgia Italic\", 12));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            text.setTextAlignment(TextAlignment.CENTER);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            stack.getChildren().addAll(rectangle, text);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            stack.setLayoutY(colOneYLayout + 25);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            stack.setLayoutX(colOneXLayout + plus);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            groupRoot.getChildren().add(stack);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            plus +\u003d 100;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            counter +\u003d 1;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        colOneYLayout +\u003d 100;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Call the require functions to create final state of timetable."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return scrollPane final object state"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ScrollPane buildTimeTable() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        setTime();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        genDateSLot();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        buildDeadline();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        genTimeSlot();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (int i \u003d startTime; i \u003c endTime; i++) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            drawScheduleSquare(i);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        sp.setContent(groupRoot);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return sp;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Check through the daily taskList to check if there\u0027s any event that starts before 8am or ends after 7pm"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * If there is, set startTime or EndTime to the detected time."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void setTime() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (Task task : dailyCalArrayList) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            int tempStartTime \u003d Integer.parseInt(task.getStringStartTime().substring(0, 2));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (tempStartTime \u003c startTime) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                startTime \u003d tempStartTime;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            int tempEndTime \u003d Integer.parseInt(task.getStringEndTime().substring(0, 2));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (tempEndTime \u003e endTime) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                endTime \u003d tempEndTime;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Generate the date to the displayed on top left column."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void genDateSLot() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Text date \u003d new Text();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        date.setText(dateToDisplay);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        date.setY(colOneYLayout);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        date.setX(colOneXLayout);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        colOneYLayout +\u003d 50;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        groupRoot.getChildren().add(date);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Caller function to generate all horizontal and vertical lines"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * for each time slot for daily View."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void genTimeSlot() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (int i \u003d 0; i \u003c clockTime.length; i++) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            makeASlot(i);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        makeHorizontalLines(horizontalLineCounter++);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        makeHeaderVerticalLines();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Caller function to generate a slot for each time range and fill the slot."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * With the logic below"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * 1. Generate only the the detected time range."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * 2. If time is AM or PM, display the time as e.g. 09:00 AM."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * 3. Draw the square for that slot."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * 4. If that time has an event, draw the square for the total event."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void makeASlot(int i) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int temp \u003d horizontalLineCounter;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (clockTime[i] \u003c startTime || clockTime[i] \u003e endTime) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (clockTime[i] \u003c 12) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            makeTimeAM(i);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            for (int x \u003d temp; x \u003c temp + 2; x++) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                makeHorizontalLines(x);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (x \u003d\u003d temp) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    storeScheduleAxis(clockTime[i]);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                horizontalLineCounter++;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            makeTimePM(i);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            for (int x \u003d temp; x \u003c temp + 2; x++) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                makeHorizontalLines(x);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (x \u003d\u003d temp) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    storeScheduleAxis(clockTime[i]);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                horizontalLineCounter++;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Create title for schedule depending on type of task Type."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return Final title to be display for each block on GUI"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String createTitle(Task t) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String blockTitle \u003d \"\";"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        /*if (t.getDescription().matches(\"(?i:.*lec.*)\")) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            blockTitle \u003d \"[Lecture]\\n\";"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (t.getDescription().matches(\"(?i:.*tut.*)\")) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            blockTitle \u003d \"[Tut]\\n\";"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (t.getDescription().matches(\"(?i:.*sect.*)\")) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            blockTitle \u003d \"[Sect]\\n\";"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (t.getDescription().matches(\"(?i:.*lab.*)\")) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            blockTitle \u003d \"[Lab]\\n\";"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (t.getDescription().matches(\"(?i:.*rt.*)\")) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            blockTitle \u003d \"[RT]\\n\";"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (t.getSymbol().equals(\"E\")) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            blockTitle \u003d \"[Event]\\n\";"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        /*if (t.getPriority().equals(Task.Priority.high)) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            blockTitle +\u003d \"[Priority: High]\\n\";"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (t.getPriority().equals(Task.Priority.medium)) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            blockTitle +\u003d \"[Priority: Medium]\\n\";"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            blockTitle +\u003d \"[Priority: Low]\\n\";"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        blockTitle +\u003d \"Time: \" + t.getStringStartTime() + \" - \" + t.getStringEndTime() + \"\\n\";"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        blockTitle +\u003d \"ID: [\" + t.getId() + \"]\\n\";"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String tempText \u003d t.getDescription();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (tempText.length() \u003e 15) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            tempText \u003d tempText.substring(0, 12) + \"...\";"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        blockTitle +\u003d tempText;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return blockTitle;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Create a square block of schedule depending on the duration of the event."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void drawScheduleSquare(int currentTime) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int eventCounter \u003d 0;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int hourInMin \u003d 60;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        double pixelBlock \u003d 100;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (Task task : dailyCalArrayList) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (eventCounter \u003c 5 \u0026\u0026 Integer.parseInt(task.getStringStartTime().substring(0, 2)) \u003d\u003d currentTime) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int startHour \u003d Integer.parseInt(task.getStringStartTime().substring(0, 2));"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int startMin \u003d Integer.parseInt(task.getStringStartTime().substring(2, 4));"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int endHour \u003d Integer.parseInt(task.getStringEndTime().substring(0, 2));"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int endMin \u003d Integer.parseInt(task.getStringEndTime().substring(2, 4));"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int totalHour;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int totalMin;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (endMin \u003e\u003d startMin) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    totalMin \u003d endMin - startMin;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    totalHour \u003d endHour - startHour;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    endHour--;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    totalMin \u003d endMin + hourInMin - startMin;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    totalHour \u003d endHour - startHour;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (totalHour \u003d\u003d 0 \u0026\u0026 totalMin \u003d\u003d 0) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                //Drawing a Rectangle"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                double heightY \u003d 1.7;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                double heightYMin \u003d heightY * totalMin;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                double heightYHour \u003d pixelBlock * totalHour;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                double combineY \u003d heightYHour + heightYMin;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (combineY \u003c 50) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    combineY \u003d 50;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                Rectangle rectangle \u003d new Rectangle(pixelBlock, combineY);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                rectangle.setFill(colorFill(task));"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                rectangle.setStroke(Color.BLACK);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                final StackPane stack \u003d new StackPane();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                final Text text \u003d new Text(createTitle(task));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                text.setFont(Font.font(\"Georgia Italic\", 12));"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                text.setTextAlignment(TextAlignment.CENTER);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                stack.getChildren().addAll(rectangle, text);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                while (storedXAxis[currentTime][eventCounter] \u003d\u003d 0) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    eventCounter++;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                stack.setLayoutX(storedXAxis[currentTime][eventCounter]);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                stack.setLayoutY(50 + storedYAxis[currentTime][eventCounter]);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                groupRoot.getChildren().add(stack);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                eventCounter++;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Set color of rectangle to depending on the scenario below."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private Color colorFill(Task t) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (t.getDescription().matches(\"(?i:.*lec.*)\")) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return Color.GOLDENROD;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (t.getDescription().matches(\"(?i:.*tut.*)\")) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return Color.DEEPPINK;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (t.getDescription().matches(\"(?i:.*sect.*)\")) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return Color.VIOLET;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (t.getDescription().matches(\"(?i:.*lab.*)\")) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return Color.INDIANRED;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (t.getPriority().equals(Task.Priority.medium)) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return Color.TOMATO;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (t.getPriority().equals(Task.Priority.high)) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return Color.RED;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return Color.LIGHTSALMON;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Store schedule axis of current time."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void storeScheduleAxis(int currentTime) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int eventCounter \u003d 0;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        double pixelBlock \u003d 100.00;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int hourInMin \u003d 60;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (Task task : dailyCalArrayList) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (Integer.parseInt(task.getStringStartTime().substring(0, 2)) \u003d\u003d currentTime \u0026\u0026 eventCounter \u003c 5) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int startHour \u003d Integer.parseInt(task.getStringStartTime().substring(0, 2));"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int startMin \u003d Integer.parseInt(task.getStringStartTime().substring(2, 4));"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int endHour \u003d Integer.parseInt(task.getStringEndTime().substring(0, 2));"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int endMin \u003d Integer.parseInt(task.getStringEndTime().substring(2, 4));"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int totalHour;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int totalMin;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (endMin \u003e\u003d startMin) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    totalMin \u003d endMin - startMin;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    totalHour \u003d endHour - startHour;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    endHour--;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    totalMin \u003d endMin + hourInMin - startMin;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    totalHour \u003d endHour - startHour;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (totalHour \u003d\u003d 0 \u0026\u0026 totalMin \u003d\u003d 0) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                double pxPerMin \u003d (pixelBlock / (double) hourInMin);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                double downPX \u003d pxPerMin * startMin;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                while (!canStore[currentTime][eventCounter]) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    eventCounter++;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (canStore[currentTime][eventCounter]) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    double layoutX \u003d getEventLayoutX(eventCounter);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    storedXAxis[currentTime][eventCounter] \u003d layoutX;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    storedYAxis[currentTime][eventCounter] \u003d horizontalYLayout + downPX - 50;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    int futureEndTime \u003d Integer.parseInt(task.getStringEndTime().substring(0, 2));"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    for (int futureTime \u003d currentTime; futureTime \u003c futureEndTime; futureTime++) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        canStore[futureTime][eventCounter] \u003d false;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                eventCounter +\u003d 1;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Get coordinates depending on which event it\u0027s being slotted into."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return integer coordinates of X-axis."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private int getEventLayoutX(int eventCounter) {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        switch (eventCounter) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return 200;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return 300;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return 400;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return 500;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return 100;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Set text to be displayed as AM."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param time of the event."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void makeTimeAM(int time) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        timeAM[time] \u003d new Text();"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String toStore \u003d clockTime[time] + \":00 am\";"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        timeAM[time].setText(toStore);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        timeAM[time].setY(colOneYLayout);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        timeAM[time].setX(colOneXLayout);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        colOneYLayout +\u003d 100;"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        groupRoot.getChildren().add(timeAM[time]);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Set text to be displayed as PM."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param time of the event."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void makeTimePM(int time) {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        timePM[time] \u003d new Text();"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String toStore \u003d clockTime[time] + \":00 PM\";"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        timePM[time].setText(toStore);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        timePM[time].setY(colOneYLayout);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        timePM[time].setX(colOneXLayout);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        colOneYLayout +\u003d 100;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        groupRoot.getChildren().add(timePM[time]);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Call function to draw horizontal Lines."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void makeHorizontalLines(int i) {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        drawHorizontalLines(i);"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Draw horizontal Lines."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void drawHorizontalLines(int i) {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        horizontalLines[i] \u003d new Line();"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        horizontalLines[i].setStartX(0);"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        horizontalLines[i].setStartY(0);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        horizontalLines[i].setEndX(600);"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        horizontalLines[i].setEndY(0);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        horizontalLines[i].setLayoutX(horizontalXLayout);"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        horizontalLines[i].setLayoutY(horizontalYLayout);"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        horizontalXLayout +\u003d 0;"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        horizontalYLayout +\u003d 50;"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        groupRoot.getChildren().add(horizontalLines[i]);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Draw vertical Lines."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void makeHeaderVerticalLines() {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        verticalLines[0] \u003d new Line();"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        verticalLines[0].setStartX(0);"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        verticalLines[0].setStartY(0);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        verticalLines[0].setEndX(0);"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        verticalLines[0].setEndY(horizontalYLayout);"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        double verticalXLayout \u003d 100;"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        verticalLines[0].setLayoutX(verticalXLayout);"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        double verticalYLayout \u003d 0;"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        verticalLines[0].setLayoutY(verticalYLayout);"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        groupRoot.getChildren().add(verticalLines[0]);"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 519
    }
  },
  {
    "path": "src/main/java/compal/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.LogicManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "//@@author SholihinK"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * Handles GUI."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * This is a JavaFXML Controller class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    //Class Properties/Variables"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private LogicManager logicManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private final UiUtil uiUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Main window constructor."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public MainWindow() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.logicManager \u003d new LogicManager();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.uiUtil \u003d new UiUtil();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Handles user input by sending it to the parser."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Called by the enter button inside MainWindow.fxml."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void handleUserInput() throws ParserException, CommandException, ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String cmd \u003d userInput.getText();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        uiUtil.clearPrimary();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        CommandResult cmdResult \u003d  logicManager.logicExecute(cmd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        uiUtil.printg(cmdResult.feedbackToUser);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 1,
      "SholihinK": 40,
      "jaedonkey": 5
    }
  },
  {
    "path": "src/main/java/compal/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * API of UI components."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void start(Stage stage);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 2,
      "SholihinK": 10,
      "jaedonkey": 1
    }
  },
  {
    "path": "src/main/java/compal/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "//@@author jaedonkey"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private UiUtil uiUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public UiManager(UiUtil uiUtil) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        this.uiUtil \u003d uiUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            fxmlLoader.setLocation(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            TabPane tabReference \u003d (TabPane) ap.getChildren().get(2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            uiUtil.setTabWindow(tabReference);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            //Create MainWindow Pane"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            VBox root \u003d new VBox();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            ScrollPane mainPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            mainPane.setContent(root);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            Tab mainTab \u003d new Tab();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            mainTab.setText(\"Main Window\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            mainTab.setContent(mainPane);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            tabReference.getTabs().add(0, mainTab);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            uiUtil.setMainWindow(mainPane);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            Scene s1 \u003d new Scene(ap);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            primaryStage.setScene(s1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            primaryStage.setTitle(\"ComPAL\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            primaryStage.setOpacity(1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            primaryStage.setResizable(false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            primaryStage.getIcons().add(new Image(getClass().getResourceAsStream(\"/icon.png\")));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            Label date \u003d (Label) ap.getChildren().get(4);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            Date d \u003d new Date();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            date.setText(\"Today\u0027s Date:\" + formatter.format(d));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            primaryStage.show();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 17,
      "jaedonkey": 53
    }
  },
  {
    "path": "src/main/java/compal/ui/UiUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.text.FontPosture;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.text.FontWeight;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * Represents userinterface."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class UiUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static ScrollPane mainWindow;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static TabPane tabWindow;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void setMainWindow(ScrollPane mainWindow) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        UiUtil.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void setTabWindow(TabPane tabWindow) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        UiUtil.tabWindow \u003d tabWindow;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    //@@author jaedonkey"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Converts the object into string form using toString()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * and prints it onto the GUI\u0027s primary display box."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @param text Input object received to be print on gui. Any object type can be used, as long as"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     *             it has a \u0027toString()\u0027 function defined."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public void printg(Object text) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        VBox vbox \u003d (VBox) mainWindow.getContent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        vbox.getChildren().addAll(getDialogLabel(\"COMPal says:\\n\" + text.toString()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    //@@author jaedonkey"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    //@@author jaedonkey"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Returns a label (node) with the text as text."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @param text Dialog text label received."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * @return Label (Node) with the text as text."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        Label label \u003d new Label(text);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        label.setFont(Font.font(\"verdana\", FontWeight.LIGHT, FontPosture.REGULAR, 15));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        label.setWrapText(true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        return label;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    //@@author jaedonkey"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    //@@author jaedonkey"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Clears the display viewport on the GUI."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     * Parser calls this function when it receives a \u0027clear\u0027 command."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public void clearPrimary() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        VBox vbox \u003d (VBox) mainWindow.getContent();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        vbox.getChildren().clear();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SholihinK": 26,
      "jaedonkey": 47
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "         maxWidth\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "         prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Cursor?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.effect.Bloom?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "\u003c?import javafx.scene.effect.Glow?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" prefHeight\u003d\"517.0\" prefWidth\u003d\"670.0\" style\u003d\"-fx-background-color: #a3cde3;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"compal.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"103.0\" layoutY\u003d\"63.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"42.0\" prefWidth\u003d\"547.0\" promptText\u003d\"Enter command here...\" style\u003d\"-fx-background-radius: 10 10 10 10;\" AnchorPane.rightAnchor\u003d\"19.799999999999955\" AnchorPane.topAnchor\u003d\"63.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"14.0\" layoutY\u003d\"64.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" opacity\u003d\"0.9\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: #cedae0; -fx-border-color: #cedae0; -fx-border-radius: 10 10 10 10;\" text\u003d\"Enter\" AnchorPane.leftAnchor\u003d\"14.0\" AnchorPane.topAnchor\u003d\"64.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                \u003cGlow level\u003d\"0.46\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        \u003cTabPane layoutX\u003d\"17.0\" layoutY\u003d\"136.0\" prefHeight\u003d\"352.0\" prefWidth\u003d\"634.0\" tabClosingPolicy\u003d\"UNAVAILABLE\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        \u003cLabel layoutX\u003d\"14.0\" layoutY\u003d\"118.0\" text\u003d\"Terminal\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        \u003cLabel fx:id\u003d\"date\" layoutX\u003d\"289.0\" layoutY\u003d\"118.0\" text\u003d\"Label\" textFill\u003d\"WHITE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        \u003cText fill\u003d\"WHITE\" layoutX\u003d\"256.0\" layoutY\u003d\"42.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"COMPal\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                \u003cFont size\u003d\"26.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        \u003c/Text\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ceffect\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cBloom threshold\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/effect\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccursor\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cCursor fx:constant\u003d\"OPEN_HAND\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/cursor\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 10,
      "jaedonkey": 9,
      "-": 18
    }
  },
  {
    "path": "src/test/java/compal/commons/CompalUtilsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "package compal.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "//@@author yueyeah"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "public class CompalUtilsTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void util_convertValidStringToDate_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testDateStr \u003d \"01/01/2019\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Date expectedDate \u003d new GregorianCalendar(2019, Calendar.JANUARY, 1).getTime();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Date testDate \u003d CompalUtils.stringToDate(testDateStr);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        assertEquals(expectedDate, testDate);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void util_convertValidDateToString_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Date testDate \u003d new GregorianCalendar(2019, Calendar.FEBRUARY, 1).getTime();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testDateStr \u003d CompalUtils.dateToString(testDate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String expectedDateStr \u003d \"01/02/2019\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        assertEquals(expectedDateStr, testDateStr);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void util_timeIsInSequence_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String startTime \u003d \"1800\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String endTime \u003d \"1900\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        boolean startTimeBeforeEndTime \u003d CompalUtils.isTimeInSequence(startTime, endTime);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        assertEquals(true, startTimeBeforeEndTime);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void util_incrementDateByCorrectNumberOfDays_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Date testDate \u003d new GregorianCalendar(2019, Calendar.MARCH, 15).getTime();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Date expectedDate \u003d new GregorianCalendar(2019, Calendar.MARCH, 22).getTime();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Date newtestDate \u003d CompalUtils.incrementDateByDays(testDate, 7);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        assertEquals(newtestDate, expectedDate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyeah": 44
    }
  },
  {
    "path": "src/test/java/compal/logic/command/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "//@@author SholihinK"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Asserts that the command is unsuccessful and the error message equals to the errorMessage."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static void assertCommandFailure(Command command,TaskList taskList, String expectedMessage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            command.commandExecute(taskList);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new AssertionError(\"CommandException not thrown.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 21
    }
  },
  {
    "path": "src/test/java/compal/logic/command/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.model.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.model.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import static compal.model.tasks.Task.Priority.high;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import static compal.model.tasks.Task.Priority.medium;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import static compal.logic.command.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "//@@author yueyeah"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListMain \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListDup \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private TaskList taskListMain \u003d new TaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private TaskList taskListDup \u003d new TaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.taskListMain.setArrList(taskArrListMain);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.taskListDup.setArrList(taskArrListDup);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Event testEvent \u003d new Event(\"Event 1\", medium, \"01/10/2019\", \"01/10/2019\", \"1400\", \"1500\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Deadline testDeadline \u003d new Deadline(\"Deadline 1\", high, \"01/10/2019\", \"1500\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        taskListMain.addTask(testEvent);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        taskListMain.addTask(testDeadline);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        taskListDup.addTask(testEvent);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        taskListDup.addTask(testDeadline);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void execute_invalidTaskID_fail() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        DeleteCommand testDeleteCommand \u003d new DeleteCommand(1000);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        assertCommandFailure(testDeleteCommand, taskListMain, DeleteCommand.MESSAGE_INVALID_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void execute_validTaskIdEvent_success() throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        DeleteCommand testDeleteCommand \u003d new DeleteCommand(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        CommandResult testCommandResult \u003d testDeleteCommand.commandExecute(taskListMain);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testString \u003d testCommandResult.feedbackToUser;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String expectedString \u003d \"The following task has been deleted: \\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        expectedString +\u003d taskListDup.getTaskById(0).toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Assertions.assertEquals(expectedString, testString);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void execute_validTaskIdDeadline_success() throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        DeleteCommand testDeleteCommand \u003d new DeleteCommand(1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        CommandResult testCommandResult \u003d testDeleteCommand.commandExecute(taskListMain);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testString \u003d testCommandResult.feedbackToUser;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String expectedString \u003d \"The following task has been deleted: \\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        expectedString +\u003d taskListDup.getTaskById(1).toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Assertions.assertEquals(expectedString, testString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyeah": 62
    }
  },
  {
    "path": "src/test/java/compal/logic/command/DoneCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.logic.command.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.logic.command.DoneCommand.MESSAGE_INVALID_ID;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.logic.command.DoneCommand.MESSAGE_INVALID_INPUT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.model.tasks.Task.Priority.high;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.model.tasks.Task.Priority.medium;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "//@@author SholihinK"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "class DoneCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListMain \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListDup \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private TaskList taskListMain \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private TaskList taskListDup \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @org.junit.jupiter.api.BeforeEach"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Event event1 \u003d new Event(\"Event 1\", medium, \"01/10/2019\", \"01/10/2019\", \"1400\", \"1500\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Deadline deadline1 \u003d new Deadline(\"Deadline 1\", high, \"01/10/2019\", \"1500\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(event1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        event1.markAsDone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(deadline1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        event1.markAsNotDone();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListDup.add(event1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListDup.add(deadline1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.taskListMain.setArrList(taskArrListMain);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.taskListDup.setArrList(taskArrListDup);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void execute_invalidTaskID_fail() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(1243134214, \"y\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertCommandFailure(doneCommand, taskListMain, MESSAGE_INVALID_ID);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void execute_invalidStatus_fail() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(0, \"wrong status here\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertCommandFailure(doneCommand, taskListMain, MESSAGE_INVALID_INPUT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void execute_done_success() throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String expected \u003d new DoneCommand(0, \"y\").commandExecute(taskListDup).feedbackToUser;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String tested \u003d done(taskListMain,0,\"y\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Assertions.assertEquals(expected, tested);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String done(TaskList taskList, int taskID, String status) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Task task \u003d taskList.getTaskById(taskID);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String finalString \u003d \"\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        final String COMMAND_PREFIX \u003d \"Noted. I have mark the below task as done: \\n\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        final String COMMAND_PREFIX2 \u003d \"Noted. I have mark the below task as not done: \\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (status.equalsIgnoreCase(\"y\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            task.markAsDone();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            finalString +\u003d COMMAND_PREFIX.concat(task.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (status.equalsIgnoreCase(\"n\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            task.markAsNotDone();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            finalString +\u003d COMMAND_PREFIX2.concat(task.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return finalString;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 83
    }
  },
  {
    "path": "src/test/java/compal/logic/command/EventCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.commons.CompalUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.model.tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "//@@author yueyeah"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "public class EventCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListMain \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListDup \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private TaskList taskListMain \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private TaskList taskListDup \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.taskListMain.setArrList(taskArrListMain);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.taskListDup.setArrList(taskArrListDup);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void createAndAddEvent_validNonTrailingTask_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testDescription \u003d \"CS2113T Exam\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testStartDateString \u003d \"23/11/2019\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Date testStartDate \u003d CompalUtils.stringToDate(testStartDateString);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        ArrayList\u003cString\u003e testStartDateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        testStartDateList.add(testStartDateString);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Task.Priority testPriority \u003d Task.Priority.low;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testStartTime \u003d \"1300\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testEndTime \u003d \"1500\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testFinalDateString \u003d \"23/11/2019\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        int testInterval \u003d 7;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        boolean testIsInOneDay \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        EventCommand testEventCommand \u003d new EventCommand(testDescription, testStartDateList, testPriority,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            testStartTime, testEndTime, testFinalDateString, testInterval);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testString \u003d testEventCommand.createAndAddEvent(testIsInOneDay, taskListMain, testStartDate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Event expectedEvent \u003d createExpectedEvent(testIsInOneDay, testDescription, testStartDateString, testPriority,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            testStartTime, testEndTime);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String addedHeader \u003d \"\\nThe following tasks were added: \\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String expectedString \u003d addedHeader.concat(expectedEvent.toString() + \"\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Assertions.assertEquals(expectedString, testString);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void createAndAddEvent_validTrailingTask_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testDescription \u003d \"CS2113T Study Session\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testStartDateString \u003d \"28/10/2019\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Date testStartDate \u003d CompalUtils.stringToDate(testStartDateString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        ArrayList\u003cString\u003e testStartDateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        testStartDateList.add(testStartDateString);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Task.Priority testPriority \u003d Task.Priority.low;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testStartTime \u003d \"2200\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testEndTime \u003d \"0200\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testFinalDateString \u003d \"28/10/2019\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        int testInterval \u003d 7;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        boolean testIsInOneDay \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        EventCommand testEventCommand \u003d new EventCommand(testDescription, testStartDateList, testPriority,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            testStartTime, testEndTime, testFinalDateString, testInterval);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testString \u003d testEventCommand.createAndAddEvent(testIsInOneDay, taskListMain, testStartDate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Event expectedEvent \u003d createExpectedEvent(testIsInOneDay, testDescription, testStartDateString, testPriority,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            testStartTime, testEndTime);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String addedHeader \u003d \"\\nThe following tasks were added: \\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String expectedString \u003d addedHeader.concat(expectedEvent.toString() + \"\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Assertions.assertEquals(expectedString, testString);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void commandExecute_validSingleTask_success() throws CommandException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testDescription \u003d \"CS2113T Exam\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testStartDateString \u003d \"23/11/2019\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Date testStartDate \u003d CompalUtils.stringToDate(testStartDateString);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        ArrayList\u003cString\u003e testStartDateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        testStartDateList.add(testStartDateString);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Task.Priority testPriority \u003d Task.Priority.low;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testStartTime \u003d \"1300\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testEndTime \u003d \"1500\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testFinalDateString \u003d \"23/11/2019\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Date testFinalDate \u003d CompalUtils.stringToDate(testFinalDateString);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        int testInterval \u003d 7;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        boolean testIsInOneDay \u003d true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        EventCommand testEventCommand \u003d new EventCommand(testDescription, testStartDateList, testPriority,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            testStartTime, testEndTime, testFinalDateString, testInterval);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        CommandResult testCommandResult \u003d testEventCommand.commandExecute(taskListMain);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testString \u003d testCommandResult.feedbackToUser;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String expectedString \u003d \"\\nThe following tasks were added: \\n\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        while (!testStartDate.after(testFinalDate)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            testStartDateString \u003d CompalUtils.dateToString(testStartDate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Event indivExpectedEvent \u003d createExpectedEvent(testIsInOneDay, testDescription, testStartDateString,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                testPriority, testStartTime, testEndTime);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            taskListDup.addTask(indivExpectedEvent);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            expectedString +\u003d indivExpectedEvent.toString() + \"\\n\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            testStartDate \u003d CompalUtils.incrementDateByDays(testStartDate, testInterval);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Assertions.assertEquals(expectedString, testString);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void commandExecute_validRecurringTask_success() throws CommandException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testDescription \u003d \"CS2113T Lecture\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testStartDateString \u003d \"10/10/2019\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Date testStartDate \u003d CompalUtils.stringToDate(testStartDateString);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        ArrayList\u003cString\u003e testStartDateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        testStartDateList.add(testStartDateString);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Task.Priority testPriority \u003d Task.Priority.low;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testStartTime \u003d \"1700\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testEndTime \u003d \"1800\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testFinalDateString \u003d \"01/01/2020\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Date testFinalDate \u003d CompalUtils.stringToDate(testFinalDateString);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        int testInterval \u003d 7;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        boolean testIsInOneDay \u003d true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        EventCommand testEventCommand \u003d new EventCommand(testDescription, testStartDateList, testPriority,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            testStartTime, testEndTime, testFinalDateString, testInterval);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        CommandResult testCommandResult \u003d testEventCommand.commandExecute(taskListMain);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testString \u003d testCommandResult.feedbackToUser;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String headerString \u003d \"\\nThe following tasks were added: \\n\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String expectedString \u003d \"\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        while (!testStartDate.after(testFinalDate)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            testStartDateString \u003d CompalUtils.dateToString(testStartDate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Event indivExpectedEvent \u003d createExpectedEvent(testIsInOneDay, testDescription, testStartDateString,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                testPriority, testStartTime, testEndTime);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            taskListDup.addTask(indivExpectedEvent);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            expectedString +\u003d headerString + indivExpectedEvent.toString() + \"\\n\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            testStartDate \u003d CompalUtils.incrementDateByDays(testStartDate, testInterval);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Assertions.assertEquals(expectedString, testString);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private Event createExpectedEvent(boolean isInOneDay, String testDescription, String testStartDateString,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                                      Task.Priority testPriority, String testStartTime, String testEndTime) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testTrailingDateString;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (isInOneDay) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            testTrailingDateString \u003d testStartDateString;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Date testStartDate \u003d CompalUtils.stringToDate(testStartDateString);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Date testTrailingDate \u003d CompalUtils.incrementDateByDays(testStartDate, 1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            testTrailingDateString \u003d CompalUtils.dateToString(testTrailingDate);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Event testEvent \u003d new Event(testDescription, testPriority, testStartDateString, testTrailingDateString,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            testStartTime, testEndTime);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        return testEvent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyeah": 153
    }
  },
  {
    "path": "src/test/java/compal/logic/command/ExportCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "//@@author SholihinK"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "class ExportCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListMain \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private TaskList taskListMain \u003d new TaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @org.junit.jupiter.api.BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Event event1 \u003d new Event(\"CS2105 Lecture\", Task.Priority.medium, \"01/10/2019\", \"01/10/2019\", \"1400\", \"1500\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        event1.markAsDone();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        event1.setHasReminder(true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(event1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Deadline deadline1 \u003d new Deadline(\"Deadline 1\", Task.Priority.high, \"03/10/2019\", \"1500\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        deadline1.markAsDone();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        deadline1.setHasReminder(true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(deadline1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.taskListMain.setArrList(taskArrListMain);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void execute_export_success() throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String filePathz \u003d new File(\"testExport1\").getAbsolutePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String filePath \u003d new File(\"testExport1.ics\").getAbsolutePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        new ExportCommand(filePathz).commandExecute(taskListMain);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        BufferedReader reader;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String testedString \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            reader \u003d new BufferedReader(new FileReader("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                filePath));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String line \u003d reader.readLine();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            while (line !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (line.contains(\"UID:\") || line.contains(\"DTSTAMP:\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    line \u003d reader.readLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                testedString +\u003d (line) + \"\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                line \u003d reader.readLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String expectedString \u003d \"BEGIN:VCALENDAR\\n\" + \"PRODID:-//Ben Fortuna//iCal4j 1.0//EN\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"VERSION:2.0\\n\" + \"CALSCALE:GREGORIAN\\n\" + \"BEGIN:VEVENT\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"SUMMARY:CS2105 Lecture\\n\" + \"DESCRIPTION: Priority:medium\\n\" + \"DTSTART:20191001T140000\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"DTEND:20191001T150000\\n\" + \"BEGIN:VALARM\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"TRIGGER;VALUE\u003dDATE-TIME:20191001T060000Z\\n\" + \"ACTION:DISPLAY\\n\" + \"DESCRIPTION:CS2105 Lecture\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"END:VALARM\\n\" + \"END:VEVENT\\n\" + \"BEGIN:VEVENT\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"SUMMARY:Deadline 1\\n\" + \"DESCRIPTION: Priority:high\\n\" + \"DTSTART:20191003T150000\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"DTEND:20191003T150000\\n\" + \"BEGIN:VALARM\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"TRIGGER;VALUE\u003dDATE-TIME:20191003T070000Z\\n\" + \"ACTION:DISPLAY\\n\" + \"DESCRIPTION:Deadline 1\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"END:VALARM\\n\" + \"END:VEVENT\\n\" + \"END:VCALENDAR\\n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Assertions.assertEquals(expectedString, testedString);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        File file \u003d new File(\"testExport1.ics\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        file.delete();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 78
    }
  },
  {
    "path": "src/test/java/compal/logic/command/FindFreeSlotCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import static compal.logic.command.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "//@@author Catherinetan99"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "public class FindFreeSlotCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @org.junit.jupiter.api.BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskList.setArrList(taskArrList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Event event1 \u003d new Event(\"Event 1\", Task.Priority.medium, \"05/01/2020\", \"05/01/2020\", \"0000\", \"0900\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskList.addTask(event1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Event event2 \u003d new Event(\"Event 2\", Task.Priority.high, \"05/01/2020\", \"05/01/2020\", \"1000\", \"1100\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskList.addTask(event2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Event event3 \u003d new Event(\"Event 3\", Task.Priority.low, \"05/01/2020\", \"05/01/2020\", \"1300\", \"1700\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskList.addTask(event3);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void execute_invalidDurationInput_exceptionThrown() throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String stringDate \u003d \"05/01/2020\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Date date \u003d new SimpleDateFormat(\"dd/MM/yyyy\").parse(stringDate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        FindFreeSlotCommand testFindFreeSlot \u003d new FindFreeSlotCommand(date, 1234, 1234);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertCommandFailure(testFindFreeSlot, taskList, FindFreeSlotCommand.MESSAGE_LIMIT_EXCEEDED);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void execute_findFreeSlotCommand_success() throws ParseException, ParserException, CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String stringDate \u003d \"05/01/2020\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Date date \u003d new SimpleDateFormat(\"dd/MM/yyyy\").parse(stringDate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        FindFreeSlotCommand testFindFreeSlot \u003d new FindFreeSlotCommand(date, 1, 0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        CommandResult testCommandResult \u003d testFindFreeSlot.commandExecute(taskList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String test;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        test \u003d testCommandResult.feedbackToUser;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        StringBuilder freeSlot \u003d new StringBuilder(\"Here are the available time slots for 05/01/2020:\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        freeSlot.append(\"1. 0900 to 1000\\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        freeSlot.append(\"2. 1100 to 1300\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        freeSlot.append(\"3. 1700 to 2400\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String expected \u003d freeSlot.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertEquals(expected, test);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void execute_findFreeSlotCommand_noSlotsFound() throws ParseException, ParserException, CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String stringDate \u003d \"05/01/2020\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Date date \u003d new SimpleDateFormat(\"dd/MM/yyyy\").parse(stringDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        FindFreeSlotCommand testFindFreeSlot \u003d new FindFreeSlotCommand(date, 8, 30);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        CommandResult testCommandResult \u003d testFindFreeSlot.commandExecute(taskList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String test \u003d testCommandResult.feedbackToUser;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String expected \u003d \"You have no available slots on 05/01/2020 ! :(\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertEquals(expected, test);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void execute_findFreeSlotCommand_noTasksOnInputDate() throws ParseException, ParserException, CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String stringDate \u003d \"06/12/2019\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Date date \u003d new SimpleDateFormat(\"dd/MM/yyyy\").parse(stringDate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        FindFreeSlotCommand testFindFreeSlot \u003d new FindFreeSlotCommand(date, 1, 30);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        CommandResult testCommandResult \u003d testFindFreeSlot.commandExecute(taskList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String test \u003d testCommandResult.feedbackToUser;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String expected \u003d \"Here are the available time slots for 06/12/2019:\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                + \"1. 0000 to 2400\\n\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertEquals(expected, test);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void execute_dateInputIsCurrentDate_success() throws CommandException, ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        calendar.set(Calendar.HOUR_OF_DAY, 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        calendar.set(Calendar.MINUTE, 0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        calendar.set(Calendar.SECOND, 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        calendar.set(Calendar.MILLISECOND, 0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Date currentDate \u003d calendar.getTime();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        FindFreeSlotCommand testFindFreeSlot \u003d new FindFreeSlotCommand(currentDate, 2, 30);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        CommandResult testCommandResult \u003d testFindFreeSlot.commandExecute(taskList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String test \u003d testCommandResult.feedbackToUser;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String stringDate \u003d \"05/01/2020\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Date date \u003d new SimpleDateFormat(\"dd/MM/yyyy\").parse(stringDate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String expected;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        if (currentDate.equals(date)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            expected \u003d (\"Here are the available time slots for 05/01/2020:\\n\").concat(\"1. 1700 to 2400\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            String printDate \u003d new SimpleDateFormat(\"dd/MM/yyyy\").format(currentDate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            expected \u003d \"Here are the available time slots for \" + printDate + \":\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                    + \"1. 0000 to 2400\\n\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertEquals(expected, test);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 117
    }
  },
  {
    "path": "src/test/java/compal/logic/command/ImportCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.logic.command.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.logic.command.ImportCommand.MESSAGE_FILE_NON_EXIST;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.logic.command.ImportCommand.MESSAGE_FILE_NON_ICS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "//@@author SholihinK"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "class ImportCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListMain \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListEmpty \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private TaskList taskListMain \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private TaskList taskListEmpty \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @org.junit.jupiter.api.BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Event event1 \u003d new Event(\"CS2105 Lecture\", Task.Priority.medium, \"01/10/2019\", \"01/10/2019\", \"1400\", \"1500\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        event1.markAsDone();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        event1.setHasReminder(true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(event1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Deadline deadline1 \u003d new Deadline(\"Deadline 1\", Task.Priority.high, \"03/10/2019\", \"1500\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        deadline1.markAsDone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        deadline1.setHasReminder(true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(deadline1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.taskListMain.setArrList(taskArrListMain);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.taskListEmpty.setArrList(taskArrListEmpty);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void execute_fileNonExist_fail() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        ImportCommand importCommand \u003d new ImportCommand(\"~?!@\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertCommandFailure(importCommand, taskListMain, MESSAGE_FILE_NON_EXIST);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void execute_NonIcsFile_fail() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String fileData \u003d \"fake ics\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        FileOutputStream fos;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            fos \u003d new FileOutputStream(\"fake.ics\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                fos.flush();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                fos.write(fileData.getBytes());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                fos.close();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        ImportCommand importCommand \u003d new ImportCommand(\"fake\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertCommandFailure(importCommand, taskListMain, MESSAGE_FILE_NON_ICS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        File file \u003d new File(\"fake.ics\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        file.delete();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void execute_import_success() throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        new ExportCommand(\"testExport\").commandExecute(taskListMain);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        CommandResult test \u003d new ImportCommand(\"testExport\").commandExecute(taskListEmpty);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String status \u003d \"\\u2718\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String expectedString \u003d \"I have successfully imported the given file!\\n\" + \"The results are below:\\n\" + \"\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"The following tasks were added: \\n\" + \"\\n\" + \" \\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"Task ID:0\\n\" + \"[E][\" + status + \"] CS2105 Lecture \\n\" + \"Date: 01/10/2019 \\n\" + \"Start Time: 1400 \\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"End Time: 1500 \\n\" + \"Priority: medium\\n\" + \"***************\\n\" + \"\\n\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"The following deadline were added: \\n\" + \"\\n\" + \" \\n\" + \"Task ID:1\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"[D][\" + status + \"] Deadline 1 \\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \"Date: 03/10/2019 \\n\" + \"End Time: 1500 \\n\" + \"Priority: high\\n\" + \"***************\\n\" + \"\\n\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String testedString \u003d test.feedbackToUser;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Assertions.assertEquals(expectedString, testedString);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        File file \u003d new File(\"testExport.ics\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        file.delete();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 93
    }
  },
  {
    "path": "src/test/java/compal/logic/command/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "//@@author SholihinK"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "class ListCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListMain \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListEmpty \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private TaskList taskListMain \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private TaskList taskListEmpty \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @org.junit.jupiter.api.BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Event event1 \u003d new Event(\"Event 1\", Task.Priority.medium, \"01/10/2019\", \"01/10/2019\", \"1400\", \"1500\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Event event2 \u003d new Event(\"Event 2\", Task.Priority.medium, \"01/10/2019\", \"01/10/2019\", \"1400\", \"1500\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        event2.markAsDone();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(event1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(event2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Deadline deadline1 \u003d new Deadline(\"Deadline 1\", Task.Priority.high, \"01/10/2019\", \"1500\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Deadline deadline2 \u003d new Deadline(\"Deadline 2\", Task.Priority.high, \"01/10/2019\", \"1500\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        deadline2.markAsDone();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(deadline1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(deadline2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.taskListMain.setArrList(taskArrListMain);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.taskListEmpty.setArrList(taskArrListEmpty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void execute_listDeadline_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String expected \u003d new ListCommand(\"deadline\").commandExecute(taskListMain).feedbackToUser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String tested \u003d listStub(taskListMain, \"D\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Assertions.assertEquals(expected, tested);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void execute_listEvent_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String expected \u003d new ListCommand(\"event\").commandExecute(taskListMain).feedbackToUser;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String tested \u003d listStub(taskListMain, \"E\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Assertions.assertEquals(expected, tested);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void execute_emptyList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String expected \u003d new ListCommand(\"deadline\").commandExecute(taskListEmpty).feedbackToUser;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String tested \u003d listStub(taskListEmpty, \"D\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Assertions.assertEquals(expected, tested);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String listStub(TaskList taskList, String type) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String listPrefix \u003d \"Here are the tasks in your list sorted by chronological order: \\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String prefixType \u003d \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (type.equals(\"D\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            prefixType \u003d \"deadline\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (type.equals(\"E\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            prefixType \u003d \"event\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String listPrefixTwo \u003d \"Here are the stored \" + prefixType + \" in your list:\\n\\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String listEmpty \u003d \"Looks like there is nothing to list for this command!\\n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        ArrayList\u003cTask\u003e toList \u003d taskList.getArrList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        StringBuilder finalList;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (type.isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            finalList \u003d new StringBuilder(listPrefix);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            finalList \u003d new StringBuilder(listPrefixTwo);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (Task t : toList) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (type.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                String taskString \u003d t.toString() + \"\\n\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                finalList.append(taskString);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (t.getSymbol().equals(type)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    String taskString \u003d t.toString() + \"\\n\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    finalList.append(taskString);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (finalList.toString().equals(listPrefixTwo)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            finalList \u003d new StringBuilder(listEmpty);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return finalList.toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 105
    }
  },
  {
    "path": "src/test/java/compal/logic/command/SetReminderCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import static compal.logic.command.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "//@@author Catherinetan99"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "public class SetReminderCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListMain \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListDup \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private TaskList taskListMain \u003d new TaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private TaskList taskListDup \u003d new TaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @org.junit.jupiter.api.BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListMain.setArrList(taskArrListMain);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListDup.setArrList(taskArrListDup);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Event event1 \u003d new Event(\"Event 1\", Task.Priority.medium, \"05/12/2019\", \"01/10/2019\", \"1400\", \"1500\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListMain.addTask(event1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListDup.addTask(event1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Deadline deadline1 \u003d new Deadline(\"Deadline 1\", Task.Priority.high, \"05/12/2019\", \"1500\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListMain.addTask(deadline1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListDup.addTask(deadline1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void execute_invalidTaskId_exceptionThrown() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        SetReminderCommand testSetReminder \u003d new SetReminderCommand(1000, \"Y\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertCommandFailure(testSetReminder, taskListMain, SetReminderCommand.MESSAGE_INVALID_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void execute_invalidTaskStatus_exceptionThrown() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        SetReminderCommand testSetReminder \u003d new SetReminderCommand(0, \"invalid\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertCommandFailure(testSetReminder, taskListMain, SetReminderCommand.MESSAGE_INVALID_STATUS_INPUT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void execute_setReminderTrue_success() throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        SetReminderCommand testSetReminder \u003d new SetReminderCommand(0, \"Y\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        CommandResult testCommandResult \u003d testSetReminder.commandExecute(taskListMain);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String testString \u003d testCommandResult.feedbackToUser;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String expectedString \u003d \"Noted. I have changed the reminder status of this task.\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        expectedString \u003d expectedString.concat(taskListDup.getTaskById(0).toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertEquals(expectedString, testString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void execute_setReminderFalse_success() throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        SetReminderCommand testSetReminder \u003d new SetReminderCommand(1, \"N\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        CommandResult testCommandResult \u003d testSetReminder.commandExecute(taskListMain);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String testString \u003d testCommandResult.feedbackToUser;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String expectedString \u003d \"Noted. I have changed the reminder status of this task.\\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        expectedString \u003d expectedString.concat(taskListDup.getTaskById(1).toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertEquals(expectedString, testString);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 73
    }
  },
  {
    "path": "src/test/java/compal/logic/command/ViewCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.CompalUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "//@@author SholihinK"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "class ViewCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListMain \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private TaskList taskListMain \u003d new TaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @org.junit.jupiter.api.BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Event event1 \u003d new Event(\"CS2105 Lecture\", Task.Priority.medium, \"01/10/2019\", \"01/10/2019\", \"1400\", \"1500\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        event1.markAsDone();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Event event2 \u003d new Event(\"CS2106 Tut\", Task.Priority.low, \"02/10/2019\", \"02/10/2019\", \"1400\", \"1500\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Event event3 \u003d new Event(\"CS2113T Lab\", Task.Priority.low, \"03/10/2019\", \"03/10/2019\", \"1400\", \"1500\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Event event4 \u003d new Event(\"CS2101 Sect\", Task.Priority.low, \"03/10/2019\", \"03/10/2019\", \"1400\", \"1500\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Event event5 \u003d new Event(\"CS2101 Sect\", Task.Priority.low, \"05/10/2019\", \"05/10/2019\", \"1400\", \"1500\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Event event6 \u003d new Event(\"CS2101 rt\", Task.Priority.low, \"06/10/2019\", \"06/10/2019\", \"1400\", \"1500\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(event1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(event2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(event3);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(event4);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(event5);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(event6);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Deadline deadline1 \u003d new Deadline(\"Deadline 1\", Task.Priority.high, \"03/10/2019\", \"1500\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        deadline1.markAsDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Deadline deadline2 \u003d new Deadline(\"CS2106 Assignment\", Task.Priority.low, \"04/10/2019\", \"1500\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Deadline deadline3 \u003d new Deadline(\"Deadline 3\", Task.Priority.high, \"05/10/2019\", \"1500\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Deadline deadline4 \u003d new Deadline(\"Deadline 4\", Task.Priority.high, \"05/10/2019\", \"1500\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(deadline1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(deadline2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(deadline3);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(deadline4);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskListMain.setArrList(taskArrListMain);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskListMain.sortTask(taskListMain.getArrList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void execute_viewWeek_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Calendar currentDay \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String finalDate \u003d CompalUtils.dateToString(currentDay.getTime());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String viewType \u003d \"week\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String expected;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String tested;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String type \u003d \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        expected \u003d new ViewCommand(viewType, finalDate).commandExecute(taskListMain).feedbackToUser;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        tested \u003d displayWeekViewStub(finalDate, taskArrListMain, type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Assertions.assertEquals(expected, tested);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        type \u003d \"D\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        finalDate \u003d \"01/10/2019\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        expected \u003d new ViewCommand(viewType, finalDate, \"deadline\").commandExecute(taskListMain).feedbackToUser;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        tested \u003d displayWeekViewStub(finalDate, taskArrListMain, type);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Assertions.assertEquals(expected, tested);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        type \u003d \"E\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        finalDate \u003d \"01/10/2019\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        expected \u003d new ViewCommand(viewType, finalDate, \"event\").commandExecute(taskListMain).feedbackToUser;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        tested \u003d displayWeekViewStub(finalDate, taskArrListMain, type);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Assertions.assertEquals(expected, tested);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void execute_viewMonth_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String date \u003d \"01/10/2019\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int month \u003d 10;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int year \u003d 2019;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String viewType \u003d \"month\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String expected;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String tested;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String type \u003d \"\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        expected \u003d new ViewCommand(viewType, date).commandExecute(taskListMain).feedbackToUser;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        tested \u003d displayMonthViewStub(month, year, taskArrListMain, type);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Assertions.assertEquals(expected, tested);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        type \u003d \"E\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        expected \u003d new ViewCommand(viewType, date, \"event\").commandExecute(taskListMain).feedbackToUser;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        tested \u003d displayMonthViewStub(month, year, taskArrListMain, type);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Assertions.assertEquals(expected, tested);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        type \u003d \"D\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        expected \u003d new ViewCommand(viewType, date, \"deadline\").commandExecute(taskListMain).feedbackToUser;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        tested \u003d displayMonthViewStub(month, year, taskArrListMain, type);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Assertions.assertEquals(expected, tested);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String displayMonthViewStub(int givenMonth, int givenYear, ArrayList\u003cTask\u003e currList, String type) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String[] months \u003d {\"\", \"January\", \"February\", \"March\", \"April\", \"May\", \"June\","
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        YearMonth yearMonthObject \u003d YearMonth.of(givenYear, givenMonth);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int days \u003d yearMonthObject.lengthOfMonth(); //28"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        StringBuilder monthlyTask \u003d new StringBuilder(\"Your monthly schedule for \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + months[givenMonth] + \" \" + givenYear + \" :\\n\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String tempDate;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String tempMonth;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String tempYear;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d days; i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (i \u003c\u003d 9) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                tempDate \u003d \"0\" + i;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                tempDate \u003d Integer.toString(i);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (givenMonth \u003c\u003d 9) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                tempMonth \u003d \"0\" + givenMonth;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                tempMonth \u003d Integer.toString(givenMonth);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            tempYear \u003d Integer.toString(givenYear);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            monthlyTask.append(displayDayViewStub(tempDate + \"/\" + tempMonth + \"/\" + tempYear, currList,type));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return monthlyTask.toString();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String displayWeekViewStub(String dateInput, ArrayList\u003cTask\u003e currList, String type) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        cal.setTime(CompalUtils.stringToDate(dateInput));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int daysInWeek \u003d 7;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String[] dates \u003d new String[daysInWeek];"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        StringBuilder[] dailyTask \u003d new StringBuilder[daysInWeek];"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (int i \u003d 0; i \u003c daysInWeek; i++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            dates[i] \u003d dateFormat.format(cal.getTime());//Date of Monday of current week"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            dailyTask[i] \u003d new StringBuilder();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            cal.add(Calendar.DATE, 1);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        StringBuilder weeklyTask \u003d new StringBuilder(\"Your weekly schedule from \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + dates[0] + \" to \" + dates[6] + \" :\\n\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (int i \u003d 0; i \u003c daysInWeek; i++) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            dailyTask[i].append(displayDayViewStub(dates[i], currList, type));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            weeklyTask.append(dailyTask[i]);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return weeklyTask.toString();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String displayDayViewStub(String dateInput, ArrayList\u003cTask\u003e currList, String type) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        StringBuilder allTask \u003d new StringBuilder();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (Task t : currList) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (!\"\".equals(type) \u0026\u0026 !t.getSymbol().equals(type)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (t.getStringMainDate().equals(dateInput)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                allTask.append(getAsStringViewStub(t));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } else if (!t.getStringTrailingDate().equals(\"-\") \u0026\u0026 t.getStringTrailingDate().equals(dateInput)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                allTask.append(getAsStringViewStub(t));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (allTask.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            allTask.append(\"\\n\\n\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Date givenDate \u003d CompalUtils.stringToDate(dateInput);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String dayOfWeek \u003d new SimpleDateFormat(\"EE\").format(givenDate);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String header \u003d \"\\n\" + \"_\".repeat(65) + \"\\n\""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            + \" \".repeat((92)) + dayOfWeek + \",\" + dateInput + \"\\n\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return header + allTask.toString();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private String getAsStringViewStub(Task t) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        StringBuilder taskDetails \u003d new StringBuilder();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String rightArrow \u003d \"\\u2192\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        boolean isDone \u003d t.getisDone();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String status;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            status \u003d \"\\u2713\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            status \u003d \"\\u274C\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String startTime \u003d \"-\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String endTime \u003d \"-\";"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (t.getSymbol().equals(\"E\")) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (t.getStringMainDate().equals(t.getStringTrailingDate())) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                startTime \u003d t.getStringStartTime();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                endTime \u003d t.getStringEndTime();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                startTime \u003d t.getStringStartTime();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                endTime \u003d \"2359\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (t.getSymbol().equals(\"D\")) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            endTime \u003d t.getStringEndTime();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (dateInput.equals(t.getStringMainDate())) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            //if date same"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (t.getStringMainDate().equals(t.getStringTrailingDate())) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                startTime \u003d t.getStringStartTime();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                endTime \u003d t.getStringEndTime();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                startTime \u003d t.getStringStartTime();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                endTime \u003d \"2359\";"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (dateInput.equals(t.getStringTrailingDate())) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (t.getStringMainDate().equals(t.getStringTrailingDate())) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                startTime \u003d t.getStringStartTime();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                endTime \u003d t.getStringEndTime();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                startTime \u003d \"0000\";"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                endTime \u003d t.getStringEndTime();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                System.out.println(startTime);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                System.out.println(endTime);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (\"-\".equals(startTime)) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            taskDetails.append(\"  Due: \").append(endTime)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                .append(\"\\n\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            taskDetails.append(\"  Time: \").append(startTime)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                .append(\" \").append(rightArrow)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                .append(\" \").append(endTime)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                .append(\"\\n\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int taskId \u003d t.getId();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Task.Priority priority \u003d t.getPriority();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskDetails"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            .append(\"  [Task ID:\").append(taskId).append(\"] \")"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            .append(\"[Priority:\").append(priority).append(\"]\\n\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String taskSymbol \u003d t.getSymbol();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String taskDescription \u003d t.getDescription();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskDetails.append(\"  [\").append(taskSymbol).append(\"] \")"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            .append(\"[\").append(status).append(\"] \")"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            .append(taskDescription).append(\"\\n\\n\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return taskDetails.toString();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 276
    }
  },
  {
    "path": "src/test/java/compal/logic/command/ViewReminderCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "package compal.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import static compal.logic.command.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "//@@author Catherinetan99"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "public class ViewReminderCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListMain \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListDup \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private TaskList taskListMain \u003d new TaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private TaskList taskListDup \u003d new TaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListMain.setArrList(taskArrListMain);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListDup.setArrList(taskArrListDup);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Event event1 \u003d new Event(\"Event 1\", Task.Priority.medium, \"26/10/2019\", \"26/10/2019\", \"1400\", \"1500\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListMain.addTask(event1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListDup.addTask(event1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Event event2 \u003d new Event(\"Event 2\", Task.Priority.high, \"05/12/2019\", \"05/12/2019\", \"0900\", \"1600\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        event2.setHasReminder(true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListMain.addTask(event2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListDup.addTask(event2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Deadline deadline1 \u003d new Deadline(\"Deadline 1\", Task.Priority.high, \"01/11/2019\", \"1500\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListMain.addTask(deadline1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListDup.addTask(deadline1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Deadline deadline2 \u003d new Deadline(\"Deadline 2\", Task.Priority.low, \"29/10/2019\", \"1400\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        deadline2.markAsDone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListMain.addTask(deadline2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListDup.addTask(deadline2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListMain.sortTask(taskListMain.getArrList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListDup.sortTask(taskListDup.getArrList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void execute_arrayListNotInitialised_exceptionThrown() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        ViewReminderCommand testViewReminder \u003d new ViewReminderCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertCommandFailure(testViewReminder, taskList, ViewReminderCommand.MESSAGE_UNABLE_TO_EXECUTE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void execute_viewReminderCommand_success() throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        ViewReminderCommand testViewReminder \u003d new ViewReminderCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        CommandResult testCommandResult \u003d testViewReminder.commandExecute(taskListMain);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String testString;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        testString \u003d testCommandResult.feedbackToUser;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String expectedString \u003d \"Here are your tasks:\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        expectedString \u003d expectedString.concat(taskListDup.getTaskById(0).toString() + \"\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        expectedString \u003d expectedString.concat(taskListDup.getTaskById(2).toString() + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        expectedString \u003d expectedString.concat(taskListDup.getTaskById(1).toString() + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertEquals(expectedString, testString);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 73
    }
  },
  {
    "path": "src/test/java/compal/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "//@@author SholihinK"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Asserts that the parsing of user input by  parserManager is successful and the command created"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * equals to expectedCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static void assertParseSuccess(CommandParser testCommandParser, String userInput,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                                   CommandResult expectedCommandResult, TaskList taskList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            Command testCommand \u003d testCommandParser.parseCommand(userInput);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            CommandResult testCommandResult \u003d testCommand.commandExecute(taskList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            assertEquals(expectedCommandResult.feedbackToUser, testCommandResult.feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } catch (ParserException | CommandException | ParseException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new IllegalArgumentException(e.getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Asserts that the parsing of user input by parser is unsuccessful and the error message"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * equals to the errorMessage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static void assertParseFailure(CommandParser parserManager, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            parserManager.parseCommand(userInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new AssertionError(\"ParserException was not thrown.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } catch (ParserException | ParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LTPZ": 2,
      "SholihinK": 40,
      "yueyeah": 1
    }
  },
  {
    "path": "src/test/java/compal/logic/parser/DeadlineCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.logic.command.DeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.model.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import static compal.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import static compal.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "//@@author LTPZ"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "public class DeadlineCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    private DeadlineCommandParser parser \u003d new DeadlineCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListMain \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListDup \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    private TaskList taskListMain \u003d new TaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    private TaskList taskListDup \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        this.taskListMain.setArrList(taskArrListMain);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        this.taskListDup.setArrList(taskArrListDup);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     * TESTS FOR INVALID INPUT BELOW."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parse_missingTokenDate_failure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseFailure(parser, \"CS2113T Exam \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/end 1500 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/priority high\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                CommandParser.MESSAGE_MISSING_DATE_ARG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parse_excessiveDatesAfterTokenDate_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseFailure(parser, \"CS2113T Lecture \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/date 10/10/2019 11/10/2019 12/10/2019 13/10/2019\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \" 14/10/2019 15/10/2019 16/10/2019 17/10/2019\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/end 1800\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/priority high\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                CommandParser.MESSAGE_EXCESSIVE_DATES);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parse_missingDateAfterTokenDate_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseFailure(parser, \"CS2113T Exam \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/date \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/end 1500 \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/priority high\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                CommandParser.MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parse_invalidDateFormatAfterTokenDate_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseFailure(parser, \"CS2113T Exam \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/date 2/5/2020 \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/end 1500 \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/priority low\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                CommandParser.MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parser_missingPriorityAfterTokenPriority_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseFailure(parser, \"CS2113T Exam \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/date 23/11/2019 \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/end 1500 \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/priority \","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                CommandParser.MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parser_missingTokenEndTime_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseFailure(parser, \"CS2113T Exam \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/date 23/11/2019 \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/priority high\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                CommandParser.MESSAGE_MISSING_END_TIME_ARG);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parser_missingEndTimeAfterTokenEndTimeInMiddleOfInput_failure() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseFailure(parser, \"CS2113T Exam \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/date 23/11/2019 \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/end \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/priority high\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                CommandParser.MESSAGE_INVALID_TIME_FORMAT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parser_missingEndTimeAfterTokenEndTimeAtEndOfInput_failure() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseFailure(parser, \"CS2113T Exam \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/date 23/11/2019 \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/priority high \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/end \","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                CommandParser.MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parser_missingAnyTokenAfterDescription_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseFailure(parser, \"\", CommandParser.MESSAGE_MISSING_TOKEN);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parser_missingDescriptionBeforeAnyToken_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseFailure(parser, \" /date 23/11/2019 \""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/end 1500 \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/priority high\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                CommandParser.MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parser_missingIntervalAfterTokenInterval_failure() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseFailure(parser, \"CS2113T Lecture \""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/date 10/11/2019 \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/end 1800 \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/priority high \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/interval\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                CommandParser.MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parser_missingFinalDateAfterTokenFinalDateInMiddleOfInput_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseFailure(parser, \"CS2113T Lecture\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/date 10/11/2019 \""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/final-date \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/end 1800 \","
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                CommandParser.MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parser_missingFinalDateAfterTokenFinalDateAtEndOfInput_failure() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseFailure(parser, \"CS2113T Lecture\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/date 10/11/2019 \""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/end 1800 \""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/final-date\","
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                CommandParser.MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parser_invalidFinalDateFormatAfterTokenFinalDate_failure() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseFailure(parser, \"CS2113T Lecture \""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/date 10/11/2019 \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/end 1800 \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/priority high \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/final-date 1/12/2019\","
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                CommandParser.MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parser_invalidFinalDateTime_failure() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseFailure(parser, \"CS2113T Lecture \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/date 10/11/2019 \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/end 1800 \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/priority high \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/final-date 01/11/2019\","
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                CommandParser.MESSAGE_INVALID_FINAL_TIME);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parser_invalidInterval_failure() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseFailure(parser, \"CS2113T Lecture \""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/date 10/11/2019 \""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/end 1800 \""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/priority high \""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/final-date 01/12/2019 \""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                        + \"/interval -1\","
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                CommandParser.MESSAGE_INVALID_INTERVAL);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     * TESTS FOR VALID INPUT BELOW."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parser_validDateStartTimeEndTime_success() throws CommandException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        String testDescription \u003d \"CS2113T Lecture\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        String testDateString \u003d  \"10/11/2019\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        ArrayList\u003cString\u003e testDateStringList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        testDateStringList.add(testDateString);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        String testFinalDateString \u003d \"10/11/2019\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        String testEndTime \u003d \"1800\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        Task.Priority testPriority \u003d Task.Priority.low;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        int testInterval \u003d 7;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        DeadlineCommand testDeadlineCommand \u003d new DeadlineCommand(testDescription, testPriority, testDateStringList,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                testEndTime, testFinalDateString, testInterval);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        String testDeadlineCommandParserInput \u003d testDescription + \" /date \" + testDateString"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                + \" /end \" + testEndTime;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseSuccess(parser, testDeadlineCommandParserInput, testDeadlineCommand.commandExecute(taskListDup),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                taskListMain);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parser_validMultipleDatesStartTimeEndTime_success() throws CommandException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        String testDescription \u003d \"CS2113T Lecture\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        String testFirstDateString \u003d \"10/11/2019\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        String testSecondDateString \u003d \"11/11/2019\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        ArrayList\u003cString\u003e testDateStringList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        testDateStringList.add(testFirstDateString);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        testDateStringList.add(testSecondDateString);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        String testFinalDateString \u003d \"11/11/2019\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        String testEndTime \u003d \"1800\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        Task.Priority testPriority \u003d Task.Priority.low;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        int testInterval \u003d 7;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        DeadlineCommand testDeadlineCommand \u003d new DeadlineCommand(testDescription, testPriority, testDateStringList,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                testEndTime, testFinalDateString, testInterval);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        String testDeadlineCommandParserInput \u003d testDescription + \" /date \" + testFirstDateString + \" \""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                + testSecondDateString + \" /end \" + testEndTime;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseSuccess(parser, testDeadlineCommandParserInput, testDeadlineCommand.commandExecute(taskListDup),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                taskListMain);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parser_validDateStartTimeEndTimePriority_success() throws CommandException {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        String testDescription \u003d \"CS2113T Lecture\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        String testDateString \u003d \"10/11/2019\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        ArrayList\u003cString\u003e testDateStringList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        testDateStringList.add(testDateString);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        String testFinalDateString \u003d \"10/11/2019\";"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        String testEndTime \u003d \"1800\";"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        String testPriorityString \u003d \"high\";"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        Task.Priority testPriority \u003d Task.Priority.valueOf(testPriorityString.toLowerCase());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        int testInterval \u003d 7;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        DeadlineCommand testDeadlineCommand \u003d new DeadlineCommand(testDescription, testPriority, testDateStringList,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                testEndTime, testFinalDateString, testInterval);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        String testDeadlineCommandParserInput \u003d testDescription + \" /date \" + testDateString"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                + \" /end \" + testEndTime + \" /priority \" + testPriorityString;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseSuccess(parser, testDeadlineCommandParserInput, testDeadlineCommand.commandExecute(taskListDup),"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                taskListMain);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parser_validDateStartTimeEndTimeFinalDate_success() throws CommandException {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        String testDescription \u003d \"CS2113T Lecture\";"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        String testDateString \u003d \"10/11/2019\";"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        ArrayList\u003cString\u003e testDateStringList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        testDateStringList.add(testDateString);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        String testFinalDateString \u003d \"01/01/2020\";"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        String testEndTime \u003d \"1800\";"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        int testInterval \u003d 7;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        Task.Priority testPriority \u003d Task.Priority.low;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        DeadlineCommand testDeadlineCommand \u003d new DeadlineCommand(testDescription, testPriority, testDateStringList,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                testEndTime, testFinalDateString, testInterval);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        String testDeadlineCommandParserInput \u003d testDescription + \" /date \" + testDateString"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                + \" /end \" + testEndTime + \" /final-date \" + testFinalDateString;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseSuccess(parser, testDeadlineCommandParserInput, testDeadlineCommand.commandExecute(taskListDup),"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                taskListMain);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parser_validDateStartTimeEndTimeFinalDateInterval_success() throws CommandException {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        String testDescription \u003d \"CS2113T Lecture\";"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        String testDateString \u003d \"10/11/2019\";"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        ArrayList\u003cString\u003e testDateStringList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        testDateStringList.add(testDateString);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        String testFinalDateString \u003d \"01/01/2020\";"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        String testEndTime \u003d \"1800\";"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        String testIntervalString \u003d \"9\";"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        int testInterval \u003d 9;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        Task.Priority testPriority \u003d Task.Priority.low;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        DeadlineCommand testDeadlineCommand \u003d new DeadlineCommand(testDescription, testPriority, testDateStringList,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                testEndTime, testFinalDateString, testInterval);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        String testDeadlineCommandParserInput \u003d testDescription + \" /date \" + testDateString"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                + \" /end \" + testEndTime + \" /final-date \" + testFinalDateString + \" /interval \" + testIntervalString;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseSuccess(parser, testDeadlineCommandParserInput, testDeadlineCommand.commandExecute(taskListDup),"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                taskListMain);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "LTPZ": 275
    }
  },
  {
    "path": "src/test/java/compal/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.logic.command.DeleteCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.model.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.model.tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import static compal.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import static compal.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "//@@author yueyeah"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListMain \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListDup \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private TaskList taskListMain \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private TaskList taskListDup \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.taskListMain.setArrList(taskArrListMain);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.taskListDup.setArrList(taskArrListDup);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Event testEvent \u003d new Event(\"Event 1\", Task.Priority.medium, \"01/10/2019\", \"01/10/2019\", \"1400\", \"1500\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Deadline testDeadline \u003d new Deadline(\"Deadline 1\", Task.Priority.high, \"01/10/2019\", \"1500\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.taskListDup.addTask(testEvent);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.taskListDup.addTask(testDeadline);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.taskListMain.addTask(testEvent);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.taskListMain.addTask(testDeadline);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void parse_missingIdToken_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        assertParseFailure(parser, \"0\", CommandParser.MESSAGE_MISSING_ID_ARG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void parse_validIdTokenEvent_success() throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        DeleteCommand expectedDeleteCommand \u003d new DeleteCommand(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        assertParseSuccess(parser, \"/id 0\", expectedDeleteCommand.commandExecute(taskListDup), taskListMain);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void parse_validIdTokenDeadline_success() throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        DeleteCommand expectedDeleteCommand \u003d new DeleteCommand(1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        assertParseSuccess(parser, \"/id 1\", expectedDeleteCommand.commandExecute(taskListDup), taskListMain);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyeah": 55
    }
  },
  {
    "path": "src/test/java/compal/logic/parser/DoneCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.DoneCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "//@@author SholihinK"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "class DoneCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private DoneCommandParser parser \u003d new DoneCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListMain \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListDup \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private TaskList taskListMain \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private TaskList taskListDup \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @org.junit.jupiter.api.BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Event event1 \u003d new Event(\"Event 1\", Task.Priority.medium, \"01/10/2019\", \"01/10/2019\", \"1400\", \"1500\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        event1.markAsNotDone();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(event1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Event event2 \u003d new Event(\"Event 2\", Task.Priority.low, \"01/10/2019\", \"01/10/2019\", \"1400\", \"1500\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(event2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Deadline deadline1 \u003d new Deadline(\"Deadline 1\", Task.Priority.high, \"01/10/2019\", \"1500\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(deadline1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListDup.add(event1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListDup.add(event2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListDup.add(deadline1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.taskListMain.setArrList(taskArrListMain);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.taskListDup.setArrList(taskArrListDup);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void parse_missingIdToken_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertParseFailure(parser, \"-1\", CommandParser.MESSAGE_MISSING_ID_ARG);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void parse_missingStatus_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertParseFailure(parser, \"/id 1\", CommandParser.MESSAGE_MISSING_STATUS_ARG);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void parse_validTokenAndID_undone_success() throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int id \u003d taskListMain.getArrList().get(0).getId();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertParseSuccess(parser, \"/id \" + id + \" /status n\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            new DoneCommand(0, \"n\").commandExecute(taskListDup), taskListMain);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 68
    }
  },
  {
    "path": "src/test/java/compal/logic/parser/EventCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.logic.command.EventCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import static compal.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "import static compal.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "//@@author yueyeah"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "public class EventCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private EventCommandParser parser \u003d new EventCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListMain \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListDup \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private TaskList taskListMain \u003d new TaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private TaskList taskListDup \u003d new TaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.taskListMain.setArrList(taskArrListMain);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        this.taskListDup.setArrList(taskArrListDup);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * TESTS FOR INVALID INPUT BELOW."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void parse_missingTokenDate_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        assertParseFailure(parser, \"CS2113T Exam \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/start 1300\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/end 1500 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/priority high\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                CommandParser.MESSAGE_MISSING_DATE_ARG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void parse_excessiveDatesAfterTokenDate_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        assertParseFailure(parser, \"CS2113T Lecture \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/date 10/10/2019 11/10/2019 12/10/2019 13/10/2019 14/10/2019 15/10/2019 16/10/2019 17/10/2019\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/start 1700\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/end 1800\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/priority high\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                CommandParser.MESSAGE_EXCESSIVE_DATES);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void parse_missingDateAfterTokenDate_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        assertParseFailure(parser, \"CS2113T Exam \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/date \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/start 1300 \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/end 1500 \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/priority high\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                CommandParser.MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void parse_invalidDateFormatAfterTokenDate_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        assertParseFailure(parser, \"CS2113T Exam \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/date 2/5/2020 \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/start 1300 \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/end 1500 \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/priority low\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                CommandParser.MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void parser_missingPriorityAfterTokenPriority_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        assertParseFailure(parser, \"CS2113T Exam \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/date 23/11/2019 \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/start 1300 \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/end 1500 \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/priority \","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                CommandParser.MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void parser_missingTokenStartTime_failure() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        assertParseFailure(parser, \"CS2113T Exam \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/date 23/11/2019 \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/end 1500 \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/priority high\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                CommandParser.MESSAGE_MISSING_START_TIME_ARG);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void parser_missingStartTimeAfterTokenStartTimeInMiddleOfInput_failure() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        assertParseFailure(parser, \"CS2113T Exam \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/date 23/11/2019 \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/start \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/end 1500 \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/priority high\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                CommandParser.MESSAGE_INVALID_TIME_FORMAT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void parser_missingStartTimeAfterTokenStartTimeAtEndOfInput_failure() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        assertParseFailure(parser, \"CS2113T Exam \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/date 23/11/2019 \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/end 1500 \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/priority high \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/start \","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                CommandParser.MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void parser_missingTokenEndTime_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        assertParseFailure(parser, \"CS2113T Exam \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/date 23/11/2019 \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/start 1300 \""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/priority high\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                CommandParser.MESSAGE_MISSING_END_TIME_ARG);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void parser_missingEndTimeAfterTokenEndTimeInMiddleOfInput_failure() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        assertParseFailure(parser, \"CS2113T Exam \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/date 23/11/2019 \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/start 1300 \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/end \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/priority high\","
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                CommandParser.MESSAGE_INVALID_TIME_FORMAT);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void parser_missingEndTimeAfterTokenEndTimeAtEndOfInput_failure() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        assertParseFailure(parser, \"CS2113T Exam \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/date 23/11/2019 \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/start 1300 \""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/priority high \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/end \","
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                CommandParser.MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void parser_missingAnyTokenAfterDescription_failure() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        assertParseFailure(parser, \"\", CommandParser.MESSAGE_MISSING_TOKEN);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void parser_missingDescriptionBeforeAnyToken_failure() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        assertParseFailure(parser, \" /date 23/11/2019 \""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/start 1300 \""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/end 1500 \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/priority high\","
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                CommandParser.MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void parser_missingIntervalAfterTokenInterval_failure() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        assertParseFailure(parser, \"CS2113T Lecture \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/date 10/11/2019 \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/start 1700 \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/end 1800 \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/priority high \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/interval\","
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                CommandParser.MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void parser_missingFinalDateAfterTokenFinalDateInMiddleOfInput_failure() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        assertParseFailure(parser, \"CS2113T Lecture\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/date 10/11/2019 \""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/final-date \""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/start 1700 \""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/end 1800 \","
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                CommandParser.MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void parser_missingFinalDateAfterTokenFinalDateAtEndOfInput_failure() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        assertParseFailure(parser, \"CS2113T Lecture\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/date 10/11/2019 \""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/start 1700 \""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/end 1800 \""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/final-date\","
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                CommandParser.MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void parser_invalidFinalDateFormatAfterTokenFinalDate_failure() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        assertParseFailure(parser, \"CS2113T Lecture \""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/date 10/11/2019 \""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/start 1700 \""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/end 1800 \""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/priority high \""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \"/final-date 1/12/2019\","
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                CommandParser.MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * TESTS FOR VALID INPUT BELOW."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void parser_validDateStartTimeEndTime_success() throws CommandException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testDescription \u003d \"CS2113T Lecture\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testDateString \u003d  \"10/11/2019\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        ArrayList\u003cString\u003e testDateStringList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        testDateStringList.add(testDateString);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testFinalDateString \u003d \"10/11/2019\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testStartTime \u003d \"1700\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testEndTime \u003d \"1800\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Task.Priority testPriority \u003d Task.Priority.low;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        int testInterval \u003d 7;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        EventCommand testEventCommand \u003d new EventCommand(testDescription, testDateStringList, testPriority,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                testStartTime, testEndTime, testFinalDateString, testInterval);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testEventCommandParserInput \u003d testDescription + \" /date \" + testDateString + \" /start \" + testStartTime"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \" /end \" + testEndTime;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        assertParseSuccess(parser, testEventCommandParserInput, testEventCommand.commandExecute(taskListDup),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                taskListMain);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void parser_validMultipleDatesStartTimeEndTime_success() throws CommandException {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testDescription \u003d \"CS2113T Lecture\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testFirstDateString \u003d \"10/11/2019\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testSecondDateString \u003d \"11/11/2019\";"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        ArrayList\u003cString\u003e testDateStringList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        testDateStringList.add(testFirstDateString);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        testDateStringList.add(testSecondDateString);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testFinalDateString \u003d \"11/11/2019\";"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testStartTime \u003d \"1700\";"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testEndTime \u003d \"1800\";"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Task.Priority testPriority \u003d Task.Priority.low;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        int testInterval \u003d 7;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        EventCommand testEventCommand \u003d new EventCommand(testDescription, testDateStringList, testPriority,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                testStartTime, testEndTime, testFinalDateString, testInterval);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testEventCommandParserInput \u003d testDescription + \" /date \" + testFirstDateString + \" \""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + testSecondDateString + \" /start \" + testStartTime + \" /end \" + testEndTime;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        assertParseSuccess(parser, testEventCommandParserInput, testEventCommand.commandExecute(taskListDup),"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                taskListMain);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void parser_validDateStartTimeEndTimePriority_success() throws CommandException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testDescription \u003d \"CS2113T Lecture\";"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testDateString \u003d \"10/11/2019\";"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        ArrayList\u003cString\u003e testDateStringList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        testDateStringList.add(testDateString);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testFinalDateString \u003d \"10/11/2019\";"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testStartTime \u003d \"1700\";"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testEndTime \u003d \"1800\";"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testPriorityString \u003d \"high\";"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Task.Priority testPriority \u003d Task.Priority.valueOf(testPriorityString.toLowerCase());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        int testInterval \u003d 7;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        EventCommand testEventCommand \u003d new EventCommand(testDescription, testDateStringList, testPriority,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                testStartTime, testEndTime, testFinalDateString, testInterval);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testEventCommandParserInput \u003d testDescription + \" /date \" + testDateString + \" /start \" + testStartTime"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \" /end \" + testEndTime + \" /priority \" + testPriorityString;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        assertParseSuccess(parser, testEventCommandParserInput, testEventCommand.commandExecute(taskListDup),"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                taskListMain);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void parser_validDateStartTimeEndTimeFinalDate_success() throws CommandException {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testDescription \u003d \"CS2113T Lecture\";"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testDateString \u003d \"10/11/2019\";"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        ArrayList\u003cString\u003e testDateStringList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        testDateStringList.add(testDateString);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testFinalDateString \u003d \"01/01/2020\";"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testStartTime \u003d \"1700\";"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testEndTime \u003d \"1800\";"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        int testInterval \u003d 7;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Task.Priority testPriority \u003d Task.Priority.low;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        EventCommand testEventCommand \u003d new EventCommand(testDescription, testDateStringList, testPriority,"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                testStartTime, testEndTime, testFinalDateString, testInterval);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testEventCommandParserInput \u003d testDescription + \" /date \" + testDateString + \" /start \" + testStartTime"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \" /end \" + testEndTime + \" /final-date \" + testFinalDateString;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        assertParseSuccess(parser, testEventCommandParserInput, testEventCommand.commandExecute(taskListDup),"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                taskListMain);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    void parser_validDateStartTimeEndTimeFinalDateInterval_success() throws CommandException {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testDescription \u003d \"CS2113T Lecture\";"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testDateString \u003d \"10/11/2019\";"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        ArrayList\u003cString\u003e testDateStringList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        testDateStringList.add(testDateString);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testFinalDateString \u003d \"01/01/2020\";"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testStartTime \u003d \"1700\";"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testEndTime \u003d \"1800\";"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testIntervalString \u003d \"9\";"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        int testInterval \u003d 9;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        Task.Priority testPriority \u003d Task.Priority.low;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        EventCommand testEventCommand \u003d new EventCommand(testDescription, testDateStringList, testPriority,"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                testStartTime, testEndTime, testFinalDateString, testInterval);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String testEventCommandParserInput \u003d testDescription + \" /date \" + testDateString + \" /start \" + testStartTime"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                + \" /end \" + testEndTime + \" /final-date \" + testFinalDateString + \" /interval \" + testIntervalString;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        assertParseSuccess(parser, testEventCommandParserInput, testEventCommand.commandExecute(taskListDup),"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                taskListMain);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yueyeah": 298
    }
  },
  {
    "path": "src/test/java/compal/logic/parser/ExportCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.ExportCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "//@@author SholihinK"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "class ExportCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ExportCommandParser parser \u003d new ExportCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListMain \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private TaskList taskListMain \u003d new TaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @org.junit.jupiter.api.BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Event event1 \u003d new Event(\"CS2105 Lecture\", Task.Priority.medium, \"01/10/2019\", \"01/10/2019\", \"1400\", \"1500\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        event1.markAsDone();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Event event2 \u003d new Event(\"CS2106 Tut\", Task.Priority.low, \"02/10/2019\", \"02/10/2019\", \"1400\", \"1500\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Event event3 \u003d new Event(\"CS2113T Lab\", Task.Priority.low, \"03/10/2019\", \"03/10/2019\", \"1400\", \"1500\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Event event4 \u003d new Event(\"CS2101 Sect\", Task.Priority.low, \"03/10/2019\", \"03/10/2019\", \"1400\", \"1500\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Event event5 \u003d new Event(\"CS2101 Sect\", Task.Priority.low, \"05/10/2019\", \"05/10/2019\", \"1400\", \"1500\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Event event6 \u003d new Event(\"CS2101 rt\", Task.Priority.low, \"06/10/2019\", \"06/10/2019\", \"1400\", \"1500\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(event1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(event2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(event3);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(event4);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(event5);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(event6);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Deadline deadline1 \u003d new Deadline(\"Deadline 1\", Task.Priority.high, \"03/10/2019\", \"1500\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        deadline1.markAsDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Deadline deadline2 \u003d new Deadline(\"CS2106 Assignment\", Task.Priority.low, \"04/10/2019\", \"1500\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Deadline deadline3 \u003d new Deadline(\"Deadline 3\", Task.Priority.high, \"05/10/2019\", \"1500\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Deadline deadline4 \u003d new Deadline(\"Deadline 4\", Task.Priority.high, \"05/10/2019\", \"1500\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(deadline1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(deadline2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(deadline3);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(deadline4);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.taskListMain.setArrList(taskArrListMain);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void parse_invalidParam_fail() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertParseFailure(parser, \"\", CommandParser.MESSAGE_MISSING_FILE_NAME_ARG);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertParseFailure(parser, \"/file-name\", CommandParser.MESSAGE_MISSING_FILE_NAME);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void parse_export_success() throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertParseSuccess(parser, \"/file-name COMPalCalender\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            new ExportCommand(\"COMPalCalender\").commandExecute(taskListMain), taskListMain);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        File file \u003d new File(\"COMPalCalender.ics\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        file.delete();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 68
    }
  },
  {
    "path": "src/test/java/compal/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.logic.command.FindCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import compal.storage.TaskStorageManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "import static compal.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        TaskStorageManager taskStorageManager \u003d new TaskStorageManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        ArrayList\u003cTask\u003e taskArrList \u003d new ArrayList\u003c\u003e(taskStorageManager.loadData());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        taskList.setArrList(taskArrList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parse_correct() throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        assertParseSuccess(parser,\"\", new FindCommand(\"\").commandExecute(taskList),taskList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LTPZ": 2,
      "jaedonkey": 33
    }
  },
  {
    "path": "src/test/java/compal/logic/parser/FindFreeSlotCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import static compal.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "//@@author Catherinetan99"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "public class FindFreeSlotCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private FindFreeSlotCommandParser parser \u003d new FindFreeSlotCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @org.junit.jupiter.api.BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskList.setArrList(taskArrList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Event event1 \u003d new Event(\"Event 1\", Task.Priority.medium, \"05/12/2020\", \"05/12/2020\", \"0000\", \"0800\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskList.addTask(event1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Event event2 \u003d new Event(\"Event 2\", Task.Priority.high, \"05/12/2020\", \"05/12/2020\", \"0900\", \"1600\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskList.addTask(event2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Event event3 \u003d new Event(\"Event 3\", Task.Priority.low, \"05/12/2020\", \"05/12/2020\", \"1000\", \"1200\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskList.addTask(event3);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void parser_missingDateToken_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertParseFailure(parser, \"\", \"ArgumentError: Missing /date\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void parser_missingHourToken_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertParseFailure(parser, \"/date 10/12/2020\", \"ArgumentError: Missing /hour\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void parser_missingMinToken_exceptionThrown() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertParseFailure(parser, \"/date 10/12/2020 /hour 5\", \"ArgumentError: Missing /min\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void parser_missingDateInput_exceptionThrown() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertParseFailure(parser, \"/date\", \"Error: Missing input!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void parser_missingHourInput_exceptionThrown() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertParseFailure(parser, \"/date 26/12/2020 /hour\", \"Error: Missing input!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void parser_missingMinInput_exceptionThrown() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertParseFailure(parser, \"/date 26/12/2020 /hour 5 /min\", \"Error: Missing input!\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void parser_invalidDateInput_exceptionThrown() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertParseFailure(parser, \"/date 26-10-20\", \"Invalid Date input!\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void parser_invalidHourInput_exceptionThrown() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertParseFailure(parser, \"/date 26/12/2020 /hour invalid\", \"Invalid hour input!\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void parser_invalidMinInput_exceptionThrown() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertParseFailure(parser, \"/date 26/12/2020 /hour 1 /min abc\", \"Invalid min input!\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void parser_exceededHourInput_exceptionThrown() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertParseFailure(parser, \"/date 26/12/2020 /hour 234567897891 /min 30\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                \"Error: Input entered is out of range!\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void parser_exceededMinInput_exceptionThrown() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertParseFailure(parser, \"/date 26/12/2020 /hour 1 /min 123456789045\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                \"Error: Input entered is out of range!\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void parser_pastDateInput_exceptionThrown() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertParseFailure(parser, \"/date 26/10/2018 /hour 1 /min 1\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                \"Error: Date entered cannot be a past date!\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void parser_findFreeSlotParser_success() throws ParseException, ParserException, CommandException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String testInput \u003d \"/date 05/12/2020 /hour 1 /min 0\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        StringBuilder freeSlot \u003d new StringBuilder(\"Here are the available time slots for 05/12/2020:\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        freeSlot.append(\"1. 0800 to 0900\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        freeSlot.append(\"2. 1600 to 2400\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String result \u003d freeSlot.toString();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertEquals(result, parser.parseCommand(testInput).commandExecute(taskList).feedbackToUser);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void parser_findFreeSlotParser_noSlotsFound() throws ParseException, ParserException, CommandException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String testInput \u003d \"/date 05/12/2020 /hour 10 /min 0\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String freeSlot \u003d \"You have no available slots on 05/12/2020 ! :(\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertEquals(freeSlot, parser.parseCommand(testInput).commandExecute(taskList).feedbackToUser);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void parser_findFreeSlotParser_noTasksOnInputDate() throws ParseException, ParserException, CommandException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String testInput \u003d \"/date 06/12/2020 /hour 1 /min 30\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        StringBuilder freeSlot \u003d new StringBuilder(\"Here are the available time slots for 06/12/2020:\\n\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        freeSlot.append(\"1. 0000 to 2400\\n\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String result \u003d freeSlot.toString();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertEquals(result, parser.parseCommand(testInput).commandExecute(taskList).feedbackToUser);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 125
    }
  },
  {
    "path": "src/test/java/compal/logic/parser/HelpCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.logic.command.HelpCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import compal.storage.TaskStorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "import static compal.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "//@@author LTPZ"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "public class HelpCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    private HelpCommandParser parser \u003d new HelpCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    private TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_EXIT \u003d \"bye\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_VIEW \u003d \"view\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_SET_REMINDER \u003d \"set-reminder\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_VIEW_REMINDER \u003d \"view-reminder\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_IMPORT \u003d \"import\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_EXPORT \u003d \"export\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_HELP \u003d \"help\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_FIND_FREE_SLOT \u003d \"findfreeslot\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    public static final String CMD_EDIT \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        TaskStorageManager taskStorageManager \u003d new TaskStorageManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        ArrayList\u003cTask\u003e taskArrList \u003d new ArrayList\u003c\u003e(taskStorageManager.loadData());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        taskList.setArrList(taskArrList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parse_correct() throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseSuccess(parser,\"trash_\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                new HelpCommand(\"trash_\").commandExecute(taskList),taskList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parse_correct_cmd_exit() throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseSuccess(parser,\"help_\" + CMD_EXIT,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                new HelpCommand(\"help_\" + CMD_EXIT).commandExecute(taskList),taskList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parse_correct_help() throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseSuccess(parser,\"help_\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                new HelpCommand(\"help_\").commandExecute(taskList),taskList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parse_correct_cmd_list() throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseSuccess(parser,\"help_\" + CMD_LIST,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                new HelpCommand(\"help_\" + CMD_LIST).commandExecute(taskList),taskList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parse_correct_cmd_done() throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseSuccess(parser,\"help_\" + CMD_DONE,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                new HelpCommand(\"help_\" + CMD_DONE).commandExecute(taskList),taskList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parse_correct_cmd_delete() throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseSuccess(parser,\"help_\" + CMD_DELETE,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                new HelpCommand(\"help_\" + CMD_DELETE).commandExecute(taskList),taskList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parse_correct_cmd_event() throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseSuccess(parser,\"help_\" + CMD_EVENT,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                new HelpCommand(\"help_\" + CMD_EVENT).commandExecute(taskList),taskList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parse_correct_cmd_import() throws CommandException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseSuccess(parser,\"help_\" + CMD_IMPORT,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                new HelpCommand(\"help_\" + CMD_IMPORT).commandExecute(taskList),taskList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parse_correct_cmd_export() throws CommandException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseSuccess(parser,\"help_\" + CMD_EXPORT,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                new HelpCommand(\"help_\" + CMD_EXPORT).commandExecute(taskList),taskList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parse_correct_cmd_view() throws CommandException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseSuccess(parser,\"help_\" + CMD_VIEW,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                new HelpCommand(\"help_\" + CMD_VIEW).commandExecute(taskList),taskList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parse_correct_cmd_find() throws CommandException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseSuccess(parser,\"help_\" + CMD_FIND,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                new HelpCommand(\"help_\" + CMD_FIND).commandExecute(taskList),taskList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parse_correct_cmd_set_reminder() throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseSuccess(parser,\"help_\" + CMD_SET_REMINDER,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                new HelpCommand(\"help_\" + CMD_SET_REMINDER).commandExecute(taskList),taskList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parse_correct_cmd_view_reminder() throws CommandException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseSuccess(parser,\"help_\" + CMD_VIEW_REMINDER,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                new HelpCommand(\"help_\" + CMD_VIEW_REMINDER).commandExecute(taskList),taskList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parse_correct_cmd_deadline() throws CommandException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseSuccess(parser,\"help_\" + CMD_DEADLINE,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                new HelpCommand(\"help_\" + CMD_DEADLINE).commandExecute(taskList),taskList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parse_correct_cmd_help() throws CommandException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseSuccess(parser,\"help_\" + CMD_HELP,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                new HelpCommand(\"help_\" + CMD_HELP).commandExecute(taskList),taskList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parse_correct_cmd_find_free_slot() throws CommandException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseSuccess(parser,\"help_\" + CMD_FIND_FREE_SLOT,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                new HelpCommand(\"help_\" + CMD_FIND_FREE_SLOT).commandExecute(taskList),taskList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "LTPZ"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    void parse_correct_cmd_edit() throws CommandException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "        assertParseSuccess(parser,\"help_\" + CMD_EDIT,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "                new HelpCommand(\"help_\" + CMD_EDIT).commandExecute(taskList),taskList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "LTPZ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "LTPZ": 146
    }
  },
  {
    "path": "src/test/java/compal/logic/parser/ImportCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "//@@author SholihinK"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "class ImportCommandParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void parse_invalidParam_fail() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertParseFailure(parser, \"\", CommandParser.MESSAGE_MISSING_FILE_NAME_ARG);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertParseFailure(parser, \"/file-name\", CommandParser.MESSAGE_MISSING_FILE_NAME);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 17
    }
  },
  {
    "path": "src/test/java/compal/logic/parser/ListCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.ListCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.model.tasks.Task.Priority.high;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.model.tasks.Task.Priority.medium;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.model.tasks.Task.Priority.low;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "//@@author SholihinK"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "class ListCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ListCommandParser parser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListMain \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListDup \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private TaskList taskListMain \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private TaskList taskListDup \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @org.junit.jupiter.api.BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Event event1 \u003d new Event(\"Event 1\", medium, \"01/10/2019\", \"01/10/2019\", \"1400\", \"1500\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(event1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListDup.add(event1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Deadline deadline1 \u003d new Deadline(\"Deadline 1\", high, \"01/10/2019\", \"1500\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(deadline1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListDup.add(deadline1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.taskListMain.setArrList(taskArrListMain);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.taskListDup.setArrList(taskArrListDup);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void parse_emptyType_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertParseSuccess(parser, \"\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            new ListCommand(\"\").commandExecute(taskListDup), taskListMain);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void parse_withType_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertParseSuccess(parser, \"/type event\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            new ListCommand(\"event\").commandExecute(taskListDup), taskListMain);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 52
    }
  },
  {
    "path": "src/test/java/compal/logic/parser/SetReminderCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import static compal.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "//@@author Catherinetan99"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "public class SetReminderCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private SetReminderCommandParser parser \u003d new SetReminderCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListMain \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListDup \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private TaskList taskListMain \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private TaskList taskListDup \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListMain.setArrList(taskArrListMain);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListDup.setArrList(taskArrListDup);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Event event1 \u003d new Event(\"Event 1\", Task.Priority.medium, \"26/12/2019\", \"26/12/2019\", \"1400\", \"1500\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListMain.addTask(event1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListDup.addTask(event1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Deadline deadline1 \u003d new Deadline(\"Deadline 1\", Task.Priority.high, \"05/12/2019\", \"1500\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListMain.addTask(deadline1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListDup.addTask(deadline1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void parser_missingIdToken_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertParseFailure(parser, \"\", \"ArgumentError: Missing /id\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void parser_missingStatusToken_exceptionThrown() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertParseFailure(parser, \"/id 3\", \"ArgumentError: Missing /status\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void parser_missingIdInput_exceptionThrown() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertParseFailure(parser, \"/id\", \"Error: Missing input!\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void parser_missingStatusInput_exceptionThrown() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertParseFailure(parser, \"/id 3 /status\", \"Error: Missing input!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void parser_setHasReminderTrue_success() throws CommandException, ParserException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String testInput \u003d \"/id 0 /status Y\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String taskReminder \u003d \"Noted. I have changed the reminder status of this task.\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskReminder \u003d taskReminder.concat(taskListDup.getTaskById(0).toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertEquals(taskReminder, parser.parseCommand(testInput).commandExecute(taskListMain).feedbackToUser);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void parser_setHasReminderFalse_success() throws ParserException, CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String testInput \u003d \"/id 1 /status N\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String taskReminder \u003d \"Noted. I have changed the reminder status of this task.\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskReminder \u003d taskReminder.concat(taskListDup.getTaskById(1).toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        assertEquals(taskReminder, parser.parseCommand(testInput).commandExecute(taskListMain).feedbackToUser);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 80
    }
  },
  {
    "path": "src/test/java/compal/logic/parser/ViewCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.CompalUtils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.ViewCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.logic.parser.CommandParser.MESSAGE_INVALID_DATE_FORMAT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.logic.parser.CommandParser.MESSAGE_MISSING_INPUT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.logic.parser.CommandParser.MESSAGE_MISSING_TOKEN;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.logic.parser.ViewCommandParser.MESSAGE_INVALID_PARAM;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "//@@author SholihinK"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "class ViewCommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ViewCommandParser parser \u003d new ViewCommandParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListMain \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListDup \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private TaskList taskListMain \u003d new TaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private TaskList taskListDup \u003d new TaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @org.junit.jupiter.api.BeforeEach"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Event event1 \u003d new Event(\"Event 1\", Task.Priority.medium, \"01/10/2019\", \"01/10/2019\", \"1400\", \"1500\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Event event2 \u003d new Event(\"Event 2\", Task.Priority.low, \"01/10/2019\", \"01/10/2019\", \"1400\", \"1500\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Deadline deadline1 \u003d new Deadline(\"Deadline 1\", Task.Priority.high, \"01/10/2019\", \"1500\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(event1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(event2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListMain.add(deadline1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListDup.add(event1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListDup.add(event2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        taskArrListDup.add(deadline1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.taskListMain.setArrList(taskArrListMain);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.taskListDup.setArrList(taskArrListDup);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void parse_invalidDate_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertParseFailure(parser, \"day /date 30/02/2019\", MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void parse_invalidParam_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertParseFailure(parser, \"years /date 29/02/2020\", MESSAGE_INVALID_PARAM);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertParseFailure(parser, \"months /date 29/02/2020\", MESSAGE_INVALID_PARAM);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void parse_missingDate_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertParseFailure(parser, \"day /date\", MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void parse_missingToken_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_MISSING_TOKEN);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void parse_CorrectDate_success() throws ParserException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        boolean execute \u003d parser.isDateValid(\"10/10/2010\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertEquals(execute, true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void parse_view_success() throws CommandException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String cmdParam \u003d \"week /date 23/10/2019\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertParseSuccess(parser, cmdParam,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            new ViewCommand(\"week\", \"23/10/2019\").commandExecute(taskListMain), taskListMain);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void parse_withoutDate_success() throws CommandException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String cmdParam \u003d \"week\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Calendar currentDay \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String finalDate \u003d CompalUtils.dateToString(currentDay.getTime());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertParseSuccess(parser, cmdParam,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            new ViewCommand(\"week\", finalDate).commandExecute(taskListMain), taskListMain);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void parse_withType_success() throws CommandException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String cmdParam \u003d \"week /type deadline\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Calendar currentDay \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String finalDate \u003d CompalUtils.dateToString(currentDay.getTime());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertParseSuccess(parser, cmdParam,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            new ViewCommand(\"week\", finalDate, \"deadline\")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                .commandExecute(taskListMain), taskListMain);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void parse_fullDeadline_success() throws CommandException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String cmdParam \u003d \"week /date 01/10/2019 /type deadline\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertParseSuccess(parser, cmdParam,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            new ViewCommand(\"week\", \"01/10/2019\", \"deadline\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                .commandExecute(taskListMain), taskListMain);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    void parse_fullEvent_success() throws CommandException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String cmdParam \u003d \"week /date 01/10/2019 /type event\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertParseSuccess(parser, cmdParam,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            new ViewCommand(\"week\", \"01/10/2019\", \"event\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                .commandExecute(taskListMain), taskListMain);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 127
    }
  },
  {
    "path": "src/test/java/compal/logic/parser/ViewReminderCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.logic.command.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.logic.parser.exceptions.ParserException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import compal.model.tasks.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "//@@author Catherinetan99"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "public class ViewReminderCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private ViewReminderCommandParser parser \u003d new ViewReminderCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListMain \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private ArrayList\u003cTask\u003e taskArrListDup \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private TaskList taskListMain \u003d new TaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    private TaskList taskListDup \u003d new TaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListMain.setArrList(taskArrListMain);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListDup.setArrList(taskArrListDup);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Event event1 \u003d new Event(\"Event 1\", Task.Priority.medium, \"26/10/2019\", \"26/10/2019\", \"1400\", \"1500\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListMain.addTask(event1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListDup.addTask(event1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Event event2 \u003d new Event(\"Event 2\", Task.Priority.high, \"05/12/2019\", \"05/12/2019\", \"0900\", \"1600\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        event2.setHasReminder(true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListMain.addTask(event2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListDup.addTask(event2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Deadline deadline1 \u003d new Deadline(\"Deadline 1\", Task.Priority.high, \"01/11/2019\", \"1500\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListMain.addTask(deadline1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListDup.addTask(deadline1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        Deadline deadline2 \u003d new Deadline(\"Deadline 2\", Task.Priority.low, \"29/10/2019\", \"1400\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        deadline2.markAsDone();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListMain.addTask(deadline2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListDup.addTask(deadline2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListMain.sortTask(taskListMain.getArrList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskListDup.sortTask(taskListDup.getArrList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    void parser_viewReminderParser_success() throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        StringBuilder taskReminder \u003d new StringBuilder(\"Here are your tasks:\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String event1TaskString \u003d taskListDup.getTaskById(0).toString() + \"\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskReminder.append(event1TaskString);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String deadline1TaskString \u003d taskListDup.getTaskById(2).toString() + \"\\n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskReminder.append(deadline1TaskString);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String event2TaskString \u003d taskListDup.getTaskById(1).toString() + \"\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        taskReminder.append(event2TaskString);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        String reminders \u003d taskReminder.toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            assertEquals(reminders, parser.parseCommand(\"\").commandExecute(taskListMain).feedbackToUser);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        } catch (ParserException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 76
    }
  }
]
