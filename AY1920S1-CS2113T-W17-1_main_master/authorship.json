[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "test {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "jacoco {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    toolVersion \u003d \"0.8.4\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    reportsDir \u003d file(\"$buildDir/customJacocoReportDir\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"compal.Main\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"COMPal\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"1.1\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 19,
      "-": 45
    }
  },
  {
    "path": "src/main/java/compal/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.ui.DailyCal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.ui.MainWindow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.Compal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Initializes GUI."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    //Class Properties/Variables"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Compal compal \u003d new Compal();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes and sets up the GUI."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pulls layout from file MainWindow.fxml."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param primaryStage The stage for GUI."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Exception If there is GUI problems."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setLocation(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            TabPane tabReference \u003d (TabPane) ap.getChildren().get(2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            compal.ui.tabWindow \u003d tabReference;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            //Create MainWindow Pane"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            VBox root \u003d new VBox();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            ScrollPane mainPane \u003d new ScrollPane();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            mainPane.setContent(root);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            Tab mainTab \u003d new Tab();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            mainTab.setText(\"Main Window\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            mainTab.setContent(mainPane);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            tabReference.getTabs().add(0, mainTab);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            //Create DailyCal Pane"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            DailyCal dc \u003d new DailyCal();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String datePattern \u003d \"dd/MM/yyyy\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            compal.ui.dateState \u003d new SimpleDateFormat(datePattern).format(new Date());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            ScrollPane dailyPane \u003d dc.init(compal.ui.dateState);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            Tab dailyTab \u003d new Tab();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            dailyTab.setText(compal.ui.dateState);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            dailyTab.setContent(dailyPane);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            tabReference.getTabs().add(1, dailyTab);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            compal.ui.mainWindow \u003d mainPane; //gets a reference to the main display viewport"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.ui.secondaryWindow \u003d (ScrollPane) ap.getChildren().get(3); //get reference to secondary viewport"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene s1 \u003d new Scene(ap);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            //Sets up primary stage ---------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setScene(s1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setTitle(\"ComPAL\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setOpacity(0.96);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.getIcons().add(new Image(new FileInputStream(new File(\"./icon.png\"))));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            //-----------------------------------------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            //Gets and shows the current user system time -------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            Label date \u003d (Label) ap.getChildren().get(6);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd MMMM yyyy\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            Date d \u003d new Date();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            date.setText(\"Today\u0027s Date:\" + formatter.format(d));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            //-------------------------------------------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            //Passes the initialized Compal object to the controller class to link them up"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setCompal(compal);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.show();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Main:LOG: Primary Stage Initialized. Setting Scene and running initialization code.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            //Runs ui\u0027s initialization code"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.ui.checkInit();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 32,
      "-": 77
    }
  },
  {
    "path": "src/main/java/compal/commons/Compal.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.logic.parser.ParserManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.storage.StorageFile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.lang.System.exit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Main class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Compal {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    //***Class Properties/Variables***---------------------------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //objects supporting COMPal.Compal"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Ui ui;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Storage storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList tasklist;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParserManager parser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    //-----------------------\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    //***CONSTRUCTORS***------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    //------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    //-----------------------------------------------------------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs Compal object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes supporting objects."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Starts off the parser CLI parsing loop."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Compal() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Compal:LOG: In Compal Constructor\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Instantiate objects"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        tasklist \u003d new TaskList(this);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageFile();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * Checks if storage is empty. If empty, create new ArrayList for storing Task objects. Else, load the current"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * arraylist stored in the binary file into tasklist.arrlist."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (storage.loadCompal() \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            tasklist.arrlist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            tasklist.arrlist \u003d storage.loadCompal();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new Ui(this, tasklist.arrlist);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        //start parsing commands"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        parser \u003d new ParserManager(this, tasklist);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    //-----------------------\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    //***MISC FUNCTIONS***----------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    //------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    //-----------------------------------------------------------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function handles the exiting/shutdown of the program Compal.main.Compal."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used in parser.processCommands"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void exitDuke() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        exit(0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    //-----------------------\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * This static inner class is the custom exception class extending Exception"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * that overwrites toString() for returning custom exception messages."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * It is thrown when command is unknown or when there are invalid arguments."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class DukeException extends Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        public DukeException(String description) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return description;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SholihinK": 1,
      "-": 97
    }
  },
  {
    "path": "src/main/java/compal/commons/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND \u003d \"CommandError: Unknown command input detected!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_RANGE \u003d \"RangeError: Invalid range detected for execution of command!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_FORMATTING \u003d \"DateFormattingError: Date format input is invalid! \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Please make sure is dd/mm/yyyy format.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_YEAR \u003d \"YearRangeError: You can only put input \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"schedule of the current year onwards!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_MINUTE \u003d \"MinuteRangeError: You can only input \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"a value between 0 and 59 inclusive!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_NUMBER \u003d \"TaskNumberError: You can only input \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"a valid task number!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK \u003d \"TaskError: You can only input a task with a future due date!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_INVALID_TIME_RANGE \u003d \"TimeRangeError: End time is before start time!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_MISSING_DESC \u003d \"DescError: Description field cannot be empty.\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \" Please enter a description\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_MISSING_HOUR \u003d \"Empty Hour Error: Required hour input!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_MISSING_MIN \u003d \"Empty Min Error: Required minute input!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_MISSING_DATE \u003d \"Empty Date Error: Required date input!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_MISSING_INPUT \u003d \"Empty Input: Empty input detected!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_MISSING_TIME \u003d \"MissingTimeError: Time field cannot be empty.\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \" Please enter a valid time.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_MISSING_PRIORITY \u003d \"MissingPriorityError: Priority \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"field cannot be empty.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static final String MESSAGE_MISSING_REP \u003d \"MissingRepError: Rep field cannot be empty.\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            + \"Please enter a valid number of repetitions.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public static final String MESSAGE_MISSING_REP_ARG \u003d \"ArgumentError: Missing /rep\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_MISSING_DATE_ARG \u003d \"ArgumentError: Missing /date\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_MISSING_START_TIME_ARG \u003d \"ArgumentError: Missing /sTime\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String MESSAGE_MISSING_END_TIME_ARG \u003d \"ArgumentError: Missing /eTime\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_MISSING_HOUR_ARG \u003d \"ArgumentError: Missing /hour\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_MISSING_MIN_ARG \u003d \"ArgumentError: Missing /min\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_MISSING_PRIORITY_ARG \u003d \"ArgumentError: Missing /priority\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_MISSING_COMMAND_ARG \u003d \"ArgumentError: Missing argument detected!\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INIT_REMINDER \u003d \"view-reminder\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 4,
      "yueyeah": 4,
      "-": 37
    }
  },
  {
    "path": "src/main/java/compal/logic/commands/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.Compal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Executes user input \"bye\"."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ByeCommand extends Command implements CommandParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs ByeCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param d Compal."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public ByeCommand(Compal d) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(d);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Exits program."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userIn Entire user input string."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand(String userIn) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 1,
      "-": 28
    }
  },
  {
    "path": "src/main/java/compal/logic/commands/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.Compal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Executes user input \"clear\"."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command implements CommandParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs ClearCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param d Compal"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public ClearCommand(Compal d) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(d);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clears the display viewport on the GUI."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userIn Entire user input string."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand(String userIn) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        compal.ui.clearPrimary();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 1,
      "-": 28
    }
  },
  {
    "path": "src/main/java/compal/logic/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.Compal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_INVALID_DATE_FORMATTING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_INVALID_YEAR;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_MISSING_COMMAND_ARG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_MISSING_DATE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_MISSING_DATE_ARG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_MISSING_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_MISSING_END_TIME_ARG;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_MISSING_PRIORITY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_MISSING_START_TIME_ARG;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_MISSING_TIME;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Extracts and formats user input string into description, priority, date and time."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Includes input validations to ensure that user input string is in valid format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TOKEN_SLASH \u003d \"/\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String TOKEN_START_TIME \u003d \"/start\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public static final String TOKEN_END_TIME \u003d \"/end\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TOKEN_DATE \u003d \"/date\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TOKEN_PRIORITY \u003d \"/priority\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Compal compal;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a Command object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param d Compal object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command(Compal d) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.compal \u003d d;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns description from the input string according to the token (/at or /by etc)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param restOfInput Input description after initial command word."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Description without date and time."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Compal.DukeException If restOfInput is missing date, time or description field."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription(String restOfInput) throws Compal.DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!restOfInput.contains(TOKEN_SLASH)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.ui.printg(MESSAGE_MISSING_COMMAND_ARG);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new Compal.DukeException(MESSAGE_MISSING_COMMAND_ARG);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        int splitPoint \u003d restOfInput.indexOf(TOKEN_SLASH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String desc \u003d restOfInput.substring(0, splitPoint).trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (desc.matches(\"\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.ui.printg(MESSAGE_MISSING_DESC);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new Compal.DukeException(MESSAGE_MISSING_DESC);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return desc;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a date string if specified in the task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param restOfInput Input description after initial command word."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Date in the form of a string."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Compal.DukeException If date field is empty, date or date format is invalid,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *                              date token (/date) is missing."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDate(String restOfInput) throws Compal.DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (restOfInput.contains(TOKEN_DATE)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            int startPoint \u003d restOfInput.indexOf(TOKEN_DATE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            String dateStartInput \u003d restOfInput.substring(startPoint);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            Scanner scanner \u003d new Scanner(dateStartInput);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                compal.ui.printg(MESSAGE_MISSING_DATE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new Compal.DukeException(MESSAGE_MISSING_DATE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            String dateInput \u003d scanner.next();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            String regex \u003d \"^(3[01]|[12][0-9]|0[1-9])/(1[0-2]|0[1-9])/[0-9]{4}$\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            Pattern pattern \u003d Pattern.compile(regex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            Matcher matcher \u003d pattern.matcher(dateInput);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (matcher.matches() \u003d\u003d false) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                compal.ui.printg(MESSAGE_INVALID_DATE_FORMATTING);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new Compal.DukeException(MESSAGE_INVALID_DATE_FORMATTING);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            int inputSize \u003d dateInput.length();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            String year \u003d dateInput.substring(inputSize - 4, inputSize);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            int inputYear \u003d Integer.parseInt(year);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            int currYear \u003d Calendar.getInstance().get(Calendar.YEAR);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            if (inputYear \u003c currYear) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                compal.ui.printg(MESSAGE_INVALID_YEAR);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new Compal.DukeException(MESSAGE_INVALID_YEAR);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return dateInput;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.ui.printg(MESSAGE_MISSING_DATE_ARG);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new Compal.DukeException(MESSAGE_MISSING_DATE_ARG);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Returns start time string if specified in the task."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param restOfInput Input description after initial command word."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Time in the form of a string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @throws Compal.DukeException If time field is empty or time token (/sTime) is missing."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public String getStartTime(String restOfInput) throws Compal.DukeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (restOfInput.contains(TOKEN_START_TIME)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            int startPoint \u003d restOfInput.indexOf(TOKEN_START_TIME);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            String dateStartInput \u003d restOfInput.substring(startPoint);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            Scanner scanner \u003d new Scanner(dateStartInput);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                compal.ui.printg(MESSAGE_MISSING_TIME);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new Compal.DukeException(MESSAGE_MISSING_TIME);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            String timeInput \u003d scanner.next();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return timeInput;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            compal.ui.printg(MESSAGE_MISSING_START_TIME_ARG);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new Compal.DukeException(MESSAGE_MISSING_START_TIME_ARG);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Returns end time string if specified in the task."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param restOfInput Input description after initial command word."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return Time in the form of a string."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @throws Compal.DukeException If time field is empty or time token (/eTime) is missing."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public String getEndTime(String restOfInput) throws Compal.DukeException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (restOfInput.contains(TOKEN_END_TIME)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            int startPoint \u003d restOfInput.indexOf(TOKEN_END_TIME);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String dateStartInput \u003d restOfInput.substring(startPoint);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            Scanner scanner \u003d new Scanner(dateStartInput);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                compal.ui.printg(MESSAGE_MISSING_TIME);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                throw new Compal.DukeException(MESSAGE_MISSING_TIME);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String timeInput \u003d scanner.next();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return timeInput;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            compal.ui.printg(MESSAGE_MISSING_END_TIME_ARG);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            throw new Compal.DukeException(MESSAGE_MISSING_END_TIME_ARG);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a priority string if specified in the task."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param restOfInput Input description after initial command word."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Priority of task."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Compal.DukeException If priority field is empty or priority token (/priority) is missing."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task.Priority getPriority(String restOfInput) throws Compal.DukeException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (restOfInput.contains(TOKEN_PRIORITY)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            int startPoint \u003d restOfInput.indexOf(TOKEN_PRIORITY);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            String priorityStartInput \u003d restOfInput.substring(startPoint);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            Scanner scanner \u003d new Scanner(priorityStartInput);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                compal.ui.printg(MESSAGE_MISSING_PRIORITY);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new Compal.DukeException(MESSAGE_MISSING_PRIORITY);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            String priorityInput \u003d scanner.next();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            Task.Priority priority \u003d Task.Priority.valueOf(priorityInput.toLowerCase());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            return priority;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            /* compal.ui.printg(MESSAGE_MISSING_PRIORITY_ARG);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            throw new Compal.DukeException(MESSAGE_MISSING_PRIORITY_ARG); */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Task.Priority priority \u003d Task.Priority.low;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return priority;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 43,
      "yueyeah": 6,
      "-": 139
    }
  },
  {
    "path": "src/main/java/compal/logic/commands/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.Compal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_MISSING_COMMAND_ARG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Executes user command \"deadline\"."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeadlineCommand extends Command implements CommandParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs DeadlineCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param d Compal."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeadlineCommand(Compal d) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(d);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskList \u003d d.tasklist;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a Deadline into taskList and prints confirmation message to user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userIn Entire user input string."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Compal.DukeException If user input after \"deadline\" is empty."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand(String userIn) throws Compal.DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner scanner \u003d new Scanner(userIn);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (scanner.hasNext()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            String event \u003d scanner.next();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            String restOfInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            String description \u003d getDescription(restOfInput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            Task.Priority priority \u003d getPriority(restOfInput);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            String date \u003d getDate(restOfInput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String endTime \u003d getEndTime(restOfInput);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            taskList.addTask(new Deadline(description, priority, date, endTime));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            int arrSize \u003d taskList.arrlist.size() - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            String descToPrint \u003d taskList.arrlist.get(arrSize).toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.ui.printg(descToPrint);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.ui.printg(MESSAGE_MISSING_COMMAND_ARG);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new Compal.DukeException(MESSAGE_MISSING_COMMAND_ARG);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 4,
      "-": 51
    }
  },
  {
    "path": "src/main/java/compal/logic/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.Compal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_MISSING_COMMAND_ARG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_INVALID_RANGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Executes user command \"delete\"."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command implements CommandParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs DeleteCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param d Compal"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Compal d) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(d);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskList \u003d d.tasklist;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes a task based on user task number input and prints confirmation message to user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userIn Entire user input string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Compal.DukeException If user task number input is invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand(String userIn) throws Compal.DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Compal.ui.printg(userIn);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner scanner \u003d new Scanner(userIn);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String delete \u003d scanner.next();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (scanner.hasNext()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            String restOfInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            int toRemove \u003d Integer.parseInt(restOfInput.trim()) - 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            int maxLimit \u003d taskList.arrlist.size();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            if (toRemove \u003c 0 || toRemove \u003e\u003d maxLimit) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                compal.ui.printg(MESSAGE_INVALID_RANGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new Compal.DukeException(MESSAGE_INVALID_RANGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String removeDesc \u003d taskList.arrlist.get(toRemove).toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            taskList.arrlist.remove(toRemove);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.ui.printg(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.ui.printg(removeDesc);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.storage.saveCompal(taskList.arrlist);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.ui.showSize();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            //Compal.tasklist.deleteTask(userIn);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.ui.printg(MESSAGE_MISSING_COMMAND_ARG);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new Compal.DukeException(MESSAGE_MISSING_COMMAND_ARG);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 3,
      "-": 60
    }
  },
  {
    "path": "src/main/java/compal/logic/commands/DoAfterCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.Compal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.DoAfterTasks;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_MISSING_COMMAND_ARG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Executes user command \"doaftertask\"."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoAfterCommand extends Command implements CommandParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs DoAfterCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param d Compal"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public DoAfterCommand(Compal d) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(d);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskList \u003d d.tasklist;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a DoAfterTask into taskList and prints confirmation message to user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userIn Entire user input string."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Compal.DukeException If user input after \"doafter\" is empty."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand(String userIn) throws Compal.DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner scanner \u003d new Scanner(userIn);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String event \u003d scanner.next();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (scanner.hasNext()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            String restOfInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            String description \u003d getDescription(restOfInput);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            Task.Priority priority \u003d getPriority(restOfInput);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            String date \u003d getDate(restOfInput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            taskList.addTask(new DoAfterTasks(description, priority, date));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            int arrSize \u003d taskList.arrlist.size() - 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            String descToPrint \u003d taskList.arrlist.get(arrSize).toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.ui.printg(descToPrint);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.ui.printg(MESSAGE_MISSING_COMMAND_ARG);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new Compal.DukeException(MESSAGE_MISSING_COMMAND_ARG);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 2,
      "-": 52
    }
  },
  {
    "path": "src/main/java/compal/logic/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.Compal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_MISSING_COMMAND_ARG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_INVALID_TASK_NUMBER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Executes user command \"done\"."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoneCommand extends Command implements CommandParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs Done object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param d Compal."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public DoneCommand(Compal d) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(d);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskList \u003d d.tasklist;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Marks task as done based on user task number input and prints confirmation message to user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userIn Entire user input string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Compal.DukeException If user task number input is missing."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand(String userIn) throws Compal.DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner scanner \u003d new Scanner(userIn);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        scanner.next();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        int maxSize \u003d taskList.arrlist.size();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            String restOfInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            int toMark \u003d Integer.parseInt(restOfInput.trim()) - 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            if (toMark \u003e\u003d 0 \u0026\u0026 toMark \u003c maxSize) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                taskList.arrlist.get(toMark).markAsDone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                String desc \u003d taskList.arrlist.get(toMark).toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                compal.ui.printg(\"Nice! I\u0027ve marked this task as done: \\n\" + desc);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                compal.storage.saveCompal(taskList.arrlist);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                compal.ui.printg(MESSAGE_INVALID_TASK_NUMBER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new Compal.DukeException(MESSAGE_INVALID_TASK_NUMBER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.ui.printg(MESSAGE_MISSING_COMMAND_ARG);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new Compal.DukeException(MESSAGE_MISSING_COMMAND_ARG);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        //Compal.tasklist.taskDone(userIn);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 3,
      "-": 55
    }
  },
  {
    "path": "src/main/java/compal/logic/commands/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.Compal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_INVALID_TIME_RANGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_MISSING_COMMAND_ARG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Executes user command \"event\"."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventCommand extends Command implements CommandParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs EventCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param d Compal."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EventCommand(Compal d) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(d);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskList \u003d d.tasklist;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a single ToDo to the tasklist and print out confirmation for the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userIn Entire String input by the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds an Event into taskList and prints confirmation message to user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userIn Entire user input string."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Compal.DukeException If user input after \"event\" is empty."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand(String userIn) throws Compal.DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner scanner \u003d new Scanner(userIn);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String event \u003d scanner.next();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (scanner.hasNext()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            String restOfInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            String description \u003d getDescription(restOfInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Task.Priority priority \u003d getPriority(restOfInput);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            String date \u003d getDate(restOfInput);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String startTime \u003d getStartTime(restOfInput);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String endTime \u003d getEndTime(restOfInput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (Integer.parseInt(startTime) \u003e Integer.parseInt(endTime)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                compal.ui.printg(MESSAGE_INVALID_TIME_RANGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                throw new Compal.DukeException(MESSAGE_INVALID_TIME_RANGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            taskList.addTask(new Event(description, priority, date, startTime, endTime));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int arrSize \u003d taskList.arrlist.size() - 1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            String descToPrint \u003d taskList.arrlist.get(arrSize).toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.ui.printg(descToPrint);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.ui.printg(MESSAGE_MISSING_COMMAND_ARG);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new Compal.DukeException(MESSAGE_MISSING_COMMAND_ARG);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 12,
      "-": 58
    }
  },
  {
    "path": "src/main/java/compal/logic/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.Compal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_MISSING_COMMAND_ARG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Executes user command \"find\"."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command implements CommandParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs FindCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param d Compal."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(Compal d) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(d);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskList \u003d d.tasklist;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays search result of keyword input by user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userIn Entire user input string."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Compal.DukeException If user input after \"find\" is empty."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand(String userIn) throws Compal.DukeException, ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner scanner \u003d new Scanner(userIn);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        scanner.next();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.ui.printg(MESSAGE_MISSING_COMMAND_ARG);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new Compal.DukeException(MESSAGE_MISSING_COMMAND_ARG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String searchTerm \u003d scanner.next();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (taskList.arrlist.isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.ui.printg(\"No task to find.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Boolean isEmpty \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task task : taskList.arrlist) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            if (task.getDescription().contains(searchTerm)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                if (isEmpty \u003d\u003d true) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                    compal.ui.printg(\"Your search result for the keyword \" + searchTerm + \": \\n\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                compal.ui.printg(task.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                isEmpty \u003d false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEmpty) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.ui.printg(\"No result found for \" + searchTerm);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 2,
      "-": 62
    }
  },
  {
    "path": "src/main/java/compal/logic/commands/FixedDurationCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.Compal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.FixedDurationTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_INVALID_MINUTE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_INVALID_TIME_RANGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_MISSING_COMMAND_ARG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_MISSING_HOUR;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_MISSING_HOUR_ARG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_MISSING_MIN;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_MISSING_MIN_ARG;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Executes user command \"fixeddurationtask\"."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class FixedDurationCommand extends Command implements CommandParser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TOKEN \u003d \"/on\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TOKEN_HOUR \u003d \"/hr\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TOKEN_MINUTE \u003d \"/min\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs FixedDurationCommand object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param d Compal."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public FixedDurationCommand(Compal d) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(d);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskList \u003d d.tasklist;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a FixedDurationTask into taskList and prints confirmation message to user."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userIn Entire user input string."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Compal.DukeException If user input after \"fixeddurationtask\" is empty."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand(String userIn) throws Compal.DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner scanner \u003d new Scanner(userIn);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String event \u003d scanner.next();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (scanner.hasNext()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            String restOfInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String description \u003d getDescription(restOfInput);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            Task.Priority priority \u003d getPriority(restOfInput);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            String date \u003d getDate(restOfInput);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String startTime \u003d getStartTime(restOfInput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String endTime \u003d getEndTime(restOfInput);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (Integer.parseInt(startTime) \u003e Integer.parseInt(endTime)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                compal.ui.printg(MESSAGE_INVALID_TIME_RANGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                throw new Compal.DukeException(MESSAGE_INVALID_TIME_RANGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            taskList.addTask(new FixedDurationTask(description, priority, date, startTime, endTime));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            int arrSize \u003d taskList.arrlist.size() - 1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            String descToPrint \u003d taskList.arrlist.get(arrSize).toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.ui.printg(descToPrint);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.ui.printg(MESSAGE_MISSING_COMMAND_ARG);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new Compal.DukeException(MESSAGE_MISSING_COMMAND_ARG);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the number of hours needed for the fixed duration task."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * The fixed duration task has a duration in both hours and minutes."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param restOfInput User input string."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Number of hours needed to complete the fixed duration task."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Compal.DukeException If no input for hour is found."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getHour(String restOfInput) throws Compal.DukeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (restOfInput.contains(TOKEN_HOUR)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            int startPoint \u003d restOfInput.indexOf(TOKEN_HOUR);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            String dateStartInput \u003d restOfInput.substring(startPoint);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            Scanner scanner \u003d new Scanner(dateStartInput);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                compal.ui.printg(MESSAGE_MISSING_HOUR);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new Compal.DukeException(MESSAGE_MISSING_HOUR);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return scanner.nextInt();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.ui.printg(MESSAGE_MISSING_HOUR_ARG);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new Compal.DukeException(MESSAGE_MISSING_HOUR_ARG);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the number of minutes needed for the fixed duration task."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * The fixed duration task has a duration in both hours and minutes."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param restOfInput User input string."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Number of minutes needed to complete the fixed duration task."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Compal.DukeException If no input for minute is found."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinute(String restOfInput) throws Compal.DukeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (restOfInput.contains(TOKEN_MINUTE)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            int startPoint \u003d restOfInput.indexOf(TOKEN_MINUTE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            String dateStartInput \u003d restOfInput.substring(startPoint);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            Scanner scanner \u003d new Scanner(dateStartInput);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                compal.ui.printg(MESSAGE_MISSING_MIN);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new Compal.DukeException(MESSAGE_MISSING_MIN);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            int minutes \u003d scanner.nextInt();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            if (minutes \u003e\u003d 0 \u0026\u0026 minutes \u003c 60) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                return minutes;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                compal.ui.printg(MESSAGE_INVALID_MINUTE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new Compal.DukeException(MESSAGE_INVALID_MINUTE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.ui.printg(MESSAGE_MISSING_MIN_ARG);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new Compal.DukeException(MESSAGE_MISSING_MIN_ARG);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SholihinK": 17,
      "-": 111
    }
  },
  {
    "path": "src/main/java/compal/logic/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.Compal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Executes user command \"list\"."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command implements CommandParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs ListCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param d Compal."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListCommand(Compal d) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(d);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskList \u003d d.tasklist;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Lists the tasks currently in taskList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * It will display the task symbol (T,E,D), the status (done or not done) and the description string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userIn Entire user input string."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand(String userIn) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Comparator\u003cTask\u003e compareByDateTime \u003d Comparator.comparing(Task::getDate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e toList \u003d taskList.arrlist;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.sort(toList, compareByDateTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        compal.ui.clearPrimary();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        compal.ui.printg(\"Here are the tasks in your list:\", \"verdana\", 15, Color.BLUEVIOLET);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task t : toList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.ui.printg(count++ + \".\" + t.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 1,
      "jaedonkey": 1,
      "-": 46
    }
  },
  {
    "path": "src/main/java/compal/logic/commands/RecurTaskCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.Compal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.RecurringTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_INVALID_TIME_RANGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_MISSING_COMMAND_ARG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_MISSING_REP;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_MISSING_REP_ARG;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * Executes user command for recurring tasks, lectures, tutorials,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yueyeah"
        },
        "content": " * sectionals and labs."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class RecurTaskCommand extends Command implements CommandParser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TOKEN_REP \u003d \"/rep\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String TOKEN_FREQ \u003d \"/freq\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final int DEFAULT_FREQ_NUM \u003d 7;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String CMD_LECT \u003d \"lect\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String CMD_TUT \u003d \"tut\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String CMD_SECT \u003d \"sect\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String CMD_LAB \u003d \"lab\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String SYMBOL_LECT \u003d \"LECT\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String SYMBOL_TUT \u003d \"TUT\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String SYMBOL_SECT \u003d \"SECT\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String SYMBOL_LAB \u003d \"LAB\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String SYMBOL_DEFAULT \u003d \"RT\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs RecurTaskCommand object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param d Compal."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public RecurTaskCommand(Compal d) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(d);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskList \u003d d.tasklist;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the number of repetitions of the recurring task in an integer form."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param restOfUserInput User input string."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Number of repetitions of the recurring task."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @throws Compal.DukeException If rep field is empty or rep token"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *                              (/rep) is missing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public int getRep(String restOfUserInput) throws Compal.DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (restOfUserInput.contains(TOKEN_REP)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int splitPoint \u003d restOfUserInput.indexOf(TOKEN_REP);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String repPart \u003d restOfUserInput.substring(splitPoint);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Scanner scanner \u003d new Scanner(repPart);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                compal.ui.printg(MESSAGE_MISSING_REP);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                throw new Compal.DukeException(MESSAGE_MISSING_REP);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int repNum \u003d scanner.nextInt();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return repNum;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            compal.ui.printg(MESSAGE_MISSING_REP_ARG);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            throw new Compal.DukeException(MESSAGE_MISSING_REP_ARG);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Returns the number of days between the recurring task in an integer form."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Will default to DEFAULT_FREQ_NUM."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param restOfUserInput User input string."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return Number of days between each recurring task."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public int getFreq(String restOfUserInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        int freqNum \u003d DEFAULT_FREQ_NUM;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        if (restOfUserInput.contains(TOKEN_FREQ)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int splitPoint \u003d restOfUserInput.indexOf(TOKEN_FREQ);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            String freqPart \u003d restOfUserInput.substring(splitPoint);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            Scanner scanner \u003d new Scanner(freqPart);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            scanner.next();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            if (!scanner.hasNext()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                return freqNum;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                freqNum \u003d scanner.nextInt();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                return freqNum;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return freqNum;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Increases the date by the number of days specified by the user."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateString The date to increment."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param freqNum    The number of days between each task."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Final incremented date."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public String incrementDate(String dateString, int freqNum) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Date date \u003d null;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            date \u003d format.parse(dateString);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        calendar.setTime(date);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        calendar.add(Calendar.DATE, freqNum);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return format.format(calendar.getTime());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * Determines the type of recurring task - normal recurring task,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * lecture, tutorial, sectional or lab, based on the first command"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * keyword entered by the user. Returns the type of symbol used for"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * that type of task."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @param userCmd The first command keyword entered by the user."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     * @return The symbol for that type of task."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    public String getSymbol(String userCmd) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        switch (userCmd) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        case CMD_LECT:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return SYMBOL_LECT;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        case CMD_TUT:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return SYMBOL_TUT;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        case CMD_SECT:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return SYMBOL_SECT;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        case CMD_LAB:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return SYMBOL_LAB;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            return SYMBOL_DEFAULT;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yueyeah"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds multiple RecurringTask into taskList and prints confirmation message to user."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userIn Entire user string input."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Compal.DukeException If user input after \"recurtask\" is empty."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand(String userIn) throws Compal.DukeException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner scanner \u003d new Scanner(userIn);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String userCmd \u003d scanner.next();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        String symbol \u003d getSymbol(userCmd);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (scanner.hasNext()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            String restOfInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            String description \u003d getDescription(restOfInput);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            Task.Priority priority \u003d getPriority(restOfInput);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            String date \u003d getDate(restOfInput);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String startTime \u003d getStartTime(restOfInput);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            String endTime \u003d getEndTime(restOfInput);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (Integer.parseInt(startTime) \u003e Integer.parseInt(endTime)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                compal.ui.printg(MESSAGE_INVALID_TIME_RANGE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                throw new Compal.DukeException(MESSAGE_INVALID_TIME_RANGE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            int rep \u003d getRep(restOfInput);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "            int freq \u003d getFreq(restOfInput);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            String dateStr \u003d date;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int count \u003d 0; count \u003c rep; count++) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                RecurringTask newRecurTask \u003d new RecurringTask(description, priority, dateStr,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        startTime, endTime, symbol);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                taskList.addTask(newRecurTask);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                int arrSize \u003d taskList.arrlist.size() - 1;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                String descToPrint \u003d taskList.arrlist.get(arrSize).toString();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                compal.ui.printg(descToPrint);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                dateStr \u003d incrementDate(dateStr, freq);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.ui.printg(MESSAGE_MISSING_COMMAND_ARG);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new Compal.DukeException(MESSAGE_MISSING_COMMAND_ARG);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 17,
      "yueyeah": 87,
      "-": 82
    }
  },
  {
    "path": "src/main/java/compal/logic/commands/SetReminderCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.Compal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_INVALID_TASK_NUMBER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_INVALID_TASK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_MISSING_COMMAND_ARG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Executes user command \"remind\"."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class SetReminderCommand extends Command implements CommandParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs SetReminderCommand object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param d Compal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public SetReminderCommand(Compal d) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(d);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskList \u003d d.tasklist;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Marks task as has reminder based on user task number input and"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * * prints confirmation message to user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userIn Entire user input string."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Compal.DukeException If user task number input is invalid or missing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "     * @throws ParseException       If date is in invalid format."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand(String userIn) throws Compal.DukeException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner scanner \u003d new Scanner(userIn);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        scanner.next();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        int maxSize \u003d taskList.arrlist.size();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Date currentDate \u003d java.util.Calendar.getInstance().getTime();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            String restOfInput \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            int toMark \u003d Integer.parseInt(restOfInput.trim()) - 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            if (toMark \u003e\u003d 0 \u0026\u0026 toMark \u003c maxSize) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                if (taskList.arrlist.get(toMark).getDate().compareTo(currentDate) \u003c 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                    compal.ui.printg(MESSAGE_INVALID_TASK);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                    compal.ui.printg(currentDate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                    compal.ui.printg(taskList.arrlist.get(toMark).getDate());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new Compal.DukeException(MESSAGE_INVALID_TASK);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                    taskList.arrlist.get(toMark).setHasReminder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                    String desc \u003d taskList.arrlist.get(toMark).toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                    compal.ui.printg(\"Okay! I\u0027ve set a reminder for this task: \\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                            + desc);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                    compal.storage.saveCompal(taskList.arrlist);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                compal.ui.printg(MESSAGE_INVALID_TASK_NUMBER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new Compal.DukeException(MESSAGE_INVALID_TASK_NUMBER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.ui.printg(MESSAGE_MISSING_COMMAND_ARG);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new Compal.DukeException(MESSAGE_MISSING_COMMAND_ARG);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 2,
      "SholihinK": 4,
      "-": 65
    }
  },
  {
    "path": "src/main/java/compal/logic/commands/ViewCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.Compal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_MISSING_COMMAND_ARG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Executes user command \"view\"."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewCommand extends Command implements CommandParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs ViewCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param d Compal."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ViewCommand(Compal d) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(d);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskList \u003d d.tasklist;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays the tasks available on the user input date."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Additionally set view state to set by user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userIn User string input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand(String userIn) throws Compal.DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner scanner \u003d new Scanner(userIn);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        scanner.next();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (scanner.hasNext()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            String dateInput \u003d getDate(scanner.nextLine());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            Boolean isEmpty \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Task task : taskList.arrlist) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                Date convertDate \u003d task.getDate();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(convertDate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                String compareDate \u003d formatter.format(convertDate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                if (compareDate.matches(dateInput)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (isEmpty) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                        compal.ui.printg(\"On \" + dateInput + \" you have the task below:\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                    compal.ui.printg(task.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                    isEmpty \u003d false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isEmpty) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                compal.ui.printg(\"No task found on \" + dateInput);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                compal.ui.dateState \u003d dateInput;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                compal.ui.dateViewRefresh(compal.ui.dateState);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.ui.printg(MESSAGE_MISSING_COMMAND_ARG);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new Compal.DukeException(MESSAGE_MISSING_COMMAND_ARG);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 6,
      "-": 65
    }
  },
  {
    "path": "src/main/java/compal/logic/commands/ViewReminderCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.Compal;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Executes user command \"reminder\"."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewReminderCommand extends Command implements CommandParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs ViewReminderCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param d Compal."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public ViewReminderCommand(Compal d) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(d);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.taskList \u003d d.tasklist;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Lists all tasks that are incomplete and due in 7 days, as well as tasks with reminders set as true."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will print colour-coded and sorted by importance/priority."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userIn Entire user input string."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If date is in invalid format."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand(String userIn) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e reminder \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Date currentDate \u003d java.util.Calendar.getInstance().getTime();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        c.setTime(currentDate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        c.add(Calendar.DATE, 7);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Date dateOneWeekAfter \u003d c.getTime();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        c.setTime(currentDate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Date dateToday \u003d c.getTime();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task t : taskList.arrlist) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            Date deadline \u003d t.getDate();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            if (deadline !\u003d null \u0026\u0026 !t.isDone \u0026\u0026 deadline.after(dateToday)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 (deadline.before(dateOneWeekAfter) || t.hasReminder())) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(deadline);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                t.calculateAndSetPriorityScore();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                reminder.add(t);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        //sort/compare by task priority score"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Comparator\u003cTask\u003e compareByDateTime \u003d (Task t1, Task t2) -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return Long.compare(t2.getPriorityScore(), t1.getPriorityScore());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.sort(reminder, compareByDateTime);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        //display the results"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (reminder.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.ui.printg(\"You currently have no tasks that have reminders set or are due within a week!\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                    \"verdana\", 15, Color.DARKGREEN);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            int counter \u003d 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Task t : reminder) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                if (t.getPriority().equals(Task.Priority.high)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                    compal.ui.printg(counter + \". \" + t.toString(), \"verdana\", 15, Color.RED);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                } else if (t.getPriority().equals(Task.Priority.medium)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                    compal.ui.printg(counter + \". \" + t.toString(), \"verdana\", 15, Color.ORANGE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                    compal.ui.printg(counter + \". \" + t.toString(), \"verdana\", 15, Color.GREEN);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 1,
      "jaedonkey": 6,
      "-": 84
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/CommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.Compal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public interface CommandParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    void parseCommand(String userIn) throws Compal.DukeException, ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/java/compal/logic/parser/ParserManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.Compal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.logic.commands.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.logic.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.logic.commands.DoAfterCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.logic.commands.EventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.logic.commands.FixedDurationCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.logic.commands.RecurTaskCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.logic.commands.SetReminderCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.logic.commands.ViewReminderCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.TaskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_INVALID_COMMAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_MISSING_INPUT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Deals with user inputs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserManager {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    //***Class Properties/Variables***---------------------------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    static final String CMD_EXIT \u003d \"bye\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    static final String CMD_LIST \u003d \"list\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    static final String CMD_CLEAR \u003d \"clear\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    static final String CMD_DONE \u003d \"done\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    static final String CMD_DELETE \u003d \"delete\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    static final String CMD_EVENT \u003d \"event\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    static final String CMD_DEADLINE \u003d \"deadline\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    static final String CMD_DO_AFTER_TASK \u003d \"doaftertask\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    static final String CMD_FIXED_DURATION_TASK \u003d \"fixeddurationtask\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    static final String CMD_RECUR_TASK \u003d \"recurtask\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    static final String CMD_VIEW \u003d \"view\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static final String CMD_FIND \u003d \"find\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    static final String CMD_SET_REMINDER \u003d \"set-reminder\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    static final String CMD_VIEW_REMIND \u003d \"view-reminder\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static final String CMD_LECT \u003d \"lect\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static final String CMD_TUT \u003d \"tut\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static final String CMD_SECT \u003d \"sect\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    static final String CMD_LAB \u003d \"lab\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Status tells the parser if ComPAL is expecting an answer from a prompt it gave. Parser will then"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * know where to redirect the input command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Can be an enum e.g State.INIT, State.NORMAL, State.READTIMETABLE etc."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String status \u003d \"normal\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stage tells the parser which stage of the current prompt sequence ComPAL is on."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g if stage \u003d\u003d 1 and status \u003d\u003d \"init\", then ComPAL is currently expecting the user to"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * confirm his/her name (YES or NO)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: stage is always reset to 0 upon a status change. This is done in the function below called setStatus()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int stage \u003d 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    Compal compal;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    TaskList tasklist;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    //-----------------------\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    //***CONSTRUCTORS***------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    //------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    //-----------------------------------------------------------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs ParserManager object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param d        Compal."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasklist list of tasks."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParserManager(Compal d, TaskList tasklist) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.compal \u003d d;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tasklist \u003d tasklist;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    //-----------------------\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    //***COMMAND PROCESSING***------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    //------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    //-----------------------------------------------------------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Processes command input by user."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Based on the command input by user, it instantiates different command classes"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * and executes the respective methods implemented."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput Entire user string input."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException       If input date is invalid."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Compal.DukeException If command input is unknown or user input is empty."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void processCmd(String userInput) throws ParseException, Compal.DukeException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner sc \u003d new Scanner(userInput);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (sc.hasNext()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            String cmd \u003d sc.next();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            if (status.equals(\"init\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                compal.ui.firstTimeInit(cmd, stage++);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                switch (cmd) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                case CMD_EXIT:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                    ByeCommand bye \u003d new ByeCommand(compal);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                    bye.parseCommand(cmd);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                case CMD_LIST:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                    ListCommand list \u003d new ListCommand(compal);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                    list.parseCommand(cmd);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                case CMD_CLEAR:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                    ClearCommand clear \u003d new ClearCommand(compal);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                    clear.parseCommand(cmd);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                case CMD_DONE:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                    DoneCommand done \u003d new DoneCommand(compal);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                    done.parseCommand(userInput);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                case CMD_DELETE:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    DeleteCommand delete \u003d new DeleteCommand(compal);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                    delete.parseCommand(userInput);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                case CMD_EVENT:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                    EventCommand event \u003d new EventCommand(compal);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                    event.parseCommand(userInput);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                case CMD_DEADLINE:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    DeadlineCommand deadline \u003d new DeadlineCommand(compal);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                    deadline.parseCommand(userInput);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                case CMD_DO_AFTER_TASK:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                    DoAfterCommand doafter \u003d new DoAfterCommand(compal);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                    doafter.parseCommand(userInput);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                case CMD_FIXED_DURATION_TASK:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                    FixedDurationCommand fixedduration \u003d new FixedDurationCommand(compal);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                    fixedduration.parseCommand(userInput);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                case CMD_RECUR_TASK:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                case CMD_LECT:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                case CMD_TUT:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                case CMD_SECT:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                case CMD_LAB:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                    RecurTaskCommand recurTask \u003d new RecurTaskCommand(compal);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                    recurTask.parseCommand(userInput);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                case CMD_FIND:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    FindCommand findCommand \u003d new FindCommand(compal);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                    findCommand.parseCommand(userInput);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                case CMD_VIEW:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                    ViewCommand viewCommand \u003d new ViewCommand(compal);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                    viewCommand.parseCommand(userInput);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                case CMD_VIEW_REMIND:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                    ViewReminderCommand viewReminderCommand \u003d new ViewReminderCommand(compal);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                    viewReminderCommand.parseCommand(cmd);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                case CMD_SET_REMINDER:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                    SetReminderCommand setReminderCommand \u003d new SetReminderCommand(compal);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                    setReminderCommand.parseCommand(userInput);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                    compal.ui.printg(MESSAGE_INVALID_COMMAND);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new Compal.DukeException(MESSAGE_INVALID_COMMAND);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.ui.printg(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new Compal.DukeException(MESSAGE_MISSING_INPUT);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    //-----------------------\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    //***CONTROL PARSING LOGIC***---------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    //------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    //-----------------------------------------------------------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets stage by setting stage to be 0."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param status Input status."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setStatus(String status) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        stage \u003d 0; //reset stage everytime status is changed"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    //-----------------------\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 3,
      "yueyeah": 8,
      "-": 181
    }
  },
  {
    "path": "src/main/java/compal/storage/StorageFile.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.FixedDurationTask;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.DoAfterTasks;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.RecurringTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents file used to store COMPal."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageFile implements Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    //***Class Properties/Variables***---------------------------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String saveFilePath \u003d \"./Compal.txt\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String userPreferencesFilePath \u003d \"./prefs.txt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String SYMBOL_LECT \u003d \"LECT\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String SYMBOL_TUT \u003d \"TUT\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String SYMBOL_SECT \u003d \"SECT\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String SYMBOL_LAB \u003d \"LAB\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String SYMBOL_RECUR \u003d \"RT\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String SYMBOL_DEADLINE \u003d \"D\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String SYMBOL_DOAFTER \u003d \"DAT\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String SYMBOL_EVENT \u003d \"E\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "    private static final String SYMBOL_FIXEDD \u003d \"FDT\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints message of storage initialized."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageFile() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Storage:LOG: Storage Initialized!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and loads task objects based on save text file into arraylist, then returns arraylist."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArrayList of stored item found in file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @author jaedonkey"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cTask\u003e loadCompal() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cTask\u003e tempList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            File f \u003d new File(\"duke.txt\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(f));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            String st;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            while ((st \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                Task t;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"StorageFile:LOG: Task read:\" + st);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                String[] parts \u003d st.split(\"_\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                String taskType \u003d parts[0];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                switch (taskType) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                case SYMBOL_DEADLINE:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    t \u003d new Deadline(parts[1], stringToPriority(parts[3]), parts[4], parts[5]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                case SYMBOL_DOAFTER:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                    t \u003d new DoAfterTasks(parts[1], stringToPriority(parts[3]), parts[4]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                case SYMBOL_RECUR:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                case SYMBOL_LECT:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                case SYMBOL_TUT:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                case SYMBOL_SECT:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                case SYMBOL_LAB:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    t \u003d new RecurringTask(parts[1], stringToPriority(parts[3]), parts[4], parts[5], parts[6], taskType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                case SYMBOL_EVENT:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    t \u003d new Event(parts[1], stringToPriority(parts[3]), parts[4], parts[5], parts[6]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "                case SYMBOL_FIXEDD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                    t \u003d new FixedDurationTask(parts[1], stringToPriority(parts[3]), parts[4], parts[5], parts[6]);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                    System.out.println(\"Storage:LOG: Could not parse text. Returning what we managed to parse.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                    return tempList;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                //set tasks completion and reminder status"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                if (parts[2].equals(\"true\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                    t.markAsDone();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                if (parts[7].equals(\"true\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                    t.setHasReminder();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                //add created task to list"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                tempList.add(t);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return tempList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns Priority from a String describing the priority level."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param priority task priority string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Priority enum"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task.Priority stringToPriority(String priority) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return Task.Priority.valueOf(priority.toLowerCase());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads and returns the username as a String."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: logic error(Unknown user, return logic)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Username."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getUserName() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        File f \u003d new File(userPreferencesFilePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(new FileReader(f));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return br.readLine();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves ArrayList of tasks into file."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks ArrayList of task stored."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @author jaedonkey"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveCompal(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            sb.append(t.getAllDetailsAsString());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        saveString(sb.toString(), \"duke.txt\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves a string to a file."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toSave   String to save into file."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath File path of file."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * @author jaedonkey"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveString(String toSave, String filePath) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            PrintWriter pw \u003d new PrintWriter(f);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            pw.printf(\"%s\\n\", toSave);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            pw.close();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Storage:WARNING: Save-file not found. Will generate new one.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores username in file."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * File is prefs.txt."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name Username to store into file."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * @author jaedonkey"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void storeUserName(String name) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        saveString(name, userPreferencesFilePath);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 2,
      "SholihinK": 4,
      "jaedonkey": 4,
      "yueyeah": 18,
      "-": 154
    }
  },
  {
    "path": "src/main/java/compal/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents assignment task type with a due date."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs Deadline object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description Description of deadline."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param priority    priority level of task type."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date        Due date of deadline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param endTime     End time of deadline"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public Deadline(String description, Priority priority, String date, String endTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description, priority);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super.symbol \u003d \"D\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super.setDate(date);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        super.setEndTime(endTime);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 4,
      "-": 18
    }
  },
  {
    "path": "src/main/java/compal/tasks/DoAfterTasks.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents assignment task type with a starting date."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoAfterTasks extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs DoAfterTask object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description Description of do after task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date        Starting date of do after task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param priority    priority level of task type"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public DoAfterTasks(String description, Priority priority, String date) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description, priority);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super.setDate(date);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super.symbol \u003d \"DAT\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/java/compal/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents event task type with a starting date and time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs Event object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description Description of event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date        Starting date of event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param startTime   Starting time of event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param priority    priority level of task type"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param endTime     End time of deadline"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public Event(String description, Priority priority, String date, String startTime, String endTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description, priority);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super.symbol \u003d \"E\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super.setDate(date);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        super.setStartTime(startTime);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        super.setEndTime(endTime);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 6,
      "-": 18
    }
  },
  {
    "path": "src/main/java/compal/tasks/FixedDurationTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents event task type with a starting date and time, as well as a fixed duration."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Input duration is in hours and minutes."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class FixedDurationTask extends Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs FixedDurationTask object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description Description of fixed duration task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date        Starting date of fixed duration task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param startTime   Starting time of fixed duration task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param endTime     End time"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public FixedDurationTask(String description, Priority priority, String date, String startTime, String endTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description, priority);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super.symbol \u003d \"FDT\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super.setDate(date);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        super.setStartTime(startTime);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        super.setEndTime(endTime);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 5,
      "-": 19
    }
  },
  {
    "path": "src/main/java/compal/tasks/RecurringTask.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents recurring task type with date and time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class RecurringTask extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs RecurringTask object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description Description of recurring task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date        Starting date of recurring task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param startTime   Starting time of recurring task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param priority    priority level of task type"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param endTime     End time of deadline"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public RecurringTask(String description, Priority priority, String date,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                         String startTime, String endTime, String symbol) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description, priority);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yueyeah"
        },
        "content": "        super.symbol \u003d symbol;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super.setDate(date);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        super.setStartTime(startTime);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        super.setEndTime(endTime);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 7,
      "yueyeah": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/compal/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents task with description, status and reminder."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Task implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public boolean isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    //***Class Properties/Variables***---------------------------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String symbol;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date date;   //For now, we only process dates in the format dd/mm/yyyy hhmm. See TaskList class for details"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private Date startTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private Date endTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean hasReminder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private long priorityScore;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs Task object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description Description."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String description, Priority priority) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        hasReminder \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    //-----------------------\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    //***CONSTRUCTORS***------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    //------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    //-----------------------------------------------------------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets priority status (HIGH, MEDIUM, LOW) of task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Priority status of task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    //-----------------------\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Sets priority of task as HIGH, MEDIUM or LOW."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param priority Priority of task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets status icon (tick or cross) of task."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Status icon (tick or cross) of task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets status icon (tick or cross) of task."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Status icon (tick or cross) of task."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getisDone() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return (isDone ? \"true\" : \"false\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets status icon (tick or cross) of task."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Status icon (tick or cross) of task."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public String gethasReminder() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return (hasReminder ? \"true\" : \"false\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets symbol of task."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Symbol of task."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSymbol() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return symbol;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets date of task in date format."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Date of task."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /*Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        calendar.setTime(this.date);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        calendar.set(Calendar.HOUR_OF_DAY, 23);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        calendar.set(Calendar.MINUTE, 59);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.date \u003d calendar.getTime();*/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Formats dateInput then sets date as dateInput."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dateInput Input date of task."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDate(String dateInput) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Date date \u003d null;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            date \u003d format.parse(dateInput);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets date of task in string."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Date of task."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStringDate() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        String stringDate \u003d formatter.format(this.date);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return stringDate;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets durationHour of task."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Hour duration of task."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets hasReminder of task."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return whether the task has reminder. If task has reminder, return true. Else false."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasReminder() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        return hasReminder;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Gets start time of task in date format."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Time of task."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public Date getStartTime() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Formats start timeInput then sets time as timeInput."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param timeInput Input time of task."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void setStartTime(String timeInput) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        Date time \u003d null;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            time \u003d format.parse(timeInput);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.startTime \u003d time;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Gets start time of task in string."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Time of task."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public String getStringStartTime() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (this.startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"-\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return formatter.format(this.startTime);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets description of task."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Description of task."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets priorityScore."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return priority score"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public long getPriorityScore() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        return priorityScore;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets isDone as true."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets HasReminder as true."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setHasReminder() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        this.hasReminder \u003d true;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the task as a formatted string."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * This function standardizes the displayed task format."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Task as a formatted string."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int strCase \u003d 0;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "        if (getStartTime() \u003d\u003d null \u0026\u0026 getEndTime() !\u003d null) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            strCase \u003d 1;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        switch (strCase) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return \"\\n\" + \"[\" + getSymbol() + \"]\" + \"[\" + getStatusIcon() + \"] \" + getDescription()"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                    + \" \\nDate: \" + getStringDate() + \" \\nEnd Time: \" + getStringEndTime()"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                    + \" \\nPriority: \" + getPriority() + \"\\n***************\";"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            return \"\\n\" + \"[\" + getSymbol() + \"]\" + \"[\" + getStatusIcon() + \"] \" + getDescription()"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    + \" \\nDate: \" + getStringDate() + \" \\nStart Time: \" + getStringStartTime()"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                    + \" \\nEnd Time: \" + getStringEndTime() + \" \\nPriority: \" + getPriority()"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                    + \"\\n***************\";"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    //-----------------------\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets all the details of the task as a string, for saving into the text file."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return saveString"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * @author jaedonkey"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAllDetailsAsString() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder list \u003d new StringBuilder();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        list.append(getSymbol());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        list.append(getDescription());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        list.append(getisDone());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        list.append(getPriority().toString());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        list.append(getStringDate());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (!getStringStartTime().equals(\"\")) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            list.append(getStringStartTime());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            list.append(\"_\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        list.append(getStringEndTime());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        list.append(gethasReminder());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.toString();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calculates the priority of the task based on the user defined priority (high/med/low) as well as"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * the time remaining until the date set for the task."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * @author jaedonkey"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    public void calculateAndSetPriorityScore() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        long score \u003d 0;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (priority) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        case high:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            score \u003d 70;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        case medium:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            score \u003d 50;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        case low:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            score \u003d 30;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            score \u003d 0;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        Date d \u003d new Date();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        long diff \u003d d.getTime() - this.date.getTime();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"Task:LOG: Difference is \" + diff);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        score +\u003d diff;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        priorityScore \u003d score;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public Date getEndTime() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Formats end timeInput then sets end time as timeInput."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param timeInput Input time of task."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void setEndTime(String timeInput) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Date time \u003d null;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            time \u003d format.parse(timeInput);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        this.endTime \u003d time;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Gets end time of task in string."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return Time of task."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public String getStringEndTime() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        SimpleDateFormat formatter \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (this.endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return \"-\";"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return formatter.format(this.endTime);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public enum Priority {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        high, medium, low"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 4,
      "SholihinK": 84,
      "jaedonkey": 8,
      "-": 257
    }
  },
  {
    "path": "src/main/java/compal/tasks/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.Compal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.BitSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    //***Class Properties/Variables***---------------------------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cTask\u003e arrlist;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public Compal compal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private BitSet idBitSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    //-----------------------\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    //***CONSTRUCTORS***------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    //------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    //-----------------------------------------------------------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs TaskList object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param d Compal."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskList(Compal d) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.compal \u003d d;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        //idBitSet \u003d getIdBitSet();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        /*if (idBitSet \u003d\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            idBitSet \u003d new BitSet(1_000_000); //bitset of 1,000,000 bits"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    //-----------------------\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    //***FUNCTIONS FOR ADDING TASKS***----------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    //------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    //-----------------------------------------------------------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the adding of the tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * It tests for the task type, then parses it according to the correct syntax."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used in parser.processCommands."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task Task to be added to the list of tasks."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Size of arrayList."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int addTask(Task task) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        arrlist.add(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        compal.storage.saveCompal(arrlist);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (compal.ui.dateState.equals(task.getStringDate())) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            compal.ui.dateViewRefresh(task.getStringDate());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        compal.ui.showSize();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return arrlist.size();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current bitset to file. For assignment of task IDs."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     public void writeIdBitSet() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     ObjectOutputStream oos \u003d new ObjectOutputStream(new FileOutputStream(\"serial\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     oos.writeObject(idBitSet);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     } catch (IOException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     e.printStackTrace();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the current bitset saved on file and returns it."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return BitSet"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public BitSet getIdBitSet() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    BitSet b \u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    ObjectInputStream ois \u003d new ObjectInputStream(new FileInputStream(\"serial\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    b \u003d (BitSet) ois.readObject();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IOException | ClassNotFoundException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    e.printStackTrace();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    return b;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Draft function for adding tasks to ComPAL. Currently not in use."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param currentStage Current stage status."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param value        Input value."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addTaskTest(int currentStage, String value) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner sc1 \u003d new Scanner(value);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String s \u003d sc1.next(); //get the command string"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String taskType \u003d sc1.next(); //get the taskType"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String dateString \u003d sc1.next(); //get the date"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String timeString \u003d sc1.next(); //get the time"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String name \u003d sc1.next(); //get the name"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String description \u003d sc1.nextLine(); //get the description"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        int taskID \u003d -1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c 1000000; i++) { //search for an unused task ID"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!idBitSet.get(i)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                taskID \u003d i;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                System.out.println(\"Task assigned id of \" + taskID);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                //writeIdBitSet();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //-----------------------\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 4,
      "-": 113
    }
  },
  {
    "path": "src/main/java/compal/ui/DailyCal.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "package compal.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.Compal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.Group;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.shape.Line;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " * Create a timetable drawing onto DailyView scroll-pane within tab-pane."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "public class DailyCal {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    String dateToDisplay;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private Compal compal \u003d new Compal();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ScrollPane sp \u003d new ScrollPane();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private Group groupRoot \u003d new Group();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private Line[] horizontalLines \u003d new Line[50];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private Line[] verticalLines \u003d new Line[50];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private Text[] timeAM \u003d new Text[50];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private Text[] timePM \u003d new Text[50];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private int[] clockTime \u003d {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23};"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private double colOneXLayout \u003d 25;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private double colOneYLayout \u003d -25;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private int horizontalLineCounter \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private double verticalYLayout \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private double verticalXLayout \u003d 100;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private double horizontalYLayout \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private double horizontalXLayout \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private double[][] storedXAxis \u003d new double[25][5];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private double[][] storedYAxis \u003d new double[25][5];"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private int startTime \u003d 8;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private int endTime \u003d 19;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ArrayList\u003cTask\u003e tempList \u003d compal.tasklist.arrlist;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ArrayList\u003cTask\u003e arrList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public DailyCal() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Initializer function to create final gui timetable."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return scrollPane final object state"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public ScrollPane init(String givenDate) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        dateToDisplay \u003d givenDate;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        createDailyArrayList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        sp \u003d buildTimeTable();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return sp;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Create an array list of type task of that specific day."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Sorted by starting time."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void createDailyArrayList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Comparator\u003cTask\u003e compareByStartTime \u003d Comparator.comparing(Task::getStringStartTime);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (Task t : tempList) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (t.getStringDate().equals(dateToDisplay)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                arrList.add(t);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Collections.sort(arrList, compareByStartTime);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Call the require functions to create final state of timetable."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return scrollPane final object state"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private ScrollPane buildTimeTable() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        setTime();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        genDateSLot();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        genTimeSlot();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (int i \u003d startTime; i \u003c endTime; i++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            drawScheduleSquare(i);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        sp.setContent(groupRoot);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return sp;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Check through the daily taskList to check if there\u0027s any event that starts before 8am or ends after 7pm"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * If there is, set startTime or EndTime to the detected time."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return scrollPane final object state"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void setTime() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (Task task : arrList) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            int tempStartTime \u003d Integer.parseInt(task.getStringStartTime().substring(0, 2));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (tempStartTime \u003c startTime) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                startTime \u003d tempStartTime;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            int tempEndTime \u003d Integer.parseInt(task.getStringEndTime().substring(0, 2));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (tempEndTime \u003e endTime) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                endTime \u003d tempEndTime;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Generate the date to the displayed on top left column."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return scrollPane final object state"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void genDateSLot() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Text date \u003d new Text();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        date.setText(dateToDisplay);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        date.setY(colOneYLayout);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        date.setX(colOneXLayout);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        colOneYLayout +\u003d 50;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        groupRoot.getChildren().add(date);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Caller function to generate all horizontal and vertical lines"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * for each time slot for daily View."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @return scrollPane final object state"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void genTimeSlot() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (int i \u003d 0; i \u003c clockTime.length; i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            makeASlot(i);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        makeHorizontalLines(horizontalLineCounter++);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        makeHeaderVerticalLines();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Caller function to generate a slot for each time range and fill the slot."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * With the logic below"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * 1. Generate only the the detected time range."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * 2. If time is AM or PM, display the time as e.g. 09:00 AM."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * 3. Draw the square for that slot."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * 4. If that time has an event, draw the square for the total event."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void makeASlot(int i) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int temp \u003d horizontalLineCounter;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (clockTime[i] \u003c startTime || clockTime[i] \u003e endTime) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (clockTime[i] \u003c 12) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            makeTimeAM(i);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            for (int x \u003d temp; x \u003c temp + 2; x++) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                makeHorizontalLines(x);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (x \u003d\u003d temp) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    storeScheduleAxis(clockTime[i]);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                horizontalLineCounter++;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            makeTimePM(i);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            for (int x \u003d temp; x \u003c temp + 2; x++) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                makeHorizontalLines(x);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (x \u003d\u003d temp) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    storeScheduleAxis(clockTime[i]);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                horizontalLineCounter++;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Create a square block of schedule depending on the duration of the event."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void drawScheduleSquare(int currentTime) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int eventCounter \u003d 0;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int hourInMin \u003d 60;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        double pixelBlock \u003d 100;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (Task task : arrList) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (eventCounter \u003c 5) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (Integer.parseInt(task.getStringStartTime().substring(0, 2)) \u003d\u003d currentTime) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    int startHour \u003d Integer.parseInt(task.getStringStartTime().substring(0, 2));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    int startMin \u003d Integer.parseInt(task.getStringStartTime().substring(2, 4));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    int endHour \u003d Integer.parseInt(task.getStringEndTime().substring(0, 2));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    int endMin \u003d Integer.parseInt(task.getStringEndTime().substring(2, 4));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    int totalHour;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    int totalMin;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    if (endMin \u003e\u003d startMin) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        totalMin \u003d endMin - startMin;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        totalHour \u003d endHour - startHour;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        endHour--;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        totalMin \u003d endMin + hourInMin - startMin;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        totalHour \u003d endHour - startHour;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    if (totalHour \u003d\u003d 0 \u0026\u0026 totalMin \u003d\u003d 0) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    String desc \u003d task.getDescription();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    //Drawing a Rectangle"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    double heightY \u003d 1.7;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    double heightYMin \u003d heightY * totalMin;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    double heightYHour \u003d pixelBlock * totalHour;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    Rectangle rectangle \u003d new Rectangle(pixelBlock, heightYHour + heightYMin);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    rectangle.setFill(colorFill(task));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    rectangle.setStroke(Color.BLACK);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    final StackPane stack \u003d new StackPane();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    final Text text \u003d new Text(desc);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    text.setFont(Font.font(\"Georgia Italic\", 12));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    stack.getChildren().addAll(rectangle, text);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    stack.setLayoutX(storedXAxis[currentTime][eventCounter]);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    stack.setLayoutY(storedYAxis[currentTime][eventCounter]);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    eventCounter++;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    groupRoot.getChildren().add(stack);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Set color of rectangle to depending on the scenario below."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private Color colorFill(Task t) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        if (t.getisDone().equals(\"true\")) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return Color.DARKSEAGREEN;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (t.getSymbol().equals(\"LECT\")) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return Color.GOLDENROD;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (t.getSymbol().equals(\"TUT\")) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return Color.DEEPPINK;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (t.getSymbol().equals(\"SECT\")) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return Color.VIOLET;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (t.getSymbol().equals(\"LAB\")) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return Color.INDIANRED;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (t.getSymbol().equals(\"RT\")) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return Color.LEMONCHIFFON;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        } else if (t.getSymbol().equals(\"E\")) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            return Color.CADETBLUE;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        return Color.BLUE;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Set stroke fill of rectangle to the color depending priority ranking."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Store schedule axis of current time."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void storeScheduleAxis(int currentTime) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int eventCounter \u003d 0;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int moveRight \u003d 100;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        double prevX \u003d 0;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        double prevY \u003d 0;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        double pixelBlock \u003d 100.00;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        int hourInMin \u003d 60;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        for (Task task : arrList) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            if (Integer.parseInt(task.getStringStartTime().substring(0, 2)) \u003d\u003d currentTime \u0026\u0026 eventCounter \u003c 5) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int startHour \u003d Integer.parseInt(task.getStringStartTime().substring(0, 2));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int startMin \u003d Integer.parseInt(task.getStringStartTime().substring(2, 4));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int endHour \u003d Integer.parseInt(task.getStringEndTime().substring(0, 2));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int endMin \u003d Integer.parseInt(task.getStringEndTime().substring(2, 4));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int totalHour;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int totalMin;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (endMin \u003e\u003d startMin) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    totalMin \u003d endMin - startMin;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    totalHour \u003d endHour - startHour;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    endHour--;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    totalMin \u003d endMin + hourInMin - startMin;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    totalHour \u003d endHour - startHour;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (totalHour \u003d\u003d 0 \u0026\u0026 totalMin \u003d\u003d 0) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                double pxPerMin \u003d (pixelBlock / Double.valueOf(hourInMin));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                double downPX \u003d pxPerMin * startMin;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                //store a Rectangle location."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                if (prevX \u003d\u003d 0 \u0026\u0026 prevY \u003d\u003d 0) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    storedXAxis[currentTime][eventCounter] +\u003d horizontalXLayout + moveRight;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    storedYAxis[currentTime][eventCounter] +\u003d horizontalYLayout + downPX - 50;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    prevX \u003d horizontalXLayout + moveRight;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    prevY \u003d horizontalYLayout + downPX;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    moveRight +\u003d 100;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    storedXAxis[currentTime][eventCounter] +\u003d prevX + moveRight;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    storedYAxis[currentTime][eventCounter] +\u003d prevY + downPX - 50;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    prevX \u003d horizontalXLayout + moveRight;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    prevY \u003d horizontalYLayout + downPX;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    moveRight +\u003d 100;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                int futureEndTime \u003d Integer.parseInt(task.getStringEndTime().substring(0, 2));"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                for (int futureTime \u003d currentTime + 1; futureTime \u003c futureEndTime; futureTime++) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                    storedXAxis[futureTime][eventCounter] +\u003d 100;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                eventCounter +\u003d 1;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Set text to be displayed as AM."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param time of the event."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void makeTimeAM(int time) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        timeAM[time] \u003d new Text();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String toStore \u003d clockTime[time] + \":00 am\";"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        timeAM[time].setText(toStore);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        timeAM[time].setY(colOneYLayout);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        timeAM[time].setX(colOneXLayout);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        colOneYLayout +\u003d 100;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        groupRoot.getChildren().add(timeAM[time]);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Set text to be displayed as PM."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param time of the event."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void makeTimePM(int time) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        timePM[time] \u003d new Text();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        String toStore \u003d clockTime[time] + \":00 PM\";"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        timePM[time].setText(toStore);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        timePM[time].setY(colOneYLayout);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        timePM[time].setX(colOneXLayout);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        colOneYLayout +\u003d 100;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        groupRoot.getChildren().add(timePM[time]);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Call function to draw horizontal Lines."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void makeHorizontalLines(int i) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        drawHorizontalLines(i);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Draw horizontal Lines."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void drawHorizontalLines(int i) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        horizontalLines[i] \u003d new Line();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        horizontalLines[i].setStartX(0);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        horizontalLines[i].setStartY(0);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        horizontalLines[i].setEndX(600);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        horizontalLines[i].setEndY(0);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        horizontalLines[i].setLayoutX(horizontalXLayout);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        horizontalLines[i].setLayoutY(horizontalYLayout);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        horizontalXLayout +\u003d 0;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        horizontalYLayout +\u003d 50;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        groupRoot.getChildren().add(horizontalLines[i]);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Draw vertical Lines."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    private void makeHeaderVerticalLines() {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        verticalLines[0] \u003d new Line();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        verticalLines[0].setStartX(0);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        verticalLines[0].setStartY(0);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        verticalLines[0].setEndX(0);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        verticalLines[0].setEndY(horizontalYLayout);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        verticalLines[0].setLayoutX(verticalXLayout);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        verticalLines[0].setLayoutY(verticalYLayout);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        groupRoot.getChildren().add(verticalLines[0]);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 6,
      "SholihinK": 380
    }
  },
  {
    "path": "src/main/java/compal/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.Compal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Catherinetan99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Handles GUI."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a JavaFXML Controller class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    //Class Properties/Variables"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private TableView\u003cTask\u003e tableView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    private TableColumn\u003cTask, String\u003e midnight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Compal compal;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints initialization message."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"MainWindow:LOG: Controller Class Initialized\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes Compal."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param d Compal object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setCompal(Compal d) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        compal \u003d d;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles user input by sending it to the parser."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Called by the enter button inside MainWindow.fxml."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() throws ParseException, Compal.DukeException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String cmd \u003d userInput.getText();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        //send to parser to parse"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        compal.parser.processCmd(cmd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Catherinetan99": 1,
      "SholihinK": 1,
      "jaedonkey": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/compal/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.Compal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import compal.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import static compal.commons.Messages.MESSAGE_INIT_REMINDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.text.FontPosture;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.text.FontWeight;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "List of Fonts:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Agency FB"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Agency FB Bold"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Arial"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Arial Black"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Arial Black Italic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Arial Bold"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Arial Bold Italic"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Arial Italic"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Arial Narrow"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Arial Narrow Bold"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Arial Narrow Bold Italic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Arial Narrow Italic"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Arial Rounded MT Bold"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Arial-SM"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Blackadder ITC"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Bodoni MT"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Bodoni MT Black"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Bodoni MT Black Italic"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bodoni MT Bold"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Bodoni MT Bold Italic"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Bodoni MT Condensed"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Bodoni MT Condensed Bold"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Bodoni MT Condensed Bold Italic"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Bodoni MT Condensed Italic"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Bodoni MT Italic"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Book Antiqua"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Book Antiqua Bold"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Book Antiqua Bold Italic"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Book Antiqua Italic"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Bookman Old Style"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Bookman Old Style Bold"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Bookman Old Style Bold Italic"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Bookman Old Style Italic"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Bookshelf Symbol 7"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Bradley Hand ITC"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Calisto MT"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Calisto MT Bold"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Calisto MT Bold Italic"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Calisto MT Italic"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Castellar"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Century Gothic"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Century Gothic Bold"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Century Gothic Bold Italic"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Century Gothic Italic"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Century Schoolbook"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Century Schoolbook Bold"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Century Schoolbook Bold Italic"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Century Schoolbook Italic"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Comic Sans MS"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Comic Sans MS Bold"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Copperplate Gothic Bold"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Copperplate Gothic Light"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Courier New"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Courier New Bold"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Courier New Bold Italic"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Courier New Italic"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Curlz MT"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Dialog.bold"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Dialog.bolditalic"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Dialog.italic"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Dialog.plain"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "DialogInput.bold"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "DialogInput.bolditalic"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "DialogInput.italic"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "DialogInput.plain"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Edwardian Script ITC"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Elephant"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Elephant Italic"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Engravers MT"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Eras Bold ITC"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Eras Demi ITC"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Eras Light ITC"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Eras Medium ITC"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Estrangelo Edessa"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Felix Titling"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Forte"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "Franklin Gothic Book"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Franklin Gothic Book Italic"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Franklin Gothic Demi"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Franklin Gothic Demi Cond"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Franklin Gothic Demi Italic"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Franklin Gothic Heavy"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Franklin Gothic Heavy Italic"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Franklin Gothic Medium"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Franklin Gothic Medium Cond"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Franklin Gothic Medium Italic"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "French Script MT"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Garamond"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Garamond Bold"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Garamond Italic"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Gautami"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Georgia"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "Georgia Bold"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Georgia Bold Italic"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Georgia Italic"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Gigi"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Gill Sans MT"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "Gill Sans MT Bold"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Gill Sans MT Bold Italic"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Gill Sans MT Condensed"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Gill Sans MT Ext Condensed Bold"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Gill Sans MT Italic"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "Gill Sans Ultra Bold"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Gill Sans Ultra Bold Condensed"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Gloucester MT Extra Condensed"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Goudy Old Style"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Goudy Old Style Bold"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Goudy Old Style Italic"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Goudy Stout"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Haettenschweiler"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Impact"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Imprint MT Shadow"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "Kartika"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Latha"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Lucida Bright Demibold"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Lucida Bright Demibold Italic"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "Lucida Bright Italic"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Lucida Bright Regular"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "Lucida Console"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "Lucida Sans Demibold"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "Lucida Sans Demibold Italic"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Lucida Sans Demibold Roman"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "Lucida Sans Italic"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Lucida Sans Regular"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Lucida Sans Typewriter Bold"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Lucida Sans Typewriter Bold Oblique"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Lucida Sans Typewriter Oblique"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "Lucida Sans Typewriter Regular"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "Lucida Sans Unicode"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "MS Outlook"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "MS Reference Sans Serif"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "MS Reference Specialty"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "MV Boli"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Maiandra GD"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Mangal"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "Marlett"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Microsoft Sans Serif"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Monospaced.bold"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Monospaced.bolditalic"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Monospaced.italic"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "Monospaced.plain"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Monotype Corsiva"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "OCR A Extended"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "Palace Script MT"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Palatino Linotype"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Palatino Linotype Bold"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Palatino Linotype Bold Italic"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Palatino Linotype Italic"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "Papyrus"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Perpetua"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "Perpetua Bold"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Perpetua Bold Italic"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "Perpetua Italic"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "Perpetua Titling MT Bold"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "Perpetua Titling MT Light"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Pristina"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "Raavi"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "Rage Italic"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "Rockwell"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Rockwell Bold"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "Rockwell Bold Italic"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "Rockwell Condensed"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Rockwell Condensed Bold"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "Rockwell Extra Bold"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Rockwell Italic"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "SansSerif.bold"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "SansSerif.bolditalic"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "SansSerif.italic"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "SansSerif.plain"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Script MT Bold"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Serif.bold"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "Serif.bolditalic"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "Serif.italic"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "Serif.plain"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "Shruti"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "Sylfaen"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "Symbol"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "Tahoma"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "Tahoma Bold"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "Tera Special"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Times New Roman"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "Times New Roman Bold"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Times New Roman Bold Italic"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Times New Roman Italic"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Trebuchet MS"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "Trebuchet MS Bold"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Trebuchet MS Bold Italic"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "Trebuchet MS Italic"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "Tunga"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "Tw Cen MT"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "Tw Cen MT Bold"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Tw Cen MT Bold Italic"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Tw Cen MT Condensed"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "Tw Cen MT Condensed Bold"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "Tw Cen MT Condensed Extra Bold"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "Tw Cen MT Italic"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "Verdana"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Verdana Bold"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "Verdana Bold Italic"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "Verdana Italic"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Vrinda"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Webdings"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "Wingdings"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "Wingdings 2"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "Wingdings 3"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents userinterface."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    //***Class Properties/Variables***---------------------------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    public ScrollPane mainWindow;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    public ScrollPane secondaryWindow;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public TabPane tabWindow;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public String dateState;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cTask\u003e arrlist;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    private Compal compal;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    //-----------------------\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs Ui object."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param d         Compal, main class to be initialised."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param arrayList arrayList of the data to store, display or edit."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    public Ui(Compal d, ArrayList\u003cTask\u003e arrayList) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        this.compal \u003d d;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        arrlist \u003d arrayList;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"UI:LOG: Ui Initialized!\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    //***OUTPUT FUNCTIONS***--------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    //------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    //-----------------------------------------------------------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts the object into string form using toString()"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * and prints it onto the GUI\u0027s primary display box."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param text Input object received to be print on gui. Any object type can be used, as long as"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     *             it has a \u0027toString()\u0027 function defined."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    public void printg(Object text) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        VBox vbox \u003d (VBox) mainWindow.getContent();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        vbox.getChildren().addAll(getDialogLabel(text.toString()));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overloaded version of printg which allows you to customize style of text."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g usage; printg(\"hello world!\", \"verdana\", 12, Color.RED);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param text Input object received to be print on gui. Any object type can be used, as long as"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     *             it has a \u0027toString()\u0027 function defined."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    public void printg(Object text, String font, int size, Color color) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        VBox vbox \u003d (VBox) mainWindow.getContent();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        vbox.getChildren().addAll(getDialogLabel(text.toString(), font, size, color));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts the object into string form using toString()"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * and prints it onto the GUI\u0027s secondary display box."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param text Input object received to be print on gui. Any object type can be used, as long as"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     *             it has a \u0027toString()\u0027 function defined."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "    public void printSecondaryg(Object text, String font, int size, Color color) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        VBox vbox \u003d (VBox) secondaryWindow.getContent();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        vbox.getChildren().addAll(getDialogLabel(text.toString(), font, size, color));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the number of tasks in the arraylist."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used in TaskList.addTask."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showSize() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        compal.ui.printg(\"Now you have \" + arrlist.size() + \" tasks in the list\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    //-----------------------\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //***MISC FUNCTIONS***----------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    //------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    //-----------------------------------------------------------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a label (node) with the text as text."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param text Dialog text label received."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Label (Node) with the text as text."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label getDialogLabel(String text) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        Label label \u003d new Label(text);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        label.setFont(Font.font(\"verdana\", FontWeight.LIGHT, FontPosture.REGULAR, 15));"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        label.setWrapText(true);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        return label;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a label (node) with the input text, font, fontsize and color."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used when function is overloaded."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param text  Dialog text label received."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param font  Font of text."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param size  Fontsize of text."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param color Color of text."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Label (Node) with the text as text."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label getDialogLabel(String text, String font, int size, Color color) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        Label label \u003d new Label(text);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        label.setFont(Font.font(font, FontWeight.LIGHT, FontPosture.REGULAR, size));"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        label.setTextFill(color);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        label.setWrapText(true);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        return label;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clears the display viewport on the GUI."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parser calls this function when it receives a \u0027clear\u0027 command."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clearPrimary() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        VBox vbox \u003d (VBox) mainWindow.getContent();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        vbox.getChildren().clear();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    //-----------------------\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    //***FIRST-TIME INITIALIZATION FUNCTIONS***-------------------------------------------------------------------------"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    //------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    //-----------------------------------------------------------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the text in the GUI\u0027s secondary display box."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if user is a first-time user. If he/she is, name of user is asked."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException       If an error reaches when parsing."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Compal.DukeException If an error is encountered."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkInit() throws ParseException, Compal.DukeException {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        File tmpDir \u003d new File(\"./prefs.txt\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean saveFileExists \u003d tmpDir.exists();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!saveFileExists) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.parser.setStatus(\"init\");"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            printg(\"Hello! I\u0027m Compal!!\", \"verdana\", 23, Color.BLACK);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "            printg(\"What is your name?\");"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "            username \u003d compal.storage.getUserName();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "            printg(\"Hello again \""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "                    + username"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"! \""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "                    +"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                    \"Here are your tasks that are due within a week: \\n\", \"verdana\", 15, Color.BLACK);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            //initiate the showing of reminders"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "            compal.parser.processCmd(MESSAGE_INIT_REMINDER);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs first time initialization for new users."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "     * Consists of 2 steps(stages).Parser holds the current stage number."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param value Name of user."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param stage Stage number of user."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Compal.DukeException If an error is encountered."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "    public void firstTimeInit(String value, int stage) throws Compal.DukeException {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (stage) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "            printg(value + \"? Did I say it correctly? [Yes or No]\");"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "            username \u003d value;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "            if (value.matches(\"(y|Y).*\")) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "                printg(\"Hello \" + username + \"! Great to meet you!\");"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "                compal.parser.setStatus(\"normal\");"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "                compal.storage.storeUserName(username); //save the user\u0027s name"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "                printg(\"Okay, what is your name then?\");"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "                compal.parser.setStatus(\"init\");"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"Unknown init stage\");"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "SholihinK"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * Refresh view date."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     *"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     * @param dateToStore date to view of daily calender"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "     */"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    public void dateViewRefresh(String dateToStore) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        DailyCal dc \u003d new DailyCal();"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        compal.ui.tabWindow.getTabs().remove(1);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        Tab dailyTab \u003d new Tab();"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        dailyTab.setText(dateToStore);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        dailyTab.setContent(dc.init(dateToStore));"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        compal.ui.tabWindow.getTabs().add(1, dailyTab);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "    //-----------------------\u003e"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SholihinK": 21,
      "jaedonkey": 7,
      "-": 408
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "         maxWidth\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "         prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Cursor?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.effect.Bloom?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.effect.Glow?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "\u003cAnchorPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" prefHeight\u003d\"699.0\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            prefWidth\u003d\"1000.0\" style\u003d\"-fx-background-color: #a3cde3;\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            xmlns\u003d\"http://javafx.com/javafx/11.0.1\" fx:controller\u003d\"compal.ui.MainWindow\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"93.0\" layoutY\u003d\"65.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"42.0\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                   prefWidth\u003d\"547.0\" promptText\u003d\"Enter command here...\" style\u003d\"-fx-background-radius: 10 10 10 10;\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                   AnchorPane.rightAnchor\u003d\"360.0\" AnchorPane.topAnchor\u003d\"65.0\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"7.0\" layoutY\u003d\"65.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                opacity\u003d\"0.9\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                style\u003d\"-fx-background-color: #cedae0; -fx-border-color: #cedae0; -fx-border-radius: 10 10 10 10;\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                text\u003d\"Enter\" AnchorPane.leftAnchor\u003d\"7.0\" AnchorPane.topAnchor\u003d\"65.0\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            \u003ceffect\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                \u003cGlow level\u003d\"0.46\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "            \u003c/effect\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        \u003cTabPane layoutX\u003d\"7.0\" layoutY\u003d\"136.0\" prefHeight\u003d\"534.0\" prefWidth\u003d\"634.0\" tabClosingPolicy\u003d\"UNAVAILABLE\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        \u003cScrollPane layoutX\u003d\"671.0\" layoutY\u003d\"136.0\" prefHeight\u003d\"309.0\" prefWidth\u003d\"314.0\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "                \u003cVBox fx:id\u003d\"secondaryContainer\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        \u003cLabel layoutX\u003d\"671.0\" layoutY\u003d\"118.0\" text\u003d\"Upcoming Tasks\" textFill\u003d\"WHITE\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        \u003cLabel layoutX\u003d\"7.0\" layoutY\u003d\"118.0\" text\u003d\"Terminal\" textFill\u003d\"WHITE\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        \u003cLabel fx:id\u003d\"date\" layoutX\u003d\"250.0\" layoutY\u003d\"118.0\" text\u003d\"Label\" textFill\u003d\"WHITE\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        \u003cText fill\u003d\"WHITE\" layoutX\u003d\"324.0\" layoutY\u003d\"38.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"ComPal V1.1\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "                \u003cFont size\u003d\"26.0\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        \u003c/Text\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ceffect\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "        \u003cBloom threshold\u003d\"1.0\"/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/effect\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccursor\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        \u003cCursor fx:constant\u003d\"OPEN_HAND\"/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/cursor\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jaedonkey"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 20,
      "jaedonkey": 8,
      "-": 24
    }
  },
  {
    "path": "src/test/java/compal/tasks/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static compal.tasks.Task.Priority.high;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private String description \u003d \"Test content\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private String date \u003d \"01/10/2019\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Deadline deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Task.Priority priority \u003d high;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    private String endTime \u003d \"1230\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        deadline \u003d new Deadline(description, priority, date, endTime);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lpeize"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void getPriority() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(priority, deadline.getPriority());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void getStatusIcon() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\\u2718\", deadline.getStatusIcon());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void getIsDone() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(\"false\", deadline.getisDone());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lpeize"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void getSymbol() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"D\", deadline.getSymbol());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void getDate() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Date d \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            d \u003d format.parse(date);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(d, deadline.getDate());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    void setDateTest() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Date d \u003d deadline.getDate();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        deadline.setDate(date);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(d, deadline.getDate());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    void getStringdate() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(date, deadline.getStringDate());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void getStartTime() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertNull(deadline.getStartTime());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lpeize"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void getStringStartTime() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(\"-\", deadline.getStringStartTime());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lpeize"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void getEndTime() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        Date d \u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lpeize"
        },
        "content": "            d \u003d format.parse(endTime);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lpeize"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(d, deadline.getEndTime());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void setEndTimeTest() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        Date d \u003d deadline.getEndTime();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        deadline.setEndTime(endTime);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(d, deadline.getEndTime());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void getStringEndTime() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(endTime, deadline.getStringEndTime());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void sethasReminder() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        deadline.setHasReminder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(true, deadline.hasReminder());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    void getDescription() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(description, deadline.getDescription());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    void markAsDoneTest() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        deadline.markAsDone();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, deadline.isDone);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    void toStringTest() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(\"\\n\" + \"[D]\" + \"[\" + \"\\u2718\" + \"] \" + description"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lpeize"
        },
        "content": "                + \" \\nDate: \" + date + \" \\nEnd Time: \" + endTime"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lpeize"
        },
        "content": "                + \" \\nPriority: \" + priority + \"\\n***************\", deadline.toString());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lpeize"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void getAllDetailsTest() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        StringBuilder list \u003d new StringBuilder();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"D\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(description);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"false\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(priority.toString());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(date);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"-_\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(endTime);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(deadline.gethasReminder());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(list.toString(), deadline.getAllDetailsAsString());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lpeize": 63,
      "-": 85
    }
  },
  {
    "path": "src/test/java/compal/tasks/DoAfterTasksTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static compal.tasks.Task.Priority.high;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoAfterTasksTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private String description \u003d \"Test content\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private String date \u003d \"01/10/2019\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private DoAfterTasks doAfterTasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Task.Priority priority \u003d high;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        doAfterTasks \u003d new DoAfterTasks(description, priority, date);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void getStatusIcon() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\\u2718\", doAfterTasks.getStatusIcon());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void getSymbol() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"DAT\", doAfterTasks.getSymbol());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void getDate() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Date d \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            d \u003d format.parse(date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(d, doAfterTasks.getDate());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setDateTest() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Date d \u003d doAfterTasks.getDate();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        doAfterTasks.setDate(date);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(d, doAfterTasks.getDate());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void getStringdate() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(date, doAfterTasks.getStringDate());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    void hasReminder() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(false, doAfterTasks.hasReminder());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    void getTime() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "        assertNull(doAfterTasks.getStartTime());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    void getDescription() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(description, doAfterTasks.getDescription());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    void markAsDoneTest() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        doAfterTasks.markAsDone();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, doAfterTasks.isDone);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 1,
      "-": 80
    }
  },
  {
    "path": "src/test/java/compal/tasks/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static compal.tasks.Task.Priority.high;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String description \u003d \"Test content\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private String date \u003d \"01/10/2019\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    private String startTime \u003d \"1130\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    private String endTime \u003d \"1230\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Task.Priority priority \u003d high;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        event \u003d new Event(description, priority, date, startTime, endTime);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lpeize"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void getPriority() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(priority, event.getPriority());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void getStatusIcon() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\\u2718\", event.getStatusIcon());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void getIsDone() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(\"false\", event.getisDone());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lpeize"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void getSymbol() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"E\", event.getSymbol());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    void getDate() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Date d \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            d \u003d format.parse(date);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(d, event.getDate());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void setDateTest() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Date d \u003d event.getDate();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        event.setDate(date);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(d, event.getDate());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    void getStringdate() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(date, event.getStringDate());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void getStartTime() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        Date d \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lpeize"
        },
        "content": "            d \u003d format.parse(startTime);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lpeize"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(d, event.getStartTime());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void setStartTimeTest() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        Date d \u003d event.getStartTime();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        event.setStartTime(startTime);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(d, event.getStartTime());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void getStringStartTime() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(startTime, event.getStringStartTime());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void getEndTime() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        Date d \u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lpeize"
        },
        "content": "            d \u003d format.parse(endTime);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(d, event.getEndTime());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void setEndTimeTest() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        Date d \u003d event.getEndTime();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        event.setEndTime(endTime);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(d, event.getEndTime());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void getStringEndTime() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(endTime, event.getStringEndTime());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lpeize"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void sethasReminder() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        event.setHasReminder();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(true, event.hasReminder());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    void getDescription() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(description, event.getDescription());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    void markAsDoneTest() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        event.markAsDone();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, event.isDone);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    void toStringTest() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(\"\\n\" + \"[E]\" + \"[\" + \"\\u2718\" + \"] \" + description"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lpeize"
        },
        "content": "                + \" \\nDate: \" + date + \" \\nStart Time: \" + startTime"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lpeize"
        },
        "content": "                + \" \\nEnd Time: \" + endTime + \" \\nPriority: \" + priority"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lpeize"
        },
        "content": "                + \"\\n***************\", event.toString());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lpeize"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void getAllDetailsTest() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        StringBuilder list \u003d new StringBuilder();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"E\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(description);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(false);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(priority.toString());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(date);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(startTime);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(endTime);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(event.gethasReminder());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(list.toString(), event.getAllDetailsAsString());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lpeize": 69,
      "-": 94
    }
  },
  {
    "path": "src/test/java/compal/tasks/FixedDurationTaskTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static compal.tasks.Task.Priority.high;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FixedDurationTaskTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String description \u003d \"Test content\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private String date \u003d \"01/10/2019\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    private String startTime \u003d \"1130\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    private String endTime \u003d \"1230\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Task.Priority priority \u003d high;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    private FixedDurationTask fdt;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        fdt \u003d new FixedDurationTask(description, priority, date, startTime, endTime);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lpeize"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void getPriority() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(priority, fdt.getPriority());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void getStatusIcon() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(\"\\u2718\", fdt.getStatusIcon());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lpeize"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void getIsDone() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(\"false\", fdt.getisDone());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void getSymbol() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(\"FDT\", fdt.getSymbol());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    void getDate() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Date d \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            d \u003d format.parse(date);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(d, fdt.getDate());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void setDateTest() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        Date d \u003d fdt.getDate();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        fdt.setDate(date);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(d, fdt.getDate());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    void getStringdate() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(date, fdt.getStringDate());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void getStartTime() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        Date d \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lpeize"
        },
        "content": "            d \u003d format.parse(startTime);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lpeize"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(d, fdt.getStartTime());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void setStartTimeTest() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        Date d \u003d fdt.getStartTime();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        fdt.setStartTime(startTime);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(d, fdt.getStartTime());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void getStringStartTime() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(startTime, fdt.getStringStartTime());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void getEndTime() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        Date d \u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lpeize"
        },
        "content": "            d \u003d format.parse(endTime);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(d, fdt.getEndTime());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lpeize"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void setEndTimeTest() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        Date d \u003d fdt.getEndTime();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        fdt.setEndTime(endTime);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(d, fdt.getEndTime());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void getStringEndTime() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(endTime, fdt.getStringEndTime());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void sethasReminder() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        fdt.setHasReminder();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(true, fdt.hasReminder());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    void getDescription() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(description, fdt.getDescription());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    void markAsDoneTest() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        fdt.markAsDone();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(true, fdt.isDone);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    void toStringTest() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(\"\\n\" + \"[FDT]\" + \"[\" + \"\\u2718\" + \"] \" + description"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lpeize"
        },
        "content": "                + \" \\nDate: \" + date + \" \\nStart Time: \" + startTime"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lpeize"
        },
        "content": "                + \" \\nEnd Time: \" + endTime + \" \\nPriority: \" + priority"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lpeize"
        },
        "content": "                + \"\\n***************\", fdt.toString());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lpeize"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void getAllDetailsTest() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        StringBuilder list \u003d new StringBuilder();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"FDT\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(description);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(false);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(priority.toString());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(date);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(startTime);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(endTime);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(fdt.gethasReminder());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(list.toString(), fdt.getAllDetailsAsString());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lpeize": 80,
      "-": 83
    }
  },
  {
    "path": "src/test/java/compal/tasks/RecurringTaskTesting.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static compal.tasks.Task.Priority.high;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RecurringTaskTesting {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String description \u003d \"Test content\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private String date \u003d \"01/10/2019\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    private String startTime \u003d \"1130\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    private String endTime \u003d \"1230\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    private String symbol \u003d \"RT\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Task.Priority priority \u003d high;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private RecurringTask recurringTask;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        recurringTask \u003d new RecurringTask(description, priority, date, startTime, endTime, symbol);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lpeize"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void getPriority() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(priority, recurringTask.getPriority());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void getStatusIcon() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\\u2718\", recurringTask.getStatusIcon());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void getIsDone() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(\"false\", recurringTask.getisDone());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lpeize"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void getSymbol() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(symbol, recurringTask.getSymbol());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void getDate() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Date d \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            d \u003d format.parse(date);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(d, recurringTask.getDate());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    void setDateTest() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Date d \u003d recurringTask.getDate();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        recurringTask.setDate(date);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(d, recurringTask.getDate());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    void getStringdate() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(date, recurringTask.getStringDate());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void getStartTime() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        Date d \u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lpeize"
        },
        "content": "            d \u003d format.parse(startTime);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lpeize"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(d, recurringTask.getStartTime());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void setStartTimeTest() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        Date d \u003d recurringTask.getStartTime();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        recurringTask.setStartTime(startTime);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(d, recurringTask.getStartTime());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void getStringStartTime() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(startTime, recurringTask.getStringStartTime());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void getEndTime() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"HHmm\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        Date d \u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lpeize"
        },
        "content": "            d \u003d format.parse(endTime);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(d, recurringTask.getEndTime());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lpeize"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void setEndTimeTest() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        Date d \u003d recurringTask.getEndTime();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        recurringTask.setEndTime(endTime);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(d, recurringTask.getEndTime());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void getStringEndTime() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(endTime, recurringTask.getStringEndTime());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void sethasReminder() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        recurringTask.setHasReminder();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(true, recurringTask.hasReminder());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    void getDescription() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(description, recurringTask.getDescription());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    void markAsDoneTest() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        recurringTask.markAsDone();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, recurringTask.isDone);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    void toStringTest() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(\"\\n\" + \"[\" + symbol + \"]\" + \"[\" + \"\\u2718\" + \"] \" + description"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lpeize"
        },
        "content": "                + \" \\nDate: \" + date + \" \\nStart Time: \" + startTime"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lpeize"
        },
        "content": "                + \" \\nEnd Time: \" + endTime + \" \\nPriority: \" + priority"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lpeize"
        },
        "content": "                + \"\\n***************\", recurringTask.toString());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lpeize"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lpeize"
        },
        "content": "    void getAllDetailsTest() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        StringBuilder list \u003d new StringBuilder();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(symbol);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(description);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(false);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(priority.toString());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(date);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(startTime);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(endTime);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(\"_\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        list.append(recurringTask.gethasReminder());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lpeize"
        },
        "content": "        assertEquals(list.toString(), recurringTask.getAllDetailsAsString());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lpeize": 71,
      "-": 93
    }
  },
  {
    "path": "src/test/java/compal/tasks/TaskListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package compal.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SholihinK"
        },
        "content": "import compal.commons.Compal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private Compal compal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        //model.parser.processCommands(\"deadline return book /by 2/12/2019 1800\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        compal \u003d new Compal();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList \u003d new TaskList(compal);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initest() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(compal, taskList.compal);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SholihinK": 1,
      "-": 23
    }
  }
]
