[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    archiveBaseName \u003d \"AlgoSenpai\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    archiveVersion \u003d \"0.1.0\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027, \u0027javafx.media\u0027 ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "group \u0027com.algosenpai.app\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    mainClassName \u003d \"com.algosenpai.app.Launcher\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    implementation \u0027com.itextpdf:itextpdf:5.5.10\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    implementation \u0027org.bouncycastle:bcprov-jdk15on:1.56\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    testImplementation \u0027org.testfx:testfx-core:4.0.16-alpha\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    testImplementation \u0027org.testfx:testfx-junit5:4.0.16-alpha\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    testImplementation \u0027org.testfx:openjfx-monocle:jdk-11+23\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \u003d \u0027full\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    systemProperty \u0027java.awt.headless\u0027, \u0027true\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    systemProperty \u0027testfx.robot\u0027, \u0027glass\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    systemProperty \u0027testfx.headless\u0027, \u0027true\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    systemProperty \u0027prism.order\u0027, \u0027sw\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    systemProperty \u0027prism.text\u0027, \u0027t2k\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u00272500\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 21,
      "-": 40
    }
  },
  {
    "path": "scenebuilder/basic-layout.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003cGridPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "  \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "  \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 36
    }
  },
  {
    "path": "scenebuilder/home.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003cGridPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "  \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "  \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cTextField id\u003d\"userInput\" GridPane.columnIndex\u003d\"2\" GridPane.columnSpan\u003d\"10\" GridPane.rowIndex\u003d\"11\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cLabel id\u003d\"sceneTitle\" prefHeight\u003d\"18.0\" prefWidth\u003d\"104.0\" text\u003d\"Home Page\" GridPane.columnIndex\u003d\"6\" GridPane.columnSpan\u003d\"2\" GridPane.rowIndex\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cButton id\u003d\"nextButton\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"32.0\" prefWidth\u003d\"105.0\" text\u003d\"Next\" GridPane.columnIndex\u003d\"12\" GridPane.rowIndex\u003d\"11\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cButton id\u003d\"settings\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"32.0\" prefWidth\u003d\"75.0\" text\u003d\"Settings\" GridPane.columnIndex\u003d\"13\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 48
    }
  },
  {
    "path": "scenebuilder/quiz.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003cGridPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "  \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "  \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cTextField id\u003d\"userInput\" GridPane.columnIndex\u003d\"2\" GridPane.columnSpan\u003d\"10\" GridPane.rowIndex\u003d\"11\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cLabel id\u003d\"sceneTitle\" prefHeight\u003d\"18.0\" prefWidth\u003d\"104.0\" text\u003d\"Quiz Page\" GridPane.columnIndex\u003d\"6\" GridPane.columnSpan\u003d\"2\" GridPane.rowIndex\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cButton id\u003d\"nextButton\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"32.0\" prefWidth\u003d\"105.0\" text\u003d\"Next\" GridPane.columnIndex\u003d\"12\" GridPane.rowIndex\u003d\"11\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "      \u003cButton id\u003d\"settings\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"32.0\" prefWidth\u003d\"75.0\" text\u003d\"Settings\" GridPane.columnIndex\u003d\"13\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 48
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/Launcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 11,
      "sevenmatt7": 2
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.logic.constant.SoundConstant;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.ui.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.ui.controller.MusicController;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.logic.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": " * A one scene chatbot GUI."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": " * There are two fxml files, MainWindow and DialogBox."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    //Initialise the different components here"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private Logic logic \u003d new Logic(parser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private static MusicController musicController;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            musicController \u003d new MusicController();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        } catch (URISyntaxException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public void start(Stage stage) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        startSplashScreen(stage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        PauseTransition pause \u003d new PauseTransition(Duration.seconds(3));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        pause.setOnFinished(event -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                    startMain(stage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        pause.play();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private void startSplashScreen(Stage stage) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        FXMLLoader fxmlSplashScreen \u003d new FXMLLoader(MainApp.class.getResource(\"/view/SplashScreen.fxml\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        AnchorPane ap \u003d fxmlSplashScreen.load();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        ap.setStyle(\"-fx-background-image: url(\u0027/images/cute-anime.png\u0027); -fx-background-size: cover;\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Scene splashScreen \u003d new Scene(ap, 600, 400);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        stage.setScene(splashScreen);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        stage.setTitle(\"AlgoSenpai Adventures\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private void startMain(Stage stage) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        FXMLLoader fxmlLoader \u003d new FXMLLoader(MainApp.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Scene scene \u003d new Scene(ap, 400, 600);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        fxmlLoader.\u003cUi\u003egetController().setLogic(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        stage.setTitle(\"AlgoSenpai Adventures\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 42,
      "sevenmatt7": 32
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/DukeExceptions.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "public class DukeExceptions extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    public DukeExceptions(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * To check if the input is empty."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @param userInput input keyed in by user"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @throws DukeExceptions prints out message to inform user to key in a valid command in the correct format"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    public static void checkUserInput(String userInput) throws DukeExceptions {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        if (userInput.isEmpty()) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            throw new DukeExceptions(\"☹ OOPS!!! Please key in a valid command. e.g. help\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * To check if the commands that require an argument is being inputted."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @param userInput input keyed in by user"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @throws DukeExceptions to inform user to key in a valid command in the given format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    public static void checkArgument(String userInput) throws DukeExceptions {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        String[] tokens \u003d userInput.split(\" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        for (String i : tokens) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            if (isInteger(i)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        if (count \u003d\u003d 0 || count \u003e 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            throw new DukeExceptions(\"☹ OOPS!!! Please key in a valid command. e.g. select 1.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * If the user meant to input his/her command, check if it is in the correct format."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @param userInput answer keyed in by the user"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @throws DukeExceptions to inform user to key in his/her answer in the given format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    public static void checkAnswer(String userInput) throws DukeExceptions {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        String[] tokens \u003d userInput.split(\" --\u003e \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        for (String i : tokens) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            if (!isInteger(i)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                throw new DukeExceptions(\"☹ OOPS!!! Please key in your answer in the following format: 12 --\u003e 32\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * Returns command to execute after parsing the user input."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @param s string taken in"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @return boolean true if the string can be returned as an integer else boolean false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    private static boolean isInteger(String s) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            Integer.parseInt(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 65,
      "sevenmatt7": 1
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.logic.command.CommandEnum;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.logic.chapters.QuizGenerator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "public class Logic {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private QuizGenerator quizMaker \u003d new QuizGenerator();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    //All variables for the settings of the program"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private boolean isNew \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private boolean isSettingUp \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private int level \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    //All variables for the quiz function"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private int selectedChapters \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private boolean isQuizMode \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private ArrayList\u003cQuestion\u003e quizList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private int questionNumber \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private int prevResult \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public Logic(Parser parser) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        this.parser \u003d parser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Parses the user input for the command to be created and executed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param userString the user input from the GUI."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @return the Command object with the correct attributes to be executed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public Command parseInputCommand(String userString) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        //if the program is in quiz mode, the input is not parsed"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        if (isQuizMode) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return new Command(CommandEnum.QUIZ, 0, userString);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        } else if (isSettingUp) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return new Command(CommandEnum.SETUP, 0, userString);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return parser.parseInput(userString);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param currCommand the Command to be executed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @return the program String response to be displayed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public String executeCommand(Command currCommand) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        String responseString;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        switch (currCommand.getType()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case SETUP:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            if (isNew) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                responseString \u003d checkStatus();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                return responseString;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                responseString \u003d \"Are you a boy or a girl?\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                isSettingUp \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                return responseString;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case MENU:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            String allCommands \u003d \"These are all the commands available: \\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                    + \"MENU, \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                    + \"START, \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                    + \"SELECT, \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                    + \"RESULT, \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                    + \"REPORT, \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                    + \"BACK, \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                    + \"HISTORY, \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                    + \"UNDO, \\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                    + \"CLEAR, \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                    + \"RESET, \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                    + \"SAVE, \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                    + \"HELP, \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                    + \"EXIT, \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                    + \"PRINT, \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                    + \"ARCHIVE, \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                    + \"INVALID\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return allCommands;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case START:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            isQuizMode \u003d true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            quizList \u003d quizMaker.generateQuiz(selectedChapters, quizList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return quizList.get(0).getQuestion();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case SELECT:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            selectedChapters \u003d currCommand.getParameter();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            responseString \u003d \"You have selected chapter \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                    + currCommand.getParameter()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                    + \" for the quiz!\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return responseString;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case RESULT:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            responseString \u003d \"You got \" + prevResult + \"/10 questions correct for the last attempt\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return responseString;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case REPORT:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            responseString \u003d \"report\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return responseString;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case BACK:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            responseString \u003d \"back\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return responseString;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case HISTORY:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            responseString \u003d \"history\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return responseString;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case UNDO:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            responseString \u003d \"testing\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return responseString;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case CLEAR:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            responseString \u003d \"clear\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return responseString;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case RESET:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            responseString \u003d \"reset\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return responseString;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case SAVE:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            responseString \u003d \"save\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return responseString;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            responseString \u003d \"help\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return responseString;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case EXIT:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            responseString \u003d \"exit\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return responseString;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case PRINT:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            responseString \u003d \"print\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return responseString;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case ARCHIVE:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            responseString \u003d \"archive\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return responseString;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case QUIZ:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            quizList.get(questionNumber).setAnswer(currCommand.getUserString());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            questionNumber++;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            if (questionNumber \u003c 10) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                return quizList.get(questionNumber).getQuestion();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            } else if (questionNumber \u003d\u003d 10) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                isQuizMode \u003d false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                int correctCount \u003d 0;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                    Question currQuestion \u003d quizList.get(i);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                    if (currQuestion.checkAnswer()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                        correctCount++;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                this.prevResult \u003d correctCount;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                quizList.clear();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                questionNumber \u003d 0;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                String endQuizMessage \u003d \"You got \" + correctCount + \"/10 questions correct!\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                return endQuizMessage;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return \"quiz\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return \"INVALID\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Checks whether it is the user\u0027s first time using the application."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * If it is his/her first time, the isSettingUp boolean flag will be set to true."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public String checkStatus() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        if (isNew) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            isSettingUp \u003d true;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            isNew \u003d false;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return \"Oh it seems that it is your first time here! Can I get your name?\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return \" Welcome back \" + name + \" You are currently level \" + level;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Sets the name of the user."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param userName the name input by the user."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public void setName(String userName) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        name \u003d userName;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 41,
      "sevenmatt7": 141
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.logic.command.CommandEnum;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Handle string entered by user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param input the raw user input"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @return the Command with the relevant type and parameter."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public Command parseInput(String input) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        String commandWord \u003d \"NULL\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        int parameter \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        if (input.contains(\" \")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            String[] parsedInput \u003d input.split(\" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            commandWord \u003d parsedInput[0].toLowerCase();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            parameter \u003d Integer.parseInt(parsedInput[1]);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            commandWord \u003d input;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case \"hello\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return new Command(CommandEnum.SETUP, 0, input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case \"menu\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return new Command(CommandEnum.MENU, 0, input);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case \"start\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return new Command(CommandEnum.START, 0, input);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case \"select\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return new Command(CommandEnum.SELECT, parameter, input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case \"result\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return new Command(CommandEnum.RESULT, 0, input);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case \"report\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return new Command(CommandEnum.REPORT, 0, input);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case \"back\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return new Command(CommandEnum.BACK, 0, input);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case \"history\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return new Command(CommandEnum.HISTORY, 0, input);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case \"undo\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return new Command(CommandEnum.UNDO, 0, input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case \"clear\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return new Command(CommandEnum.CLEAR, 0, input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case \"reset\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return new Command(CommandEnum.RESET, 0, input);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case \"save\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return new Command(CommandEnum.SAVE, 0, input);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return new Command(CommandEnum.HELP, 0, input);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case \"exit\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return new Command(CommandEnum.EXIT, 0, input);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case \"print\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return new Command(CommandEnum.PRINT, 0, input);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case \"archive\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return new Command(CommandEnum.ARCHIVE, 0, input);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return new Command(CommandEnum.INVALID, 0, input);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Returns command to execute after parsing the user input."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param s string taken in"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @return boolean true if the string can be returned as an integer else boolean false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public static boolean isInteger(String s) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            Integer.parseInt(s);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Returns the command that is closest to whatever the user has typed in."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param userInput the command user\u0027s wants to execute"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @return closest command the user might have meant"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public static String possibleCommand(String userInput) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        String[] all \u003d {\"menu\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            \"start\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            \"select\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            \"report\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            \"result\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            \"back\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            \"history\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            \"undo\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            \"clear\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            \"reset\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            \"save\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            \"help\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            \"exit\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        };"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        String str \u003d \"\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        double num \u003d -1;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        for (String s : all) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            double temp \u003d countPairs(userInput, userInput.length(), s, s.length()) / s.length();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            if (temp \u003e num) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                num \u003d temp;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                str \u003d s;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * To get the number of characters the two strings have in common."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param unknownCommand the command user has inputted"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param l1 length of the unknownCommand"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param knownCommand one of the commands in the list of commands"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param l2 length of a particular command"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @return the number of pairs of alphabets that the both strings have in common"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public static int countPairs(String unknownCommand, int l1, String knownCommand, int l2) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        int []freq1 \u003d new int[26];"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        int []freq2 \u003d new int[26];"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Arrays.fill(freq1, 0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Arrays.fill(freq2, 0);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        for (int i \u003d 0; i \u003c l1; i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            freq1[unknownCommand.charAt(i) - \u0027a\u0027]++;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        for (int i \u003d 0; i \u003c l2; i++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            freq2[knownCommand.charAt(i) - \u0027a\u0027]++;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        for (int i \u003d 0; i \u003c 26; i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            count +\u003d (Math.min(freq1[i], freq2[i]));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        return count;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * To tell if the user\u0027s input is meant to be an answer by checking if there is a digit inside."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param s takes in the string that is to be checked"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @return true if string contains a digit otherwise false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public static boolean hasDigit(String s) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        for (char c: s.toCharArray()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            if (Character.isDigit(c)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sevenmatt7": 157
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/Question.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.model.ReviewTracingListModel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public class Question {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private String correctAnswer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private String userAnswer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private ReviewTracingListModel rtlm \u003d new ReviewTracingListModel();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Creates a question using multple parameters."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param question  The question to be shown to the user"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param answer    The correct answer to the question"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param rtlm      The steps leading to the correct answer"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public Question(String question, String answer, ReviewTracingListModel rtlm) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        this.correctAnswer \u003d answer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.rtlm \u003d rtlm;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        return correctAnswer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public void setAnswer(String userAnswer) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        this.userAnswer \u003d userAnswer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Checks the user answer with the correct answer."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @return a boolean on whether the user answer is equal to the correct answer."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public boolean checkAnswer() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        if (this.userAnswer.equals(this.correctAnswer)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public ReviewTracingListModel getRtlm() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return rtlm;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sevenmatt7": 21,
      "therealcs1010": 30
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/chapters/ChapterLinkedList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app.logic.chapters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "class ChapterLinkedList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static Random random \u003d new Random();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static Scanner s \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    private int totalAnswers;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    private int correctAnswers;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Generates a random question according to a random value."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return True if the question was answered correctly, or false if the question"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *         was answered wrongly."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public Boolean generateQuestions() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int questionType \u003d random.nextInt(4);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        switch (questionType) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return stackPopPushQuestion();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return queuePopPushQuestion();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return singleInsertLinkedListQuestion();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return pseudoCodeQuestion();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Generates a pseudoCode question that tests the user on their understanding of"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Linked List through pseudocode calculation. An input is taken from the user"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * as an answer."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return True if the answer matches the input, or false if the answer is"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *         wrong."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private Boolean pseudoCodeQuestion() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int arraySize \u003d random.nextInt(4) + 6;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        ArrayList\u003cInteger\u003e array \u003d new ArrayList\u003c\u003e(createList(arraySize));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (int i \u003d 0; i \u003c array.size(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            array.set(i, array.get(i) % 10);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        System.out.println(\"In the pseudocode program below, list is an initially empty Singly Linked List.\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"The function populateList() adds the integers \" + array + \" to the tail of the list sequentially.\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"What is the output of the program?\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        ArrayList\u003cString\u003e pseudoCode \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        generatePseudoCode(pseudoCode);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        printPseudoCode(pseudoCode);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int answer \u003d calculateSum(array, pseudoCode);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int userInput \u003d s.nextInt();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        s.nextLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        if (answer \u003d\u003d userInput) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            System.out.println(\"Well Done! You got a correct answer!\\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            System.out.print(\"This is the correct answer : \" + answer);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            System.out.println(\". Try harder!\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Calculates the sum of the values based on the pseudocode generated."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param array      The ArrayList which makes up the Linked List."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param pseudoCode The list of instructions in the pseudo-code."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The value of the sum given in the pseudo-code."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private int calculateSum(ArrayList\u003cInteger\u003e array, ArrayList\u003cString\u003e pseudoCode) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int sum \u003d 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (String i : pseudoCode) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            switch (i) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case \"n \u003d n.next;\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case \"sum +\u003d list.tail.value;\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                sum +\u003d array.get(array.size() - 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case \"sum +\u003d list.head.value;\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                sum +\u003d array.get(0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case \"n \u003d list.head;\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                index \u003d 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case \"sum +\u003d n.value;\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                sum +\u003d array.get(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case \"sum +\u003d n.next.value;\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                sum +\u003d array.get(index + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return sum;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Generates a list of pseudo-code, such as \"n \u003d n.next\", or \"n \u003d list.head\"."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * This list of instructions will be printed to the user."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param pseudoCode The list which will contain the instructions."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private void generatePseudoCode(ArrayList\u003cString\u003e pseudoCode) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        pseudoCode.add(\"populateList();\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        pseudoCode.add(\"int sum \u003d 0;\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        pseudoCode.add(\"Node n \u003d list.head; //list.head/list.tail points to the first/last integer in list\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int noOfCommands \u003d random.nextInt(4) + 4;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (int i \u003d 0; i \u003c noOfCommands; i++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            int commandToAdd \u003d random.nextInt(6);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            switch (commandToAdd) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case 0:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                pseudoCode.add(\"n \u003d n.next;\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                pseudoCode.add(\"sum +\u003d list.tail.value;\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                pseudoCode.add(\"sum +\u003d list.head.value;\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                pseudoCode.add(\"n \u003d list.head;\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case 4:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                pseudoCode.add(\"sum +\u003d n.value;\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case 5:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                pseudoCode.add(\"sum +\u003d n.next.value;\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        pseudoCode.add(\"print sum;\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Generates a question relating to a single insertion in a Singly Linked List."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * The question can be either appending to the head or the tail of the linked"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * list. A sequence of integers are taken in from the user as an answer."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return True if the answer matches the input given by the user, else false if"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *         the answer is wrong."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private Boolean singleInsertLinkedListQuestion() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int listSize \u003d random.nextInt(4) + 5;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        LinkedList\u003cInteger\u003e ll \u003d createList(listSize);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int valueToAdd \u003d random.nextInt(100);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String positionToAdd;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        if (random.nextInt(2) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            positionToAdd \u003d \"head\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            positionToAdd \u003d \"tail\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        System.out.println(\"Consider the Singly Linked List of size \" + listSize + \" below.\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \" It undergoes an insertion of value \" + valueToAdd + \" at the \" + positionToAdd"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \".\\nWhat would be the new sequence of integers?\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        printList(ll);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        if (positionToAdd.equals(\"head\")) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            ll.addFirst(valueToAdd);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            ll.addLast(valueToAdd);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        LinkedList\u003cInteger\u003e userInput \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String input \u003d s.nextLine();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String[] arr \u003d input.split(\" -\u003e \");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (String string : arr) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            userInput.add(Integer.parseInt(string));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        if (userInput.equals(ll)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            System.out.println(\"Well Done! You got a correct answer!\\n\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            System.out.println(\"This is the correct answer : \");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            printList(ll);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            System.out.println(\"Try harder!\\n\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Generates a Queue question related to popping and pushing. A random size is"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * determined, followed by a series of instructions consisting of pop and push."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * The algorithm will do the popping and pushing accordingly. An input is taken"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * in from the user as an answer."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return True if the answer matches the input, or false if the question was"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *         answered wrongly."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private Boolean queuePopPushQuestion() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int queueSize \u003d random.nextInt(4) + 4;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        LinkedList\u003cInteger\u003e queue \u003d createList(queueSize);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        ArrayList\u003cString\u003e instructions \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int numberOfInstructions \u003d random.nextInt(3) + 4;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        addInstructions(instructions, numberOfInstructions);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        System.out.println(\"A Queue of size \" + queueSize"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \" undergoes a series of operations as shown below.\\n\""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"What would be the new value called upon queue.peek()?\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        printQueue(queue);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        printInstructions(instructions);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        changeQueue(instructions, queue);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int val \u003d s.nextInt();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        s.nextLine();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        if (val \u003d\u003d queue.getLast()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            System.out.println(\"Well Done! You got a correct answer!\\n\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            System.out.println(\"This is the correct answer : \" + queue.getLast() + \"\\nTry harder!\\n\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Changes the queue according to the instructions given. If instruction is pop,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * the front value of the list would be removed, or else a new value will be"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * pushed into the queue."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param instructions The list of instructions given."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @param queue        The list which would be edited according to the"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *                     instructions given."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private void changeQueue(ArrayList\u003cString\u003e instructions, LinkedList\u003cInteger\u003e queue) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (String cmd : instructions) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            if (cmd.contains(\"Pop\")) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                queue.removeLast();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                String number \u003d cmd.substring(5, cmd.length() - 2);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                int valuetoadd \u003d Integer.parseInt(number);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                queue.addFirst(valuetoadd);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Generates a Stack operations question related to pushing and popping. A"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * random stack size is determined and the stack is created. A sequence of"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * instructions consisting of push and pops are created, followed by which, the"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * algorithm will do the popping and pushing accordingly. An input is taken in"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * from the user as an answer."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return True if the answer matches the input, or false if the answer is"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *         wrong."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private Boolean stackPopPushQuestion() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int stackSize \u003d random.nextInt(4) + 4;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        LinkedList\u003cInteger\u003e stack \u003d createList(stackSize);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        ArrayList\u003cString\u003e instructions \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int numberOfInstructions \u003d random.nextInt(3) + 4;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        addInstructions(instructions, numberOfInstructions);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        System.out.println(\"A Stack of size \" + stackSize"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \" undergoes a series of operations as shown below.\\n\""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"What would be the new value called upon stack.peek()?\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        printStack(stack);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        printInstructions(instructions);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        changeStack(instructions, stack);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int val \u003d s.nextInt();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        s.nextLine();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        if (val \u003d\u003d stack.getLast()) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            System.out.println(\"Well Done! You got a correct answer!\\n\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            System.out.println(\"This is the correct answer : \" + stack.getLast() + \"\\nTry harder!\\n\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Changes the stack according to the instructions generated. Instructions are"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * either pop or push."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param instructions The list of instructions provided."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param stack        The data structure to be changed."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private void changeStack(ArrayList\u003cString\u003e instructions, LinkedList\u003cInteger\u003e stack) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (String cmd : instructions) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            if (cmd.contains(\"Pop\")) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                stack.removeLast();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                String number \u003d cmd.substring(5, cmd.length() - 2);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                int valuetoadd \u003d Integer.parseInt(number);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                stack.addLast(valuetoadd);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Adds new instructions to the list through random generation of either 1 or 0."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * If values is 0, a push command is added along with a value. Else, a pop"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * command is added."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param instructions         The list where instructions will be added."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param numberOfInstructions The number of instructions to be added into the"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *                             list."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private void addInstructions(ArrayList\u003cString\u003e instructions, int numberOfInstructions) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (int i \u003d 0; i \u003c numberOfInstructions; i++) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            int val \u003d random.nextInt(2);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            int toadd \u003d random.nextInt(100);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            switch (val) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case 0:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                String combined \u003d \"Push(\" + Integer.toString(toadd) + \");\";"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                instructions.add(combined);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                instructions.add(\"Pop();\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Creates a Linked List and populate it with unique numbers."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param size The number of elements to be in the Linked List."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The Linked List data structure to be used for the question."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private LinkedList\u003cInteger\u003e createList(int size) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        HashSet\u003cInteger\u003e set \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        while (set.size() !\u003d size) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            int value \u003d random.nextInt(100);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            set.add(value);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        LinkedList\u003cInteger\u003e stackCreated \u003d new LinkedList\u003c\u003e(set);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return stackCreated;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Prints the list of pseudo-code."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param pseudoCode The list of instructions in the pseudo-code."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private void printPseudoCode(ArrayList\u003cString\u003e pseudoCode) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (String cmd : pseudoCode) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            System.out.println(cmd);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Prints the list given."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param ll The linked list provided."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private void printList(LinkedList\u003cInteger\u003e ll) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (int i : ll) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            System.out.printf(\"[%d]\", i);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            if (i !\u003d ll.getLast()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                System.out.print(\" -\u003e \");"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Prints the stack created."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param stack The stack containing the elements."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private void printStack(LinkedList\u003cInteger\u003e stack) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (int i : stack) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            System.out.printf(\"[%d] \u003c- \", i);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        System.out.println(\"Head\");"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Prints the queue created."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param queue The queue containing the elements."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private void printQueue(LinkedList\u003cInteger\u003e queue) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (int i : queue) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            System.out.printf(\"[%d] -\u003e \", i);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        System.out.println(\"Front\");"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Prints the instruction given by the list on separate new lines."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param instructions The list of instructions provided."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private void printInstructions(ArrayList\u003cString\u003e instructions) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (String s : instructions) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            System.out.printf(\"%d. %s\\n\", i, s);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 1,
      "sevenmatt7": 2,
      "therealcs1010": 396,
      "modakshantanu": 4
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/chapters/ChapterSorting.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app.logic.chapters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.logic.Question;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.model.ReviewTracingListModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.model.ReviewTracingModel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "public class ChapterSorting {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static Random random \u003d new Random();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static Scanner s \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Generates the question by using a random number to determine which of the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * sub-questions to ask."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return A question class that contains the question and expected answer."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public static Question generateQuestions() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int questionType \u003d random.nextInt(4);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        switch (questionType) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return bubbleSortPassesQuestion();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return quickSortPivotsQuestion();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return insertionSortSwapsQuestion();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return selectionSortSwapsQuestion();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Generates the Selection Sort Algorithm question related to the sequence of"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * integers after a certain number of swaps. It determines a random array size,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * then runs the algorithm on it for certain number of swaps, after which it"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * will terminate."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return the question class with the question."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static Question selectionSortSwapsQuestion() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int arraySize \u003d random.nextInt(4) + 5;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        ArrayList\u003cInteger\u003e initialArray \u003d new ArrayList\u003c\u003e(generateArray(arraySize));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int swaps \u003d random.nextInt(arraySize - 5) + 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String question \u003d \"An array of \" + arraySize + \" elements underwent the following Selection Sort Algorithm : \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + initialArray + \"\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question +\u003d \"What would be the new configuration of the elements after \" + swaps + \" swaps?\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question +\u003d \"int i, j, min_idx;\\n\" + \"   for (i \u003d 0; i \u003c n-1; i++) {\\n\" + \"       min_idx \u003d i;\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"       for (j \u003d i+1; j \u003c n; j++) {\\n\" + \"           if (arr[j] \u003c arr[min_idx]) {\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"               min_idx \u003d j;\\n\" + \"       }\\n\" + \"       }\\n\" + \"   if (min_idx !\u003d i) {\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"       swap(arr[min_idx], arr[i]);\\n\" + \"   }\" + \"}\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        ReviewTracingListModel rtlm \u003d new ReviewTracingListModel();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        selectionSort(initialArray, swaps, rtlm);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Question newQuestion \u003d new Question(question, initialArray.toString(), rtlm);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return newQuestion;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Generates the Insertion Sort Algorithm question regarding the sequence of"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * integers after a certain number of swaps. It determines a random array size,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * then conducts Insertion Sort on it. A random number of swaps is generated,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * after which Insertion Sort stops."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return the question class with the question."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static Question insertionSortSwapsQuestion() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int arraySize \u003d random.nextInt(4) + 5;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        ArrayList\u003cInteger\u003e initialArray \u003d new ArrayList\u003c\u003e(generateArray(arraySize));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int swaps \u003d random.nextInt(arraySize - 2) + 1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String question \u003d \"An array of \" + arraySize + \" elements underwent the following Insertion Sort Algorithm : \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + initialArray + \"\\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question +\u003d \"What would be the new configuration of the elements after \" + swaps + \" swaps?\\n\\n\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question +\u003d \"int i, key, j;\\n\" + \"for (i \u003d 1; i \u003c n; i++) {\\n\" + \"    key \u003d arr[i];\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"    j \u003d i - 1;\\n\" + \"    while (j \u003e\u003d 0 \u0026\u0026 arr[j] \u003e key) {\\n\" + \"        arr[j + 1] \u003d arr[j];\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"        j \u003d j - 1;\\n\" + \"    }\\n\" + \"    arr[j + 1] \u003d key;\\n\" + \"} \\n\\n\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        ReviewTracingListModel rtlm \u003d new ReviewTracingListModel();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        insertionSort(initialArray, swaps, rtlm);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Question newQuestion \u003d new Question(question, initialArray.toString(), rtlm);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return newQuestion;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Generates the QuickSort Algorithm question regarding number of possible"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * pivots after certain passes of the algorithm. It determines a random array"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * size, then conducts QuickSort on it. A random snapshot of the array is taken"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * for the question and the answer is pre-determined."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return the question class with the question."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static Question quickSortPivotsQuestion() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int arraySize \u003d random.nextInt(6) + 6;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        ArrayList\u003cInteger\u003e initialArray \u003d new ArrayList\u003c\u003e(generateArray(arraySize));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Integer[] arr \u003d initialArray.toArray(new Integer[arraySize]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        ArrayList\u003cInteger[]\u003e allSteps \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        quickSort(arr, 0, arraySize - 1, allSteps);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int numberOfChoices \u003d allSteps.size() - 1;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        arr \u003d allSteps.get(random.nextInt(numberOfChoices));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        initialArray \u003d new ArrayList\u003c\u003e(Arrays.asList(arr));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String question \u003d \"An array of \" + arraySize"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \" elements underwent some passes of the Quick Sort Algorithm to become : \" + initialArray + \"\\n\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question +\u003d \"How many elements could possibly have been the pivot?\\n\\n\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int answer \u003d 0;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (int i \u003d 0; i \u003c arraySize; i++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            Boolean canBePivot \u003d true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            for (int j \u003d 0; j \u003c arraySize; j++) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                if (i \u003d\u003d j) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                if ((j \u003c i \u0026\u0026 arr[j] \u003e arr[i]) || (j \u003e i \u0026\u0026 arr[j] \u003c arr[i])) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    canBePivot \u003d false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            if (canBePivot) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                answer++;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Question newQuestion \u003d new Question(question, Integer.toString(answer), new ReviewTracingListModel());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return newQuestion;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Generates the BubbleSort Algorithm question regarding the sequence of"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * integers after a certain number of passes. It determines a random array size,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * then fills the array with unique numbers. A random number of passes is"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * determined and the BubbleSort Algorithm stops midway."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return the question class with the question."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static Question bubbleSortPassesQuestion() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int arraySize \u003d random.nextInt(7) + 3;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        ArrayList\u003cInteger\u003e initialArray \u003d new ArrayList\u003c\u003e(generateArray(arraySize));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int passes \u003d random.nextInt(arraySize - 2) + 1;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String question \u003d \"An array of \" + arraySize + \" elements underwent the following Bubble Sort Algorithm : \""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + initialArray + \"\\n\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question +\u003d \"What would be the new configuration of the elements after \" + passes + \" passes?\\n\\n\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question +\u003d \"for (int i \u003d 0; i \u003c passes; i++) {\\n\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"   for (int j \u003d 0; j \u003c arr.size - 1 - i; j ++) {\\n\" + \"       if (arr[j] \u003e arr[j + 1]) {\\n\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"            swap (arr[j], arr[j+1]);\\n\" + \"       }\\n\" + \"   }\\n\" + \"}\\n\\n\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        ReviewTracingListModel rtlm \u003d new ReviewTracingListModel();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        bubbleSort(initialArray, passes, rtlm);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Question newQuestion \u003d new Question(question, initialArray.toString(), rtlm);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return newQuestion;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Conducts Selection Sort on the given ArrayList."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param arr   The ArrayList to be sorted."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param swaps The number of swaps before the program terminates."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param rtlm  The steps taken in the solution"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static void selectionSort(ArrayList\u003cInteger\u003e arr, int swaps, ReviewTracingListModel rtlm) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int j;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int minIdx;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (i \u003d 0; i \u003c arr.size() - 1; i++) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            minIdx \u003d i;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            for (j \u003d i + 1; j \u003c arr.size(); j++) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                if (arr.get(j) \u003c arr.get(minIdx)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    minIdx \u003d j;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            int temp \u003d arr.get(minIdx);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            arr.set(minIdx, arr.get(i));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            arr.set(i, temp);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            if (minIdx !\u003d i) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            if (counter \u003d\u003d swaps) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Conducts Insertion Sort on the given ArrayList."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *  @param arr   The array to conduct the Insertion Sort algorithm on."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param swaps The number of swaps to be performed before the algorithm"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param rtlm  The steps taken in the solution"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static void insertionSort(ArrayList\u003cInteger\u003e arr, int swaps, ReviewTracingListModel rtlm) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int key;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int j;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (i \u003d 1; i \u003c arr.size(); i++) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            key \u003d arr.get(i);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            j \u003d i - 1;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            while (j \u003e\u003d 0 \u0026\u0026 arr.get(j) \u003e key) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                arr.set(j + 1, arr.get(j));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                j \u003d j - 1;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                if (counter \u003d\u003d swaps) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            arr.set(j + 1, key);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            if (counter \u003d\u003d swaps) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Bubble Sorts the array."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param arr    The arraylist to be sorted."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param passes The number of passes before the program gets terminated."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param rtlm   The steps taken in the solution"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static void bubbleSort(ArrayList\u003cInteger\u003e arr, int passes, ReviewTracingListModel rtlm) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (int i \u003d 0; i \u003c passes; i++) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            for (int j \u003d 0; j \u003c arr.size() - 1 - i; j++) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                int first \u003d arr.get(j);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                int second \u003d arr.get(j + 1);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                rtlm.addReviewTracingModel(new ReviewTracingModel(j, j + 1, \"c\"));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                if (first \u003e second) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    rtlm.addReviewTracingModel(new ReviewTracingModel(j, j + 1, \"s\"));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    int temp \u003d first;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    arr.set(j, second);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    arr.set(j + 1, temp);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Quick Sorts the array."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param arr      The array to be sorted."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param low      The start of the partitioning."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param high     The end of the partitioning."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param allSteps The arraylist which takes a snapshot after each step."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static void quickSort(Integer[] arr, int low, int high, ArrayList\u003cInteger[]\u003e allSteps) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        if (low \u003c high) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            int partitionIndex \u003d partition(arr, low, high, allSteps);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            quickSort(arr, low, partitionIndex - 1, allSteps);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            quickSort(arr, partitionIndex + 1, high, allSteps);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Partitions the array according to the Quick Sort Algorithm."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param arr      The array to be sorted."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param low      The start of the partitioning."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param high     The end of the partitioning."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param allSteps The arraylist which takes a snapshot after each step."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return An integer which is the partitioning index."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static int partition(Integer[] arr, int low, int high, ArrayList\u003cInteger[]\u003e allSteps) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int pivot \u003d arr[high];"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int i \u003d (low - 1);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (int j \u003d low; j \u003c\u003d high - 1; j++) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            if (arr[j] \u003c pivot) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                int temp \u003d arr[i];"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                arr[i] \u003d arr[j];"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                arr[j] \u003d temp;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int temp \u003d arr[i + 1];"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        arr[i + 1] \u003d arr[high];"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        arr[high] \u003d temp;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Integer[] tempArray \u003d Arrays.copyOf(arr, arr.length);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        allSteps.add(tempArray);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return (i + 1);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Generates the set of values to be used for the arrays."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param arraySize The size of the set to be used."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The hashset to be used for the array."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static HashSet\u003cInteger\u003e generateArray(int arraySize) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        HashSet\u003cInteger\u003e tempStorage \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        while (tempStorage.size() !\u003d arraySize) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            int value \u003d random.nextInt(100);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            tempStorage.add(value);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return tempStorage;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sevenmatt7": 5,
      "therealcs1010": 288
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/chapters/QuizGenerator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app.logic.chapters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.logic.Question;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "public class QuizGenerator {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Generates the quiz according to the chapters specified by the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * By default, all the chapters will be selected."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param questionList the ArrayList of Questions to be filled."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @return the ArrayList with all the questions generated"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public ArrayList\u003cQuestion\u003e generateQuiz(int selectedChapters, ArrayList\u003cQuestion\u003e questionList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        questionList \u003d new ArrayList\u003cQuestion\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        if (selectedChapters \u003d\u003d 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                questionList.add(ChapterSorting.generateQuestions());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                questionList.add(ChapterSorting.generateQuestions());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        return questionList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sevenmatt7": 30
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private CommandEnum commandType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private String userString;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private int commandParameter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Create new command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public Command(CommandEnum commandType, int specifier, String input) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        this.commandParameter \u003d specifier;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        this.userString \u003d input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public CommandEnum getType() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        return this.commandType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public String getUserString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        return this.userString;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public int getParameter() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        return this.commandParameter;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sevenmatt7": 34
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/CommandEnum.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "public enum CommandEnum {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    MENU,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    START,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    SELECT,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    RESULT,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    REPORT,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    BACK,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    HISTORY,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    UNDO,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    CLEAR,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    RESET,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    SAVE,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    HELP,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    EXIT,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    PRINT,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    ARCHIVE,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    INVALID,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    QUIZ,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    SETUP"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sevenmatt7": 23
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/constant/ImagesConstant.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app.logic.constant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class ImagesConstant {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public static Map\u003cImagesEnum, String\u003e quizImages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public static Map\u003cImagesEnum, String\u003e homeImages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public static Map\u003cImagesEnum, String\u003e dateImages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public static Map\u003cImagesEnum, String\u003e endImages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public static Map\u003cImagesEnum, String\u003e girlsImages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public static Map\u003cImagesEnum, String\u003e reviewImages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public static Map\u003cImagesEnum, String\u003e characterImages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public static final ArrayList\u003cString\u003e characterImagesList \u003d new ArrayList\u003c\u003e() {{"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            add(\"miku.png\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            add(\"lolicon.png\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        quizImages \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        quizImages.put(ImagesEnum.MORNING_CLASSROOM, \"morning-classroom.jpg\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        quizImages.put(ImagesEnum.AFTERNOON_CLASSROOM, \"afternoon-classroom.jpg\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        quizImages.put(ImagesEnum.EVENING_CLASSROOM, \"evening-classroom.jpg\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        quizImages.put(ImagesEnum.EMPTY_CLASSROOM, \"empty-classroom.jpg\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        homeImages \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        homeImages.put(ImagesEnum.CUTE_ANIME, \"cute-anime.png\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        dateImages \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        dateImages.put(ImagesEnum.PARK, \"park.jpg\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        dateImages.put(ImagesEnum.BEDROOM, \"bedroom.jpg\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        dateImages.put(ImagesEnum.SWIMMING_POOL, \"swimming-pool.jpg\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        dateImages.put(ImagesEnum.TOUR, \"tour.jpg\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        dateImages.put(ImagesEnum.TOWN, \"town.jpg\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        endImages \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        endImages.put(ImagesEnum.EVENING, \"evening.jpg\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        girlsImages \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        girlsImages.put(ImagesEnum.KISS, \"kiss.png\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        reviewImages \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        reviewImages.put(ImagesEnum.SAO, \"sao.jpeg\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        characterImages \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        characterImages.put(ImagesEnum.MIKU, \"miku.png\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        characterImages.put(ImagesEnum.LOLICON, \"lolicon.png\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 51,
      "sevenmatt7": 1
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/constant/ImagesEnum.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app.logic.constant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public enum  ImagesEnum {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    // background images for home scene"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    CUTE_ANIME,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    // background images for quiz scene"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    AFTERNOON_CLASSROOM,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    EMPTY_CLASSROOM,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    EVENING_CLASSROOM,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    MORNING_CLASSROOM,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    // background images for end scene"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    EVENING,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    // background images for girl scene"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    KISS,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    // background images for date scene"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    BEDROOM,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    PARK,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    SWIMMING_POOL,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    TOUR,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    TOWN,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    // background images for review scene"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    SAO,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    // images of character"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    LOLICON,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    MIKU;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 32,
      "sevenmatt7": 1
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/constant/SoundConstant.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app.logic.constant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class SoundConstant {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public static Map\u003cSoundEnum, String\u003e music;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        music \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        music.put(SoundEnum.BURST_THE_GRAVITY, \"burst-the-gravity.wav\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        music.put(SoundEnum.GOTOBUN, \"gotobun.wav\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        music.put(SoundEnum.REZERO, \"rezero.wav\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        music.put(SoundEnum.ROMEO_AND_CINDERELLA, \"romeo-and-cinderella.wav\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        music.put(SoundEnum.SATURATION, \"saturation.wav\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        music.put(SoundEnum.SISTERS, \"sisters.wav\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        music.put(SoundEnum.PROMISE, \"promise.wav\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        music.put(SoundEnum.ASAYAKE_NO_STARMINE, \"asayake-no-starmine.wav\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 20,
      "sevenmatt7": 1
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/constant/SoundEnum.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app.logic.constant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public enum SoundEnum {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    ASAYAKE_NO_STARMINE,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    BURST_THE_GRAVITY,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    GOTOBUN,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    PROMISE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    REZERO,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    ROMEO_AND_CINDERELLA,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    SATURATION,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    SISTERS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 13,
      "sevenmatt7": 1
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/model/ReviewQuestionListModel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class ReviewQuestionListModel {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private List\u003cReviewQuestionModel\u003e reviewQuizModelList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public ReviewQuestionListModel() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        reviewQuizModelList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public void addReviewQuizModel(ReviewQuestionModel reviewQuizModel) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.reviewQuizModelList.add(reviewQuizModel);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return reviewQuizModelList.size();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public ReviewQuestionModel get(int i) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return reviewQuizModelList.get(i);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 26
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/model/ReviewQuestionModel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class ReviewQuestionModel {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private List\u003cInteger\u003e list;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private String myAnswer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private String actualAnswer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public ReviewQuestionModel() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public String getActualAnswer() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return actualAnswer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public String getMyAnswer() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return myAnswer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public void setActualAnswer(String actualAnswer) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.actualAnswer \u003d actualAnswer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public void setMyAnswer(String myAnswer) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.myAnswer \u003d myAnswer;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public void setQuestion(String question) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public List\u003cInteger\u003e getList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public void setList(List\u003cInteger\u003e list) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 52
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/model/ReviewTracingListModel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class ReviewTracingListModel {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private ArrayList\u003cReviewTracingModel\u003e reviewTracingModelArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public ReviewTracingListModel() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        reviewTracingModelArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public void addReviewTracingModel(ReviewTracingModel reviewTracingModel) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.reviewTracingModelArrayList.add(reviewTracingModel);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public ReviewTracingModel getReviewTracingModel(int i) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return reviewTracingModelArrayList.get(i);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return reviewTracingModelArrayList.size();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 24
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/model/ReviewTracingModel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class ReviewTracingModel {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private int indexLeft;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private int indexRight;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Initialize containers to store the step in the algorithm."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param indexLeft left bubble in the tracing step."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param indexRight right bubble in the tracing step."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param type mode of operation in the tracing step."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public ReviewTracingModel(int indexLeft, int indexRight, String type) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.indexLeft \u003d indexLeft;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.indexRight \u003d indexRight;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public int getIndexLeft() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return indexLeft;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public int getIndexRight() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return indexRight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public void setIndexLeft(int indexLeft) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.indexLeft \u003d indexLeft;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public void setIndexRight(int indexRight) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.indexRight \u003d indexRight;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public void setType(String type) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 46
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/model/Triplet.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class Triplet\u003cT, U, V\u003e {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private final T first;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private final U second;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private final V third;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Initializes container to store a triplet."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param first first item in triplet."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param second second item in triplet."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param third third item in triplet."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public Triplet(T first, U second, V third) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.first \u003d first;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.second \u003d second;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.third \u003d third;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public T getFirst() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return first;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public U getSecond() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return second;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public V getThird() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return third;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 32
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/stats/ChapterStat.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.stats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " * Chapter Statistics. Holds the data about each chapter."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "public class ChapterStat {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    String chapterName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    int chapterNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    int attempts;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    int totalAnswered;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    int correctAnswers;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    int wrongAnswers;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    double percentage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    String comments;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param chapterName The name of the chapter."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param chapterNumber The chapter number."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param attempts The number of times that chapter has been attempted."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @param totalAnswered The total answered questions."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @param correctAnswers The number of correctly answered questions."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param wrongAnswers The number of wrongly answered questions."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param percentage The percentage of answers answered correctly."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param comments The comments given for each chapter."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public ChapterStat(String chapterName, int chapterNumber, int attempts,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                       int totalAnswered, int correctAnswers, int wrongAnswers,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                       double percentage, String comments) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.chapterName \u003d chapterName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.chapterNumber \u003d chapterNumber;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.attempts \u003d attempts;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        this.totalAnswered \u003d totalAnswered;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        this.correctAnswers \u003d correctAnswers;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.wrongAnswers \u003d wrongAnswers;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.percentage \u003d percentage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.comments \u003d comments;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Makes a new copy of the Chapter."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param referenceChapter The chapter to be copied."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    ChapterStat(ChapterStat referenceChapter) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.chapterName \u003d referenceChapter.chapterName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.chapterNumber \u003d referenceChapter.chapterNumber;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.attempts \u003d referenceChapter.attempts;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.totalAnswered \u003d referenceChapter.totalAnswered;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.correctAnswers \u003d referenceChapter.correctAnswers;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.wrongAnswers \u003d referenceChapter.wrongAnswers;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.percentage \u003d referenceChapter.percentage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.comments \u003d referenceChapter.comments;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Converts the chapter stats to a string."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @return the String."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        result +\u003d \"Chapter \" + chapterNumber + \" : \" + chapterName + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        result +\u003d \"Total Attempts made : \" + attempts + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        result +\u003d \"Total Questions answered : \" + totalAnswered + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        result +\u003d \"Total Questions correct : \" + correctAnswers + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        result +\u003d \"Total Questions wrong : \" + wrongAnswers + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        result +\u003d \"Percentage of Questions correct : \" + percentage + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        result +\u003d \"Comments : \\\"\" + comments + \"\\\"\\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Recalculates the percentage and wrong answers when the correct answers or total answers is updated."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void recalculateStats() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        if (totalAnswered \u003d\u003d 0) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            return; // to avoid division by 0"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        percentage \u003d 100.0 * correctAnswers / (double) totalAnswered;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        wrongAnswers \u003d totalAnswered - correctAnswers;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Given the string representation, it returns the ChapterStat object."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * TODO Handle invalid string."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @param string The string version of the ChapterStat (obtained by calling toString())."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @return The ChapterStat object."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public static ChapterStat parseString(String string) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        // Split the string into individual lines."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        String[] lines \u003d string.split(\"\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        int chapterNumber \u003d Integer.parseInt(lines[0].split(\" \")[1]);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        // Each parameter comes after a colon (:), so we split by : and take the second element in the array."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        String chapterName \u003d lines[0].split(\":\")[1].substring(1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        int attempts \u003d Integer.parseInt(lines[1].split(\":\")[1].trim());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        int totalAnswered \u003d parseInt(lines[2].split(\":\")[1].trim());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        int correctAnswers \u003d Integer.parseInt(lines[3].split(\":\")[1].trim());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        int wrongAnswers \u003d Integer.parseInt(lines[4].split(\":\")[1].trim());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        double percentage \u003d Double.parseDouble(lines[5].split(\":\")[1].trim());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        String comments \u003d lines[6].split(\":\")[1].trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        // remove the quotes"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        comments \u003d comments.substring(1,comments.length() - 1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        return new ChapterStat(chapterName,chapterNumber,attempts,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                totalAnswered,correctAnswers,wrongAnswers,percentage,comments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Overriding the equals method so JUnit can work."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * We manually check if each property is equal."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        if (obj instanceof ChapterStat) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            ChapterStat other \u003d (ChapterStat) obj;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            return ("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    chapterName.equals(other.chapterName)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    \u0026\u0026 chapterNumber \u003d\u003d other.chapterNumber"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    \u0026\u0026 attempts \u003d\u003d other.attempts"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    \u0026\u0026 totalAnswered \u003d\u003d other.totalAnswered"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    \u0026\u0026 correctAnswers \u003d\u003d other.correctAnswers"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    \u0026\u0026 wrongAnswers \u003d\u003d other.wrongAnswers"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    \u0026\u0026 percentage \u003d\u003d other.percentage"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    \u0026\u0026 comments.equals(other.comments)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    );"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 1,
      "therealcs1010": 32,
      "modakshantanu": 104
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/stats/UserStats.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.stats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.storage.UserStorageParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " * Handles temporary storage of user stats while the program is running."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " * The relationship between the various members is:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " * chapterData: An ArrayList that holds the data for all chapters. Chapters are addressed by index, but can also be"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " * searched by name."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " * characterImagePath: a string containing the path of the image that is used for the user\u0027s character in game."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " * The two data above are stored permanently to a text file, and retrieved from the text file when the program starts."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " *\u003c/p\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " * currentChapter: A single ChapterStat object that stores the chapter data of the chapter that is currently running."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " * This is reset for every run. The contents of currentChapter can be transferred to chapterData by calling"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " * saveCurrentChapterToChapterData()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "public class UserStats {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    //username of the player"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private String username;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    // Array of chapter stats"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    private ArrayList\u003cChapterStat\u003e chapterData;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    // Stats for the current chapter"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    private ChapterStat currentChapter;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    private String characterImagePath \u003d \"miku.png\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    //Maps the chapter names to an index value"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private HashMap\u003cString, Integer\u003e chapterNumber;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Constructs a new UserStats by reading in from the UserData text file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * ChapterStat objects are passed from the parser into here to be stored into"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * their respective data structures."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public UserStats() throws FileNotFoundException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        chapterData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        chapterNumber \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        UserStorageParser userStorageParser \u003d new UserStorageParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //Reads in redundant blank lines"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        userStorageParser.nextLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        userStorageParser.nextLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.username \u003d userStorageParser.nextLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        while (userStorageParser.hasMoreTokens()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            userStorageParser.nextLine();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            ChapterStat currStat \u003d userStorageParser.nextChapterStat();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            chapterData.add(currStat);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            chapterNumber.put(currStat.chapterName, currStat.chapterNumber);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Constructor. Needs no explanation."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public UserStats(String username, String characterImagePath, ArrayList\u003cChapterStat\u003e chapterData) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        this.characterImagePath \u003d characterImagePath;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        this.chapterData \u003d chapterData;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        chapterNumber \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        for (ChapterStat stat: chapterData) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            chapterNumber.put(stat.chapterName, stat.chapterNumber);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Get the stats for a particular chapter by searching for the chapter number then"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * calling the getStatsByIndex function."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param chapterName The name of the chapter."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The ChapterStat object for that chapter, or null of the chapter does not exist."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public ChapterStat getStatsByName(String chapterName) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        if (chapterNumber.containsKey(chapterName)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            int index \u003d chapterNumber.get(chapterName);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return getStatsByIndex(index);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Get the stats for a particular chapter."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @param index The index of the chapter."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @return The ChapterStat object for that chapter"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public ChapterStat getStatsByIndex(int index) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        ChapterStat currentChapter \u003d chapterData.get(index);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return new ChapterStat(currentChapter);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Update the stats for the current Chapter according to whether the user answered correctly or incorrectly."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @param wasAnsweredCorrectly Whether the user answered correctly or incorrectly."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void updateCurrentChapter(boolean wasAnsweredCorrectly) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        currentChapter.totalAnswered++;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        if (wasAnsweredCorrectly) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            currentChapter.correctAnswers++;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        currentChapter.recalculateStats();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Reset the number of question and number of correct answers of the current chapter to zero."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void resetCurrentChapter() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        currentChapter.totalAnswered \u003d 0;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        currentChapter.correctAnswers \u003d 0;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        currentChapter.wrongAnswers \u003d 0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        currentChapter.percentage \u003d 0.0;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        currentChapter.comments \u003d \"Try your best!\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * After the chapter has been played, add the number answered/number correct to the permanently stored chapterData"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * associated with that chapter."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * NOTE: This function increments the number of attempts done, so only call it once per attempt."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @param index The index of the chapter in chapterData."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void saveCurrentChapterToChapterData(int index) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        chapterData.get(index).correctAnswers +\u003d currentChapter.correctAnswers;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        chapterData.get(index).totalAnswered +\u003d currentChapter.totalAnswered;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        chapterData.get(index).recalculateStats();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        // Increment the number of attempts, we assume this function is called once per attempt."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        chapterData.get(index).attempts++;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * After the chapter has been played, add the number answered/number correct to the permanently stored chapterData"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * associated with that chapter."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @param name The name of the chapter in chapterData."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void saveCurrentChapterToChapterData(String name) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        int index \u003d getIndexByName(name);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        saveCurrentChapterToChapterData(index);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Helper function to get the index of a chapter in the chapterData List, given its name."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param name The Name of the Chapter to be searched."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The index of the chapter if it exists, -1 if the chapter does not exist."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private int getIndexByName(String name) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        if (chapterNumber.containsKey(name)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return chapterNumber.get(name);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Checkstyle."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public String getCharacterImagePath() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return characterImagePath;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Checkstyle."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public void setCharacterImagePath(String characterImagePath) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.characterImagePath \u003d characterImagePath;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Gets the statistics for the current chapter."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return a pair containing the number of correct answers and the total questions answered."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public Pair\u003cInteger,Integer\u003e getCurrentChapter() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return new Pair\u003c\u003e(currentChapter.correctAnswers, currentChapter.totalAnswered);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Returns the string representation of userStats, which can be saved in a text file."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @return The string representation of userStats."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        result +\u003d \"AlgoSenpai Adventures Overall Report\\n\\n\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        result +\u003d username + \"\\n\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        result +\u003d characterImagePath + \"\\n\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        for (ChapterStat chapterStat:chapterData) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            result +\u003d \"\\n\" + chapterStat.toString();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        return  result;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Given the string representation, it returns the UserStats object."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * TODO Handle invalid string."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @param string The string version of the UserStats (obtained by calling toString())."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @return The UserStats object."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public static UserStats parseString(String string) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        // Get the first 6 lines. 6th line contains the chapterData."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        String [] tokens \u003d string.split(\"\\n\",6);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        String userName \u003d tokens[2];"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        String characterImagePath \u003d tokens[3];"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        // Each chapter\u0027s data is separated by 2 newlines, so split like this to get the chapterData"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        String[] chapterDataTokens \u003d tokens[5].split(\"\\n\\n\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        ArrayList\u003cChapterStat\u003e chapterStats \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        for (String chapterString: chapterDataTokens) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            chapterStats.add(ChapterStat.parseString(chapterString));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        return new UserStats(userName, characterImagePath, chapterStats);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 2,
      "therealcs1010": 59,
      "modakshantanu": 163
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Create storage to IO."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Load data from file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath path to file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return arraylist of string of data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileNotFoundException file not found"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArrayList\u003cString\u003e loadData(String filePath) throws FileNotFoundException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Scanner scan \u003d new Scanner(file);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cString\u003e inputList \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        while (scan.hasNextLine()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            String taskDetails \u003d scan.nextLine();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            inputList.add(taskDetails);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return inputList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Save data into file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath path to file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param data data in string."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException IO error."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveData(String filePath, String data) throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        fw.write(data);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sevenmatt7": 1,
      "-": 46
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/storage/UserStorageParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.stats.ChapterStat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public class UserStorageParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    //The scanner which is used for reading in from the file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private Scanner inputScanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Initialises everything so that Scanner works."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @throws FileNotFoundException will never be thrown as the file would already be prepared."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public UserStorageParser() throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String workingDir \u003d System.getProperty(\"user.dir\") + File.separator + \"UserData.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        FileReader reader \u003d new FileReader(workingDir);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.inputScanner \u003d new Scanner(reader);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Responsible for parsing in the input for each chapter. The skips are used to remove unnecessary information"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * from each line of input. All the respective information needed for each ChapterStat is derived and constructed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return the ChapterStat for each chapter."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public ChapterStat nextChapterStat() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        inputScanner.skip(\"Chapter \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        final int chapterNo \u003d inputScanner.nextInt();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        inputScanner.skip(\" : \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        final String chapterName \u003d inputScanner.nextLine();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        inputScanner.skip(\"Total Attempts made : \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        final int attempts \u003d Integer.parseInt(inputScanner.nextLine());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        inputScanner.skip(\"Total Questions answered : \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        final int answered \u003d Integer.parseInt(inputScanner.nextLine());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        inputScanner.skip(\"Total Questions Correct : \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        final int correctAnswers \u003d Integer.parseInt(inputScanner.nextLine());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        inputScanner.skip(\"Total Questions Wrong : \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        final int wrongAnswers \u003d Integer.parseInt(inputScanner.nextLine());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        inputScanner.skip(\"Percentage of Questions correct : \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        final double percentage \u003d Double.parseDouble(inputScanner.nextLine());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        inputScanner.skip(\"Comments : \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        String comments \u003d inputScanner.nextLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        // remove the quotes (1st and last character)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        comments \u003d comments.substring(1,comments.length() - 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return new ChapterStat(chapterName, chapterNo, attempts, answered,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                correctAnswers, wrongAnswers, percentage, comments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Checks if there is anything else to be read in the file."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return true if there are somemore chapters to be read. False if otherwise."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public boolean hasMoreTokens() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return inputScanner.hasNext();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Scans in the next line of String."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return the String which has been scanned in by the Scanner."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public String nextLine() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return inputScanner.nextLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 4,
      "therealcs1010": 63,
      "modakshantanu": 4
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.logic.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.ui.components.DialogBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "public class Ui extends AnchorPane {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/unknown.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private Image senpaiImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/miku.png\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Renders the nodes on the GUI."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getSenpaiDialog("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                \"Welcome to AlgoSenpai Adventures! Type \u0027hello\u0027 to start!\", senpaiImage));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public void setLogic(Logic l) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        logic \u003d l;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Handles the input of the user and prints the output of the program"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * onto the GUI."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Command currCommand \u003d logic.parseInputCommand(input);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        String response \u003d logic.executeCommand(currCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        printUserText(input, userImage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        printSenpaiText(response, senpaiImage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        //to close the application"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        if (response.equals(\"exit\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Creates the dialog box on GUI to show the user what he/she has typed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Clears the user input after processing."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param text the String that user has typed in"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param image the profile picture of the user."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public void printSenpaiText(String text, Image image) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getSenpaiDialog(text, image));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Creates the dialog box on GUI to show the response of the Senpai."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param text the response of the program."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param image the profile picture of the Senpai."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private void printUserText(String text, Image image) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getUserDialog(text, image));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 4,
      "sevenmatt7": 83
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/ui/components/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.ui.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": " * The dialog box template."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": " * It represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private DialogBox(String text, Image img, boolean isUser) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        String fxmlPath \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        if (!isUser) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            fxmlPath \u003d \"/view/DialogBox.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        if (isUser) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            fxmlPath \u003d \"/view/DialogBoxUser.fxml\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Ui.class.getResource(fxmlPath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Generates a new DialogBox object containing the user inputted text and his profile picture."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param img the Image of the user."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param text the text to be put into the DialogBox."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        return new DialogBox(text, img, true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Generates a new DialogBox object containing the program response text and the avatar picture."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param img the Image of the avatar."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param text the text to be put into the DialogBox."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public static DialogBox getSenpaiDialog(String text, Image img) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        var db \u003d new DialogBox(text, img, false);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 1,
      "sevenmatt7": 79
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/ui/controller/AnimationTimerController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app.ui.controller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.animation.AnimationTimer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public abstract class AnimationTimerController extends AnimationTimer {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private long sleepNs \u003d 0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private long prevTime \u003d 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    AnimationTimerController(long sleepMs) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.sleepNs \u003d sleepMs * 1_000_000;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public void handle(long now) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        if ((now - prevTime) \u003c sleepNs) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        prevTime \u003d now;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        handle();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public abstract void handle();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 25,
      "sevenmatt7": 1
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/ui/controller/MainController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app.ui.controller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.logic.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.ui.components.DialogBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class MainController extends AnchorPane {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/unknown.png\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private Image senpaiImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/miku.png\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getSenpaiDialog(\"Welcome to AlgoSenpai Adventures!\", senpaiImage));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public void setLogic(Logic l) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        logic \u003d l;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Handles the input of the user and prints the output of the program"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * onto the GUI."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Command currCommand \u003d logic.parseInputCommand(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        String response \u003d logic.executeCommand(currCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        printUserText(input, userImage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        printSenpaiText(response, senpaiImage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        //to close the application"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        if (response.equals(\"exit\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Creates the dialog box on GUI to show the user what he/she has typed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Clears the user input after processing."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param text the String that user has typed in"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param image the profile picture of the user."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public void printSenpaiText(String text, Image image) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getSenpaiDialog(text, image));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Creates the dialog box on GUI to show the response of the Senpai."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param text the response of the program."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param image the profile picture of the Senpai."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private void printUserText(String text, Image image) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getUserDialog(text, image));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 2,
      "sevenmatt7": 81
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/ui/controller/MusicController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app.ui.controller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.logic.constant.SoundConstant;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.utility.ResourceRandomUtility;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.media.Media;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.media.MediaPlayer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class MusicController {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private static MediaPlayer mediaPlayer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private static boolean isLoaded \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private static boolean isMuted \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public MusicController() throws URISyntaxException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        playMusic();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    static void playMusic() throws URISyntaxException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        if (isLoaded) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            mediaPlayer.stop();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        randomMusic();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        isLoaded \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        mediaPlayer.setOnEndOfMedia(() -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                randomMusic();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            } catch (URISyntaxException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    static void randomMusic() throws URISyntaxException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        String musicName \u003d ResourceRandomUtility.randomResources(SoundConstant.music);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Media sound \u003d new Media(MusicController.class.getResource(\"/sound/\" + musicName).toURI().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        mediaPlayer \u003d new MediaPlayer(sound);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        mediaPlayer.play();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    static void toggleVolume() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        if (isMuted) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            mediaPlayer.setMute(false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            isMuted \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            mediaPlayer.setMute(true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            isMuted \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 52,
      "sevenmatt7": 2
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/ui/controller/SplashScreenController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.ui.controller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.fxml.Initializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.ResourceBundle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class SplashScreenController implements Initializable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private Text appTitle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private ImageView appImage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Initialize home scene."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public SplashScreenController() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public void initialize(URL location, ResourceBundle resources) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        appTitle.setText(\"Welcome to AlgoSenpai Adventures!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        appTitle.setX(60);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        appTitle.setY(150);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        appTitle.setFont(Font.font(30));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        appTitle.setFill(Color.DEEPPINK);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Image image \u003d new Image(getClass().getResourceAsStream(\"/images/miku.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        appImage.setImage(image);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        appImage.setFitHeight(300);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        appImage.setFitWidth(300);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        appImage.setX(50);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        appImage.setY(150);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 41
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/utility/PdfDocumentWriterUtility.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.itextpdf.text.BaseColor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.itextpdf.text.FontFactory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.itextpdf.text.Font;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.itextpdf.text.Chunk;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.itextpdf.text.Document;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.itextpdf.text.DocumentException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.itextpdf.text.pdf.PdfWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class PdfDocumentWriterUtility {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private int size;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private BaseColor color;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private String fontFactory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private PdfDocumentWriterUtility() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        size \u003d 16;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        color \u003d BaseColor.BLACK;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        fontFactory \u003d FontFactory.COURIER;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Save content to PDF."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param documentContent content for the document."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param documentName name of the document."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @throws FileNotFoundException file not found."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @throws DocumentException document error."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public void saveToPdf(String documentContent, String documentName) throws FileNotFoundException, DocumentException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Document document \u003d new Document();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        PdfWriter.getInstance(document, new FileOutputStream(documentName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        document.open();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Font font \u003d FontFactory.getFont(fontFactory, size, color);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Chunk chunk \u003d new Chunk(documentContent, font);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        document.add(chunk);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        document.close();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Change color of text in PDF."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param color text color."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public void setColor(BaseColor color) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.color \u003d color;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Change font of text."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param fontFactory text font."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public void setFontFactory(String fontFactory) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.fontFactory \u003d fontFactory;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Change size of text."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param size text size."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public void setSize(int size) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.size \u003d size;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 66
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/utility/ResourceRandomUtility.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class ResourceRandomUtility {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Returns a string from generic map for views, images, and sound."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param map container of the for views, images, and sound."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @return file name of the for views, images, and sound."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public static \u003cT\u003e String randomResources(Map\u003cT, String\u003e map) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        List\u003cT\u003e keysAsArray \u003d new ArrayList\u003cT\u003e(map.keySet());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Random r \u003d new Random();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return map.get(keysAsArray.get(r.nextInt(keysAsArray.size())));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 21
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "         type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003cstyle\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        -fx-background-color: #DCF8C6;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        -fx-font-family: \u0027Montserrat\u0027;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003c/style\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "sevenmatt7": 21
    }
  },
  {
    "path": "src/main/resources/view/DialogBoxUser.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "         type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003cstyle\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        -fx-background-color: #34B7F1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        -fx-font-family: \u0027Montserrat\u0027;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003c/style\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "sevenmatt7": 21
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.scene.control.ProgressBar?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"601.0\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            prefWidth\u003d\"539.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            fx:controller\u003d\"com.algosenpai.app.ui.Ui\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003cstyle\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        -fx-background-color: #ECE5DD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        -fx-font-family: \u0027Montserrat\u0027;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003c/style\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"317.0\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "               AnchorPane.bottomAnchor\u003d\"1.0\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"317.0\" layoutY\u003d\"559.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"400.0\" prefWidth\u003d\"400.0\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    \u003cProgressBar layoutX\u003d\"405.0\" layoutY\u003d\"127.0\" prefHeight\u003d\"18.0\" prefWidth\u003d\"120.0\" progress\u003d\"1.0\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    \u003cTextFlow layoutX\u003d\"413.0\" layoutY\u003d\"8.0\" prefHeight\u003d\"113.0\" prefWidth\u003d\"104.0\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 12,
      "sevenmatt7": 15
    }
  },
  {
    "path": "src/main/resources/view/SplashScreen.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            fx:controller\u003d\"com.algosenpai.app.ui.controller.SplashScreenController\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    \u003cText fx:id\u003d\"appTitle\" text\u003d\"home text\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    \u003cImageView fx:id\u003d\"appImage\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 12
    }
  },
  {
    "path": "src/test/java/com/algosenpai/app/ChapterStatTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "package com.algosenpai.app;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.stats.ChapterStat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import org.assertj.core.internal.bytebuddy.utility.RandomString;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "public class ChapterStatTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Create a chapterStat, convert it to string then back, and compare the 2 objects to see if they are equal."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void stringParsingTest() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        ChapterStat chapterStat \u003d new ChapterStat(\"Foo Bar\",1,2,3,4,1,75.0,\"Sample Comment\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        String storage \u003d chapterStat.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        ChapterStat copy \u003d ChapterStat.parseString(storage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        assertEquals(chapterStat, copy);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Tests the parsing of the edge case of empty strings."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void stringParsing_emptyStrings() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        ChapterStat chapterStat \u003d new ChapterStat(\"\",0,0,0,0,0,0,\"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        String storage \u003d chapterStat.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        ChapterStat copy \u003d ChapterStat.parseString(storage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        assertEquals(chapterStat, copy);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Performs stringParsingTest on 1000 randomly generated ChapterStats."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void stringParsing_randomTest() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        ChapterStat chapterStat;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        ChapterStat copy;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Random random \u003d new Random();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        for (int i \u003d 0; i \u003c 1000; i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            chapterStat \u003d new ChapterStat("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    RandomString.make(random.nextInt(100) + 1),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    random.nextInt(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    random.nextInt(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    random.nextInt(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    random.nextInt(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    random.nextInt(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    random.nextDouble(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    RandomString.make(random.nextInt(100) + 1)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            copy \u003d ChapterStat.parseString(chapterStat.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            assertEquals(chapterStat,copy);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 1,
      "modakshantanu": 70
    }
  },
  {
    "path": "src/test/java/com/algosenpai/app/SceneControllerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.testfx.api.FxAssert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.testfx.framework.junit5.ApplicationTest;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.testfx.matcher.control.TextMatchers;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class SceneControllerTest extends ApplicationTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public void start(Stage stage) throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Parent fxmlSplashScreen \u003d FXMLLoader.load(getClass().getResource(\"/view/SplashScreen.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Scene splashScreen \u003d new Scene(fxmlSplashScreen, 600, 400);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        stage.setScene(splashScreen);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    static void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    static void tearDown() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        FxToolkit.hideStage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    void testInterfaceRendering() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        clickOn(\"#appTitle\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        FxAssert.verifyThat(\"#appTitle\", TextMatchers.hasText(\"Welcome to AlgoSenpai Adventures!\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 40
    }
  }
]
