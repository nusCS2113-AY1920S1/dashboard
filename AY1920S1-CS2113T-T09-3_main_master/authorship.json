[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.8.4\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        })"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    archiveBaseName \u003d \"AlgoSenpaiAdventures\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    archiveVersion \u003d \"1.3.3\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "group \u0027com.algosenpai.app\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    mainClassName \u003d \"com.algosenpai.app.Launcher\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: \u002711\u0027, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: \u002711\u0027, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: \u002711\u0027, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: \u002711\u0027, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: \u002711\u0027, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: \u002711\u0027, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: \u002711\u0027, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: \u002711\u0027, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: \u002711\u0027, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: \u002711\u0027, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: \u002711\u0027, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: \u002711\u0027, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: \u002711\u0027, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: \u002711\u0027, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: \u002711\u0027, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    implementation \u0027com.itextpdf:itextpdf:5.5.10\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    implementation \u0027org.bouncycastle:bcprov-jdk15on:1.56\u0027"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    testImplementation \u0027org.testfx:testfx-core:4.0.16-alpha\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    testImplementation \u0027org.testfx:testfx-junit5:4.0.16-alpha\u0027"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    testImplementation \u0027org.testfx:openjfx-monocle:jdk-11+26\u0027"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \u003d \u0027full\u0027"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    testLogging.showStandardStreams \u003d true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    systemProperty \u0027java.awt.headless\u0027, \u0027true\u0027"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    systemProperty \u0027testfx.robot\u0027, \u0027glass\u0027"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    systemProperty \u0027testfx.headless\u0027, \u0027true\u0027 "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    systemProperty \u0027prism.order\u0027, \u0027sw\u0027"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    systemProperty \u0027prism.text\u0027, \u0027t2k\u0027"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u00272500\u0027"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            linkcss: true,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            experimental: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            sectlinks: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            \u0027site-name\u0027: \u0027AlgoSenpai Adventures\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2113T-T09-3/main\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 1,
      "nwjbrandon": 8,
      "sevenmatt7": 97,
      "modakshantanu": 8,
      "-": 39
    }
  },
  {
    "path": "docs/stylesheets/asciidoctor.css",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "/* Asciidoctor default stylesheet | MIT License | http://asciidoctor.org */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "/* Remove comment around @import statement below when using as a custom stylesheet */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "/*@import \"https://fonts.googleapis.com/css?family\u003dOpen+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\";*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "audio,canvas,video{display:inline-block}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "audio:not([controls]){display:none;height:0}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "[hidden],template{display:none}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "script{display:none!important}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "html{font-family:roboto;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "body{margin:0}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "a{background:transparent}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "a:focus{outline:thin dotted}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "a:active,a:hover{outline:0}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "h1{font-size:2em;margin:.67em 0}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "abbr[title]{border-bottom:1px dotted}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "b,strong{font-weight:bold}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "dfn{font-style:italic}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "mark{background:#ff0;color:#000}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "code,kbd,pre,samp{font-family:monospace;font-size:1em}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "pre{white-space:pre-wrap}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "q{quotes:\"\\201C\" \"\\201D\" \"\\2018\" \"\\2019\"}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "small{font-size:80%}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "sup{top:-.5em}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "sub{bottom:-.25em}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "img{border:0}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "svg:not(:root){overflow:hidden}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "figure{margin:0}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "legend{border:0;padding:0}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "button,input{line-height:normal}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "button,select{text-transform:none}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "button,html input[type\u003d\"button\"],input[type\u003d\"reset\"],input[type\u003d\"submit\"]{-webkit-appearance:button;cursor:pointer}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "button[disabled],html input[disabled]{cursor:default}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "input[type\u003d\"checkbox\"],input[type\u003d\"radio\"]{box-sizing:border-box;padding:0}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "input[type\u003d\"search\"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "input[type\u003d\"search\"]::-webkit-search-cancel-button,input[type\u003d\"search\"]::-webkit-search-decoration{-webkit-appearance:none}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "textarea{overflow:auto;vertical-align:top}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "table{border-collapse:collapse;border-spacing:0}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "*,*:before,*:after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "html,body{font-size:100%}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-weight:400;font-style:normal;line-height:1;position:relative;cursor:auto}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "a:hover{cursor:pointer}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "img,object,embed{max-width:100%;height:auto}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "object,embed{height:100%}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "img{-ms-interpolation-mode:bicubic}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".left{float:left!important}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".right{float:right!important}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".text-left{text-align:left!important}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".text-right{text-align:right!important}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".text-center{text-align:center!important}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".text-justify{text-align:justify!important}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".hide{display:none}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "body{-webkit-font-smoothing:antialiased}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "img,object,svg{display:inline-block;vertical-align:middle}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "textarea{height:auto;min-height:50px}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "select{width:100%}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".center{margin-left:auto;margin-right:auto}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".spread{width:100%}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "p.lead,.paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:1.21875em;line-height:1.6}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".subheader,.admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0;direction:ltr}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "a{color:#2156a5;text-decoration:underline;line-height:inherit}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "a:hover,a:focus{color:#1d4b8f}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "a img{border:none}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "p{font-family:inherit;font-weight:400;font-size:1em;line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "p aside{font-size:.875em;line-height:1.35;font-style:italic}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{font-family:\"Droid Sans\",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "h1 small,h2 small,h3 small,#toctitle small,.sidebarblock\u003e.content\u003e.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "h1{font-size:2.125em}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "h2{font-size:1.6875em}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.375em}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "h4,h5{font-size:1.125em}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "h6{font-size:1em}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "hr{border:solid #ddddd8;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em;height:0}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "em,i{font-style:italic;line-height:inherit}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "strong,b{font-weight:bold;line-height:inherit}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "small{font-size:60%;line-height:inherit}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "code{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "ul,ol,dl{font-size:1em;line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "ul,ol,ul.no-bullet,ol.no-bullet{margin-left:1.5em}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0;font-size:1em}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "ul.square li ul,ul.circle li ul,ul.disc li ul{list-style:inherit}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "ul.square{list-style-type:square}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "ul.circle{list-style-type:circle}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "ul.disc{list-style-type:disc}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "ul.no-bullet{list-style:none}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "dl dt{margin-bottom:.3125em;font-weight:bold}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "dl dd{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "abbr,acronym{text-transform:uppercase;font-size:90%;color:rgba(0,0,0,.8);border-bottom:1px dotted #ddd;cursor:help}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "abbr{text-transform:none}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "blockquote cite{display:block;font-size:.9375em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "blockquote cite:before{content:\"\\2014 \\0020\"}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "blockquote cite a,blockquote cite a:visited{color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "@media only screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "h1{font-size:2.75em}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "h2{font-size:2.3125em}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.6875em}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "h4{font-size:1.4375em}}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "table{background:#fff;margin-bottom:1.25em;border:solid 1px #dedede}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "table thead,table tfoot{background:#f7f8f7;font-weight:bold}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "table tr.even,table tr.alt,table tr:nth-of-type(even){background:#f8f8f7}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{display:table-cell;line-height:1.6}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "body{tab-size:4}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock\u003e.content\u003e.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".clearfix:before,.clearfix:after,.float-group:before,.float-group:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".clearfix:after,.float-group:after{clear:both}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "*:not(pre)\u003ecode{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background-color:#f7f7f8;-webkit-border-radius:4px;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "pre,pre\u003ecode{line-height:1.45;color:rgba(0,0,0,.9);font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".keyseq{color:rgba(51,51,51,.8)}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "kbd{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background-color:#f7f7f7;border:1px solid #ccc;-webkit-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em white inset;box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em #fff inset;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".keyseq kbd:first-child{margin-left:0}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".keyseq kbd:last-child{margin-right:0}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".menuseq,.menu{color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "b.button:before,b.button:after{position:relative;top:-1px;font-weight:400}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "b.button:before{content:\"[\";padding:0 3px 0 2px}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "b.button:after{content:\"]\";padding:0 2px 0 3px}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "p a\u003ecode:hover{color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#header,#content,#footnotes,#footer{width:100%;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#header:before,#header:after,#content:before,#content:after,#footnotes:before,#footnotes:after,#footer:before,#footer:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#header:after,#content:after,#footnotes:after,#footer:after{clear:both}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#content{margin-top:1.25em}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#content:before{content:none}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#header\u003eh1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#header\u003eh1:first-child+#toc{margin-top:8px;border-top:1px solid #ddddd8}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#header\u003eh1:only-child,body.toc2 #header\u003eh1:nth-last-child(2){border-bottom:1px solid #ddddd8;padding-bottom:8px}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#header .details{border-bottom:1px solid #ddddd8;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:-ms-flexbox;display:-webkit-flex;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#header .details span:first-child{margin-left:-.125em}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#header .details span.email a{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#header .details br{display:none}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#header .details br+span:before{content:\"\\00a0\\2013\\00a0\"}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#header .details br+span.author:before{content:\"\\00a0\\22c5\\00a0\";color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#header .details br+span#revremark:before{content:\"\\00a0|\\00a0\"}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#header #revnumber{text-transform:capitalize}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#header #revnumber:after{content:\"\\00a0\"}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#content\u003eh1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #ddddd8;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#toc{border-bottom:1px solid #efefed;padding-bottom:.5em}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#toc\u003eul{margin-left:.125em}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#toc ul.sectlevel0\u003eli\u003ea{font-style:italic}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#toc ul{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;list-style-type:none}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#toc li{line-height:1.3334;margin-top:.3334em}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#toc a{text-decoration:none}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#toc a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#toctitle{color:#7a2518;font-size:1.2em}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "@media only screen and (min-width:768px){#toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "body.toc2{padding-left:15em;padding-right:0}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#toc.toc2{margin-top:0!important;background-color:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #efefed;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#toc.toc2\u003eul{font-size:.9em;margin-bottom:0}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#toc.toc2 ul ul{margin-left:0;padding-left:1em}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:15em}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #efefed;left:auto;right:0}}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "@media only screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#toc.toc2{width:20em}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#toc.toc2 #toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#toc.toc2\u003eul{font-size:.95em}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#toc.toc2 ul ul{padding-left:1.25em}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:20em}}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#content #toc{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#content #toc\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#content #toc\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#footer{max-width:100%;background-color:rgba(0,0,0,.8);padding:1.25em}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#footer-text{color:rgba(255,255,255,.8);line-height:1.44}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".sect1{padding-bottom:.625em}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "@media only screen and (min-width:768px){.sect1{padding-bottom:1.25em}}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".sect1+.sect1{border-top:1px solid #efefed}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#content h1\u003ea.anchor,h2\u003ea.anchor,h3\u003ea.anchor,#toctitle\u003ea.anchor,.sidebarblock\u003e.content\u003e.title\u003ea.anchor,h4\u003ea.anchor,h5\u003ea.anchor,h6\u003ea.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#content h1\u003ea.anchor:before,h2\u003ea.anchor:before,h3\u003ea.anchor:before,#toctitle\u003ea.anchor:before,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:before,h4\u003ea.anchor:before,h5\u003ea.anchor:before,h6\u003ea.anchor:before{content:\"\\00A7\";font-size:.85em;display:block;padding-top:.1em}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#content h1:hover\u003ea.anchor,#content h1\u003ea.anchor:hover,h2:hover\u003ea.anchor,h2\u003ea.anchor:hover,h3:hover\u003ea.anchor,#toctitle:hover\u003ea.anchor,.sidebarblock\u003e.content\u003e.title:hover\u003ea.anchor,h3\u003ea.anchor:hover,#toctitle\u003ea.anchor:hover,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:hover,h4:hover\u003ea.anchor,h4\u003ea.anchor:hover,h5:hover\u003ea.anchor,h5\u003ea.anchor:hover,h6:hover\u003ea.anchor,h6\u003ea.anchor:hover{visibility:visible}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#content h1\u003ea.link,h2\u003ea.link,h3\u003ea.link,#toctitle\u003ea.link,.sidebarblock\u003e.content\u003e.title\u003ea.link,h4\u003ea.link,h5\u003ea.link,h6\u003ea.link{color:#ba3925;text-decoration:none}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#content h1\u003ea.link:hover,h2\u003ea.link:hover,h3\u003ea.link:hover,#toctitle\u003ea.link:hover,.sidebarblock\u003e.content\u003e.title\u003ea.link:hover,h4\u003ea.link:hover,h5\u003ea.link:hover,h6\u003ea.link:hover{color:#a53221}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{text-rendering:optimizeLegibility;text-align:left;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-size:1rem;font-style:italic}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "table.tableblock\u003ecaption.title{white-space:nowrap;overflow:visible;max-width:0}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "table.tableblock #preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:inherit}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".admonitionblock\u003etable{border-collapse:separate;border:0;background:none;width:100%}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".admonitionblock\u003etable td.icon{text-align:center;width:80px}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".admonitionblock\u003etable td.icon img{max-width:none}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".admonitionblock\u003etable td.icon .title{font-weight:bold;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;text-transform:uppercase}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".admonitionblock\u003etable td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #ddddd8;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".admonitionblock\u003etable td.content\u003e:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".exampleblock\u003e.content{border-style:solid;border-width:1px;border-color:#e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".exampleblock\u003e.content\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".sidebarblock{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".sidebarblock\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".sidebarblock\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".sidebarblock\u003e.content\u003e.title{color:#7a2518;margin-top:0;text-align:center}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child\u003e:last-child,.exampleblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content\u003e:last-child\u003e:last-child,.sidebarblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".literalblock pre,.listingblock pre:not(.highlight),.listingblock pre[class\u003d\"highlight\"],.listingblock pre[class^\u003d\"highlight \"],.listingblock pre.CodeRay,.listingblock pre.prettyprint{background:#f7f7f8}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".sidebarblock .literalblock pre,.sidebarblock .listingblock pre:not(.highlight),.sidebarblock .listingblock pre[class\u003d\"highlight\"],.sidebarblock .listingblock pre[class^\u003d\"highlight \"],.sidebarblock .listingblock pre.CodeRay,.sidebarblock .listingblock pre.prettyprint{background:#f2f1f1}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{-webkit-border-radius:4px;border-radius:4px;word-wrap:break-word;padding:1em;font-size:.8125em}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".literalblock pre.nowrap,.literalblock pre[class].nowrap,.listingblock pre.nowrap,.listingblock pre[class].nowrap{overflow-x:auto;white-space:pre;word-wrap:normal}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "@media only screen and (min-width:768px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:.90625em}}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "@media only screen and (min-width:1280px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:1em}}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".literalblock.output pre{color:#f7f7f8;background-color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".listingblock pre.highlightjs{padding:0}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".listingblock pre.highlightjs\u003ecode{padding:1em;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".listingblock pre.prettyprint{border-width:0}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".listingblock\u003e.content{position:relative}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".listingblock code[data-lang]:before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:#999}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".listingblock:hover code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".listingblock.terminal pre .command:before{content:attr(data-prompt);padding-right:.5em;color:#999}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".listingblock.terminal pre .command:not([data-prompt]):before{content:\"$\"}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "table.pyhltable{border-collapse:separate;border:0;margin-bottom:0;background:none}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "table.pyhltable td{vertical-align:top;padding-top:0;padding-bottom:0;line-height:1.45}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "table.pyhltable td.code{padding-left:.75em;padding-right:0}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "pre.pygments .lineno,table.pyhltable td:not(.code){color:#999;padding-left:0;padding-right:.5em;border-right:1px solid #ddddd8}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "pre.pygments .lineno{display:inline-block;margin-right:.25em}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "table.pyhltable .linenodiv{background:none!important;padding-right:0!important}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".quoteblock{margin:0 1em 1.25em 1.5em;display:table}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".quoteblock\u003e.title{margin-left:-1.5em;margin-bottom:.75em}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".quoteblock blockquote,.quoteblock blockquote p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".quoteblock blockquote{margin:0;padding:0;border:0}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".quoteblock blockquote:before{content:\"\\201c\";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".quoteblock blockquote\u003e.paragraph:last-child p{margin-bottom:0}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".quoteblock .attribution{margin-top:.5em;margin-right:.5ex;text-align:right}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".quoteblock .quoteblock{margin-left:0;margin-right:0;padding:.5em 0;border-left:3px solid rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".quoteblock .quoteblock blockquote{padding:0 0 0 .75em}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".quoteblock .quoteblock blockquote:before{display:none}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".verseblock{margin:0 1em 1.25em 1em}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".verseblock pre{font-family:\"Open Sans\",\"DejaVu Sans\",sans;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".verseblock pre strong{font-weight:400}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".quoteblock .attribution br,.verseblock .attribution br{display:none}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".quoteblock.abstract{margin:0 0 1.25em 0;display:block}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".quoteblock.abstract blockquote,.quoteblock.abstract blockquote p{text-align:left;word-spacing:0}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".quoteblock.abstract blockquote:before,.quoteblock.abstract blockquote p:first-of-type:before{display:none}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "table.tableblock{max-width:100%;border-collapse:separate}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "table.tableblock td\u003e.paragraph:last-child p\u003ep:last-child,table.tableblock th\u003ep:last-child,table.tableblock td\u003ep:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "table.grid-all th.tableblock,table.grid-all td.tableblock{border-width:0 1px 1px 0}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "table.grid-all tfoot\u003etr\u003eth.tableblock,table.grid-all tfoot\u003etr\u003etd.tableblock{border-width:1px 1px 0 0}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "table.grid-cols th.tableblock,table.grid-cols td.tableblock{border-width:0 1px 0 0}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "table.grid-all *\u003etr\u003e.tableblock:last-child,table.grid-cols *\u003etr\u003e.tableblock:last-child{border-right-width:0}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "table.grid-rows th.tableblock,table.grid-rows td.tableblock{border-width:0 0 1px 0}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "table.grid-all tbody\u003etr:last-child\u003eth.tableblock,table.grid-all tbody\u003etr:last-child\u003etd.tableblock,table.grid-all thead:last-child\u003etr\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003etd.tableblock,table.grid-rows thead:last-child\u003etr\u003eth.tableblock{border-bottom-width:0}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "table.grid-rows tfoot\u003etr\u003eth.tableblock,table.grid-rows tfoot\u003etr\u003etd.tableblock{border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "table.frame-all{border-width:1px}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "table.frame-sides{border-width:0 1px}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "table.frame-topbot{border-width:1px 0}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "th.halign-left,td.halign-left{text-align:left}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "th.halign-right,td.halign-right{text-align:right}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "th.halign-center,td.halign-center{text-align:center}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "th.valign-top,td.valign-top{vertical-align:top}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "th.valign-bottom,td.valign-bottom{vertical-align:bottom}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "th.valign-middle,td.valign-middle{vertical-align:middle}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "table thead th,table tfoot th{font-weight:bold}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "tbody tr th{display:table-cell;line-height:1.6;background:#f7f8f7}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "p.tableblock\u003ecode:only-child{background:none;padding:0}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "td\u003ediv.verse{white-space:pre}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "ol{margin-left:1.75em}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "ul li ol{margin-left:1.5em}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "dl dd{margin-left:1.125em}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "dl dd:last-child,dl dd:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "ol\u003eli p,ul\u003eli p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist,ul.none{list-style-type:none}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist{margin-left:.625em}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "ul.checklist li\u003ep:first-child\u003e.fa-square-o:first-child,ul.checklist li\u003ep:first-child\u003e.fa-check-square-o:first-child{width:1em;font-size:.85em}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "ul.checklist li\u003ep:first-child\u003einput[type\u003d\"checkbox\"]:first-child{width:1em;position:relative;top:1px}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "ul.inline{margin:0 auto .625em auto;margin-left:-1.375em;margin-right:0;padding:0;list-style:none;overflow:hidden}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "ul.inline\u003eli{list-style:none;float:left;margin-left:1.375em;display:block}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "ul.inline\u003eli\u003e*{display:block}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".unstyled dl dt{font-weight:400;font-style:normal}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "ol.arabic{list-style-type:decimal}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "ol.decimal{list-style-type:decimal-leading-zero}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "ol.loweralpha{list-style-type:lower-alpha}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "ol.upperalpha{list-style-type:upper-alpha}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "ol.lowerroman{list-style-type:lower-roman}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "ol.upperroman{list-style-type:upper-roman}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "ol.lowergreek{list-style-type:lower-greek}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".hdlist\u003etable,.colist\u003etable{border:0;background:none}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".hdlist\u003etable\u003etbody\u003etr,.colist\u003etable\u003etbody\u003etr{background:none}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "td.hdlist1{font-weight:bold;padding-bottom:1.25em}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".literalblock+.colist,.listingblock+.colist{margin-top:-.5em}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".colist\u003etable tr\u003etd:first-of-type{padding:0 .75em;line-height:1}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".colist\u003etable tr\u003etd:last-of-type{padding:.25em 0}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".thumb,.th{line-height:0;display:inline-block;border:solid 4px #fff;-webkit-box-shadow:0 0 0 1px #ddd;box-shadow:0 0 0 1px #ddd}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".imageblock.left,.imageblock[style*\u003d\"float: left\"]{margin:.25em .625em 1.25em 0}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".imageblock.right,.imageblock[style*\u003d\"float: right\"]{margin:.25em 0 1.25em .625em}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".imageblock\u003e.title{margin-bottom:0}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".imageblock.thumb,.imageblock.th{border-width:6px}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".imageblock.thumb\u003e.title,.imageblock.th\u003e.title{padding:0 .125em}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".image.left{margin-right:.625em}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".image.right{margin-left:.625em}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "a.image{text-decoration:none;display:inline-block}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "a.image object{pointer-events:none}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "sup.footnote a,sup.footnoteref a{text-decoration:none}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em 0;border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;text-indent:-1.05em;margin-bottom:.2em}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#footnotes .footnote:last-of-type{margin-bottom:0}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".gist .file-data\u003etable{border:0;background:#fff;width:100%;margin-bottom:0}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".gist .file-data\u003etable td.line-data{width:99%}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "div.unbreakable{page-break-inside:avoid}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".big{font-size:larger}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".small{font-size:smaller}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".underline{text-decoration:underline}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".overline{text-decoration:overline}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".line-through{text-decoration:line-through}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".aqua{color:#00bfbf}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".aqua-background{background-color:#00fafa}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".black{color:#000}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".black-background{background-color:#000}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".blue{color:#0000bf}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".blue-background{background-color:#0000fa}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".fuchsia{color:#bf00bf}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".fuchsia-background{background-color:#fa00fa}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".gray{color:#606060}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".gray-background{background-color:#7d7d7d}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".green{color:#006000}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".green-background{background-color:#007d00}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".lime{color:#00bf00}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".lime-background{background-color:#00fa00}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".maroon{color:#600000}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".maroon-background{background-color:#7d0000}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".navy{color:#000060}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".navy-background{background-color:#00007d}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".olive{color:#606000}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".olive-background{background-color:#7d7d00}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".purple{color:#600060}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".purple-background{background-color:#7d007d}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".red{color:#bf0000}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".red-background{background-color:#fa0000}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".silver{color:#909090}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".silver-background{background-color:#bcbcbc}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".teal{color:#006060}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".teal-background{background-color:#007d7d}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".white{color:#bfbfbf}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".white-background{background-color:#fafafa}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".yellow{color:#bfbf00}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".yellow-background{background-color:#fafa00}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "span.icon\u003e.fa{cursor:default}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".admonitionblock td.icon [class^\u003d\"fa icon-\"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".admonitionblock td.icon .icon-note:before{content:\"\\f05a\";color:#19407c}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".admonitionblock td.icon .icon-tip:before{content:\"\\f0eb\";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".admonitionblock td.icon .icon-warning:before{content:\"\\f071\";color:#bf6900}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".admonitionblock td.icon .icon-caution:before{content:\"\\f06d\";color:#bf3400}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".admonitionblock td.icon .icon-important:before{content:\"\\f06a\";color:#bf0000}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".conum[data-value]{display:inline-block;color:#fff!important;background-color:rgba(0,0,0,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-style:normal;font-weight:bold}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".conum[data-value] *{color:#fff!important}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".conum[data-value]+b{display:none}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".conum[data-value]:after{content:attr(data-value)}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "pre .conum[data-value]{position:relative;top:-.125em}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "b.conum *{color:inherit!important}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".conum:not([data-value]):empty{display:none}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "h1,h2,p,td.content,span.alt{letter-spacing:-.01em}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "p,blockquote,dt,td.content,span.alt{font-size:1.0625rem}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "p{margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".exampleblock\u003e.content{background-color:#fffef7;border-color:#e0e0dc;-webkit-box-shadow:0 1px 4px #e0e0dc;box-shadow:0 1px 4px #e0e0dc}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".print-only{display:none!important}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "@media print{@page{margin:1.25cm .75cm}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "*{-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "a{color:inherit!important;text-decoration:underline!important}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "a.bare,a[href^\u003d\"#\"],a[href^\u003d\"mailto:\"]{text-decoration:none!important}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "a[href^\u003d\"http:\"]:not(.bare):after,a[href^\u003d\"https:\"]:not(.bare):after{content:\"(\" attr(href) \")\";display:inline-block;font-size:.875em;padding-left:.25em}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "abbr[title]:after{content:\" (\" attr(title) \")\"}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "pre,blockquote,tr,img,object,svg{page-break-inside:avoid}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "thead{display:table-header-group}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "svg{max-width:100%}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title{page-break-after:avoid}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#toc,.sidebarblock,.exampleblock\u003e.content{background:none!important}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#toc{border-bottom:1px solid #ddddd8!important;padding-bottom:0!important}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".sect1{padding-bottom:0!important}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".sect1+.sect1{border:0!important}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#header\u003eh1:first-child{margin-top:1.25rem}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "body.book #header{text-align:center}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "body.book #header\u003eh1:first-child{border:0!important;margin:2.5em 0 1em 0}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "body.book #header .details{border:0!important;display:block;padding:0!important}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "body.book #header .details span:first-child{margin-left:0!important}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "body.book #header .details br{display:block}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "body.book #header .details br+span:before{content:none!important}"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1\u003eh2{page-break-before:always}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".listingblock code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#footer{background:none!important;padding:0 .9375em}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#footer-text{color:rgba(0,0,0,.6)!important;font-size:.9em}"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".hide-on-print{display:none!important}"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".print-only{display:block!important}"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".hide-for-print{display:none!important}"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".show-for-print{display:inherit!important}}"
      }
    ],
    "authorContributionMap": {
      "sevenmatt7": 407
    }
  },
  {
    "path": "docs/stylesheets/gh-pages.css",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "@import url(https://fonts.googleapis.com/css?family\u003dMontserrat|Open+Sans);"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "@import \"asciidoctor.css\"; /* Default asciidoc style framework - important */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "/* Custom block: details */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".sidebarblock.details \u003e .content {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    border-left: .25rem solid rgba(0, 0, 0, 0.1);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".sidebarblock.details \u003e .content {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    padding-left: .5rem"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".sidebarblock.details {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    background-color: transparent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    border: none;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    padding-bottom: 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    padding-top: 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "/* Overrides for asciidoctor.css */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "a {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    color: #0074c7;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "h1,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#content h1 \u003e a.link,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "h2,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "h2 \u003e a.link,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "h3,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "h3 \u003e a.link,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#toctitle,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "#toctitle \u003e a.link,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".sidebarblock \u003e .content \u003e .title,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".sidebarblock \u003e .content \u003e .title \u003e a.link,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "h4,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "h4 \u003e a.link,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "h5,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "h5 \u003e a.link,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "h6,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "h6 \u003e a.link {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    color: #e46c0a;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".subheader,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".admonitionblock td.content \u003e .title,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".audioblock \u003e .title,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".exampleblock \u003e .title,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".imageblock \u003e .title,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".listingblock \u003e .title,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".literalblock \u003e .title,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".stemblock \u003e .title,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".openblock \u003e .title,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".paragraph \u003e.title,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".quoteblock \u003e .title,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "table.tableblock \u003e .title,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".verseblock \u003e .title,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".videoblock \u003e .title,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".dlist \u003e .title,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".olist \u003e .title,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".ulist \u003e .title,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".qlist \u003e .title,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".hdlist \u003e .title {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    color: rgb(197, 90, 17);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "@media screen {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    #footer {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        background-color: #f6f6f6;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        border-top: 1px #d2d2d2 solid;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        border-bottom: 1px #d2d2d2 solid;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    #footer-text {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        color: #595959;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        line-height: 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "/* Utilities */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".container {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    width: 100%;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    max-width: 62.5rem;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    margin-left: auto;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    margin-right: auto;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "/* Colors */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".bg-light {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    background-color: #f8f9fa;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".bg-lighter {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    background-color: #fbfbfb;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "/* Navbar */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".navbar {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    display: flex;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    flex-wrap: nowrap;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    justify-content: center;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    font-size: 1rem;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    padding: 0px 1rem;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".navbar-lg {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    font-size: 1.3rem;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".navbar-light {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    border-bottom: 1px #d2d2d2 solid;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".navbar a {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    text-decoration: none;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".navbar-light a {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    color: #595959;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".navbar-light a:hover,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".navbar-light a:focus {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    color: #000000;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".navbar a.active,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".navbar a.active:hover,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".navbar a.active:focus {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    font-weight: bold;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".navbar-light a.active,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".navbar-light a.active:hover,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".navbar-light a.active:focus {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    color: #000000;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".navbar-light .nav-link {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    border-bottom: 2px transparent solid;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".navbar-light .nav-link.active {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    border-bottom: 2px #e46c0a solid;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".navbar-lg .nav-link.active {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    border-bottom: 0;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".navbar \u003e .container {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    display: flex;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    flex-wrap: wrap;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    justify-content: center;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".navbar-brand {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    display: inline-block;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    margin-right: 1rem;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    padding: 0.8125rem 0rem;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    padding-left: 0.9375rem;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    font-size: 1.25rem;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".navbar-brand img {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    height: 1.4rem;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    margin: 0rem 0.4rem;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    padding: 0;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    vertical-align: middle;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".navbar-lg .navbar-brand {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    font-size: 1.7rem;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".navbar-lg .navbar-brand img {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    height: 2.3rem;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".navbar-nav {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    display: flex;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    flex-wrap: wrap;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    flex-grow: 1;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    align-items: center;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    margin: 0px;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    padding: 0px;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    list-style: none;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    line-height: inherit;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ".nav-link {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    display: block;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    margin: 0px;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    border: 0px;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    padding: 1rem 1rem;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "/* Do not display site header on print mediums */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "@media print {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    #seedu-header {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        display: none;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    #site-header {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        display: none;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sevenmatt7": 214
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "rootProject.name \u003d \u0027app.algosenpai.com\u0027"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 1
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/Launcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 11,
      "sevenmatt7": 2
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.exceptions.FileParsingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.ui.controller.MusicController;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.utility.LogCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": " * A one scene chatbot GUI."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": " * There are two fxml files, MainWindow and DialogBox."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static final String APPLICATION_TITLE \u003d \"AlgoSenpai Adventures\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static int MAINWINDOW_WIDTH \u003d 500;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static int MAINWINDOW_HEIGHT \u003d 650;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static int SPLASHSCREEN_WIDTH \u003d 600;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static int SPLASHSCREEN_HEIGHT \u003d 400;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    //Initialise the different components here"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private static MusicController musicController;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    private UserStats stats;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static final Logger logger \u003d LogCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    private boolean wasDatafileCorrupted \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            logger.info(\"Starting music controller.....\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            musicController \u003d MusicController.getMusicController();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            musicController.playMusic();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        } catch (URISyntaxException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            logger.info(\"Failed to start music controller.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    private void initialize() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        // Ignore the parsing error here, as it is properly dealt with later in the Ui.initialize"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        // SetupCommand."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AlgoSenpai Adventures ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            stats \u003d new UserStats(\"./UserData.txt\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            logger.info(\"User Stats have been successfully loaded.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        } catch (FileParsingException ignored) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            stats \u003d UserStats.getDefaultUserStats();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            Storage.saveData(\"UserData.txt\",stats.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            wasDatafileCorrupted \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            logger.info(\"User Stats data could not be loaded due to a parsing error.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public void start(Stage stage) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        initialize();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        startSplashScreen(stage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        PauseTransition pause \u003d new PauseTransition(Duration.seconds(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        pause.setOnFinished(event -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                stage.close();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                startMain(stage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        });"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        pause.play();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private void startSplashScreen(Stage stage) throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        FXMLLoader fxmlSplashScreen \u003d new FXMLLoader(MainApp.class.getResource(\"/view/SplashScreen.fxml\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        AnchorPane ap \u003d fxmlSplashScreen.load();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        ap.setStyle(\"-fx-background-image: url(\u0027/images/cute-anime.png\u0027); -fx-background-size: cover;\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Scene splashScreen \u003d new Scene(ap, SPLASHSCREEN_WIDTH, SPLASHSCREEN_HEIGHT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        stage.setScene(splashScreen);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        stage.setTitle(APPLICATION_TITLE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private void startMain(Stage stage) throws IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        FXMLLoader fxmlLoader \u003d new FXMLLoader(MainApp.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Scene scene \u003d new Scene(ap, MAINWINDOW_WIDTH, MAINWINDOW_HEIGHT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        fxmlLoader.\u003cUi\u003egetController().setLogic(logic, stats, wasDatafileCorrupted);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        stage.setTitle(APPLICATION_TITLE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        logger.info(\"Main GUI screen successfully rendered.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 40,
      "sevenmatt7": 52,
      "modakshantanu": 15
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/exceptions/ErrorMessage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "//@@author carrieng0323852"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "package com.algosenpai.app.exceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "class ErrorMessage {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    //menu"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    static final String INVALID_MENU_INPUT \u003d \"OOPS!!! Error occurred. Please enter the command which you\u0027d \""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            + \"like to view in the following format: menu print\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            + \"Otherwise, enter `menu` to view \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            + \"the list of commands that we have\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    //history"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    static final String INVALID_HISTORY_INPUT \u003d \"OOPS!!! Error occurred. Please key in the \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            + \"number of commands you\u0027d like to view in the \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            + \"following format: e.g history 5\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    static final String INVALID_TOO_MANY_INPUTS \u003d \"OOPS!!! Error occurred. Too many inputs entered!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    static final String INVALID_TYPE_OF_ARGUMENT \u003d \"OOPS!!! Error occurred. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            + \"Please key in a valid number of commands \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            + \"you\u0027d like to view!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    static final String INVALID_SIZE_OF_ARGUMENT \u003d \"OOPS!!! Error occurred. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            + \"You don\u0027t have that many past commands!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    static final String INVALID_NEGATIVE_ARGUMENT \u003d \"OOPS!!! Error occurred. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            + \"Please key in a valid number of commands \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            + \"you\u0027d like to view!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    //reset"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    static final String INVALID_HAS_BEEN_RESET \u003d \"OOPS!!! Error occurred. Your data has already been reset.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 26
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/exceptions/FileParsingException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "package com.algosenpai.app.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " * Thrown when the file contains invalid or corrupted data."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " * The program can choose to show an error message, etc."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "public class FileParsingException extends SenpaiExceptions {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    private static final String ERROR_MSG \u003d \"User Data file is corrupted\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public FileParsingException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        super(ERROR_MSG);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public FileParsingException(String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "modakshantanu": 18
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/exceptions/HistoryExceptions.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "//@@author carrieng0323852"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "package com.algosenpai.app.exceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import com.algosenpai.app.logic.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "public class HistoryExceptions extends SenpaiExceptions {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    private HistoryExceptions(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * To check if the user entered more than one arguments behind the `history` command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @param inputs history command that user entered"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @throws HistoryExceptions informs the user that input is invalid"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    public static void checkInput(ArrayList\u003cString\u003e inputs) throws HistoryExceptions {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        if (inputs.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            throw new HistoryExceptions(ErrorMessage.INVALID_HISTORY_INPUT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        } else if (inputs.size() \u003e 2) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            throw new HistoryExceptions(ErrorMessage.INVALID_TOO_MANY_INPUTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * To check if the argument entered is an integer greater than 0 and fewer than the number of past commands made."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @param historyList list of past commands user entered."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @param arg whatever that comes after `history` entered by the user"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @throws HistoryExceptions informs user the respective error"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    public static void checkArgument(ArrayList\u003cString\u003e historyList, String arg) throws HistoryExceptions {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        if (!Parser.isInteger(arg)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            throw new HistoryExceptions(ErrorMessage.INVALID_TYPE_OF_ARGUMENT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            int num \u003d Integer.parseInt(arg);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            if (num \u003e historyList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                throw new HistoryExceptions(ErrorMessage.INVALID_SIZE_OF_ARGUMENT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            } else if (num \u003c 1) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                throw new HistoryExceptions(ErrorMessage.INVALID_NEGATIVE_ARGUMENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 47
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/exceptions/MenuExceptions.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "package com.algosenpai.app.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "public class MenuExceptions extends SenpaiExceptions {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private MenuExceptions(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * Checks if user inputs an invalid menu eg menu pri nt."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @param inputs user\u0027s input"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @throws MenuExceptions informs user that there is an error"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    public static void checkInput(ArrayList\u003cString\u003e inputs) throws MenuExceptions {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        if (inputs.size() !\u003d 2) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            throw new MenuExceptions(ErrorMessage.INVALID_MENU_INPUT);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 19,
      "therealcs1010": 1
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/exceptions/ResetExceptions.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "//@@author carrieng0323852"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "package com.algosenpai.app.exceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "public class ResetExceptions extends SenpaiExceptions {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    public ResetExceptions(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * checking if data has already been reset."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @param stats user statistics"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @throws ResetExceptions to inform user that his data has been reset already"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    public static void checkResetStatus(UserStats stats) throws ResetExceptions {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        int level \u003d stats.getUserLevel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        int exp \u003d stats.getUserExp();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        if (level \u003d\u003d 1 \u0026\u0026 exp \u003d\u003d 0) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            throw new ResetExceptions(ErrorMessage.INVALID_HAS_BEEN_RESET);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 26
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/exceptions/SenpaiExceptions.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "//@@author carrieng0323852"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "package com.algosenpai.app.exceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "class SenpaiExceptions extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    SenpaiExceptions(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 9
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.chapters.LectureGenerator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.logic.chapters.QuizGenerator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import com.algosenpai.app.logic.command.ChaptersCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.logic.command.utility.HelpCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.logic.command.QuizNextCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.critical.ArcadeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.critical.ByeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.critical.LectureCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.critical.QuizTestCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.critical.ResetCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.errorhandling.ArcadeBlockedCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.errorhandling.InvalidCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.errorhandling.LectureBlockedCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.errorhandling.QuizBlockedCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.utility.ArchiveCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.utility.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.logic.command.utility.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.utility.HistoryCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.logic.command.utility.LoadCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.utility.MenuCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.logic.command.utility.print.PrintCommandFactory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.utility.ResultCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.utility.ReviewCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.logic.command.utility.SaveCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.utility.SelectLectureChapterCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.utility.SelectQuizChapterCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.utility.SetupCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.utility.ShowStatsCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.logic.command.utility.VolumeCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.constant.CommandsEnum;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.logic.models.QuestionModel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.logic.parser.Parser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.utility.LogCenter;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.concurrent.atomic.AtomicBoolean;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "public class Logic {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static final Logger logger \u003d LogCenter.getLogger(Logic.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * The different modes."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private AtomicBoolean isQuizMode \u003d new AtomicBoolean(false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    private AtomicBoolean isResetMode \u003d new AtomicBoolean(false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private AtomicBoolean isLectureMode \u003d new AtomicBoolean(false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private AtomicBoolean isArcadeMode \u003d new AtomicBoolean(false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Sets of commands blocked during respective modes."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private HashSet\u003cString\u003e quizBlockedCommands \u003d new HashSet\u003c\u003e(CommandsEnum.getQuizBlockedNames());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private HashSet\u003cString\u003e lectureBlockedCommands \u003d new HashSet\u003c\u003e(CommandsEnum.getLectureBlockedNames());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private  HashSet\u003cString\u003e arcadeBlockedCommands \u003d new HashSet\u003c\u003e(CommandsEnum.getArcadeBlockedNames());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Variables related to the user."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private UserStats userStats;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private AtomicInteger prevResults \u003d new AtomicInteger(-1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private ArrayList\u003cString\u003e parsedUserInputs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private String userCommand;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Quiz related variables."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private ArrayList\u003cQuestionModel\u003e quizList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private AtomicInteger quizChapterNumber \u003d new AtomicInteger(-1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private AtomicInteger quizQuestionNumber \u003d new AtomicInteger(0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private AtomicBoolean isNewQuiz \u003d new AtomicBoolean(true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Lecture related variables."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private ArrayList\u003cString\u003e lectureSlides \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private AtomicInteger lectureChapterNumber \u003d new AtomicInteger(-1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private AtomicInteger lectureSlideNumber \u003d new AtomicInteger(0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private AtomicBoolean isNewLecture \u003d new AtomicBoolean(true);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Utility variables."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private ArrayList\u003cQuestionModel\u003e archiveList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private ArrayList\u003cString\u003e historyList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    private int historyListOffset \u003d 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Initializes logic for the application with all the different components."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public Logic(UserStats stats) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        this.userStats \u003d stats;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Executes the command corresponding to the user\u0027s input."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param input The user\u0027s input."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The command executeed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public Command executeCommand(String input) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        addCommandHistory(input);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        parsedUserInputs \u003d Parser.parseInput(input);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        userCommand \u003d parsedUserInputs.get(0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        if (userCommand.equals(\"exit\")) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return executeBye();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        } else if (isResetMode.get() || userCommand.equals(\"reset\")) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return executeReset();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        } else if (isQuizMode.get() || userCommand.equals(\"quiz\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return executeQuiz();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        } else if (isLectureMode.get() || userCommand.equals(\"lecture\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return executeLecture();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        } else if (isArcadeMode.get() || userCommand.equals(\"arcade\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return executeArcade();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return executeOthers();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private Command executeArcade() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        if (arcadeBlockedCommands.contains(userCommand)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new ArcadeBlockedCommand(parsedUserInputs);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new ArcadeCommand(parsedUserInputs, isArcadeMode);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Determines actions to be taken in normal mode."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The command given by the user, or invalid command is invalid."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private Command executeOthers() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        switch (userCommand) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        case \"chapters\":"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new ChaptersCommand(parsedUserInputs);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new HelpCommand(parsedUserInputs, userStats);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        case \"menu\":"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new MenuCommand(parsedUserInputs);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        case \"result\":"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new ResultCommand(parsedUserInputs, prevResults);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        case \"history\":"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new HistoryCommand(parsedUserInputs, historyList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return new DeleteCommand(parsedUserInputs);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        case \"clear\":"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new ClearCommand(parsedUserInputs);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        case \"stats\":"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new ShowStatsCommand(parsedUserInputs, userStats);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        case \"print\":"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return new PrintCommandFactory(parsedUserInputs, userStats, archiveList, quizList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        case \"archive\":"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new ArchiveCommand(parsedUserInputs, quizList, archiveList);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case \"review\":"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new ReviewCommand(parsedUserInputs, quizList);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        case \"volume\":"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new VolumeCommand(parsedUserInputs);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case \"hello\":"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new SetupCommand(parsedUserInputs, userStats);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        case \"save\":"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            return new SaveCommand(parsedUserInputs, userStats);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        case \"load\":"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            return new LoadCommand(parsedUserInputs, userStats);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new InvalidCommand(parsedUserInputs);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Determines actions to be taken in quiz mode."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The command given by the user."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private Command executeLecture() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        if (isNewLecture.get() \u0026\u0026 userCommand.equals(\"start\")) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return setupNewLecture();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        } else if (isNewLecture.get() \u0026\u0026 userCommand.equals(\"lecture\")) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new SelectLectureChapterCommand(parsedUserInputs, lectureChapterNumber, isLectureMode, userStats);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        } else if (userCommand.equals(\"volume\")) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new VolumeCommand(parsedUserInputs);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        } else if (lectureBlockedCommands.contains(userCommand) || isNewLecture.get()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new LectureBlockedCommand(parsedUserInputs);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new LectureCommand(parsedUserInputs, lectureSlides, isLectureMode, lectureSlideNumber, isNewLecture);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private Command setupNewLecture() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        lectureSlides \u003d new LectureGenerator().generateLecture(lectureChapterNumber.get());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        isNewLecture.set(false);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        isLectureMode.set(true);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        logger.info(\"Lecture mode has been initiated.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return new LectureCommand(parsedUserInputs, lectureSlides, isLectureMode,lectureSlideNumber, isNewLecture);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Determines action to be taken for the quiz."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The command given."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private Command executeQuiz() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        if (isNewQuiz.get() \u0026\u0026 userCommand.equals(\"start\")) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return setupNewQuiz();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        } else if (isNewQuiz.get() \u0026\u0026 userCommand.equals(\"quiz\")) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new SelectQuizChapterCommand(parsedUserInputs, quizChapterNumber, userStats, isQuizMode);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        } else if (userCommand.equals(\"volume\")) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new VolumeCommand(parsedUserInputs);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        } else if (userCommand.equals(\"next\") || userCommand.equals(\"back\")) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new QuizNextCommand(parsedUserInputs, quizList, quizQuestionNumber);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        } else if (quizBlockedCommands.contains(userCommand) || isNewQuiz.get()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new QuizBlockedCommand(parsedUserInputs);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new QuizTestCommand(parsedUserInputs, quizList, quizQuestionNumber,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    isQuizMode, isNewQuiz, quizChapterNumber.get(), userStats, prevResults);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Executes the reset Command."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The command reset."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private Command executeReset() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return new ResetCommand(parsedUserInputs, userStats, isResetMode);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Executes the bye command."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The command bye."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private Command executeBye() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return new ByeCommand(parsedUserInputs);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Sets up a new quiz."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The command for the quiz."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private Command setupNewQuiz() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        logger.info(\"Quiz mode has been initiated\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        quizList \u003d new QuizGenerator().generateQuiz(quizChapterNumber.get());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        isNewQuiz.set(false);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        isQuizMode.set(true);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return new QuizTestCommand(parsedUserInputs, quizList, quizQuestionNumber, isQuizMode,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                isNewQuiz, quizChapterNumber.get(), userStats, prevResults);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Appends the last command given by the user to a historylist."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param input The user\u0027s input."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private void addCommandHistory(String input) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        historyListOffset \u003d 0;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        historyList.add(input);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Get the previous command from historyList. Previous command is relative to the current value of offset."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * i.e. you can call this function multiple times and it will return the history of commands entered in reverse"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * order. Similar to how terminal works."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @return The command entered."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public String getPreviousCommand() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        // User has not typed in any commands yet."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        if (historyList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        historyListOffset++;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        if (historyListOffset \u003e historyList.size()) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            historyListOffset \u003d historyList.size();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        return historyList.get(historyList.size() - historyListOffset);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Get the next command entered in history, relative to the current offset."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @return The command entered by the user, or empty string if the user has reached the present point in history."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public String getNextCommand() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        historyListOffset--;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        if (historyListOffset \u003c\u003d 0) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            historyListOffset \u003d 0;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            // If 0, the user has returned to the current point in history. So return empty string, no more history."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        return historyList.get(historyList.size() - historyListOffset);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 2,
      "nwjbrandon": 28,
      "sevenmatt7": 32,
      "therealcs1010": 186,
      "modakshantanu": 46
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/chapters/LectureGenerator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.chapters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.utility.LogCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public class LectureGenerator {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static HashMap\u003cString, ArrayList\u003cString\u003e\u003e lectureSlides \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static final Logger logger \u003d LogCenter.getLogger(LectureGenerator.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Instantiates the lecture by loading all the lecture slides."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public LectureGenerator() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        logger.info(\"Loading lecture data from the text files...\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        InputStream is \u003d getClass().getResourceAsStream(\"/data/lectureSorting.txt\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        updateSlides(\"sorting\", is);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        is \u003d getClass().getResourceAsStream(\"/data/lectureLinkedList.txt\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        updateSlides(\"linkedlist\", is);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        is \u003d getClass().getResourceAsStream(\"/data/lectureBitmask.txt\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        updateSlides(\"bitmask\", is);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Updates the slides to the hashmap based on the txt files."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param topic The topic is the chapter name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param is The input stream."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private void updateSlides(String topic, InputStream is) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        BufferedReader bufferedReader \u003d new BufferedReader(new InputStreamReader(is));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        StringBuilder currentSlide \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        lectureSlides.put(topic, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                line \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                if (line \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    lectureSlides.get(topic).add(currentSlide.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                } else if (line.equals(\"-\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    lectureSlides.get(topic).add(currentSlide.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    currentSlide \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    currentSlide.append(\"\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    currentSlide.append(line);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                logger.severe(\"Failed to display next slide in lecture mode due to IO error.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Picks the correct lecture according to the chapter given by the user."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param selectedChapters The chapter the user selected."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The arraylist containing the slides."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public ArrayList\u003cString\u003e generateLecture(int selectedChapters) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        switch (selectedChapters) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            logger.info(\"Lecture on Sorting is chosen.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return lectureSlides.get(\"sorting\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            logger.info(\"Lecture on Linked List is chosen.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return lectureSlides.get(\"linkedlist\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            logger.info(\"Lecture on Bitmask is chosen.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return lectureSlides.get(\"bitmask\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sevenmatt7": 10,
      "therealcs1010": 72
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/chapters/Question.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.chapters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.models.QuestionModel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.models.ReviewTracingListModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public abstract class Question {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static Random random \u003d new Random();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    protected static String question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    protected static String answer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    protected static ReviewTracingListModel rtlm \u003d new ReviewTracingListModel();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Packages the question."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The QuestionModel containing the question and answer."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public QuestionModel execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return new QuestionModel(question, answer, rtlm);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Generates a random number."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param minimum The minimum possible number to be generated."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param bound   The range of values to be added to the minimum."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The number."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    protected static int getRandomNumber(int minimum, int bound) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return random.nextInt(bound) + minimum;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Formats the question accordingly."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public abstract void questionFormatter();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealcs1010": 39
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/chapters/QuizGenerator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app.logic.chapters;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.MainApp;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.chapters.chapter1.ChapterSorting;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.chapters.chapter2.ChapterLinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.chapters.chapter3.ChapterBitmask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.logic.models.QuestionModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.utility.LogCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "public class QuizGenerator {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static final Logger logger \u003d LogCenter.getLogger(QuizGenerator.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Generates the quiz according to the chapters specified by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * By default, all the chapters will be selected."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @return the ArrayList with all the questions generated"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public ArrayList\u003cQuestionModel\u003e generateQuiz(int selectedChapters) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        ArrayList\u003cQuestionModel\u003e questionList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        ChapterSorting chapterSorting \u003d new ChapterSorting();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        ChapterLinkedList chapterLinkedList \u003d new ChapterLinkedList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        ChapterBitmask chapterBitmask \u003d new ChapterBitmask();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        switch (selectedChapters) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 1 :"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            logger.info(\"Generating quiz with questions from the Sorting chapter...\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                questionList.add(ChapterSorting.generateQuestions());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 2 :"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            logger.info(\"Generating quiz with questions from the Linked List chapter...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                questionList.add(ChapterLinkedList.generateQuestions());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 3 :"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            logger.info(\"Generating quiz with questions from the Bitmask chapter...\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                questionList.add(ChapterBitmask.generateQuestions());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        default :"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            logger.info(\"Generating quiz with questions from all the three chapters... (no chapter specified\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            Random random \u003d new Random();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                int chapterToPick \u003d random.nextInt(3);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                switch (chapterToPick) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                case 0 :"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                    questionList.add(ChapterSorting.generateQuestions());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                case 1 :"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                    questionList.add(ChapterLinkedList.generateQuestions());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                case 2 :"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    questionList.add(ChapterBitmask.generateQuestions());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                default :"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        return questionList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Generates questions for the arcade mode."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return A single question model."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public QuestionModel generateQuestion() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        logger.fine(\"Generating question for arcade mode....\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Random random \u003d new Random();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int chapterToPick \u003d random.nextInt(3);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        switch (chapterToPick) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 0 :"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return ChapterSorting.generateQuestions();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 1 :"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return ChapterLinkedList.generateQuestions();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 2 :"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return ChapterBitmask.generateQuestions();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        default :"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 1,
      "sevenmatt7": 36,
      "therealcs1010": 53
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/chapters/chapter1/BubbleSortPassesQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.chapters.chapter1;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.chapters.Question;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.models.ReviewTracingListModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public class BubbleSortPassesQuestion extends Question {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    // Size of the array."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static int arraySize;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    // The array in the question."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static ArrayList\u003cInteger\u003e initialArray;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static int passes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    BubbleSortPassesQuestion() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        // Determines a random size for the array between 5 and 9."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        arraySize \u003d getRandomNumber(5, 5);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        // Populates the array."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        initialArray \u003d new ArrayList\u003c\u003e(generateArray(arraySize));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        // Determines the number of passes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        passes \u003d getRandomNumber(1, arraySize - 2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        run();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * This is used for testing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param arraySize The given array size."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param initialArray The actual array."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param passes The number of passes to be carried out."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public BubbleSortPassesQuestion(int arraySize, ArrayList\u003cInteger\u003e initialArray,int passes) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        BubbleSortPassesQuestion.arraySize \u003d arraySize;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        BubbleSortPassesQuestion.initialArray \u003d initialArray;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        BubbleSortPassesQuestion.passes \u003d passes;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        run();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Runs the remaining code."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        questionFormatter();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        bubbleSort(initialArray, passes);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        answer \u003d initialArray.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        answer \u003d answer.substring(1, answer.length() - 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public void questionFormatter() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question \u003d \"An array of \" + arraySize + \" elements underwent the following Bubble Sort Algorithm : \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + initialArray + \"\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question +\u003d \"What would be the new configuration of the elements after \" + passes + \" passes?\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Please provide your answer in space-separated format. e.g. x y z ...\\n\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question +\u003d \"for (int i \u003d 0; i \u003c passes; i++) {\\n\" + \"   for (int j \u003d 0; j \u003c arr.size - 1 - i; j ++) {\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"       if (arr[j] \u003e arr[j + 1]) {\\n\" + \"            swap (arr[j], arr[j+1]);\\n\" + \"       }\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"   }\\n\" + \"}\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Generates the set of values to be used for the arrays."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param arraySize The size of the set to be used."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The hashset to be used for the array."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private HashSet\u003cInteger\u003e generateArray(int arraySize) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        HashSet\u003cInteger\u003e tempStorage \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        while (tempStorage.size() !\u003d arraySize) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            int value \u003d getRandomNumber(1, 50);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            tempStorage.add(value);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return tempStorage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Bubble Sorts the array."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param arr    The arraylist to be sorted."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param passes The number of passes before the program gets terminated."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static void bubbleSort(ArrayList\u003cInteger\u003e arr, int passes) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm \u003d new ReviewTracingListModel();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"This is the array at the start.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(arr.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (int i \u003d 0; i \u003c passes; i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            rtlm.addReviewStep(\"Pass \" + (i + 1) + \" : \");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            for (int j \u003d 0; j \u003c arr.size() - 1 - i; j++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                int first \u003d arr.get(j);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                int second \u003d arr.get(j + 1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                if (first \u003e second) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    rtlm.addReviewStep(\"Since \" + first + \" is smaller than \" + second + \", swap.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    arr.set(j, second);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    arr.set(j + 1, first);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    rtlm.addReviewStep(\"Since \" + first + \" is larger than \" + second + \", ignore.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                rtlm.addReviewStep(arr.toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            rtlm.addReviewStep(\"This is the array after \" + (i + 1) + \" pass\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            rtlm.addReviewStep(arr.toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealcs1010": 104
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/chapters/chapter1/ChapterSorting.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.chapters.chapter1;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.models.QuestionModel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public class ChapterSorting {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static Random random \u003d new Random();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Generates the question by using a random number to determine which of the"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * sub-questions to ask."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return A question class that contains the question and expected answer."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public static QuestionModel generateQuestions() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int questionType \u003d random.nextInt(4);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        switch (questionType) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new BubbleSortPassesQuestion().execute();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new QuickSortPivotQuestion().execute();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new InsertionSortSwapQuestion().execute();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new SelectionSortSwapQuestion().execute();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealcs1010": 33
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/chapters/chapter1/InsertionSortSwapQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.chapters.chapter1;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.chapters.Question;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.models.ReviewTracingListModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public class InsertionSortSwapQuestion extends Question {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static int arraySize;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static ArrayList\u003cInteger\u003e initialArray;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static int swaps;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    InsertionSortSwapQuestion() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        // Generates a size to be used for the array between 4 and 8."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        arraySize \u003d getRandomNumber(5, 4);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        // Populates the array with integers"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        initialArray \u003d new ArrayList\u003c\u003e(generateArray(arraySize));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        // Determine the number of swaps to be performed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        swaps \u003d getRandomNumber(1, arraySize - 2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        // Generates the question from the variables provided."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        questionFormatter();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        insertionSort(initialArray, swaps);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        answer \u003d initialArray.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        answer \u003d answer.substring(1, answer.length() - 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public void questionFormatter() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question \u003d \"An array of \" + arraySize + \" elements underwent the following Insertion Sort Algorithm : \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + initialArray + \"\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question +\u003d \"What would be the new configuration of the elements after \" + swaps + \" swaps?\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Please provide your answer in space-separated format. e.g. x y z ...\\n\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question +\u003d \"int i, key, j;\\n\" + \"for (i \u003d 1; i \u003c n; i++) {\\n\" + \"    key \u003d arr[i];\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"    j \u003d i - 1;\\n\" + \"    while (j \u003e\u003d 0 \u0026\u0026 arr[j] \u003e key) {\\n\" + \"        arr[j + 1] \u003d arr[j];\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"        j \u003d j - 1;\\n\" + \"    }\\n\" + \"    arr[j + 1] \u003d key;\\n\" + \"}\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Generates the set of values to be used for the arrays."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param arraySize The size of the set to be used."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The hashset to be used for the array."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static HashSet\u003cInteger\u003e generateArray(int arraySize) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        HashSet\u003cInteger\u003e tempStorage \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        while (tempStorage.size() !\u003d arraySize) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            int value \u003d getRandomNumber(1, 50);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            tempStorage.add(value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return tempStorage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Conducts Insertion Sort on the given ArrayList."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param arr   The array to conduct the Insertion Sort algorithm on."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param swaps The number of swaps to be performed before the algorithm"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static void insertionSort(ArrayList\u003cInteger\u003e arr, int swaps) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm \u003d new ReviewTracingListModel();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"This is the array at the start.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(arr.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int key;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int j;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"Counter \u003d \" + counter + \".\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (i \u003d 1; i \u003c arr.size(); i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            key \u003d arr.get(i);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            rtlm.addReviewStep(\"Pick \" + key + \".\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            j \u003d i - 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            rtlm.addReviewStep(\"Traverse backwards\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            while (j \u003e\u003d 0 \u0026\u0026 arr.get(j) \u003e key) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                rtlm.addReviewStep(\"Since \" + arr.get(j) + \" is more than \" + key + \", swap.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                arr.set(j + 1, arr.get(j));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                j \u003d j - 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                rtlm.addReviewStep(\"Counter \u003d \" + counter + \".\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                if (counter \u003d\u003d swaps) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    rtlm.addReviewStep(\"Since counter \u003d\u003d swaps, stop.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            arr.set(j + 1, key);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            if (counter \u003d\u003d swaps) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                rtlm.addReviewStep(\"This is the final array.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                rtlm.addReviewStep(arr.toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            if (j \u003d\u003d -1) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                rtlm.addReviewStep(\"Since we have reached the front, check next.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                rtlm.addReviewStep(\"Since \" + arr.get(j) + \" is smaller than \" + arr.get(i) + \", check next.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealcs1010": 101
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/chapters/chapter1/QuickSortPivotQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.chapters.chapter1;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.chapters.Question;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.models.ReviewTracingListModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public class QuickSortPivotQuestion extends Question {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static int arraySize;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static ArrayList\u003cInteger\u003e initialArray;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    // A static array container to store elements from initialArray"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static Integer[] arr;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    QuickSortPivotQuestion() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        // Generates a size to be used for the array between 6 and 11."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        arraySize \u003d getRandomNumber(6, 6);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        // Populates the array with integers."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        initialArray \u003d new ArrayList\u003c\u003e(generateArray(arraySize));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        // Converts to a static array."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        arr \u003d initialArray.toArray(new Integer[arraySize]);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        // Data structure containing the elements after all the steps of quickSort"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        ArrayList\u003cInteger[]\u003e allSteps \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        quickSort(arr, 0, arraySize - 1, allSteps);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        arr \u003d allSteps.get(getRandomNumber(0, allSteps.size() - 1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        initialArray \u003d new ArrayList\u003c\u003e(Arrays.asList(arr));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        questionFormatter();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        answer \u003d quickSortPivotAnswerGenerator();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * This is used for testing."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param arraySize The given array size."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param initialArray The given array."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    QuickSortPivotQuestion(int arraySize, ArrayList\u003cInteger\u003e initialArray) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        QuickSortPivotQuestion.arraySize \u003d arraySize;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        QuickSortPivotQuestion.initialArray \u003d initialArray;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        arr \u003d initialArray.toArray(new Integer[arraySize]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        // Data structure containing the elements after all the steps of quickSort"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        ArrayList\u003cInteger[]\u003e allSteps \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        quickSort(arr, 0, arraySize - 1, allSteps);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        arr \u003d allSteps.get(getRandomNumber(0, allSteps.size() - 1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        QuickSortPivotQuestion.initialArray \u003d new ArrayList\u003c\u003e(Arrays.asList(arr));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        questionFormatter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        answer \u003d quickSortPivotAnswerGenerator();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public void questionFormatter() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question \u003d \"An array of \" + arraySize"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \" elements underwent some passes of the Quick Sort Algorithm to become : \\n\" + initialArray + \"\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question +\u003d \"How many elements could possibly have been the pivot?\\n\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Calculates the answer for the quickSortPivotQuestion."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The answer for the question in a String format."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static String quickSortPivotAnswerGenerator() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm \u003d new ReviewTracingListModel();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"This is the array after some number of passes of Quick Sort.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(initialArray.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"The trick is to traverse from left to right.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"Rule #1 Number is bigger than all on left.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"Rule #2 Number is smaller than all on right.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int answer \u003d 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"Counter \u003d \" + answer + \".\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (int i \u003d 0; i \u003c arraySize; i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            boolean canBePivot \u003d true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            rtlm.addReviewStep(\"Referenced number is \" + arr[i]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            for (int j \u003d 0; j \u003c arraySize; j++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                if (i \u003d\u003d j) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                if ((j \u003c i \u0026\u0026 arr[j] \u003e arr[i]) || (j \u003e i \u0026\u0026 arr[j] \u003c arr[i])) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    rtlm.addReviewStep(\"One of the rules are broken when second number is \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                            + arr[j] + \".\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    canBePivot \u003d false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            if (canBePivot) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                rtlm.addReviewStep(\"Number \" + arr[i] + \" is a valid pivot.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                answer++;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                rtlm.addReviewStep(\"Counter \u003d \" + answer + \".\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"Final count : \" + answer + \".\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return String.valueOf(answer);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Generates the set of values to be used for the arrays."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param arraySize The size of the set to be used."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The hashset to be used for the array."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static HashSet\u003cInteger\u003e generateArray(int arraySize) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        HashSet\u003cInteger\u003e tempStorage \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        while (tempStorage.size() !\u003d arraySize) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            int value \u003d getRandomNumber(0, 100);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            tempStorage.add(value);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return tempStorage;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Quick Sorts the array."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param arr      The array to be sorted."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param low      The start of the partitioning."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param high     The end of the partitioning."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param allSteps The arraylist which takes a snapshot after each step."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static void quickSort(Integer[] arr, int low, int high, ArrayList\u003cInteger[]\u003e allSteps) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        if (low \u003c high) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            int partitionIndex \u003d partition(arr, low, high, allSteps);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            quickSort(arr, low, partitionIndex - 1, allSteps);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            quickSort(arr, partitionIndex + 1, high, allSteps);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Partitions the array according to the Quick Sort Algorithm."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param arr      The array to be sorted."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param low      The start of the partitioning."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param high     The end of the partitioning."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param allSteps The arraylist which takes a snapshot after each step."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return An integer which is the partitioning index."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static int partition(Integer[] arr, int low, int high, ArrayList\u003cInteger[]\u003e allSteps) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int pivot \u003d arr[high];"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int i \u003d (low - 1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (int j \u003d low; j \u003c\u003d high - 1; j++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            if (arr[j] \u003c pivot) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                int temp \u003d arr[i];"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                arr[i] \u003d arr[j];"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                arr[j] \u003d temp;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int temp \u003d arr[i + 1];"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        arr[i + 1] \u003d arr[high];"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        arr[high] \u003d temp;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Integer[] tempArray \u003d Arrays.copyOf(arr, arr.length);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        allSteps.add(tempArray);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return (i + 1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealcs1010": 156
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/chapters/chapter1/SelectionSortSwapQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.chapters.chapter1;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.chapters.Question;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.models.ReviewTracingListModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public class SelectionSortSwapQuestion extends Question {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    // Size of the array."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static int arraySize;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    // The array in the question."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static ArrayList\u003cInteger\u003e initialArray;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static int swaps;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    SelectionSortSwapQuestion() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        // Generates a size to be used for the array between 4 and 8."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        arraySize \u003d getRandomNumber(7, 4);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        // Populates the array with integers"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        initialArray \u003d new ArrayList\u003c\u003e(generateArray(arraySize));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        // Determine the number of swaps to be performed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        swaps \u003d getRandomNumber(1, arraySize - 2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        // Generates the question from the variables provided."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        questionFormatter();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        selectionSort(initialArray, swaps);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        answer \u003d initialArray.toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        answer \u003d answer.substring(1, answer.length() - 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public void questionFormatter() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question \u003d \"An array of \" + arraySize + \" elements underwent the following Selection Sort Algorithm : \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + initialArray + \"\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question +\u003d \"What would be the new configuration of the elements after \" + swaps + \" swaps?\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Please provide your answer in space-separated format. e.g. x y z ...\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question +\u003d \"int i, j, min_idx;\\n\" + \"for (i \u003d 0; i \u003c n-1; i++) {\\n\" + \"\\tmin_idx \u003d i;\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"\\tfor (j \u003d i+1; j \u003c n; j++) {\\n\" + \"\\t\\tif (arr[j] \u003c arr[min_idx]) {\\n\" + \"\\t\\t\\tmin_idx \u003d j;\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"\\t\\t}\\n\" + \"\\t}\\n\" + \"\\tif (min_idx !\u003d i) {\\n\" + \"\\t\\tswap(arr[min_idx], arr[i]);\\n\" + \"\\t}\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"}\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Generates the set of values to be used for the arrays."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param arraySize The size of the set to be used."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The hashset to be used for the array."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static HashSet\u003cInteger\u003e generateArray(int arraySize) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        HashSet\u003cInteger\u003e tempStorage \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        while (tempStorage.size() !\u003d arraySize) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            int value \u003d getRandomNumber(0, 100);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            tempStorage.add(value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return tempStorage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Conducts Selection Sort on the given ArrayList."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param arr   The ArrayList to be sorted."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param swaps The number of swaps before the program terminates."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static void selectionSort(ArrayList\u003cInteger\u003e arr, int swaps) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm \u003d new ReviewTracingListModel();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"This is the array at the start.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(arr.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int i;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int j;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int minIdx;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"Counter \u003d \" + counter + \".\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (i \u003d 0; i \u003c arr.size() - 1; i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            minIdx \u003d i;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            rtlm.addReviewStep(\"Start with minIndex \" + minIdx + \".\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            for (j \u003d i + 1; j \u003c arr.size(); j++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                rtlm.addReviewStep(\"Compare to \" + arr.get(j) + \".\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                if (arr.get(j) \u003c arr.get(minIdx)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    rtlm.addReviewStep(\"Since \" + arr.get(j) + \" is smaller, change minIndex to \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                            + j + \".\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    minIdx \u003d j;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    rtlm.addReviewStep(\"Ignore \" + arr.get(j) + \" since it is bigger.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            rtlm.addReviewStep(\"Swap \" + arr.get(minIdx) + \" with \" + arr.get(i) + \".\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            int temp \u003d arr.get(minIdx);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            arr.set(minIdx, arr.get(i));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            arr.set(i, temp);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            rtlm.addReviewStep(\"This is the new array.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            rtlm.addReviewStep(arr.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            if (minIdx !\u003d i) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                rtlm.addReviewStep(\"Counter \u003d \" + counter + \".\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            if (counter \u003d\u003d swaps) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                rtlm.addReviewStep(\"Since counter \u003d\u003d swaps, stop.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                rtlm.addReviewStep(\"This is the final array.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                rtlm.addReviewStep(arr.toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealcs1010": 104
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/chapters/chapter2/ChapterLinkedList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.chapters.chapter2;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.models.QuestionModel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public class ChapterLinkedList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static Random random \u003d new Random();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Generates a random question related to linked lists."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return a question model according to the random number being generated."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public static QuestionModel generateQuestions() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int questionType \u003d random.nextInt(4);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        switch (questionType) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new StackPopPushQuestion().execute();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new QueuePopPushQuestion().execute();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new SingleInsertLinkedListQuestion().execute();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new PseudoCodeQuestion().execute();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealcs1010": 32
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/chapters/chapter2/PseudoCodeQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.chapters.chapter2;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.chapters.Question;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.models.ReviewTracingListModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public class PseudoCodeQuestion extends Question {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static ArrayList\u003cInteger\u003e array;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    PseudoCodeQuestion() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //Generates a size for the array between 6 and 9."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int arraySize \u003d getRandomNumber(6, 4);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //Populates the array with elements no greater than 10."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        array \u003d new ArrayList\u003c\u003e(createList(arraySize));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        questionFormatter();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        ArrayList\u003cString\u003e pseudoCode \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        generatePseudoCode(pseudoCode);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question +\u003d printPseudoCode(pseudoCode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        answer \u003d calculateSum(array, pseudoCode);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public void questionFormatter() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question \u003d \"In the pseudocode program below, list is an initially empty Singly Linked List.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"The function populateList() adds the integers \" + array + \" to the tail of the list sequentially.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"What is the output of the program?\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Calculates the sum of the values based on the pseudocode generated."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param array      The ArrayList which makes up the Linked List."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param pseudoCode The list of instructions in the pseudo-code."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The value of the sum given in the pseudo-code in a String format."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static String calculateSum(ArrayList\u003cInteger\u003e array, ArrayList\u003cString\u003e pseudoCode) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm \u003d new ReviewTracingListModel();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"This is the linked list.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(array.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int sum \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"We start with sum \u003d \" + sum + \", and index \u003d \" + index + \".\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (String i : pseudoCode) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            switch (i) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case \"n \u003d n.next;\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                rtlm.addReviewStep(\"Consider step : \" + i);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                rtlm.addReviewStep(\"Increment index to \" + index + \".\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case \"sum +\u003d list.tail.value;\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                rtlm.addReviewStep(\"Consider step : \" + i);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                sum +\u003d array.get(array.size() - 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                rtlm.addReviewStep(\"New sum \u003d \" + sum + \".\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case \"sum +\u003d list.head.value;\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                rtlm.addReviewStep(\"Consider step : \" + i);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                sum +\u003d array.get(0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                rtlm.addReviewStep(\"New sum \u003d \" + sum + \".\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case \"n \u003d list.head;\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                rtlm.addReviewStep(\"Consider step : \" + i);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                index \u003d 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                rtlm.addReviewStep(\"Set index to \" + index + \".\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case \"sum +\u003d n.value;\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                rtlm.addReviewStep(\"Consider step : \" + i);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                sum +\u003d array.get(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                rtlm.addReviewStep(\"New sum \u003d \" + sum + \"after adding \" + array.get(index) + \".\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case \"sum +\u003d n.next.value;\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                rtlm.addReviewStep(\"Consider step : \" + i);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                sum +\u003d array.get(index + 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                rtlm.addReviewStep(\"New sum \u003d \" + sum + \"after adding \" + array.get(index + 1) + \".\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"Final value is \" + sum + \".\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return String.valueOf(sum);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Generates a list of pseudo-code, such as \"n \u003d n.next\", or \"n \u003d list.head\"."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * This list of instructions will be printed to the user."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param pseudoCode The list which will contain the instructions."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static void generatePseudoCode(ArrayList\u003cString\u003e pseudoCode) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        pseudoCode.add(\"populateList();\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        pseudoCode.add(\"int sum \u003d 0;\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        pseudoCode.add(\"Node n \u003d list.head; //list.head/list.tail points to the first/last integer in list\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //Generates a number of commands between 4 and 7."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int noOfCommands \u003d getRandomNumber(4,4);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (int i \u003d 0; i \u003c noOfCommands; i++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            int commandToAdd \u003d getRandomNumber(0,6);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            switch (commandToAdd) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case 0:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                pseudoCode.add(\"n \u003d n.next;\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                pseudoCode.add(\"sum +\u003d list.tail.value;\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                pseudoCode.add(\"sum +\u003d list.head.value;\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                pseudoCode.add(\"n \u003d list.head;\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case 4:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                pseudoCode.add(\"sum +\u003d n.value;\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case 5:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                pseudoCode.add(\"sum +\u003d n.next.value;\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        pseudoCode.add(\"print sum;\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Creates a Linked List and populate it with unique numbers."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param size The number of elements to be in the Linked List."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The Linked List data structure to be used for the question."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static LinkedList\u003cInteger\u003e createList(int size) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        HashSet\u003cInteger\u003e set \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        while (set.size() !\u003d size) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            int value \u003d getRandomNumber(0, 15);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            set.add(value);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return new LinkedList\u003c\u003e(set);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Creates a String containing the list of instructions used in the pseudocode."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param pseudoCode The list of instructions in the pseudo-code."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The String containing the instructions."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static String printPseudoCode(ArrayList\u003cString\u003e pseudoCode) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        StringBuilder string \u003d new StringBuilder();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (String cmd : pseudoCode) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            string.append(cmd).append(\"\\n\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return string.toString();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealcs1010": 155
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/chapters/chapter2/QueuePopPushQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.chapters.chapter2;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.chapters.Question;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.models.ReviewTracingListModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public class QueuePopPushQuestion extends Question {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static int queueSize;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    QueuePopPushQuestion() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //Generates a size for the queue between 4 and 8."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        queueSize \u003d getRandomNumber(7,4);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //Populates the queue with positive integers under 100."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        LinkedList\u003cInteger\u003e queue \u003d createList(queueSize);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        ArrayList\u003cString\u003e instructions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //Determines the number of instructions to be added."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        int numberOfInstructions \u003d getRandomNumber(3, 3);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //Populate instructions"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        addInstructions(instructions, numberOfInstructions);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        questionFormatter();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question +\u003d printQueue(queue);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question +\u003d printInstructions(instructions);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //Updates the queue according to the question."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        changeQueue(instructions, queue);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        answer \u003d String.valueOf(queue.getLast());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public void questionFormatter() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question \u003d \"A Queue of size \" + queueSize"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \" undergoes a series of operations as shown below.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"What would be the new value called upon queue.peek()?\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Creates a Linked List and populate it with unique numbers."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param size The number of elements to be in the Linked List."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The Linked List data structure to be used for the question."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static LinkedList\u003cInteger\u003e createList(int size) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        HashSet\u003cInteger\u003e set \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        while (set.size() !\u003d size) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            int value \u003d getRandomNumber(0, 100);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            set.add(value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return new LinkedList\u003c\u003e(set);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Adds new instructions to the list through random generation of either 1 or 0."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * If values is 0, a push command is added along with a value. Else, a pop"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * command is added."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param instructions         The list where instructions will be added."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param numberOfInstructions The number of instructions to be added into the"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *                             list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static void addInstructions(ArrayList\u003cString\u003e instructions, int numberOfInstructions) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (int i \u003d 0; i \u003c numberOfInstructions; i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            int val \u003d getRandomNumber(0,2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            int toadd \u003d getRandomNumber(0,100);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            switch (val) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case 0:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                String combined \u003d \"Push(\" + toadd + \");\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                instructions.add(combined);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                instructions.add(\"Pop();\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Creates a formatted String which contains the elements in the queue."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param queue The queue containing the elements."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The formatted String."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static String printQueue(LinkedList\u003cInteger\u003e queue) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        StringBuilder q \u003d new StringBuilder();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (int i : queue) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            q.append(\"[\").append(i).append(\"] -\u003e \");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        q.append(\"Front\\n\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return q.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Creates a String with the instruction given by the list on separate new lines."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param instructions The list of instructions provided."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The String containing the instructions given by the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static String printInstructions(ArrayList\u003cString\u003e instructions) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        StringBuilder instructs \u003d new StringBuilder();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (String s : instructions) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            instructs.append(i).append(\". \").append(s).append(\"\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return instructs.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Changes the queue according to the instructions given. If instruction is pop,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * the front value of the list would be removed, or else a new value will be"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * pushed into the queue."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param instructions The list of instructions given."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param queue        The list which would be edited according to the"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *                     instructions given."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static void changeQueue(ArrayList\u003cString\u003e instructions, LinkedList\u003cInteger\u003e queue) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm \u003d new ReviewTracingListModel();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"This is the current queue.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(printQueue(queue));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (String cmd : instructions) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            rtlm.addReviewStep(\"Consider step : \" + cmd);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            if (cmd.contains(\"Pop\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                rtlm.addReviewStep(\"Removing this element : \" + queue.pollLast() + \".\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                String number \u003d cmd.substring(5, cmd.length() - 2);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                rtlm.addReviewStep(\"Adding this number to the back : \" + number + \".\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                int valuetoadd \u003d Integer.parseInt(number);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                queue.addFirst(valuetoadd);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            rtlm.addReviewStep(\"This is the new queue.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            rtlm.addReviewStep(printQueue(queue));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"This is the final queue.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(printQueue(queue));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealcs1010": 141,
      "modakshantanu": 2
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/chapters/chapter2/SingleInsertLinkedListQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.chapters.chapter2;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.chapters.Question;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.models.ReviewTracingListModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public class SingleInsertLinkedListQuestion extends Question {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static int listSize;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static int valueToAdd;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static String positionToAdd;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    SingleInsertLinkedListQuestion() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //Generates a size for the linked list between 5 and 8."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        listSize \u003d getRandomNumber(5,4);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //Decide on a value to be added between 0 and 100."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        valueToAdd \u003d getRandomNumber(0,100);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //Decide on the position to be added."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        positionToAdd \u003d getPositionToAdd();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        questionFormatter();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //Populates the linked list with values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        LinkedList\u003cInteger\u003e ll \u003d createList(listSize);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question +\u003d printList(ll);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm \u003d new ReviewTracingListModel();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"This is the current list.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(printList(ll));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"Since the position at which to append is \" + positionToAdd + \".\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        if (positionToAdd.equals(\"head\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            ll.addFirst(valueToAdd);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            ll.addLast(valueToAdd);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"This is the new linked list.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        answer \u003d ll.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        answer \u003d answer.substring(1,answer.length() - 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(printList(ll));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public void questionFormatter() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question \u003d \"Consider the Singly Linked List of size \" + listSize + \" below.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"It undergoes an insertion of value \" + valueToAdd + \" at the \" + positionToAdd"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \".\\nWhat would be the new sequence of integers?\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Please provide your answer in space-separated format. e.g. x y z ...\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Creates a Linked List and populate it with unique numbers."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param size The number of elements to be in the Linked List."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The Linked List data structure to be used for the question."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static LinkedList\u003cInteger\u003e createList(int size) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        HashSet\u003cInteger\u003e set \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        while (set.size() !\u003d size) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            int value \u003d getRandomNumber(0, 100);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            set.add(value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return new LinkedList\u003c\u003e(set);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Creates a formatted String from the linkedlist provided."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param ll The linked list provided."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The string representing the linkedlist."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static String printList(LinkedList\u003cInteger\u003e ll) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        StringBuilder linkedListString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (int i : ll) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            linkedListString.append(\"[\").append(i).append(\"]\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            if (i !\u003d ll.getLast()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                linkedListString.append(\" -\u003e \");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return linkedListString.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Decides the position to add the value to by generating a random number 1, or 2."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return A String containing the position. Either \"head\" or \"tail\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static String getPositionToAdd() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String positionToAdd;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        if (getRandomNumber(0,2) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            positionToAdd \u003d \"head\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            positionToAdd \u003d \"tail\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return positionToAdd;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealcs1010": 95
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/chapters/chapter2/StackPopPushQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.chapters.chapter2;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.chapters.Question;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.models.ReviewTracingListModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public class StackPopPushQuestion extends Question {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static int stackSize;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    StackPopPushQuestion() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        // Generates a random number for the size of the stack between 5 and 10."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        stackSize \u003d getRandomNumber(5, 5);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        // Populates the stack with numbers."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        LinkedList\u003cInteger\u003e stack \u003d createList(stackSize);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        ArrayList\u003cString\u003e instructions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        // Determines the number of instructions to be carried out between 2 and 4"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        int numberOfInstructions \u003d getRandomNumber(2, 2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        addInstructions(instructions, numberOfInstructions);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        questionFormatter();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question +\u003d printStack(stack);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question +\u003d printInstructions(instructions);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        changeStack(instructions, stack);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        answer \u003d String.valueOf(stack.getLast());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public void questionFormatter() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question \u003d \"A Stack of size \" + stackSize"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \" undergoes a series of operations as shown below.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"What would be the new value called upon stack.peek()?\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Creates a Linked List and populate it with unique numbers."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param size The number of elements to be in the Linked List."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The Linked List data structure to be used for the question."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static LinkedList\u003cInteger\u003e createList(int size) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        HashSet\u003cInteger\u003e set \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        while (set.size() !\u003d size) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            int value \u003d getRandomNumber(0, 100);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            set.add(value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return new LinkedList\u003c\u003e(set);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Adds new instructions to the list through random generation of either 1 or 0."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * If values is 0, a push command is added along with a value. Else, a pop"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * command is added."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param instructions         The list where instructions will be added."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param numberOfInstructions The number of instructions to be added into the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *                             list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static void addInstructions(ArrayList\u003cString\u003e instructions, int numberOfInstructions) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (int i \u003d 0; i \u003c numberOfInstructions; i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            int val \u003d getRandomNumber(0,2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            int toadd \u003d getRandomNumber(0,100);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            switch (val) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case 0:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                String combined \u003d \"Push(\" + toadd + \");\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                instructions.add(combined);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                instructions.add(\"Pop();\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Creates a formatted String which represents the stack given."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param stack The stack containing the elements."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The string which represents the stack."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static String printStack(LinkedList\u003cInteger\u003e stack) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        StringBuilder s \u003d new StringBuilder();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (int i : stack) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            s.append(\"[\").append(i).append(\"] \u003c- \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        s.append(\"Head\\n\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return s.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Creates a String with the instruction given by the list on separate new lines."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param instructions The list of instructions provided."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The String containing the instructions given by the list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static String printInstructions(ArrayList\u003cString\u003e instructions) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        StringBuilder instructs \u003d new StringBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (String s : instructions) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            instructs.append(i).append(\". \").append(s).append(\"\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return instructs.toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Changes the stack according to the instructions generated. Instructions are"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * either pop or push."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param instructions The list of instructions provided."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param stack        The data structure to be changed."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static void changeStack(ArrayList\u003cString\u003e instructions, LinkedList\u003cInteger\u003e stack) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm \u003d new ReviewTracingListModel();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"This is the current stack.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(printStack(stack));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (String cmd : instructions) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            rtlm.addReviewStep(\"Consider step : \" + cmd);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            if (cmd.contains(\"Pop\")) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                rtlm.addReviewStep(\"Removing this element : \" + stack.pollLast() + \".\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                String number \u003d cmd.substring(5, cmd.length() - 2);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                rtlm.addReviewStep(\"Adding this number to the front : \" + number + \".\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                int valuetoadd \u003d Integer.parseInt(number);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                stack.addLast(valuetoadd);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            rtlm.addReviewStep(\"This is the new stack.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            rtlm.addReviewStep(printStack(stack));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"This is the final stack.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(printStack(stack));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealcs1010": 134,
      "modakshantanu": 3
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/chapters/chapter3/BinaryToIntegerConversionQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.chapters.chapter3;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.chapters.Question;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.models.ReviewTracingListModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public class BinaryToIntegerConversionQuestion extends Question {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static String binaryRepresentation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    BinaryToIntegerConversionQuestion() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int ans \u003d getRandomNumber(200,300);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        answer \u003d String.valueOf(ans);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        binaryRepresentation \u003d Integer.toBinaryString(ans);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        reviewCalculation();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        questionFormatter();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public void questionFormatter() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question \u003d \"What is the integer representation of binary value \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + binaryRepresentation + \"?\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Generates the review for the question."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private void reviewCalculation() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm \u003d new ReviewTracingListModel();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"This is the current binary value.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(binaryRepresentation);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"First we reverse the value.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        stringBuilder.append(binaryRepresentation);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        stringBuilder.reverse();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"This is the new binary value.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(stringBuilder.toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"From the index 0, we begin doing our calculations.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"int counter \u003d 0\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (int i \u003d 0; i \u003c stringBuilder.length(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            int val \u003d (int) (Character.getNumericValue(stringBuilder.charAt(i)) * Math.pow(2, i));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            counter +\u003d val;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            rtlm.addReviewStep(\"counter +\u003d \" + stringBuilder.charAt(i) + \" * pow(2 , \" + i + \")\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            rtlm.addReviewStep(\"counter \u003d \" + counter);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"This is the final counter : \" + counter);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealcs1010": 48
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/chapters/chapter3/BitwiseOperatorQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.chapters.chapter3;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.chapters.Question;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.models.ReviewTracingListModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public class BitwiseOperatorQuestion extends Question {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static int firstNumber;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static int secondNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static String bitwiseOperator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static int ans;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    BitwiseOperatorQuestion() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //Bounds the two numbers to be operated on between 40 and 129."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        firstNumber \u003d getRandomNumber(40,90);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        secondNumber \u003d getRandomNumber(40,90);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //Generates a random number to decide which operator to use."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int randomNumber \u003d getRandomNumber(0,3);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        switch (randomNumber) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 0 :"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            bitwiseOperator \u003d \" AND \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            ans \u003d firstNumber \u0026 secondNumber;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 1 :"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            bitwiseOperator \u003d \" OR \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            ans \u003d firstNumber | secondNumber;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 2 :"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            bitwiseOperator \u003d \" XOR \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            ans \u003d firstNumber ^ secondNumber;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        default :"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            bitwiseOperator \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            ans \u003d -1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        answer \u003d String.valueOf(ans);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        questionFormatter();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        reviewCalculation();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private void reviewCalculation() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm \u003d new ReviewTracingListModel();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"The first number when represented in bits : \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        StringBuilder firstString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        firstString.append(Integer.toBinaryString(firstNumber));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(firstString.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"The second number when represented in bits : \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        StringBuilder secondString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        secondString.append(Integer.toBinaryString(secondNumber));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(secondString.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"Reverse both strings, and apply the operator\" + bitwiseOperator"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"to each bit : \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        firstString.reverse();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        secondString.reverse();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"These are the new strings.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"\\t\" + firstString.toString() + \"\\n\" + bitwiseOperator + \"\\n\\t\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + secondString.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"-------------------------------------------\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        output.append(Integer.toBinaryString(ans));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        output.reverse();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"\\t\" + output);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"Reverse this output to give you \" + ans);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public void questionFormatter() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question \u003d \"What is the integer result of \" + firstNumber + bitwiseOperator + secondNumber + \"?\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealcs1010": 72
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/chapters/chapter3/ChapterBitmask.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.chapters.chapter3;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.models.QuestionModel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public class ChapterBitmask {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static Random random \u003d new Random();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Generates a random question related to bitmasking."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return A question model containing to the random number being generated."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public static QuestionModel generateQuestions() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int questionType \u003d random.nextInt(4);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        switch (questionType) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 0 :"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new LeastSignificantBitQuestion().execute();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 1 :"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new BinaryToIntegerConversionQuestion().execute();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 2 :"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new CountingBitsQuestion().execute();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case 3 :"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return new BitwiseOperatorQuestion().execute();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        default :"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "therealcs1010": 33
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/chapters/chapter3/CountingBitsQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.chapters.chapter3;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.chapters.Question;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.models.ReviewTracingListModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public class CountingBitsQuestion extends Question {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static int number;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static char bitToFind;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    CountingBitsQuestion() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //This bounds the number between 40 and 129."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        number \u003d getRandomNumber(40,90);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm \u003d new ReviewTracingListModel();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"We begin by converting the decimal number \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"into its binary representation.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String binaryRepresentation \u003d Integer.toBinaryString(number);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int num \u003d number;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"This is the decimal form : \" + number);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        findBinary(num);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"This is the binary form : \" + binaryRepresentation);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //This bounds the value to be either 0 or 1."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int val \u003d getRandomNumber(0,2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //Decide if bit \u00271\u0027 or \u00270\u0027 should be found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        bitToFind \u003d getBitToFind(val);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"Since this is the bit we want to find : \" + bitToFind);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //Format the question"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        questionFormatter();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int ans \u003d calculateBits(binaryRepresentation, bitToFind);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        answer \u003d String.valueOf(ans);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"We can scan through the string to find out that number of bits \u003d \" + ans);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Calculates the binary form of the question number."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Used for the review segment."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private void findBinary(int num) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"We constantly divide the number by 2 to find the last bit.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        while (num !\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            rtlm.addReviewStep(\"Since number is not 0\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            int bit \u003d num % 2;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            rtlm.addReviewStep(num + \" % 2 \u003d \" + bit);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            stringBuilder.append(bit);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            rtlm.addReviewStep(\"Append the bit to string : \" + stringBuilder);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            num /\u003d 2;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            rtlm.addReviewStep(\"Divide by 2 and check if the value is now 0.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"Number is now 0. Terminate and reverse the string.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public void questionFormatter() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question \u003d \"How many bit(s) in the binary representation of \" + number + \" is/are \" + bitToFind + \"?\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Calculates the number of bits that match the given character to be found."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param binaryRepresentation The binary representation of the number to be searched."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param bitToFind The particular bit to be searched."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The number of bits that match the bit to be found."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static int calculateBits(String binaryRepresentation, char bitToFind) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (int i \u003d 0; i \u003c binaryRepresentation.length(); i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            if (binaryRepresentation.charAt(i) \u003d\u003d bitToFind) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return counter;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Determines the bit to be searched according to the value."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param val A value between 0 and 1 which determines the bit to be found."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return the bit to be found."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static char getBitToFind(int val) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        char bitToFind;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //This selects the bit to be searched."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        if (val \u003d\u003d 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            bitToFind \u003d \u00270\u0027;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            bitToFind \u003d \u00271\u0027;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return bitToFind;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealcs1010": 90
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/chapters/chapter3/LeastSignificantBitQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.chapters.chapter3;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.chapters.Question;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.models.ReviewTracingListModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public class LeastSignificantBitQuestion extends Question {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static int number;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    LeastSignificantBitQuestion() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        number \u003d getRandomNumber(2000,2100);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm \u003d new ReviewTracingListModel();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"This is the decimal number we are working with : \" + number);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"We start by converting the number to its binary form.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        questionFormatter();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        answer \u003d String.valueOf(calculateLeastSigBit(number));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public void questionFormatter() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question \u003d \"What is the index of the Least Significant Bit\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \" in the binary representation of \" + number + \"?\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"(first bit that is 1 counted from the right, 0-based indexing)\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Calculates the position of the least significant bit of an integer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param number The number to be calculated."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The position of the least significant bit."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static int calculateLeastSigBit(int number) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"Set index to 0.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"while number is even, we divide it by 2 and increment counter.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        while (number % 2 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            rtlm.addReviewStep(\"Increment index to \" + counter);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            number /\u003d 2;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            rtlm.addReviewStep(\"Divide number by 2 to get \" + number);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"Now the number is odd.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        rtlm.addReviewStep(\"We know the index is : \" + counter);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return counter;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealcs1010": 46
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/ChaptersCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "//@@author carrieng0323852"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "package com.algosenpai.app.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "public class ChaptersCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    public ChaptersCommand(ArrayList\u003cString\u003e inputs) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        return \"Chapter 1: sorting\\nChapter 2: linkedlist\\nChapter 3: bitmask\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 17
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "//@@author carrieng0323852"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "package com.algosenpai.app.logic.command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import com.algosenpai.app.exceptions.FileParsingException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    protected ArrayList\u003cString\u003e inputs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * Create new command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    public Command(ArrayList\u003cString\u003e inputs) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        this.inputs \u003d inputs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    public abstract String execute() throws IOException, FileParsingException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 26
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/QuizCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class QuizCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Initializes commands for quiz."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param inputs input from user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public QuizCommand(ArrayList\u003cString\u003e inputs) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        return \"You are taking a quiz. Please prefix commands with quiz: quiz   \u003c answer | back | next | end \u003e\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 18,
      "sevenmatt7": 2,
      "therealcs1010": 1
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/QuizNextCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.logic.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.logic.models.QuestionModel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class QuizNextCommand extends QuizCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    ArrayList\u003cQuestionModel\u003e quizList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    AtomicInteger questionNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Initializes back command to go to previous question in the quiz."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param inputs user inputs."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param quizList quiz."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param questionNumber question number."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public QuizNextCommand(ArrayList\u003cString\u003e inputs, ArrayList\u003cQuestionModel\u003e quizList,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                           AtomicInteger questionNumber) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.quizList \u003d quizList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.questionNumber \u003d questionNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        if (inputs.get(0).equals(\"next\") \u0026\u0026 questionNumber.get() \u003c 9) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            questionNumber.incrementAndGet();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        } else if (inputs.get(0).equals(\"back\") \u0026\u0026 questionNumber.get() \u003e 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            questionNumber.decrementAndGet();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return quizList.get(questionNumber.get()).getQuestion()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                + \"\\n Your answer: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                + quizList.get(questionNumber.get()).getUserAnswer();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 34,
      "sevenmatt7": 1,
      "therealcs1010": 2
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/critical/ArcadeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.command.critical;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.logic.chapters.LectureGenerator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.chapters.QuizGenerator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.models.QuestionModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.utility.LogCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.concurrent.atomic.AtomicBoolean;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public class ArcadeCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static int highScore \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static int currArcadeScore \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private AtomicBoolean isArcadeMode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private QuizGenerator quizGenerator \u003d new QuizGenerator();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static final Logger logger \u003d LogCenter.getLogger(ArcadeCommand.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static QuestionModel previousQuestion;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static QuestionModel currQuestion;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Create new command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param inputs User\u0027s input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public ArcadeCommand(ArrayList\u003cString\u003e inputs, AtomicBoolean isArcadeMode) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.isArcadeMode \u003d isArcadeMode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        currQuestion \u003d quizGenerator.generateQuestion();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        if (!isArcadeMode.get()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            isArcadeMode.set(true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            logger.info(\"Player is now in arcade mode.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            String questionToBeDisplayed \u003d currQuestion.getQuestion();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            previousQuestion \u003d currQuestion.copy();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            currQuestion \u003d quizGenerator.generateQuestion();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return questionToBeDisplayed;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            if (inputs.size() \u003e 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                String userAnswer \u003d extractUserAnswerFromInput();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                previousQuestion.setUserAnswer(userAnswer);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                if (previousQuestion.checkAnswer()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    previousQuestion \u003d currQuestion.copy();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    currQuestion \u003d quizGenerator.generateQuestion();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                    currArcadeScore++;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    return previousQuestion.getQuestion();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    return reset();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                return reset();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private String reset() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        isArcadeMode.set(false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        previousQuestion \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        currQuestion \u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        logger.info(\"Player is now exiting arcade mode....\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        if (currArcadeScore \u003e highScore) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            highScore \u003d currArcadeScore;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            currArcadeScore \u003d 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return \"Your arcade score is: \" + currArcadeScore"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                    + \"\\nCongratulations! You set a new high score!\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            currArcadeScore \u003d 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return \"Your arcade score is : \" + currArcadeScore"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                    + \"\\nYour arcade high score is: \" + highScore;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Parses the user input into a string format."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The string containing the user\u0027s answer."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private String extractUserAnswerFromInput() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        StringBuilder answer \u003d new StringBuilder();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (int i \u003d 0; i \u003c inputs.size() - 1; i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            answer.append(inputs.get(i)).append(\", \");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        answer.append(inputs.get(inputs.size() - 1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return answer.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sevenmatt7": 20,
      "therealcs1010": 71
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/critical/ByeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "//@@author carrieng0323852"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "package com.algosenpai.app.logic.command.critical;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * Initializes command to exit program."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @param inputs input from user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    public ByeCommand(ArrayList\u003cString\u003e inputs) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        return \"Bye!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 23
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/critical/LectureCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.command.critical;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.concurrent.atomic.AtomicBoolean;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public class LectureCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private AtomicBoolean isLectureMode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private AtomicInteger lectureSlideNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private AtomicBoolean isNewLecture;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private ArrayList\u003cString\u003e currentTopicSlides;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Create new command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param inputs The user\u0027s input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public LectureCommand(ArrayList\u003cString\u003e inputs, ArrayList\u003cString\u003e currentTopicSlides, AtomicBoolean isLectureMode,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                          AtomicInteger lectureSlideNumber, AtomicBoolean isNewLecture) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.isLectureMode \u003d isLectureMode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.isNewLecture \u003d isNewLecture;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.lectureSlideNumber \u003d lectureSlideNumber;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.currentTopicSlides \u003d currentTopicSlides;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String currentSlide \u003d getcurrentSlide();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        switch (inputs.get(0)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case \"start\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            lectureSlideNumber.get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return currentSlide;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case \"end\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            currentSlide \u003d currentTopicSlides.get(currentTopicSlides.size() - 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            reset();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return currentSlide;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case \"back\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            lectureSlideNumber.set(Math.max(0, lectureSlideNumber.get() - 1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            currentSlide \u003d getcurrentSlide();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        case \"next\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            lectureSlideNumber.set(Math.min(currentTopicSlides.size() - 1, lectureSlideNumber.get() + 1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            currentSlide \u003d getcurrentSlide();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return \"I did not understand your command. Can you try either \u0027next\u0027 or \u0027back\u0027 or \u0027end\u0027?\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        if (lectureSlideNumber.get() \u003d\u003d currentTopicSlides.size() - 1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            reset();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return currentSlide;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private String getcurrentSlide() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return currentTopicSlides.get(lectureSlideNumber.get()) + \"\\n\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + (lectureSlideNumber.get() + 1) + \"/\" + currentTopicSlides.size() + \"\\n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private void reset() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        lectureSlideNumber.set(0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        isLectureMode.set(false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        isNewLecture.set(true);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealcs1010": 71
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/critical/QuizTestCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.command.critical;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.logic.chapters.LectureGenerator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.QuizCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.logic.models.QuestionModel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.utility.LogCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.concurrent.atomic.AtomicBoolean;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class QuizTestCommand extends QuizCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private ArrayList\u003cQuestionModel\u003e quizList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private AtomicInteger questionNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private AtomicBoolean isQuizMode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private AtomicBoolean isNewQuiz;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private int chapterNumber;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    private UserStats userStats;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private AtomicInteger prevResult;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static final Logger logger \u003d LogCenter.getLogger(QuizTestCommand.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Create new command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param inputs input from user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private QuizTestCommand(ArrayList\u003cString\u003e inputs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Initializes quiz command to start quiz."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param inputs user inputs."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param quizList quiz."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param questionNumber question number."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param isQuizMode is quiz mode."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param isNewQuiz is quiz initialize."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public QuizTestCommand(ArrayList\u003cString\u003e inputs, ArrayList\u003cQuestionModel\u003e quizList,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                           AtomicInteger questionNumber, AtomicBoolean isQuizMode, AtomicBoolean isNewQuiz,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                           int chapterNumber,UserStats userStats, AtomicInteger prevResult) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this(inputs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.quizList \u003d quizList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.isQuizMode \u003d isQuizMode;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.questionNumber \u003d questionNumber;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.isNewQuiz \u003d isNewQuiz;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        this.chapterNumber \u003d chapterNumber;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        this.userStats \u003d userStats;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.prevResult \u003d prevResult;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int shownIndex \u003d questionNumber.incrementAndGet();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int ourIndex \u003d shownIndex - 1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        if (shownIndex \u003d\u003d 1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return (shownIndex) +  \".\\t\" + quizList.get(ourIndex).getQuestion()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    + \"\\n Your answer: \";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        } else if (shownIndex \u003c\u003d 10) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            //add the userinput that has been parsed as his answer."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            if (inputs.size() \u003e 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                //to end the quiz in the quizmode"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                if (inputs.get(0).equals(\"end\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                    isQuizMode.set(false);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    reset();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                    return calculateScore();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                String userAnswer \u003d extractUserAnswerFromInput();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                //Sets the answer to the previous question."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                quizList.get(ourIndex - 1).setUserAnswer(userAnswer);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return (shownIndex) +  \".\\t\" + quizList.get(ourIndex).getQuestion()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    + \"\\n Your answer: \";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            String userAnswer \u003d extractUserAnswerFromInput();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            //Sets the answer to the previous question."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            quizList.get(ourIndex - 1).setUserAnswer(userAnswer);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            reset();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return calculateScore();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Parses the user input into a string format."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The string containing the user\u0027s answer."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private String extractUserAnswerFromInput() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        StringBuilder answer \u003d new StringBuilder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (int i \u003d 0; i \u003c inputs.size() - 1; i++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            answer.append(inputs.get(i)).append(\", \");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        answer.append(inputs.get(inputs.size() - 1));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return answer.toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private void reset() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        logger.info(\"Player is exiting quiz mode...\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        questionNumber.set(0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        isQuizMode.set(false);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        isNewQuiz.set(true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private String calculateScore() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        int userQuizScore \u003d 0;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        ArrayList\u003cInteger\u003e wrongQuestions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        for (QuestionModel question : quizList) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            if (question.checkAnswer()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                userQuizScore++;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                wrongQuestions.add(counter);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        prevResult.set(userQuizScore);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        // Updating all the user stats one shot in here"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        userStats.updateChapter(chapterNumber,10,userQuizScore);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //This is the current user exp."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int newUserExp \u003d userStats.getUserExp() + userQuizScore;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //This is the current user level"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int newLevel \u003d userStats.getUserLevel();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //This is the exp required to advance to next level."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int expToAdvance \u003d 8 \u003c\u003c (newLevel - 1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //If the new user exp exceeds the max exp, then increment level."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        if (newUserExp \u003e expToAdvance) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            newUserExp -\u003d expToAdvance;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            newLevel++;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //Set the values in userStats."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        userStats.setUserExp(newUserExp);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        userStats.setUserLevel(newLevel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        userStats.saveUserStats(\"UserData.txt\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        logger.info(\"User stats have been updated in the text file\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        // End of updating"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        return \"You got \" + userQuizScore + \"/10 questions correct!\\n\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"You have gained \" + userQuizScore + \" EXP points!\\n\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Here are the questions you got wrong : \" + wrongQuestions.toString() + \".\\n\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"* Type \u0027review x\u0027 where x is the question number to review the \""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"question and see where you went wrong.\\n\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"* Type \u0027select x\u0027 where x is a chapter to pick another chapter.\\n\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"* Type \u0027menu\u0027 to see other commands.\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 50,
      "sevenmatt7": 25,
      "therealcs1010": 68,
      "modakshantanu": 12
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/critical/ResetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.command.critical;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.exceptions.ResetExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.logic.chapters.LectureGenerator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.utility.LogCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import java.util.concurrent.atomic.AtomicBoolean;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "public class ResetCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    private UserStats userStats;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    // User has to enter reset once, then enter a confirmation second time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    // If resetMode is false, it means the user is asking for the first time,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    // So we should display a confirm(yes/no) message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    // If it is true, the user has already confirmed, and we should go ahead with resetting the data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    private AtomicBoolean resetMode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static final Logger logger \u003d LogCenter.getLogger(ResetCommand.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Create new command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public ResetCommand(ArrayList\u003cString\u003e inputs, UserStats userStats, AtomicBoolean resetMode) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        this.userStats \u003d userStats;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        this.resetMode \u003d resetMode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        if (!resetMode.get()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                ResetExceptions.checkResetStatus(userStats);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                resetMode.set(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                return \"Are you sure you want to reset your progress? (y/n)\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            } catch (ResetExceptions e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                return e.getMessage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        } else if (inputs.get(0).equals(\"y\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            resetMode.set(false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            userStats.resetAll();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            Storage.saveData(\"UserData.txt\",userStats.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            logger.info(\"User stats have been successfully reset to default.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            return \"You progress has been reset!\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            resetMode.set(false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            return \"Reset operation cancelled!\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sevenmatt7": 5,
      "therealcs1010": 2,
      "modakshantanu": 52
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/errorhandling/ArcadeBlockedCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.command.errorhandling;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public class ArcadeBlockedCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Create new command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param inputs User\u0027s input."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public ArcadeBlockedCommand(ArrayList\u003cString\u003e inputs) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return \"This command is invalid during the arcade \u003e.\u003c\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealcs1010": 21
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/errorhandling/InvalidCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "//@@author carrieng0323852"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "package com.algosenpai.app.logic.command.errorhandling;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import com.algosenpai.app.exceptions.FileParsingException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import com.algosenpai.app.logic.constant.CommandsEnum;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import com.algosenpai.app.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import com.algosenpai.app.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import java.lang.reflect.Array;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "public class InvalidCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * Create new command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @param inputs input from user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    public InvalidCommand(ArrayList\u003cString\u003e inputs) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        UserStats previousStats \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            previousStats \u003d UserStats.parseString(Storage.loadData(\"UserData.txt\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        } catch (FileParsingException | FileNotFoundException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        if (previousStats.getUsername().equals(\"Default\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            return \"Hello there! Welcome to the world of DATA STRUCTURES AND ALGORITHMS.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                    + \"Can I have your name and gender in the format : \u0027hello NAME GENDER (boy/girl)\u0027 please.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            StringBuilder input \u003d new StringBuilder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            for (String i : inputs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                if (Parser.allCharacters(i)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                    input.append(i.toLowerCase());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            if (!compare(input.toString()).isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                return \"OOPS!!! Error occurred. Please input a valid command. Did you mean... \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                        + compare(input.toString()) + \"?\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                return \"OOPS!!! Error occurred. Please input a valid command. \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                        + \"Enter `menu` to view our list of commands \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                        + \"and `menu \u003ccommand\u003e to find out how to use them!\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * Returns the closest possible word(s) to the invalid command entered by user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @param input invalid command that the user entered"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @return possible command(s) that the user might have meant"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    private static String compare(String input) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        int num \u003d 100;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        List\u003cString\u003e name \u003d CommandsEnum.getNames();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        ArrayList\u003cString\u003e strings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        if (hasStartWith(name, input)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            for (String s : name) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                if (s.startsWith(input) || s.equals(input)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                    strings.add(s);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            for (String s : name) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                if (contains(s, input)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                    int temp \u003d editDist(input, s, input.length(), s.length());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                    if (temp \u003c num) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                        num \u003d temp;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                        if (!strings.isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                            clear(strings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                        strings.add(s);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                    } else if (temp \u003d\u003d num) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                        strings.add(s);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        return strings.toString().replace(\"[\", \"\").replace(\"]\", \"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * Returns the edit distance from one word to another, which in other words,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * means how many steps of the 3 operations (insert, remove and replace)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * are needed to change one word to another."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @param input invalid command that the user entered"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @param known one of the list of commands"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @param x length of input"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @param y length of known"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @return minimum steps to convert input to known"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    private static int editDist(String input, String known, int x, int y) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        if (x \u003d\u003d 0) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            return y;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        if (y \u003d\u003d 0) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            return x;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        if (input.charAt(x - 1) \u003d\u003d known.charAt(y - 1)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            return editDist(input, known, x - 1, y - 1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        return 1 + minimum(editDist(input, known, x, y - 1), editDist(input, known, x - 1, y),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        editDist(input, known, x - 1, y - 1));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * Returns the minimum of the three operations."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @param a inserting"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @param b removing"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @param c replacing"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @return the minimum of the three operations"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    private static int minimum(int a, int b, int c) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        if (a \u003c\u003d b \u0026\u0026 a \u003c\u003d c) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            return a;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        } else if (b \u003c\u003d a \u0026\u0026 b \u003c\u003d c) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            return b;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            return c;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * Clears an arraylist."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @param list input arraylist"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @return arraylist that has been cleared"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    private static ArrayList\u003cString\u003e clear(ArrayList\u003cString\u003e list) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        while (!list.isEmpty()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            list.remove(0);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    private static boolean contains(String known, String input) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        for (int i \u003d 0; i \u003c input.length(); i++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            char ch \u003d input.charAt(i);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            for (int j \u003d 0; j \u003c known.length(); j++) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                if (known.charAt(j) \u003d\u003d ch) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    private static boolean hasStartWith(List\u003cString\u003e list, String input) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        for (String s : list) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            if (s.startsWith(input)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 170
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/errorhandling/LectureBlockedCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.command.errorhandling;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public class LectureBlockedCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Create new command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param inputs The user\u0027s input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public LectureBlockedCommand(ArrayList\u003cString\u003e inputs) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return \"This command is invalid during the lecture! \u003e.\u003c\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealcs1010": 23
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/errorhandling/QuizBlockedCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.command.errorhandling;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public class QuizBlockedCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Create new command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param inputs The user\u0027s inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public QuizBlockedCommand(ArrayList\u003cString\u003e inputs) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return \"This command is invalid during the quiz! \u003e.\u003c\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealcs1010": 22
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/utility/ArchiveCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.command.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.logic.models.QuestionModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.logic.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class ArchiveCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private ArrayList\u003cQuestionModel\u003e quizList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private ArrayList\u003cQuestionModel\u003e archiveList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Create new command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param inputs input from user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public ArchiveCommand(ArrayList\u003cString\u003e inputs,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                          ArrayList\u003cQuestionModel\u003e quizList, ArrayList\u003cQuestionModel\u003e archiveList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.quizList \u003d quizList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.archiveList \u003d archiveList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        String errorMessage \u003d \"Please use the proper format. Try `archive x` where x is a number between 1 and 10.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        if (this.quizList.isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return \"There is no current quiz available!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        if (inputs.size() !\u003d 2 || !Parser.isInteger(inputs.get(1))) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return errorMessage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        if (!Parser.isInteger(inputs.get(1))) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return errorMessage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        int index \u003d Integer.parseInt(inputs.get(1)) - 1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        if (index \u003c 0 || index \u003e 9) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return errorMessage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        archiveList.add(quizList.get(index).copy());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return \"Archived!\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 41,
      "therealcs1010": 4
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/utility/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.command.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Create new command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param inputs input from user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public ClearCommand(ArrayList\u003cString\u003e inputs) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return \"clear\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 18,
      "therealcs1010": 3
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/utility/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.command.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Initializes command to undo chat."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param inputs input from user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public DeleteCommand(ArrayList\u003cString\u003e inputs) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Returns the number of chat messages to delete."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @return number of chat messages to delete."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        if (inputs.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return \"1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        if (Parser.isInteger(inputs.get(1))) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            int number \u003d  Integer.parseInt(inputs.get(1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return Integer.toString(number \u003c 0 ? -number : number);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return \"Sorry, you did not enter a valid number (ᵟ︵ ᵟ)\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 29,
      "sevenmatt7": 3,
      "therealcs1010": 2
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/utility/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app.logic.command.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.exceptions.FileParsingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private UserStats userStats;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Create new Help command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param inputs input from user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param userStats the userStats object used."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public HelpCommand(ArrayList\u003cString\u003e inputs, UserStats userStats) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        this.userStats \u003d userStats;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public String execute()  {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        if (inputs.size() \u003c 2) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return getDefaultMessage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            int index \u003d userStats.getIndexByName(inputs.get(1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                return getDefaultMessage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                userStats \u003d UserStats.parseString(Storage.loadData(\"UserData.txt\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            } catch (FileNotFoundException | FileParsingException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            double percentageStat \u003d userStats.getPercentageofQuestionsCorrect(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return getRecommendedQuestions(index, percentageStat);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Returns default message if the help command is not called properly."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @return default message to use select command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private String getDefaultMessage() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        StringBuilder str \u003d new StringBuilder("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                \"No such chapter found. Please select the following:\\nhelp \u003cchapter name\u003e\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        for (String chapter: userStats.getChapters()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            str.append(chapter).append(\"\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        return str.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Gets the appropriate questions to recommend to the user depending on their proficiency level"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * (aka the percentage of questions they get correct for the chapter selected)."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param index the index of the chapter selected."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param percentageStat the statistic that is used to determine their proficiency, parsed from their user stats."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @return the questions to be recommended to practice."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private String getRecommendedQuestions(int index, double percentageStat) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        String responseString \u003d \"Try solving these problems on Kattis:\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            if (percentageStat \u003c 40.0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                return responseString +\u003d \"lineup, mjehuric, sidewayssorting\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            } else if (percentageStat \u003c 60.0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                return responseString +\u003d \"chartingprogress, classy, dyslectionary\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                return responseString +\u003d \"lawnmower, sortofsorting, musicyourway\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        } else if (index \u003d\u003d 2) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            if (percentageStat \u003c 40.0) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                return responseString +\u003d \"evenup, pairingsocks, coconut\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            } else if (percentageStat \u003c 60.0) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                return responseString +\u003d \"throwns, integerlists, joinstrings\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            } else  {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                return responseString +\u003d \"restaurant, ferryloading4, teque\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        } else if (index \u003d\u003d 3) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            if (percentageStat \u003c 40.0) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                return responseString +\u003d \"committeeassignment, pebblesolitaire\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            } else if (percentageStat \u003c 60.0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                return responseString +\u003d \"pebblesolitaire2, equalsumeasy\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                return responseString +\u003d \"robotturtles, hidingchickens\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        return getDefaultMessage();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sevenmatt7": 97
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/utility/HistoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.command.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import com.algosenpai.app.exceptions.HistoryExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private ArrayList\u003cString\u003e historyList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Create new command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param inputs input from user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private HistoryCommand(ArrayList\u003cString\u003e inputs) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public HistoryCommand(ArrayList\u003cString\u003e inputs, ArrayList\u003cString\u003e historyList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this(inputs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.historyList \u003d historyList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            HistoryExceptions.checkInput(inputs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            String argument \u003d inputs.get(1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            HistoryExceptions.checkArgument(historyList, argument);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            int num \u003d Integer.parseInt(argument);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            StringBuilder history \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            history.append(\"Have you forgotten our conversation?\\n\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            for (int i \u003d historyList.size() - (num + 1); i \u003c historyList.size() - 1; i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                history.append(historyList.get(i)).append(\"\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return history.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        } catch (HistoryExceptions e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            return e.getMessage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 12,
      "nwjbrandon": 28,
      "therealcs1010": 3
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/utility/LoadCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "package com.algosenpai.app.logic.command.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.MainApp;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.exceptions.FileParsingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.utility.LogCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import java.net.UnknownServiceException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "public class LoadCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    private UserStats userStats;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"Please enter in the format:\\n load \u003cfilename\u003e.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Create new command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public LoadCommand(ArrayList\u003cString\u003e inputs, UserStats userStats) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        this.userStats \u003d userStats;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        if (inputs.size() \u003c 2 || !isValidFilename(inputs.get(1))) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            return ERROR_MESSAGE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        String fileName \u003d inputs.get(1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        String fileContents;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            fileContents \u003d Storage.loadData(fileName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            return \"File does not exist!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        UserStats temp;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            temp \u003d UserStats.parseString(fileContents);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        } catch (FileParsingException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            return \"File is not a valid User Data file!\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        userStats.copy(temp);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        return \"UserStats has been updated! Type \\\"stats\\\" to view the new stats.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    private boolean isValidFilename(String filename) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        return filename.endsWith(\".txt\") \u0026\u0026 filename.length() \u003e 4;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sevenmatt7": 3,
      "modakshantanu": 51
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/utility/MenuCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.command.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import com.algosenpai.app.exceptions.MenuExceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class MenuCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static HashMap\u003cString, String\u003e commandExplanation \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Initializes command to show available commands."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param inputs user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public MenuCommand(ArrayList\u003cString\u003e inputs) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        if (commandExplanation \u003d\u003d null) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            commandExplanation \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                InputStream is \u003d getClass().getResourceAsStream(\"/data/commandList.txt\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                BufferedReader bufferedReader \u003d new BufferedReader(new InputStreamReader(is));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                String line;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                StringBuilder input \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                while (true) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    line \u003d bufferedReader.readLine();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    if (line \u003d\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    input.append(line).append(\"\\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                String[] arr \u003d input.toString().split(\"-\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                for (String s : arr) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    String[] temp \u003d s.split(\"\\n\", 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    commandExplanation.put(temp[0], temp[1]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                System.out.println(\"Cant find\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        if (inputs.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return commandExplanation.get(\"Introduction\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                MenuExceptions.checkInput(inputs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                return commandExplanation.getOrDefault(inputs.get(1), \"Error there is no such command,\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                        + \" enter `menu` to get the list of available commands.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            } catch (MenuExceptions e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                return e.getMessage();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 10,
      "nwjbrandon": 17,
      "therealcs1010": 35
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/utility/ResultCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.command.utility;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class ResultCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private AtomicInteger results;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Create new command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param inputs input from user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private ResultCommand(ArrayList\u003cString\u003e inputs) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public ResultCommand(ArrayList\u003cString\u003e inputs, AtomicInteger results) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this(inputs);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.results \u003d results;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        if (results.get() \u003d\u003d -1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return \"You have not attempted any quiz yet.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return \"You had \" + results + \"/10 questions correct for the last attempt.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 1,
      "nwjbrandon": 25,
      "therealcs1010": 8
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/utility/ReviewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.command.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.models.QuestionModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.logic.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public class ReviewCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private ArrayList\u003cQuestionModel\u003e quizList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Create new command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param inputs The inputs from the user"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param quizList The quizlist containing the questionModels."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public ReviewCommand(ArrayList\u003cString\u003e inputs, ArrayList\u003cQuestionModel\u003e quizList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.quizList \u003d quizList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        String errorMessage \u003d \"Please use the proper format. Try `review x` where x is a number between 1 and 10.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        if (this.quizList.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return \"There is no current quiz available!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        if (inputs.size() !\u003d 2 || !Parser.isInteger(inputs.get(1))) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return errorMessage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        if (!Parser.isInteger(inputs.get(1))) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return errorMessage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int index \u003d Integer.parseInt(inputs.get(1)) - 1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        if (index \u003c 0 || index \u003e 9) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return errorMessage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return quizList.get(index).getQuestion() + \"\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Correct answer : \" + quizList.get(index).getAnswer() + \"\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Your answer : \" + quizList.get(index).getUserAnswer() + \"\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + quizList.get(index).getRtlm().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 9,
      "therealcs1010": 36
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/utility/SaveCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "package com.algosenpai.app.logic.command.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "public class SaveCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    private UserStats userStats;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"Please enter in the format:\\n save \u003cfilename\u003e.txt\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Create new command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @param inputs input from user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public SaveCommand(ArrayList\u003cString\u003e inputs, UserStats userStats) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        this.userStats \u003d userStats;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        // If user does not specify a filename, the data is saved to the default filename \"UserData.txt\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        String fileName \u003d \"UserData.txt\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        if (inputs.size() \u003e 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            if (isValidFilename(inputs.get(1))) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                fileName \u003d inputs.get(1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                return ERROR_MESSAGE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Storage.saveData(fileName,userStats.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        return \"Your data is saved to \" + fileName + \"!\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    private boolean isValidFilename(String filename) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        return filename.endsWith(\".txt\") \u0026\u0026 filename.length() \u003e 4;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "modakshantanu": 44
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/utility/SelectLectureChapterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.command.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.concurrent.atomic.AtomicBoolean;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public class SelectLectureChapterCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private AtomicInteger chapterNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private AtomicBoolean isLectureMode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private UserStats userStats;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Picks the correct lecture chapter."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param inputs The user\u0027s input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param chapterNumber The chapter number of the selected chapter."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param isLectureMode Variable if it is a lecture mode."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param userStats The user\u0027s stats."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public SelectLectureChapterCommand(ArrayList\u003cString\u003e inputs, AtomicInteger chapterNumber,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                                       AtomicBoolean isLectureMode, UserStats userStats) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.userStats \u003d userStats;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.chapterNumber \u003d chapterNumber;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.isLectureMode \u003d isLectureMode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        if (inputs.size() \u003c 2) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return getDefaultMessage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int index \u003d userStats.getIndexByName(inputs.get(1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        if (index \u003c 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return getDefaultMessage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        chapterNumber.set(index - 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.isLectureMode.set(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return \"You have selected Chapter \" + chapterNumber.incrementAndGet() + \". Type \u0027start\u0027 to begin.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Returns default message if the select command is not called properly."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return default message to use select command."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private String getDefaultMessage() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        StringBuilder str \u003d new StringBuilder("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                \"No such chapter found. Please select the following:\\nlecture \u003cchapter name\u003e\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (String chapter: userStats.getChapters()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            str.append(chapter).append(\"\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return str.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealcs1010": 58
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/utility/SelectQuizChapterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.command.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.concurrent.atomic.AtomicBoolean;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public class SelectQuizChapterCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private AtomicInteger chapterNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private UserStats userStats;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private AtomicBoolean isQuizMode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Create new command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param inputs input from user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public SelectQuizChapterCommand(ArrayList\u003cString\u003e inputs, AtomicInteger chapterNumber, UserStats userStats,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                                    AtomicBoolean isQuizMode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.chapterNumber \u003d chapterNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.userStats \u003d userStats;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.isQuizMode \u003d isQuizMode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        if (inputs.size() \u003c 2) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return getDefaultMessage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        int index \u003d userStats.getIndexByName(inputs.get(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        if (index \u003c 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return getDefaultMessage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        chapterNumber.set(index - 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.isQuizMode.set(true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return \"You have selected Chapter \" + chapterNumber.incrementAndGet() + \". Type \u0027start\u0027 to begin.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Returns default message if the select command is not called properly."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @return default message to use select command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private String getDefaultMessage() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        StringBuilder str \u003d new StringBuilder("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                \"No such chapter found. Please select the following:\\nquiz \u003cchapter name\u003e\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        for (String chapter: userStats.getChapters()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            str.append(chapter).append(\"\\n\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return str.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 42,
      "therealcs1010": 12
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/utility/SetupCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.command.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.exceptions.FileParsingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "public class SetupCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private UserStats stats;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static String userName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static String gender;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static int level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private static int expLevel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Create new command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param inputs input from user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public SetupCommand(ArrayList\u003cString\u003e inputs) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Initializes quiz command to start quiz."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param inputs user inputs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param stats  the UserStats object used."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public SetupCommand(ArrayList\u003cString\u003e inputs, UserStats stats) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        this(inputs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        this.stats \u003d stats;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        if (inputs.size() \u003c 3) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            UserStats previousStats \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                previousStats \u003d UserStats.parseString(Storage.loadData(\"UserData.txt\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            } catch (FileParsingException | FileNotFoundException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            if (previousStats.getUsername().equals(\"Default\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                return \"Hello there! Welcome to the world of DATA STRUCTURES AND ALGORITHMS.\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                        + \"Can I have your name and gender in the format : \u0027hello NAME GENDER (boy/girl)\u0027 please.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                gender \u003d previousStats.getGender();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                userName \u003d previousStats.getUsername();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                level \u003d previousStats.getUserLevel();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                expLevel \u003d previousStats.getUserExp();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                stats \u003d new UserStats(previousStats);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                return \"Welcome back \" + userName + \"! To continue on your adventure, pick a command from \u0027menu\u0027.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            userName \u003d inputs.get(1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            gender \u003d inputs.get(2).toLowerCase();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            level \u003d 1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            expLevel \u003d 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            if (gender.equals(\"boy\") || gender.equals(\"girl\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                stats.setUsername(userName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                stats.setGender(gender);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                stats.setUserLevel(1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                stats.setUserExp(0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                return \"Could you enter the setup command again with the appropriate gender?\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        stats.saveUserStats(\"UserData.txt\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return \"Hello \" + userName + \"! To see a list of commands, type \u0027menu\u0027.\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public static String getGender() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public static String getUserName() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return userName;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public static int getLevel() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return level;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public static int getExpLevel() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return expLevel;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 1,
      "sevenmatt7": 44,
      "therealcs1010": 37,
      "modakshantanu": 13
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/utility/ShowStatsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.command.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.stats.ChapterStat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "public class ShowStatsCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    private UserStats userStats;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Create new command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @param inputs The words following the command word."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public ShowStatsCommand(ArrayList\u003cString\u003e inputs, UserStats userStats) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        this.userStats \u003d userStats;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public String execute()  {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        result +\u003d \"Here are your stats: \\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        result +\u003d \"Name: \" + userStats.getUsername() + \"\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        result +\u003d \"Gender: \" + userStats.getGender() + \"\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        result +\u003d \"Level: \" + userStats.getUserLevel() + \"\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        result +\u003d \"Exp: \" + userStats.getUserExp() + \"\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        for (ChapterStat stat : userStats.getChapterData()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            result +\u003d stat.toString() + \"\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealcs1010": 2,
      "modakshantanu": 35
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/utility/VolumeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.command.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.ui.controller.MusicController;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class VolumeCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Initializes command to adjust volume."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param inputs input from user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public VolumeCommand(ArrayList\u003cString\u003e inputs) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Returns message status when adjusting volume."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @return message status."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            if (Parser.isInteger(inputs.get(1))) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                int soundLevel \u003d Integer.parseInt(inputs.get(1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                if (soundLevel \u003c 0 || soundLevel \u003e 100) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                    return \"Sound level is from 0 to 100\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                MusicController.setVolume(Integer.parseInt(inputs.get(1)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                return \"Sound level adjusted\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return \"Select a number from 0 to 100 to adjust the sound\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return \"volume \u003csound level\u003e\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 37,
      "therealcs1010": 2
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/utility/print/PrintArchiveCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.logic.command.utility.print;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.logic.chapters.LectureGenerator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.logic.models.QuestionModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.utility.LogCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.itextpdf.text.DocumentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class PrintArchiveCommand extends PrintCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * List of archived questions and answers."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private ArrayList\u003cQuestionModel\u003e archiveList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Paragraphs to write to pdf."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private ArrayList\u003cString\u003e paragraphs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static final Logger logger \u003d LogCenter.getLogger(PrintArchiveCommand.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Initializes command to print archive."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param inputs user inputs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param archiveList list of questions to write to pdf."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    PrintArchiveCommand(ArrayList\u003cString\u003e inputs, ArrayList\u003cQuestionModel\u003e archiveList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.archiveList \u003d archiveList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.paragraphs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.prepareQuiz();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Prepares question to write to pdf."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private void prepareQuiz() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        int questionCount \u003d 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        for (QuestionModel question: archiveList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            paragraphs.add(\"Q\" + questionCount++ + \")\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            paragraphs.add(question.getQuestion());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            paragraphs.add(question.getUserAnswer());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            paragraphs.add(question.getAnswer());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            paragraphs.add(question.checkAnswer() ? \"Correct\" : \"Wrong\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Writes archived questions and answers to pdf and returns status message."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @return status message"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        if (!isPdfFileExtension(inputs.get(2))) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return \"Wrong file extension\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        if (isEmpty(paragraphs)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return \"Nothing in archive\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            pdfWriter.saveToPdf(paragraphs, inputs.get(2));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            logger.info(\"Archived questions have successfully been written to the pdf file.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return \"The questions you have archived have been successfully export to the pdf file!\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                    + \" Happy reviewing! \\\\(ᵔᵕᵔ)/\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        } catch (DocumentException | FileNotFoundException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            logger.severe(\"Oh no! Your questions were not able to be exported to the pdf file (ᵟຶ︵ ᵟຶ)\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return \"Error writing archive to file\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 65,
      "sevenmatt7": 9
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/utility/print/PrintCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.logic.command.utility.print;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.logic.models.QuestionModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.utility.PdfDocumentWriterUtility;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class PrintCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private ArrayList\u003cQuestionModel\u003e quizList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private ArrayList\u003cQuestionModel\u003e archiveList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private UserStats userStats;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Pdf writer."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    PdfDocumentWriterUtility pdfWriter \u003d new PdfDocumentWriterUtility();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Initializes command to decide what print action to take."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param inputs input from user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    PrintCommand(ArrayList\u003cString\u003e inputs) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Returns message to show users how to use print functionality."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @return message to show print functionality."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return \"Please use the following format\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                + \"print \u003carchive | quiz |  user\u003e \u003cfilename\u003e.pdf\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    boolean isPdfFileExtension(String filename) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return filename.toLowerCase().endsWith(\".pdf\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    boolean isEmpty(ArrayList\u003cString\u003e paragraphs) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return paragraphs.size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 47
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/utility/print/PrintCommandFactory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.logic.command.utility.print;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.models.QuestionModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class PrintCommandFactory extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private ArrayList\u003cQuestionModel\u003e quizList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private ArrayList\u003cQuestionModel\u003e archiveList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private UserStats userStats;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Initializes print command factory to decide what print action to take."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param inputs The input from the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param userStats The user\u0027s stats."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param archiveList The user\u0027s archive list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param quizList The user\u0027s quiz list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public PrintCommandFactory(ArrayList\u003cString\u003e inputs, UserStats userStats,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                        ArrayList\u003cQuestionModel\u003e archiveList, ArrayList\u003cQuestionModel\u003e quizList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.userStats \u003d userStats;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.archiveList \u003d archiveList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.quizList \u003d quizList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Returns message to show users how to use print functionality."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return message to show print functionality."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        if (inputs.size() !\u003d 3) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return new PrintCommand(inputs).execute();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            switch (inputs.get(1)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case \"user\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                return new PrintUserCommand(inputs, userStats).execute();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case \"archive\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                return new PrintArchiveCommand(inputs, archiveList).execute();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            case \"quiz\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                return new PrintQuizCommand(inputs, quizList).execute();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                return new PrintCommand(inputs).execute();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return new PrintCommand(inputs).execute();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 9,
      "therealcs1010": 45
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/utility/print/PrintQuizCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.logic.command.utility.print;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.logic.models.QuestionModel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.itextpdf.text.DocumentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class PrintQuizCommand extends PrintCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * List of questions and answers in quiz."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private ArrayList\u003cQuestionModel\u003e quizList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Paragraphs to write to pdf."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private ArrayList\u003cString\u003e paragraphs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Initializes command to print quiz."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param inputs user inputs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param quizList list of questions to write to pdf."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    PrintQuizCommand(ArrayList\u003cString\u003e inputs, ArrayList\u003cQuestionModel\u003e quizList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.quizList \u003d quizList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.paragraphs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.prepareQuiz();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Prepares question to write to pdf."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private void prepareQuiz() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        int questionCount \u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        for (QuestionModel question: quizList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            paragraphs.add(\"Q\" + questionCount++ + \")\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            paragraphs.add(question.getQuestion());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            paragraphs.add(question.getUserAnswer());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            paragraphs.add(question.getAnswer());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            paragraphs.add(question.checkAnswer() ? \"Correct\" : \"Wrong\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Writes quiz to pdf and returns status message."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @return status message."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        if (!isPdfFileExtension(inputs.get(2))) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return \"Wrong file extension\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        if (isEmpty(paragraphs)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return \"Nothing in quiz\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            pdfWriter.saveToPdf(paragraphs, inputs.get(2));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return \"Successfully write quiz to pdf\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        } catch (DocumentException | FileNotFoundException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return \"Error writing quiz to file\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 66
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/command/utility/print/PrintUserCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.logic.command.utility.print;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.itextpdf.text.DocumentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class PrintUserCommand extends PrintCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * User stats."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private UserStats userStats;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Paragraphs to write to pdf."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private ArrayList\u003cString\u003e paragraphs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Initializes command to print user status."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param inputs user inputs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param userStats user stats to write to pdf."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    PrintUserCommand(ArrayList\u003cString\u003e inputs, UserStats userStats) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        super(inputs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.userStats \u003d userStats;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.paragraphs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.prepareUserStates();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Prepares user stats to write to pdf."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private void prepareUserStates() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        paragraphs.add(userStats.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Writes user stats to pdf and returns status message."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @return status message."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public String execute() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        if (!isPdfFileExtension(inputs.get(2))) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return \"Wrong file extension\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            pdfWriter.saveToPdf(paragraphs, inputs.get(2));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return \"Successfully write to pdf\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        } catch (DocumentException | FileNotFoundException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return \"Error writing to file\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 56
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/constant/ChaptersEnum.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.logic.constant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public enum ChaptersEnum {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    sorting,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    linkedlist,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    bitmask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public static HashSet\u003cString\u003e getChapters() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return Stream.of(ChaptersEnum.values()).map(ChaptersEnum::name).collect(Collectors.toCollection(HashSet::new));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealcs1010": 15
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/constant/CommandsEnum.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "//@@author carrieng0323852"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "package com.algosenpai.app.logic.constant;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "public enum CommandsEnum {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    menu, //0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    lecture, //1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    quiz, //2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    arcade, //3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    chapters, //4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    review, //5"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    reset, //6"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    history, //7"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    undo, //8"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    clear, //9"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    help, //10"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    volume, //11"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    print, //12"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    archive, //13"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    stats, //15"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    result,//16"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    exit, //17"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    load, //18"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    start; //19"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    private static List\u003cString\u003e enumNames \u003d Stream.of(CommandsEnum.values())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            .map(CommandsEnum::name)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * Returns the valid commands as strings in a list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @return List of strings"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    public static List\u003cString\u003e getNames() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        return enumNames;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * Returns the blocked commands during a quiz."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @return list of blocked commands during a quiz."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    public static List\u003cString\u003e getQuizBlockedNames() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        List\u003cString\u003e blockedNames \u003d new LinkedList\u003c\u003e(enumNames);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        blockedNames.remove(17); //exit"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        blockedNames.remove(11); //volume"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        blockedNames.remove(2); //quiz"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        return blockedNames;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * Returns the blocked commands during a lecture."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @return list of blocked commands during a lecture."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    public static List\u003cString\u003e getLectureBlockedNames() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        List\u003cString\u003e blockedNames \u003d new LinkedList\u003c\u003e(enumNames);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        blockedNames.remove(17); //exit"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        blockedNames.remove(11); //volume"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        blockedNames.remove(1); //lecture"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        return blockedNames;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * Returns the blocked command during an arcade."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @return list of blocked commands during an arcade."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    public static List\u003cString\u003e getArcadeBlockedNames() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        List\u003cString\u003e blockedNames \u003d new LinkedList\u003c\u003e(enumNames);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        blockedNames.remove(17); //exit"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        blockedNames.remove(11); //volume"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        blockedNames.remove(3); //arcade"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        return blockedNames;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 80
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/constant/SoundConstant.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app.logic.constant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class SoundConstant {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public static Map\u003cSoundEnum, String\u003e music;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        music \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        music.put(SoundEnum.ENDLESS_LOVE, \"endless_love.wav\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        music.put(SoundEnum.LOST_CITY, \"lost_city.wav\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 14,
      "sevenmatt7": 1
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/constant/SoundEnum.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app.logic.constant;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public enum SoundEnum {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    LOST_CITY,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    ENDLESS_LOVE,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 7,
      "sevenmatt7": 1
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/models/QuestionModel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.logic.models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class QuestionModel {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private String question;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private String correctAnswer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private String userAnswer \u003d \"\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private ReviewTracingListModel rtlm \u003d new ReviewTracingListModel();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Creates a question using multiple parameters."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param question  The question to be shown to the user"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param answer    The correct answer to the question"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param rtlm      The steps leading to the correct answer"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public QuestionModel(String question, String answer, ReviewTracingListModel rtlm) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        this.correctAnswer \u003d answer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.rtlm \u003d rtlm;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        return correctAnswer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public String getUserAnswer() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return userAnswer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public void setUserAnswer(String userAnswer) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        this.userAnswer \u003d userAnswer;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Checks the user answer with the correct answer."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @return a boolean on whether the user answer is equal to the correct answer."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public boolean checkAnswer() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return this.userAnswer.equals(this.correctAnswer);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public ReviewTracingListModel getRtlm() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return rtlm;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public QuestionModel copy() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return new QuestionModel(question, correctAnswer, rtlm);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 12,
      "sevenmatt7": 14,
      "therealcs1010": 27
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/models/ReviewTracingListModel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.logic.models;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class ReviewTracingListModel {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private ArrayList\u003cString\u003e reviewMethodList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public ReviewTracingListModel() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        reviewMethodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public void addReviewStep(String reviewStep) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.reviewMethodList.add(reviewStep);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        StringBuilder totalString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (String x: reviewMethodList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            totalString.append(x).append(\"\\n\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return totalString.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 15,
      "therealcs1010": 11
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "//@@author carrieng0323852"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "package com.algosenpai.app.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * Processes user input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @param input raw user input"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @return ArrayList of the user inputs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    public static ArrayList\u003cString\u003e parseInput(String input) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        ArrayList\u003cString\u003e inputs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        inputs \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                Arrays.asList(input.trim().replaceAll(\" +\", \" \").split(\" \")));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        inputs.set(0, inputs.get(0).toLowerCase());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        return inputs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * Checks string conversion to integer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @param s input to check string conversion to integer."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @return true if string can be converted to integer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    public static boolean isInteger(String s) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Scanner sc \u003d new Scanner(s.trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        if (!sc.hasNextInt()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        sc.nextInt();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        return !sc.hasNext();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * Finds out if a string is an integer."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @param s input string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     * @return boolean true if string is an integer else false otherwise"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    public static boolean integer(String s) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            Integer.parseInt(s);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    public static boolean allCharacters(String s) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        return ((!s.equals(\"\"))) \u0026\u0026 (s !\u003d null) \u0026\u0026 (s.matches(\"^[a-zA-Z]*$\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 56
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/stats/ChapterStat.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.stats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.exceptions.FileParsingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " * Chapter Statistics. Holds the data about each chapter."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "public class ChapterStat {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    String chapterName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    int chapterNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    int attempts;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    int totalAnswered;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    int correctAnswers;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    int wrongAnswers;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    double percentage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    String comments;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param chapterName The name of the chapter."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param chapterNumber The chapter number."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param attempts The number of times that chapter has been attempted."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @param totalAnswered The total answered questions."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @param correctAnswers The number of correctly answered questions."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param wrongAnswers The number of wrongly answered questions."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param percentage The percentage of answers answered correctly."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param comments The comments given for each chapter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public ChapterStat(String chapterName, int chapterNumber, int attempts,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                       int totalAnswered, int correctAnswers, int wrongAnswers,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                       double percentage, String comments) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.chapterName \u003d chapterName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.chapterNumber \u003d chapterNumber;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.attempts \u003d attempts;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        this.totalAnswered \u003d totalAnswered;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        this.correctAnswers \u003d correctAnswers;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.wrongAnswers \u003d wrongAnswers;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.percentage \u003d percentage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.comments \u003d comments;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Gets the percentage of questions correct."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @return the value of the percentage."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public double getPercentage() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        return this.percentage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Makes a new copy of the Chapter."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param referenceChapter The chapter to be copied."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    ChapterStat(ChapterStat referenceChapter) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.chapterName \u003d referenceChapter.chapterName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.chapterNumber \u003d referenceChapter.chapterNumber;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.attempts \u003d referenceChapter.attempts;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.totalAnswered \u003d referenceChapter.totalAnswered;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.correctAnswers \u003d referenceChapter.correctAnswers;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.wrongAnswers \u003d referenceChapter.wrongAnswers;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.percentage \u003d referenceChapter.percentage;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.comments \u003d referenceChapter.comments;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Converts the chapter stats to a string."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @return the String."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        result +\u003d \"Chapter \" + chapterNumber + \" : \" + chapterName + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        result +\u003d \"Total Attempts made : \" + attempts + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        result +\u003d \"Total Questions answered : \" + totalAnswered + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        result +\u003d \"Total Questions correct : \" + correctAnswers + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        result +\u003d \"Total Questions wrong : \" + wrongAnswers + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        result +\u003d \"Percentage of Questions correct : \" + percentage + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        result +\u003d \"Comments : \\\"\" + comments + \"\\\"\\n\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Recalculates the percentage and wrong answers when the correct answers or total answers is updated."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void recalculateStats() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        if (totalAnswered \u003d\u003d 0) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            percentage \u003d 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            correctAnswers \u003d wrongAnswers \u003d 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            percentage \u003d 100.0 * correctAnswers / (double) totalAnswered;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            wrongAnswers \u003d totalAnswered - correctAnswers;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        // Set comments based on how proficient the user is."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        if (totalAnswered \u003d\u003d 0) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            comments \u003d \"You have not attempted this chapter yet\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        } else if (percentage \u003c\u003d 50) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            comments \u003d \"You need more practice. Keep trying!\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        } else if (percentage \u003c\u003d 75) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            comments \u003d \"Keep it up! You are almost there!\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        } else if (percentage \u003c\u003d 90) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            comments \u003d \"Well done, you are proficient at this chapter!\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            comments \u003d \"Congratulations, you are an expert at this chapter\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Given the string representation, it returns the ChapterStat object."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @param string The string version of the ChapterStat (obtained by calling toString())."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @return The ChapterStat object."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public static ChapterStat parseString(String string) throws FileParsingException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        // Split the string into individual lines."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        String[] lines \u003d string.split(\"\\n\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            int chapterNumber \u003d Integer.parseInt(lines[0].split(\" \")[1]);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            // Each parameter comes after a colon (:), so we split by : and take the second element in the array."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            String chapterName \u003d lines[0].split(\":\")[1].substring(1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            int attempts \u003d Integer.parseInt(lines[1].split(\":\")[1].trim());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            int totalAnswered \u003d parseInt(lines[2].split(\":\")[1].trim());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            int correctAnswers \u003d Integer.parseInt(lines[3].split(\":\")[1].trim());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            int wrongAnswers \u003d Integer.parseInt(lines[4].split(\":\")[1].trim());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            double percentage \u003d Double.parseDouble(lines[5].split(\":\")[1].trim());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            String comments \u003d lines[6].split(\":\")[1].trim();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            // remove the quotes"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            comments \u003d comments.substring(1,comments.length() - 1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            return new ChapterStat(chapterName,chapterNumber,attempts,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    totalAnswered,correctAnswers,wrongAnswers,percentage,comments);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            throw new FileParsingException();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    private static ChapterStat getDefaultChapter() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        return new ChapterStat(\"DEFAULT CHAPTER\",0,0,0,0,0,0,\"You have not attempted this chapter yet.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Overriding the equals method so JUnit can work."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * We manually check if each property is equal."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        if (obj instanceof ChapterStat) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            ChapterStat other \u003d (ChapterStat) obj;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            return ("
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    chapterName.equals(other.chapterName)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                            \u0026\u0026 chapterNumber \u003d\u003d other.chapterNumber"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                            \u0026\u0026 attempts \u003d\u003d other.attempts"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                            \u0026\u0026 totalAnswered \u003d\u003d other.totalAnswered"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                            \u0026\u0026 correctAnswers \u003d\u003d other.correctAnswers"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                            \u0026\u0026 wrongAnswers \u003d\u003d other.wrongAnswers"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                            \u0026\u0026 percentage \u003d\u003d other.percentage"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                            \u0026\u0026 comments.equals(other.comments)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                );"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Resets the stats for that chapter."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void resetAll() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        this.attempts \u003d 0;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        this.correctAnswers \u003d 0;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        this.comments \u003d \"\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        this.totalAnswered \u003d 0;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        this.wrongAnswers \u003d 0;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        this.percentage \u003d 0;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 1,
      "sevenmatt7": 8,
      "therealcs1010": 32,
      "modakshantanu": 144
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/stats/UserStats.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.stats;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.MainApp;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.exceptions.FileParsingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.utility.LogCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " * Handles temporary storage of user stats while the program is running."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " * The relationship between the various members is:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " * chapterData: An ArrayList that holds the data for all chapters. Chapters are addressed by index, but can also be"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " * searched by name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " * characterImagePath: a string containing the path of the image that is used for the user\u0027s character in game."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " * The two data above are stored permanently to a text file, and retrieved from the text file when the program starts."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " *\u003c/p\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " * currentChapter: A single ChapterStat object that stores the chapter data of the chapter that is currently running."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " * This is reset for every run. The contents of currentChapter can be transferred to chapterData by calling"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " * saveCurrentChapterToChapterData()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "public class UserStats {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private String userDataFilePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private String userName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private String gender;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    private int level;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    private int expLevel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    // Array of chapter stats"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    private ArrayList\u003cChapterStat\u003e chapterData;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    // Stats for the current chapter"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    private ChapterStat currentChapter;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    //Maps the chapter names to an index value"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private HashMap\u003cString, Integer\u003e chapterNumber \u003d new HashMap\u003c\u003e() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            put(\"sorting\", 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            put(\"linkedlist\", 2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            put(\"bitmask\", 3);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    };"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static final Logger logger \u003d LogCenter.getLogger(UserStats.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Constructs a new UserStats by reading in from the UserData text file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * If the text file doesn\u0027t exist, the UserStats variables are populated with default values."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param userDataFilePath the file path to the text file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public UserStats(String userDataFilePath) throws FileParsingException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        chapterData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        this.userDataFilePath \u003d userDataFilePath;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        File file \u003d new File(userDataFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        if (!file.isFile()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            logger.info(\"UserData.txt file not found, creating new UserData.txt with default stats\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            this.userName \u003d \"Default\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            this.gender \u003d \"????\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            this.level \u003d 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            this.expLevel \u003d 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            final String INIT_COMMENT \u003d \"You have not attempted this chapter yet\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            chapterData.add(new ChapterStat(\"Sorting\",1,0,0,0,0,0,INIT_COMMENT));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            chapterData.add(new ChapterStat(\"Linked List\",2,0,0,0,0,0,INIT_COMMENT));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            chapterData.add(new ChapterStat(\"Bitmask\",3,0,0,0,0,0,INIT_COMMENT));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            Storage.saveData(userDataFilePath, this.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            String fileContents \u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                logger.info(\"Reading User Stats from UserData.txt.....\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                fileContents \u003d Storage.loadData(userDataFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            } catch (FileNotFoundException ignored) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                logger.severe(\"UserData.txt could not be read due to error.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                throw new FileParsingException(\"The file does not exist!\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            UserStats statsLoadedfromFile \u003d UserStats.parseString(fileContents);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            // Call the parsing method and copy over the values."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            // Idk any better way to do this."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            this.userName \u003d statsLoadedfromFile.userName;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            this.gender \u003d statsLoadedfromFile.gender;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            this.level \u003d statsLoadedfromFile.level;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            this.expLevel \u003d statsLoadedfromFile.expLevel;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            this.chapterData \u003d statsLoadedfromFile.chapterData;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Constructor. Needs no explanation."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public UserStats(String username, String gender, int level, int expLevel,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                     ArrayList\u003cChapterStat\u003e chapterData) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        this.userName \u003d username;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        this.level \u003d level;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        this.expLevel \u003d expLevel;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        this.chapterData \u003d chapterData;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        for (ChapterStat stat : chapterData) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            chapterNumber.put(stat.chapterName, stat.chapterNumber);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Creates a new UserStats object from another UserStats object passed in."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param previousStats The old userstats."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public UserStats(UserStats previousStats) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.userName \u003d previousStats.getUsername();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.gender \u003d previousStats.getGender();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.level \u003d previousStats.getUserLevel();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.expLevel \u003d previousStats.getUserExp();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        this.chapterData \u003d previousStats.getChapterData();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (ChapterStat stat : chapterData) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            chapterNumber.put(stat.chapterName, stat.chapterNumber);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Get the stats for a particular chapter by searching for the chapter number then"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * calling the getStatsByIndex function."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param chapterName The name of the chapter."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The ChapterStat object for that chapter, or null of the chapter does not exist."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public ChapterStat getStatsByName(String chapterName) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        if (chapterNumber.containsKey(chapterName)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            int index \u003d chapterNumber.get(chapterName);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return getStatsByIndex(index);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Get the stats for a particular chapter."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @param index The index of the chapter."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @return The ChapterStat object for that chapter"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public ChapterStat getStatsByIndex(int index) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        ChapterStat currentChapter \u003d chapterData.get(index);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return new ChapterStat(currentChapter);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * TODO."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void updateChapter(int index, int totalAnswered, int correct) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        index--;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        chapterData.get(index).totalAnswered +\u003d totalAnswered;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        chapterData.get(index).correctAnswers +\u003d correct;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        chapterData.get(index).attempts++;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        chapterData.get(index).recalculateStats();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Reset the number of question and number of correct answers of the current chapter to zero."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void resetCurrentChapter() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        currentChapter.totalAnswered \u003d 0;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        currentChapter.correctAnswers \u003d 0;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        currentChapter.wrongAnswers \u003d 0;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        currentChapter.percentage \u003d 0.0;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        currentChapter.comments \u003d \"Try your best!\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * After the chapter has been played, add the number answered/number correct to the permanently stored chapterData"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * associated with that chapter."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * NOTE: This function increments the number of attempts done, so only call it once per attempt."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @param index The index of the chapter in chapterData."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void saveCurrentChapterToChapterData(int index) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        chapterData.get(index).correctAnswers +\u003d currentChapter.correctAnswers;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        chapterData.get(index).totalAnswered +\u003d currentChapter.totalAnswered;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        chapterData.get(index).recalculateStats();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        // Increment the number of attempts, we assume this function is called once per attempt."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        chapterData.get(index).attempts++;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * After the chapter has been played, add the number answered/number correct to the permanently stored chapterData"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * associated with that chapter."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @param name The name of the chapter in chapterData."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void saveCurrentChapterToChapterData(String name) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        int index \u003d getIndexByName(name);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        saveCurrentChapterToChapterData(index);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Helper function to get the index of a chapter in the chapterData List, given its name."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param name The Name of the Chapter to be searched."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The index of the chapter if it exists, -1 if the chapter does not exist."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public int getIndexByName(String name) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        if (chapterNumber.containsKey(name)) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            return chapterNumber.get(name);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public ArrayList\u003cString\u003e getChapters() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return new ArrayList\u003c\u003e(chapterNumber.keySet());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Gets the gender of the user."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @return the gender of the user."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public String getGender() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Sets the gender of the user."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param gender the String representing the gender of the user."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public void setGender(String gender) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Gets the username of the user."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @return the String representing the name of the user."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public String getUsername() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        return this.userName;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Sets the username of the user."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param username the String representing the name of the user."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public void setUsername(String username) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        this.userName \u003d username;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Gets the level of the user."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @return the int value which is the user\u0027s level."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public int getUserLevel() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        return this.level;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Sets the level of the user."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param level the int value representing the level of the user."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void setUserLevel(int level) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        this.level \u003d level;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Gets the user experience points of the user."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @return the user experience points."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public int getUserExp() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        return this.expLevel;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Sets the user experience points of the user."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param expLevel the user experience points."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void setUserExp(int expLevel) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        this.expLevel \u003d expLevel;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Gets the percentage of questions correct statistic for the chapter specified."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param chapterIndex the index number of the chapter according to the HashMap of chapters."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @return the double value representing the percentage of questions correct."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public double getPercentageofQuestionsCorrect(int chapterIndex) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        int chapterNumber \u003d chapterIndex - 1;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        ChapterStat currentChapter \u003d chapterData.get(chapterNumber);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        logger.info(\"The percentage stat parsed is \" + currentChapter.getPercentage());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        return currentChapter.getPercentage();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Gets the statistics for the current chapter."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return a pair containing the number of correct answers and the total questions answered."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public Pair\u003cInteger,Integer\u003e getCurrentChapter() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return new Pair\u003c\u003e(currentChapter.correctAnswers, currentChapter.totalAnswered);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Returns the string representation of userStats, which can be saved in a text file."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @return The string representation of userStats."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        result +\u003d \"AlgoSenpai Adventures Overall Report\\n\\n\";"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        result +\u003d userName + \"\\n\";"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        result +\u003d gender + \"\\n\";"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        result +\u003d level + \"\\n\";"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        result +\u003d expLevel + \"\\n\";"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        for (ChapterStat chapterStat:chapterData) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            result +\u003d \"\\n\" + chapterStat.toString();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Given the string representation, it returns the UserStats object."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @param string The string version of the UserStats (obtained by calling toString())."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @return The UserStats object."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public static UserStats parseString(String string) throws FileParsingException {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            logger.info(\"Parsing User Stats from text file..\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            // Get the first 6 lines. 6th line contains the chapterData."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            String [] tokens \u003d string.split(\"\\n\",8);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            String userName \u003d tokens[2];"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            String gender \u003d tokens[3];"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            int level \u003d Integer.parseInt(tokens[4]);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            int expLevel \u003d Integer.parseInt(tokens[5]);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            // No chapters in the list, so exit early, otherwise will cause parsing error."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            if (tokens.length \u003c 8) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                return new UserStats(userName, gender, level, expLevel, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            // Each chapter\u0027s data is separated by 2 newlines, so split like this to get the chapterData"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            String[] chapterDataTokens \u003d tokens[7].split(\"\\n\\n\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            ArrayList\u003cChapterStat\u003e chapterStats \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            for (String chapterString: chapterDataTokens) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                chapterStats.add(ChapterStat.parseString(chapterString));"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            logger.info(\"User Stats have been parsed successfully!\");"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return new UserStats(userName, gender, level, expLevel, chapterStats);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            logger.severe(\"User Stats could not be parsed successfully from text file\");"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            throw new FileParsingException();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Reset all the progress data for that userStats (does not reset name and gender)."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void resetAll() {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        expLevel \u003d 0;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        level \u003d 1;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        for (int i \u003d 0; i \u003c chapterData.size(); i++) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            chapterData.get(i).resetAll();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Get the default UserStats (if the user launches the game for the first time)."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @return The UserStats object."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public static UserStats getDefaultUserStats() {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        ArrayList\u003cChapterStat\u003e chapters \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        final String INIT_COMMENT \u003d \"You have not attempted this chapter yet\";"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        chapters.add(new ChapterStat(\"Sorting\",1,0,0,0,0,0,INIT_COMMENT));"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        chapters.add(new ChapterStat(\"Linked List\",2,0,0,0,0,0,INIT_COMMENT));"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        chapters.add(new ChapterStat(\"Bitmask\",3,0,0,0,0,0,INIT_COMMENT));"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        return new UserStats(\"Default\", \"????\", 1, 0, chapters);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Saves all the data into the text file."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void saveUserStats(String userDataFilePath) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Storage.saveData(userDataFilePath, this.toString());"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public ArrayList\u003cChapterStat\u003e getChapterData() {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return chapterData;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Overriding the equals method so JUnit can work."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * We manually check if each property is equal."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        if (obj instanceof UserStats) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            UserStats other \u003d (UserStats) obj;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            boolean isEqual \u003d true;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            if (other.chapterData.size() !\u003d chapterData.size()) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            // Check if each chapter is equal"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            for (int i \u003d 0; i \u003c chapterData.size(); i++) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                isEqual \u003d isEqual \u0026\u0026 chapterData.get(i).equals(other.chapterData.get(i));"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            return isEqual"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                    \u0026\u0026 userName.equals(other.userName)"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                    \u0026\u0026 gender.equals(other.gender)"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                    \u0026\u0026 level \u003d\u003d other.level"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                    \u0026\u0026 expLevel \u003d\u003d other.expLevel;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * A utility function to set the properties of a UserStats to another UserStats."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * This is different from direct assignment, as the reference to this object is maintained."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @param temp The other UserStats to copy from."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void copy(UserStats temp) {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        this.userName \u003d temp.userName;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        this.chapterData \u003d temp.chapterData;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        this.level \u003d temp.level;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        this.gender \u003d temp.gender;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        this.expLevel \u003d temp.expLevel;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 12,
      "sevenmatt7": 134,
      "therealcs1010": 46,
      "modakshantanu": 244
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.MainApp;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.utility.LogCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static final Logger logger \u003d LogCenter.getLogger(Storage.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Load data from file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param filePath path to file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @return A string containing the exact text in the file, including newlines."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public static String loadData(String filePath) throws FileNotFoundException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        if (!file.isFile()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            logger.info(\"Loading data from file specified..\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            return Files.readString(Paths.get(filePath), StandardCharsets.US_ASCII);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            logger.info(\"Data not loaded successfully due to IO error.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Save data into file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param filePath path to file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param data data in string."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public static void saveData(String filePath, String data) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            if (!new File(filePath).isFile()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                new File(filePath).createNewFile();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            fw.write(data);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            logger.info(\"Successfully saved data to file.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            logger.info(\"Data not saved to file due to IO error.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sevenmatt7": 38,
      "modakshantanu": 28
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.exceptions.FileParsingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.logic.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.critical.ByeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.logic.command.critical.ResetCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.utility.ClearCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.logic.command.utility.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.logic.command.utility.LoadCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.utility.SetupCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.ui.controller.AnimationTimerController;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.ui.components.DialogBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.utility.AutoCompleteHelper;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.utility.LogCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "public class Ui extends AnchorPane {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private ProgressBar levelProgress;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private Label playerName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private Label playerLevel;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private ImageView userPic;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private UserStats stats;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private int maxuserExp \u003d 8;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private int userExp \u003d 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private int idleMinutesMax \u003d 60;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private int idleMinutes \u003d 60;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private int userLevel \u003d 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    // A flag to prevent a key *held down* from being interpreted as multiple key Presses."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    // Once keyPressed is true, subsequent keypress events are ignored."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    private boolean keyPressed \u003d false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static final String BOY_PROFILE_PICTURE_PATH \u003d \"/images/boychar.jpg\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static final String GIRL_PROFILE_PICTURE_PATH \u003d \"/images/girlchar.jpg\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static final String DEFAULT_PROFILE_PICTURE_PATH \u003d \"/images/unknown.png\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static final String SENPAI_PROFILE_PICTURE_PATH \u003d \"/images/algosenpai.png\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private Image boyImage \u003d new Image(this.getClass().getResourceAsStream(BOY_PROFILE_PICTURE_PATH));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private Image girlImage \u003d new Image(this.getClass().getResourceAsStream(GIRL_PROFILE_PICTURE_PATH));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(DEFAULT_PROFILE_PICTURE_PATH));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private Image senpaiImage \u003d new Image(this.getClass().getResourceAsStream(SENPAI_PROFILE_PICTURE_PATH));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static final Logger logger \u003d LogCenter.getLogger(Ui.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Renders the nodes on the GUI."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String response \u003d new SetupCommand(new ArrayList\u003c\u003e()).execute();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        if (response.contains(\"Welcome back\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            new SetupCommand(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            userLevel \u003d SetupCommand.getLevel();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            maxuserExp \u003d maxuserExp \u003c\u003c (userLevel - 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            userExp \u003d SetupCommand.getExpLevel();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            String gender \u003d SetupCommand.getGender();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            updateLevelProgress(0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            String username \u003d \"Username : \" + SetupCommand.getUserName();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            setPlayerGender(gender);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            playerName.setText(username);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getSenpaiDialog(response, senpaiImage));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        handle();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        userPic.setImage(userImage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        userInput.setPromptText(\"Enter a command (Enter \\\"menu\\\" to see a list of commands\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        // Add a listener to monitor for Arrow keys and Tab."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        userInput.setOnKeyPressed(keyEvent -\u003e {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            if (!keyPressed) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                handleKeyPress(keyEvent.getCode());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                // Set flag to true to ignore any more keyPress events when that key is held down."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                keyPressed \u003d true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        // Reset the flag when the key is released."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        userInput.setOnKeyReleased(keyEvent -\u003e keyPressed \u003d false);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        handle();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Set Logic."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void setLogic(Logic logic, UserStats stats, boolean wasDatafileCorrupted) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        this.stats \u003d stats;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        // If the datafile was corrupted, notify the user that their data has been reset."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        if (wasDatafileCorrupted) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            clearChat();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            printSenpaiText(\"Data file was corrupted! Data has been reset!\", senpaiImage);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            printSenpaiText(\"\\\"Hello there! Welcome to the world of DATA STRUCTURES AND ALGORITHMS.\\\\n\\\"\\n\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                      + \"\\\"Can I have your name and gender in the format : \u0027hello NAME GENDER (boy/girl)\u0027 please.\\\";\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    senpaiImage);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Handles user inputs and renders outputs on screen."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private void handleUserInput() throws IOException, FileParsingException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        resetIdle();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Command commandGenerated \u003d logic.executeCommand(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        String response \u003d commandGenerated.execute();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        if (commandGenerated instanceof DeleteCommand) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            if (dialogContainer.getChildren().isEmpty()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                idleMinutes \u003d 60;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                printSenpaiText(\"There are no more chats to delete!\", senpaiImage);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                handleUndoAfterClear();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                logger.info(\"Deleting selected chat bubbles on screen..\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                deleteChat(response, input, response);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        } else if (commandGenerated instanceof ClearCommand) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            logger.info(\"Clearing ALL chat bubbles on screen...\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            clearChat();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        } else if (commandGenerated instanceof ResetCommand || commandGenerated instanceof LoadCommand) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            userLevel \u003d stats.getUserLevel();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            maxuserExp \u003d 8 \u003c\u003c (userLevel - 1);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            userExp \u003d stats.getUserExp();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            updateLevelProgress(0);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            playerName.setText(\"Username : \" + stats.getUsername());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            printToGui(input, response, userImage, senpaiImage);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        } else if (commandGenerated instanceof ByeCommand) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            printToGui(input, response, userImage, senpaiImage);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            exit();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        } else if (commandGenerated instanceof SetupCommand) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            setupPlayer();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            printToGui(input, response, userImage, senpaiImage);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        } else if (response.startsWith(\"You got \")) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            int expGain \u003d Integer.parseInt(response.split(\" \")[7]);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            updateLevelProgress(expGain);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            printToGui(input, response, userImage, senpaiImage);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            printToGui(input, response, userImage, senpaiImage);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Sets up the user\u0027s information such as gender, level, exp."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Updates the level on the UI, as well as the username."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private void setupPlayer() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        setPlayerGender(SetupCommand.getGender());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        userLevel \u003d SetupCommand.getLevel();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        maxuserExp \u003d 8 \u003c\u003c (userLevel - 1);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        userExp \u003d SetupCommand.getExpLevel();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        updateLevelProgress(0);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        playerName.setText(\"Username : \" + SetupCommand.getUserName());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Handles any keypresses when the userInput is in focus. Currently it responds to UP/DOWN to navigate through"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * history and TAB to auto complete words. Other keys are ignored."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * @param k The Keycode of the key pressed."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    private void handleKeyPress(KeyCode k) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        // Get the previous and next commands from the historyList inside logic."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        if (k \u003d\u003d KeyCode.UP) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            userInput.setText(logic.getPreviousCommand());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            // Puts the cursor to the front of the text, overriding the default behaviour of arrow keys."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            userInput.positionCaret(userInput.getText().length());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        } else if (k \u003d\u003d KeyCode.DOWN) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            userInput.setText(logic.getNextCommand());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            userInput.positionCaret(userInput.getText().length());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        } else if (k \u003d\u003d KeyCode.TAB) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            // Replace text with autocomplete best match."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            // If no match is found, text is unchanged."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            userInput.setText(AutoCompleteHelper.autoCompleteCommand(userInput.getText()));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            // Bring focus back to textfield to prevent the default behaviour of tab."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            userInput.requestFocus();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            // Un select the text (selected by default)."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            userInput.deselect();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            // Puts the cursor to the front of the text."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            userInput.positionCaret(userInput.getText().length());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Creates the dialog box on GUI to show the response of the Senpai."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param text the response of the program."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param image the profile picture of the Senpai."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private void printSenpaiText(String text, Image image) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getSenpaiDialog(text, image));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Creates the dialog box on GUI to show the user what he/she has typed."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Clears the user input after processing."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param text the String that user has typed in"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param image the profile picture of the user."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private void printUserText(String text, Image image) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        dialogContainer.getChildren().add(DialogBox.getUserDialog(text, image));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Prints the chat bubbles to the GUI."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param input the user input text."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param response the text generated by the program"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param userImage the profile picture of the user"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param senpaiImage the profile picture of the Senpai."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private void printToGui(String input, String response, Image userImage, Image senpaiImage) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        printUserText(input, userImage);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        printSenpaiText(response, senpaiImage);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Resets the idleMinutesMax variable."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private void resetIdle() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        idleMinutesMax \u003d 60;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Delete chat messages."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param numberStr number of chat messages to delete."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param input user input."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param response text generated by program."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private void deleteChat(String numberStr, String input, String response) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        if (Parser.isInteger(numberStr)) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            int number \u003d Integer.parseInt(numberStr);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            while (dialogContainer.getChildren().size() \u003e 0 \u0026\u0026 number \u003e 0) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                int lastIndex \u003d dialogContainer.getChildren().size() - 1;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                dialogContainer.getChildren().remove(lastIndex, lastIndex + 1);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                number--;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            printToGui(input, response, userImage, senpaiImage);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Delete all chats."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private void clearChat() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        int messageIndex \u003d dialogContainer.getChildren().size();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        dialogContainer.getChildren().remove(0, messageIndex);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private void exit() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Closing AlgoSenpai Adventures ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        PauseTransition pause \u003d new PauseTransition(Duration.seconds(1));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        pause.setOnFinished(event -\u003e {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        });"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        pause.play();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private void handle() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        AnimationTimerController animationTimerController \u003d new AnimationTimerController(1000) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            public void handle() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                final String HELP_MESSAGE \u003d \"Hello do you need help?\";"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                if (idleMinutesMax \u003e 0) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                    idleMinutesMax--;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                    idleMinutesMax \u003d 60;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                    printSenpaiText(HELP_MESSAGE, senpaiImage);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        };"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        animationTimerController.start();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    private void handleUndoAfterClear() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        AnimationTimerController animationTimerController \u003d new AnimationTimerController(1000) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            public void handle() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                if (idleMinutes \u003e 58) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    idleMinutes--;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                } else if (idleMinutes \u003d\u003d 58) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    idleMinutes \u003d 0;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                    clearChat();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        };"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        animationTimerController.start();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Update the EXP Level of the user in the progress bar in the GUI."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param expGain the double representing the gain in EXP to be reflected."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    private void updateLevelProgress(int expGain) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        userExp +\u003d expGain;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        if (userExp \u003e maxuserExp) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            userExp -\u003d maxuserExp;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            userLevel++;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            maxuserExp *\u003d 2;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        playerLevel.setText(\"You are Level \" + userLevel + \".\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        double userProgress \u003d (double) userExp / maxuserExp;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        levelProgress.setProgress(userProgress);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Updates the profile picture of the user in the stats bar in the GUI."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param response the response string generated by the program."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private void setPlayerGender(String response) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        if (response.equals(\"boy\")) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            userImage \u003d boyImage;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            userPic.setImage(userImage);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        } else if (response.equals(\"girl\")) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            userImage \u003d girlImage;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            userPic.setImage(userImage);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 17,
      "nwjbrandon": 80,
      "sevenmatt7": 155,
      "therealcs1010": 46,
      "modakshantanu": 73
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/ui/components/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.ui.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": " * The dialog box template."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": " * It represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private ImageView displayPicture;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private DialogBox(String text, Image img, boolean isUser) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        String fxmlPath \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        if (!isUser) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            fxmlPath \u003d \"/view/DialogBox.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        if (isUser) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            fxmlPath \u003d \"/view/DialogBoxUser.fxml\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Ui.class.getResource(fxmlPath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        displayPicture.setImage(img);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Generates a new DialogBox object containing the user inputted text and his profile picture."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param img the Image of the user."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param text the text to be put into the DialogBox."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public static DialogBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        return new DialogBox(text, img, true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Generates a new DialogBox object containing the program response text and the avatar picture."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param img the Image of the avatar."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @param text the text to be put into the DialogBox."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public static DialogBox getSenpaiDialog(String text, Image img) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        var db \u003d new DialogBox(text, img, false);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public ImageView getDisplayPicture() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return displayPicture;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public Label getDialog() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return dialog;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 9,
      "sevenmatt7": 79
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/ui/components/SplashScreen.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.ui.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.fxml.Initializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.ResourceBundle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class SplashScreen implements Initializable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private Text appTitle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private ImageView appImage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Initialize home scene."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public SplashScreen() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public void initialize(URL location, ResourceBundle resources) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        appTitle.setText(\"Welcome to AlgoSenpai Adventures!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        appTitle.setX(60);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        appTitle.setY(150);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        appTitle.setFont(Font.font(30));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        appTitle.setFill(Color.DEEPPINK);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Image image \u003d new Image(getClass().getResourceAsStream(\"/images/miku.png\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        appImage.setImage(image);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        appImage.setFitHeight(300);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        appImage.setFitWidth(300);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        appImage.setX(50);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        appImage.setY(150);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 41
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/ui/controller/AnimationTimerController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app.ui.controller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.animation.AnimationTimer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public abstract class AnimationTimerController extends AnimationTimer {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private long sleepNs \u003d 0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private long prevTime \u003d 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    protected AnimationTimerController(long sleepMs) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        this.sleepNs \u003d sleepMs * 1_000_000;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public void handle(long now) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        if ((now - prevTime) \u003c sleepNs) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        prevTime \u003d now;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        handle();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public abstract void handle();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 25,
      "sevenmatt7": 1
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/ui/controller/MusicController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app.ui.controller;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.logic.constant.SoundConstant;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.utility.ResourceRandomUtility;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.media.Media;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.media.MediaPlayer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class MusicController {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Media player to start playing music."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private static MediaPlayer mediaPlayer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Playing status of music player."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private static boolean isLoaded \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Sound level is of range 0 to 100."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private static int MAX_VOLUME \u003d 100;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private MusicController() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Returns only one instance of music controller."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @return instance of music controller."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public static MusicController getMusicController() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return new MusicController();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Starts music player."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @throws URISyntaxException error in playing current music."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public static void playMusic() throws URISyntaxException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        if (isLoaded) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            mediaPlayer.stop();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        randomMusic();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        isLoaded \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        mediaPlayer.setOnEndOfMedia(() -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                randomMusic();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            } catch (URISyntaxException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                Platform.exit();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Selects the next music randomly."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @throws URISyntaxException music not found."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    static void randomMusic() throws URISyntaxException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        String musicName \u003d ResourceRandomUtility.randomResources(SoundConstant.music);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Media sound \u003d new Media(MusicController.class.getResource(\"/sound/\" + musicName).toURI().toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        mediaPlayer \u003d new MediaPlayer(sound);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        mediaPlayer.play();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Adjust the sound volume."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param soundLevel volume range 0 to 100"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public static void setVolume(double soundLevel) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        final float volume \u003d (float) (1 - (Math.log(MAX_VOLUME - soundLevel) / Math.log(MAX_VOLUME)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        mediaPlayer.setVolume(volume);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 77,
      "sevenmatt7": 2
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/utility/AutoCompleteHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "package com.algosenpai.app.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import com.algosenpai.app.logic.constant.CommandsEnum;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " * A utility class to help in AutoComplete feature."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "public class AutoCompleteHelper {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Returns the command string starting with the same text as the String paramter passed."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * If there is no match, it returns the input string."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public static String autoCompleteCommand(String userInput) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        // Prevent empty strings from matching."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        if (userInput.isEmpty()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            return userInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        List\u003cString\u003e commands \u003d CommandsEnum.getNames();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        String bestMatch \u003d userInput;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        for (String s: commands) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            if (s.startsWith(userInput.toLowerCase())) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                bestMatch \u003d s;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        return bestMatch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 2,
      "modakshantanu": 31
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/utility/LogCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "public class LogCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static final String LOG_FILE \u003d \"algosenpai.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static final Logger logger \u003d LogCenter.getLogger(LogCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e className) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        if (className \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        return getLogger(className.getSimpleName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sevenmatt7": 102
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/utility/PdfDocumentWriterUtility.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.itextpdf.text.Paragraph;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.itextpdf.text.BaseColor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.itextpdf.text.FontFactory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.itextpdf.text.DocumentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.itextpdf.text.Document;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.itextpdf.text.Font;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.itextpdf.text.pdf.PdfWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class PdfDocumentWriterUtility {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Font size."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private int size;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Font color."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private BaseColor color;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Font style."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    private String fontFactory;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Initializes the text styles."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public PdfDocumentWriterUtility() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        size \u003d 16;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        color \u003d BaseColor.BLACK;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        fontFactory \u003d FontFactory.COURIER;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Saves content to pdf."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param paragraphs document content."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param documentName document name."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @throws FileNotFoundException file not found."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @throws DocumentException document error."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public void saveToPdf(ArrayList\u003cString\u003e paragraphs, String documentName)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            throws FileNotFoundException, DocumentException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Document document \u003d new Document();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        PdfWriter.getInstance(document, new FileOutputStream(documentName));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        document.open();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Font font \u003d FontFactory.getFont(fontFactory, size, color);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        for (String paragraph: paragraphs) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            Paragraph text \u003d new Paragraph(paragraph, font);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            document.add(text);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        document.close();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 60
    }
  },
  {
    "path": "src/main/java/com/algosenpai/app/utility/ResourceRandomUtility.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class ResourceRandomUtility {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * Returns a string from generic map for views, images, and sound."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @param map container of the for views, images, and sound."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     * @return file name of the for views, images, and sound."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public static \u003cT\u003e String randomResources(Map\u003cT, String\u003e map) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        List\u003cT\u003e keysAsArray \u003d new ArrayList\u003cT\u003e(map.keySet());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Random r \u003d new Random();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return map.get(keysAsArray.get(r.nextInt(keysAsArray.size())));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 20
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minWidth\u003d\"500\" prefWidth\u003d\"500\" spacing\u003d\"12.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003cstyle\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        -fx-background-color: #DCF8C6;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        -fx-font-family: \u0027Montserrat\u0027;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003c/style\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "sevenmatt7": 20
    }
  },
  {
    "path": "src/main/resources/view/DialogBoxUser.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"500\" spacing\u003d\"12.0\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "         type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003cstyle\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        -fx-background-color: #34B7F1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        -fx-font-family: \u0027Montserrat\u0027;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003c/style\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "sevenmatt7": 21
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.scene.control.ProgressBar?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"650.0\" prefWidth\u003d\"500.0\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"com.algosenpai.app.ui.Ui\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003cstyle\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        -fx-background-color: #ECE5DD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        -fx-font-family: \u0027Montserrat\u0027;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003c/style\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"48.0\" prefWidth\u003d\"440.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"440.0\" layoutY\u003d\"603.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"45.0\" prefWidth\u003d\"58.0\" text\u003d\"Send\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutY\u003d\"78.0\" prefHeight\u003d\"520.0\" prefWidth\u003d\"500.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"400.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "   \u003cHBox layoutY\u003d\"1.0\" prefHeight\u003d\"73.0\" prefWidth\u003d\"500.0\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "         \u003cVBox prefHeight\u003d\"73.0\" prefWidth\u003d\"423.0\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "               \u003cLabel fx:id\u003d\"playerName\" prefHeight\u003d\"62.0\" prefWidth\u003d\"292.0\" text\u003d\"Hi, ????\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "               \u003cLabel fx:id\u003d\"playerLevel\" prefHeight\u003d\"62.0\" prefWidth\u003d\"292.0\" text\u003d\"You are Level ???\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                \u003cProgressBar fx:id\u003d\"levelProgress\" prefHeight\u003d\"62.0\" prefWidth\u003d\"292.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "         \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "          \u003cImageView fx:id\u003d\"userPic\" fitHeight\u003d\"73.0\" fitWidth\u003d\"73.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "      \u003c/children\u003e\u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 2,
      "sevenmatt7": 32
    }
  },
  {
    "path": "src/main/resources/view/SplashScreen.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "            fx:controller\u003d\"com.algosenpai.app.ui.components.SplashScreen\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    \u003cText fx:id\u003d\"appTitle\" text\u003d\"home text\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    \u003cImageView fx:id\u003d\"appImage\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 11,
      "sevenmatt7": 1
    }
  },
  {
    "path": "src/test/java/com/algosenpai/app/ChapterStatTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "package com.algosenpai.app;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.stats.ChapterStat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import org.assertj.core.internal.bytebuddy.utility.RandomString;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "public class ChapterStatTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Create a chapterStat, convert it to string then back, and compare the 2 objects to see if they are equal."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void stringParsingTest() throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        ChapterStat chapterStat \u003d new ChapterStat(\"Foo Bar\",1,2,3,4,1,75.0,\"Sample Comment\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        String storage \u003d chapterStat.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        ChapterStat copy \u003d ChapterStat.parseString(storage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        assertEquals(chapterStat, copy);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Tests the parsing of the edge case of empty strings."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void stringParsing_emptyStrings() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        ChapterStat chapterStat \u003d new ChapterStat(\"\",0,0,0,0,0,0,\"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        String storage \u003d chapterStat.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        ChapterStat copy \u003d ChapterStat.parseString(storage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        assertEquals(chapterStat, copy);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Performs stringParsingTest on 1000 randomly generated ChapterStats."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void stringParsing_randomTest() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        ChapterStat chapterStat;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        ChapterStat copy;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Random random \u003d new Random();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        for (int i \u003d 0; i \u003c 1000; i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            chapterStat \u003d new ChapterStat("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    RandomString.make(random.nextInt(100) + 1),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    random.nextInt(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    random.nextInt(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    random.nextInt(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    random.nextInt(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    random.nextInt(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    random.nextDouble() * random.nextInt(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    RandomString.make(random.nextInt(100) + 1)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            copy \u003d ChapterStat.parseString(chapterStat.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            assertEquals(chapterStat,copy);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Checks that dividing by 0 in the recalculateStats function does not cause a crash."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void recalculateStats_divideByZero() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        ChapterStat stat \u003d new ChapterStat(\"Test\",0,0,0,0,0,0,\"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        stat.recalculateStats();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 1,
      "modakshantanu": 77
    }
  },
  {
    "path": "src/test/java/com/algosenpai/app/SplashScreenTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.testfx.api.FxAssert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.testfx.framework.junit5.ApplicationTest;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.testfx.matcher.control.TextMatchers;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class SplashScreenTest extends ApplicationTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public void start(Stage stage) throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Parent fxmlSplashScreen \u003d FXMLLoader.load(getClass().getResource(\"/view/SplashScreen.fxml\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Scene splashScreen \u003d new Scene(fxmlSplashScreen, 600, 400);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        stage.setScene(splashScreen);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    static void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    static void tearDown() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        FxToolkit.hideStage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        System.gc();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    void testInterfaceRendering() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        clickOn(\"#appTitle\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        FxAssert.verifyThat(\"#appTitle\", TextMatchers.hasText(\"Welcome to AlgoSenpai Adventures!\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 40,
      "modakshantanu": 1
    }
  },
  {
    "path": "src/test/java/com/algosenpai/app/StorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "package com.algosenpai.app;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.exceptions.FileParsingException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.stats.ChapterStat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import org.assertj.core.internal.bytebuddy.utility.RandomString;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    static final String TEST_PATH \u003d \"testFile.txt\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void saveData_fileExists() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            new File(TEST_PATH).createNewFile();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            Storage.saveData(TEST_PATH,getDummyUserStats().toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void saveData_fileDoesNotExist() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        new File(TEST_PATH).delete();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Storage.saveData(TEST_PATH,getDummyUserStats().toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void saveData_randomTest() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Storage.saveData(TEST_PATH,getRandomUserStats().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Create a random UserStats with 1000 chapters."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Save it, then load it and compare the 2 copies."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void saveAndLoad_randomTest() throws FileNotFoundException, FileParsingException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        // create the file."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        UserStats userStats \u003d getRandomUserStats();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Storage.saveData(TEST_PATH,userStats.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        UserStats copy \u003d UserStats.parseString(Storage.loadData(TEST_PATH));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        assertEquals(userStats,copy);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Tests if save and load works properly with an empty UserStats object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * (empty string parameters, no ChapterStats)."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void saveAndLoad_emptyUserStats() throws FileNotFoundException, FileParsingException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        UserStats userStats \u003d getEmptyUserStats();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Storage.saveData(TEST_PATH,userStats.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        UserStats copy \u003d UserStats.parseString(Storage.loadData(TEST_PATH));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        assertEquals(userStats,copy);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void loadData_fileDoesNotExist_shouldThrow() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        assertThrows(FileNotFoundException.class,() -\u003e {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            new File(TEST_PATH).delete();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            UserStats loadedStats \u003d UserStats.parseString(Storage.loadData(TEST_PATH));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void loadData_fileContainsInvalidData_shouldThrow() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        assertThrows(FileParsingException.class,() -\u003e {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            new File(TEST_PATH).delete();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            Storage.saveData(TEST_PATH,\"GARBAGE!!!!\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            UserStats loadedStats \u003d UserStats.parseString(Storage.loadData(TEST_PATH));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    private UserStats getEmptyUserStats() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        return new UserStats(\"\", \"\", 0,0,new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    private UserStats getDummyUserStats() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        ArrayList\u003cChapterStat\u003e chapterStats \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        chapterStats.add(new ChapterStat(\"Chapter\",1,2,3,4,6,7.0,\"df\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        return new UserStats(\"Name\", \"file\",0,0, chapterStats);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    private UserStats getRandomUserStats() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        //First, create a userStats with 1000 random chapters."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        ArrayList\u003cChapterStat\u003e chapterStats \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        ChapterStat chapterStat;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        ChapterStat copy;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Random random \u003d new Random();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        for (int i \u003d 0; i \u003c 1000; i++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            chapterStat \u003d new ChapterStat("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    RandomString.make(random.nextInt(100) + 1),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    random.nextInt(),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    random.nextInt(),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    random.nextInt(),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    random.nextInt(),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    random.nextInt(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    random.nextDouble() * random.nextInt(),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    RandomString.make(random.nextInt(100) + 1)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            );"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            chapterStats.add(chapterStat);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        return new UserStats(\"Test Test Test\", \"Test test Test\", 0,0,chapterStats);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "modakshantanu": 132
    }
  },
  {
    "path": "src/test/java/com/algosenpai/app/UserStatsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "package com.algosenpai.app;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.exceptions.FileParsingException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.stats.ChapterStat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import org.assertj.core.internal.bytebuddy.utility.RandomString;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "public class UserStatsTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void stringParsing_randomTest() throws FileParsingException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        //First, create a userStats with 1000 random chapters."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        ArrayList\u003cChapterStat\u003e chapterStats \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        ChapterStat chapterStat;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        ChapterStat copy;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Random random \u003d new Random();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        for (int i \u003d 0; i \u003c 1000; i++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            chapterStat \u003d new ChapterStat("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    RandomString.make(random.nextInt(100) + 1),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    random.nextInt(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    random.nextInt(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    random.nextInt(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    random.nextInt(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    random.nextInt(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    random.nextDouble() * random.nextInt(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                    RandomString.make(random.nextInt(100) + 1)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            chapterStats.add(chapterStat);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        UserStats userStats \u003d new UserStats(\"Test Test Test\", \"Test test Test\",0,0,chapterStats);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        UserStats copyOfUserStats \u003d UserStats.parseString(userStats.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        assertEquals(userStats,copyOfUserStats);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     * Tests if parsing works correctly if all the parameters of userStats are blank."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void stringParsing_emptyStats() throws FileParsingException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        UserStats userStats \u003d new UserStats(\"\",\"\",0,0,new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        UserStats copy \u003d UserStats.parseString(userStats.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        assertEquals(copy,userStats);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "modakshantanu": 57
    }
  },
  {
    "path": "src/test/java/com/algosenpai/app/chapters/chapter1/BubbleSortPassesQuestionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.chapters.chapter1;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.chapters.chapter1.BubbleSortPassesQuestion;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.models.QuestionModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public class BubbleSortPassesQuestionTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Creates my own BubbleSortPassesQuestion then checks if the parameters are correct."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public void questionTesting() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        int[] arr \u003d {5,4,3,2,1};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        ArrayList\u003cInteger\u003e array \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (int value : arr) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            array.add(value);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        ArrayList\u003cString\u003e myWrongAnswers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        myWrongAnswers.add(\"[4, 3, 2, 1, 5]\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        myWrongAnswers.add(\"[ 4 , 3 , 2 , 1 , 5 ]\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        myWrongAnswers.add(\"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        myWrongAnswers.add(\"[1, 2, 3, 4, 5]\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        myWrongAnswers.add(\"[5, 4, 3, 2, 1]\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String question \u003d \"An array of \" + 5 + \" elements underwent the following Bubble Sort Algorithm : \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"[5, 4, 3, 2, 1]\" + \"\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question +\u003d \"What would be the new configuration of the elements after \" + 1 + \" passes?\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Please provide your answer in space-separated format. e.g. x y z ...\\n\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        question +\u003d \"for (int i \u003d 0; i \u003c passes; i++) {\\n\" + \"   for (int j \u003d 0; j \u003c arr.size - 1 - i; j ++) {\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"       if (arr[j] \u003e arr[j + 1]) {\\n\" + \"            swap (arr[j], arr[j+1]);\\n\" + \"       }\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"   }\\n\" + \"}\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        QuestionModel questionModel \u003d new BubbleSortPassesQuestion(5,array, 1).execute();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        assertEquals(questionModel.getQuestion(), question);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String myCorrectAnswer \u003d \"4, 3, 2, 1, 5\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        assertEquals(questionModel.getAnswer(), myCorrectAnswer);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        questionModel.setUserAnswer(myCorrectAnswer);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        assertTrue(questionModel.checkAnswer());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (String currWrongAnswer : myWrongAnswers) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            assertNotEquals(currWrongAnswer, questionModel.getAnswer());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            questionModel.setUserAnswer(currWrongAnswer);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            assertFalse(questionModel.checkAnswer());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealcs1010": 51
    }
  },
  {
    "path": "src/test/java/com/algosenpai/app/chapters/chapter1/QuickSortPivotQuestionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.chapters.chapter1;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public class QuickSortPivotQuestionTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "therealcs1010": 4
    }
  },
  {
    "path": "src/test/java/com/algosenpai/app/commands/ByeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.exceptions.FileParsingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.logic.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.testfx.framework.junit5.ApplicationTest;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class ByeCommandTest extends ApplicationTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    void testSoundLevelUpperBoundary() throws IOException, FileParsingException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        UserStats stats \u003d null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            stats \u003d new UserStats(\"./UserData.txt\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        } catch (FileParsingException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Logic logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Command command \u003d logic.executeCommand(\"exit\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        String actualText \u003d command.execute();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Assertions.assertEquals(\"Bye!\", actualText);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    \u003cT extends Node\u003e T find() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return lookup(\"#dialogContainer\").query();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 26,
      "sevenmatt7": 1,
      "modakshantanu": 7
    }
  },
  {
    "path": "src/test/java/com/algosenpai/app/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.exceptions.FileParsingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.logic.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.ui.components.DialogBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.testfx.framework.junit5.ApplicationTest;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class ClearCommandTest extends ApplicationTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public void start(Stage stage) throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        FXMLLoader fxmlLoader \u003d new FXMLLoader(ClearCommandTest.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Scene scene \u003d new Scene(ap, 500, 650);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        UserStats stats \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            stats \u003d UserStats.parseString(Storage.loadData(\"UserData.txt\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        } catch (FileParsingException | FileNotFoundException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "            stats \u003d UserStats.getDefaultUserStats();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Logic logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        fxmlLoader.\u003cUi\u003egetController().setLogic(logic, stats,false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        stage.setTitle(\"AlgoSenpai Adventures\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    void tearDown() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        FxToolkit.hideStage();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        System.gc();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    void testClearCommand() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        clickOn(\"#userInput\").write(\"clear\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        int numberOfMessages \u003d container.getChildren().size();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Assertions.assertEquals(0, numberOfMessages);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    void testClearCommandAfterSomeInputs() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        clickOn(\"#userInput\").write(\"testing\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        clickOn(\"#userInput\").write(\"testing\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        clickOn(\"#userInput\").write(\"clear\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        int numberOfMessages \u003d container.getChildren().size();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //        Assertions.assertEquals(0, numberOfMessages);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    \u003cT extends Node\u003e T find() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return lookup(\"#dialogContainer\").query();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 69,
      "therealcs1010": 1,
      "modakshantanu": 11
    }
  },
  {
    "path": "src/test/java/com/algosenpai/app/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.exceptions.FileParsingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.logic.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import com.algosenpai.app.ui.components.DialogBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.testfx.framework.junit5.ApplicationTest;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "public class DeleteCommandTest extends ApplicationTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public void start(Stage stage) throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        FXMLLoader fxmlLoader \u003d new FXMLLoader(DeleteCommandTest.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Scene scene \u003d new Scene(ap, 500, 650);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        UserStats stats \u003d new UserStats(\"./UserData.txt\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Logic logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        fxmlLoader.\u003cUi\u003egetController().setLogic(logic, stats, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        stage.setTitle(\"AlgoSenpai Adventures\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    void tearDown() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        FxToolkit.hideStage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        System.gc();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    void testUndoCommandNegativeUndos() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        clickOn(\"#userInput\").write(\"delete -1\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        int numberOfMessages \u003d container.getChildren().size();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Assertions.assertEquals(0, numberOfMessages);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    void testUndoCommandPositiveUndos() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        clickOn(\"#userInput\").write(\"delete 1\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        int numberOfMessages \u003d container.getChildren().size();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Assertions.assertEquals(0, numberOfMessages);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    void testUndoCommandMoreUndosThanMessage() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        clickOn(\"#userInput\").write(\"testing\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        clickOn(\"#userInput\").write(\"delete 5\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        int numberOfMessages \u003d container.getChildren().size();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Assertions.assertEquals(0, numberOfMessages);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    void testUndoCommandLessUndosThanMessage() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        clickOn(\"#userInput\").write(\"testing\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        clickOn(\"#userInput\").write(\"delete 1\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        int numberOfMessages \u003d container.getChildren().size();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Assertions.assertEquals(2, numberOfMessages);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    void testUndoCommandDefaultUndos() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        clickOn(\"#userInput\").write(\"testing\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        clickOn(\"#userInput\").write(\"delete\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        int numberOfMessages \u003d container.getChildren().size();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Assertions.assertEquals(2, numberOfMessages);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    void testSoundLevelUpperBoundary() throws IOException, FileParsingException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        UserStats stats \u003d new UserStats(\"./UserData.txt\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Logic logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Command command \u003d logic.executeCommand(\"delete testing\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        String actualText \u003d command.execute();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Assertions.assertEquals(\"Sorry, you did not enter a valid number (ᵟ︵ ᵟ)\", actualText);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    void testUndoCommandAfterClearCommand() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        clickOn(\"#userInput\").write(\"clear\").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        clickOn(\"#userInput\").write(\"delete\").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(0);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Assertions.assertEquals(\"There are no more chats to delete!\", actualText);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    \u003cT extends Node\u003e T find() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return lookup(\"#dialogContainer\").query();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 9,
      "nwjbrandon": 100,
      "sevenmatt7": 11,
      "modakshantanu": 5
    }
  },
  {
    "path": "src/test/java/com/algosenpai/app/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.logic.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.ui.components.DialogBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import org.testfx.framework.junit5.ApplicationTest;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "public class HelpCommandTest extends ApplicationTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public void start(Stage stage) throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        FXMLLoader fxmlLoader \u003d new FXMLLoader(HelpCommandTest.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Scene scene \u003d new Scene(ap, 500, 650);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        UserStats stats \u003d new UserStats(\"./UserData.txt\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Logic logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        fxmlLoader.\u003cUi\u003egetController().setLogic(logic, stats,false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        stage.setTitle(\"AlgoSenpai Adventures\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    void tearDown() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        FxToolkit.hideStage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        System.gc();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    void testHelpKeyPress() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        clickOn(\"#userInput\").write(\"help sorting\").press(KeyCode.ENTER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Assertions.assertEquals(\"help sorting\", actualText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    void testHelpWithSpace() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        clickOn(\"#userInput\").write(\" help sorting \").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Assertions.assertEquals(\" help sorting \", actualText);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    void testHelpOutputChapter1() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        clickOn(\"#userInput\").write(\"help sorting\").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Assertions.assertEquals(\"Try solving these problems on Kattis:\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                + \"lineup, mjehuric, sidewayssorting\", actualText);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    void testHelpOutputChapter2() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        clickOn(\"#userInput\").write(\"help linkedlist\").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Assertions.assertEquals(\"Try solving these problems on Kattis:\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                + \"evenup, pairingsocks, coconut\", actualText);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    void testHelpOutputChapter3() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        clickOn(\"#userInput\").write(\"help bitmask\").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(2);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Assertions.assertEquals(\"Try solving these problems on Kattis:\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                + \"committeeassignment, pebblesolitaire\", actualText);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003cT extends Node\u003e T find() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        return lookup(\"#dialogContainer\").query();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 1,
      "sevenmatt7": 99,
      "modakshantanu": 3
    }
  },
  {
    "path": "src/test/java/com/algosenpai/app/commands/HistoryCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.exceptions.FileParsingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.logic.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.ui.components.DialogBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.testfx.framework.junit5.ApplicationTest;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class HistoryCommandTest extends ApplicationTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    public void start(Stage stage) throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        FXMLLoader fxmlLoader \u003d new FXMLLoader(HistoryCommandTest.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Scene scene \u003d new Scene(ap, 500, 650);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        UserStats stats \u003d new UserStats(\"./UserData.txt\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Logic logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        fxmlLoader.\u003cUi\u003egetController().setLogic(logic, stats, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        stage.setTitle(\"AlgoSenpai Adventures\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    void tearDown() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        FxToolkit.hideStage();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        System.gc();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    void testHistoryMousePress() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        clickOn(\"#userInput\").write(\"history\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Assertions.assertEquals(\"history\", actualText);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    void testHistoryKeyPress() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        clickOn(\"#userInput\").write(\"history\").press(KeyCode.ENTER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Assertions.assertEquals(\"history\", actualText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    void testHistoryWithSpace() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        clickOn(\"#userInput\").write(\" history \").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Assertions.assertEquals(\" history \", actualText);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    void testHistoryMissingInput() throws IOException, FileParsingException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        UserStats stats \u003d new UserStats(\"./UserData.txt\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Logic logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Command command \u003d logic.executeCommand(\"history\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        String actualText \u003d command.execute();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Assertions.assertEquals(\"OOPS!!! Error occurred. Please key in the number of commands \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                + \"you\u0027d like to view in the following format: e.g history 5\", actualText);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    void testHistoryWrongTypeInput() throws IOException, FileParsingException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        UserStats stats \u003d new UserStats(\"./UserData.txt\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Logic logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Command command \u003d logic.executeCommand(\"history two\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        String actualText \u003d command.execute();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Assertions.assertEquals(\"OOPS!!! Error occurred. \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                                          + \"Please key in a valid number of commands you\u0027d like to view!\", actualText);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    void testHistoryInvalidInputSize() throws IOException, FileParsingException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        UserStats stats \u003d new UserStats(\"./UserData.txt\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Logic logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Command command \u003d logic.executeCommand(\"history 2 3\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        String actualText \u003d command.execute();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Assertions.assertEquals(\"OOPS!!! Error occurred. Too many inputs entered!\", actualText);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    void testHistoryLowerBoundary() throws IOException, FileParsingException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        UserStats stats \u003d new UserStats(\"./UserData.txt\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Logic logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Command command \u003d logic.executeCommand(\"history -1\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        String actualText \u003d command.execute();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Assertions.assertEquals(\"OOPS!!! Error occurred. \""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                                          + \"Please key in a valid number of commands you\u0027d like to view!\", actualText);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    void testHistoryWithLimitsUpperBoundary() throws IOException, FileParsingException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        clickOn(\"#userInput\").write(\"select sorting\").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        clickOn(\"#userInput\").write(\"quiz\").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        UserStats stats \u003d new UserStats(\"./UserData.txt\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Logic logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Command command \u003d logic.executeCommand(\"history 5\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        String actualText \u003d command.execute();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Assertions.assertEquals(\"OOPS!!! Error occurred. You don\u0027t have that many past commands!\", actualText);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    \u003cT extends Node\u003e T find() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        return lookup(\"#dialogContainer\").query();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 36,
      "nwjbrandon": 75,
      "sevenmatt7": 4,
      "modakshantanu": 21
    }
  },
  {
    "path": "src/test/java/com/algosenpai/app/commands/HistoryNavigationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "package com.algosenpai.app.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.logic.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.ui.components.DialogBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import org.testfx.framework.junit5.ApplicationTest;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "public class HistoryNavigationTest extends ApplicationTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void start(Stage stage) throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        FXMLLoader fxmlLoader \u003d new FXMLLoader(HistoryNavigationTest.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Scene scene \u003d new Scene(ap, 500, 650);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        UserStats stats \u003d new UserStats(\"./UserData.txt\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Logic logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        fxmlLoader.\u003cUi\u003egetController().setLogic(logic, stats, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        stage.setTitle(\"AlgoSenpai Adventures\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    void tearDown() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        FxToolkit.hideStage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        System.gc();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    void testHistoryNav_EmptyHistory_shouldNotCrash() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        clickOn(\"#userInput\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                .press(KeyCode.UP)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                .press(KeyCode.UP)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                .press(KeyCode.DOWN)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                .press(KeyCode.DOWN)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                .press(KeyCode.UP)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                .press(KeyCode.DOWN);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    void testHistoryNav() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        clickOn(\"#userInput\").write(\"command 1\").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        clickOn(\"#userInput\").write(\"command 2\").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        clickOn(\"#userInput\").write(\"command 3\").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        clickOn(\"#userInput\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        TextField userInput \u003d lookup(\"#userInput\").query();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        type(KeyCode.UP);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Assertions.assertEquals(\"command 3\", userInput.getText());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        type(KeyCode.UP);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Assertions.assertEquals(\"command 2\", userInput.getText());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        type(KeyCode.UP);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Assertions.assertEquals(\"command 1\", userInput.getText());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        type(KeyCode.UP);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Assertions.assertEquals(\"command 1\", userInput.getText());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        type(KeyCode.DOWN);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Assertions.assertEquals(\"command 2\", userInput.getText());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        type(KeyCode.DOWN);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Assertions.assertEquals(\"command 3\", userInput.getText());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        type(KeyCode.DOWN);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Assertions.assertEquals(\"\", userInput.getText());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    \u003cT extends Node\u003e T find() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        return lookup(\"#dialogContainer\").query();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 1,
      "modakshantanu": 96
    }
  },
  {
    "path": "src/test/java/com/algosenpai/app/commands/InvalidCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "package com.algosenpai.app.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.exceptions.FileParsingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import com.algosenpai.app.logic.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import com.algosenpai.app.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import com.algosenpai.app.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import com.algosenpai.app.ui.components.DialogBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import org.testfx.framework.junit5.ApplicationTest;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "public class InvalidCommandTest extends ApplicationTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    public void start(Stage stage) throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        FXMLLoader fxmlLoader \u003d new FXMLLoader(InvalidCommandTest.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Scene scene \u003d new Scene(ap, 500, 650);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        UserStats stats \u003d new UserStats(\"./UserData.txt\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Logic logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        fxmlLoader.\u003cUi\u003egetController().setLogic(logic, stats, false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        stage.setTitle(\"AlgoSenpai Adventures\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    void tearDown() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        FxToolkit.hideStage();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    void testInvalidMousePress() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        clickOn(\"#userInput\").write(\"me nu\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Assertions.assertEquals(\"me nu\", actualText);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    void testInvalidKeyPress() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        clickOn(\"#userInput\").write(\"printt\").press(KeyCode.ENTER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Assertions.assertEquals(\"printt\", actualText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    void testInvalidWithSpace() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        clickOn(\"#userInput\").write(\" menuu \").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Assertions.assertEquals(\" menuu \", actualText);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    void testInvalidMultipleSpaces() throws IOException, FileParsingException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        UserStats previousStats \u003d UserStats.parseString(Storage.loadData(\"UserData.txt\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Logic logic \u003d new Logic(previousStats);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Command command \u003d logic.executeCommand(\"qu iz\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        String actualText \u003d command.execute();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        if (previousStats.getUsername().equals(\"Default\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            Assertions.assertEquals(\"Hello there! Welcome to the world of DATA STRUCTURES AND ALGORITHMS.\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                    + \"Can I have your name and gender in the format : \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                    + \"\u0027hello NAME GENDER (boy/girl)\u0027 please.\", actualText);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        } else if (!previousStats.getUsername().equals(\"Default\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            Assertions.assertEquals(\"OOPS!!! Error occurred. Please input a valid command. \""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                    + \"Did you mean... quiz?\", actualText);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    void testInvalidStartWithInsteadOfEditDistance() throws IOException, FileParsingException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        UserStats previousStats \u003d UserStats.parseString(Storage.loadData(\"UserData.txt\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Logic logic \u003d new Logic(previousStats);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Command command \u003d logic.executeCommand(\"ar\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        String actualText \u003d command.execute();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        if (previousStats.getUsername().equals(\"Default\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            Assertions.assertEquals(\"Hello there! Welcome to the world of DATA STRUCTURES AND ALGORITHMS.\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                    + \"Can I have your name and gender in the format : \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                    + \"\u0027hello NAME GENDER (boy/girl)\u0027 please.\", actualText);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        } else if (!previousStats.getUsername().equals(\"Default\")) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            Assertions.assertEquals(\"OOPS!!! Error occurred. Please input a valid command. Did you mean... \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                    + \"arcade, archive?\", actualText);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    void testInvalidWithMinEditDistance() throws IOException, FileParsingException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        UserStats previousStats \u003d UserStats.parseString(Storage.loadData(\"UserData.txt\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Logic logic \u003d new Logic(previousStats);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Command command \u003d logic.executeCommand(\"exig\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        String actualText \u003d command.execute();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        if (previousStats.getUsername().equals(\"Default\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            Assertions.assertEquals(\"Hello there! Welcome to the world of DATA STRUCTURES AND ALGORITHMS.\\n\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                    + \"Can I have your name and gender in the format : \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                    + \"\u0027hello NAME GENDER (boy/girl)\u0027 please.\", actualText);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        } else if (!previousStats.getUsername().equals(\"Default\")) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            Assertions.assertEquals(\"OOPS!!! Error occurred. Please input a valid command. \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                    + \"Did you mean... exit?\", actualText);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    void testInvalidWithCharacterAbsentFromAllCommands() throws IOException, FileParsingException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        UserStats previousStats \u003d UserStats.parseString(Storage.loadData(\"UserData.txt\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Logic logic \u003d new Logic(previousStats);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Command command \u003d logic.executeCommand(\"f\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        String actualText \u003d command.execute();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        if (previousStats.getUsername().equals(\"Default\")) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            Assertions.assertEquals(\"Hello there! Welcome to the world of DATA STRUCTURES AND ALGORITHMS.\\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                    + \"Can I have your name and gender in the format : \""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                    + \"\u0027hello NAME GENDER (boy/girl)\u0027 please.\", actualText);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        } else if (!previousStats.getUsername().equals(\"Default\")) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            Assertions.assertEquals(\"OOPS!!! Error occurred. Please input a valid command. \""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                    + \"Enter `menu` to view our list of commands \""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                    + \"and `menu \u003ccommand\u003e to find out how to use them!\", actualText);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    void testInvalidWithStringThatContainsCharactersAbsentFromAllCommands() throws IOException, FileParsingException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        UserStats previousStats \u003d UserStats.parseString(Storage.loadData(\"UserData.txt\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Logic logic \u003d new Logic(previousStats);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Command command \u003d logic.executeCommand(\"ffffggggjjjj\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        String actualText \u003d command.execute();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        if (previousStats.getUsername().equals(\"Default\")) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            Assertions.assertEquals(\"Hello there! Welcome to the world of DATA STRUCTURES AND ALGORITHMS.\\n\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                    + \"Can I have your name and gender in the format : \""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                    + \"\u0027hello NAME GENDER (boy/girl)\u0027 please.\", actualText);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        } else if (!previousStats.getUsername().equals(\"Default\")) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            Assertions.assertEquals(\"OOPS!!! Error occurred. Please input a valid command. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                    + \"Enter `menu` to view our list of commands \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "                    + \"and `menu \u003ccommand\u003e to find out how to use them!\", actualText);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    \u003cT extends Node\u003e T find() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        return lookup(\"#dialogContainer\").query();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 161,
      "therealcs1010": 2,
      "modakshantanu": 4
    }
  },
  {
    "path": "src/test/java/com/algosenpai/app/commands/LectureCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.exceptions.FileParsingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import org.testfx.framework.junit5.ApplicationTest;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public class LectureCommandTest extends ApplicationTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public void start(Stage stage) throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        FXMLLoader fxmlLoader \u003d new FXMLLoader(LectureCommandTest.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Scene scene \u003d new Scene(ap, 500, 650);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        UserStats stats \u003d new UserStats(\"./UserData.txt\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Logic logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        fxmlLoader.\u003cUi\u003egetController().setLogic(logic, stats, false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        stage.setTitle(\"AlgoSenpai Adventures\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    void tearDown() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        FxToolkit.hideStage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        System.gc();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    void testLectureWrongFormat() throws IOException, FileParsingException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        UserStats stats \u003d new UserStats(\"./UserData.txt\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Logic logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        logic.executeCommand(\"hello Sim boy\").execute();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Command command \u003d logic.executeCommand(\"lecture\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String actualText \u003d command.execute();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String expectedText \u003d \"No such chapter found. Please select the following:\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"lecture \u003cchapter name\u003e\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"linkedlist\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"sorting\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"bitmask\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Assertions.assertEquals(expectedText, actualText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    void testLectureSorting() throws IOException, FileParsingException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        UserStats stats \u003d new UserStats(\"./UserData.txt\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Logic logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        logic.executeCommand(\"hello Sim boy\").execute();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //Selects topic for lecture."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        testLectureSortingSelect(logic);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String expectedText;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //Starts the lecture. Assert that desired output is reached."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        expectedText \u003d testLectureSortingStart(logic);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //Checks to make sure back command does not work when at the start."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        testLectureSortingBackFailsAtBeginning(logic, expectedText);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //Checks to make sure that next command works."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        testLectureSortingNextWorks(logic);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String actualText;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //Checks to make sure back command works."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        actualText \u003d testLectureSortingBackWorks(logic);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //Checks to make sure that all the other commands are output correctly."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        testLectureSortingRestWorks(logic, actualText);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //Checks to see if back command works."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        testLectureSortingBackDoesNotWorkAtEnd(logic);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        //Checks to see if next command works."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        testLectureSortingNextDoesNotWork(logic);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Next command does not work upon termination of lecture."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param logic The logic component."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @throws IOException exception."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private void testLectureSortingNextDoesNotWork(Logic logic) throws IOException, FileParsingException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String actualText;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String expectedText;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        actualText \u003d logic.executeCommand(\"next\").execute();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        expectedText \u003d \"OOPS!!! Error occurred. Please input a valid command. Did you mean... exit?\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Assertions.assertEquals(expectedText, actualText);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Back does not work upon termination of lecture."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param logic The logic component."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @throws IOException exception."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private void testLectureSortingBackDoesNotWorkAtEnd(Logic logic) throws IOException, FileParsingException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String actualText;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String expectedText;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        actualText \u003d logic.executeCommand(\"back\").execute();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        expectedText \u003d \"OOPS!!! Error occurred. Please input a valid command. Did you mean... stats, load, start?\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Assertions.assertEquals(expectedText, actualText);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Rest of the slides should work as expected."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param logic The logic component."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param actualText The text that was actually outputted."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @throws IOException exception."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private void testLectureSortingRestWorks(Logic logic, String actualText) throws IOException, FileParsingException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String expectedText;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        for (int i \u003d 0; i \u003c 31; i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "            actualText \u003d logic.executeCommand(\"next\").execute();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        expectedText \u003d \"\\n[End of lecture]\\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"* Type \u0027quiz x\u0027 where x is a chapter to practise what you learnt.\\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"* Type \u0027menu\u0027 to see other commands.\\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"\\n\" + \"32/32\\n\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Assertions.assertEquals(expectedText, actualText);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Back command should work when it is not the end of the lecture or the beginning of the lecture."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param logic The logic component."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The string containing the expected output."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @throws IOException exception."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private String testLectureSortingBackWorks(Logic logic) throws IOException, FileParsingException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String actualText;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String expectedText;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        actualText \u003d logic.executeCommand(\"back\").execute();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        expectedText \u003d \"\\nSorting is a very classic problem of reordering items (that can be compared, e.g. integers,\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \" floating-point numbers, strings, etc) of an array (or a list) in a certain order (increasing,\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \" non-decreasing, decreasing, non-increasing, lexicographical, etc).\\n\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"\\n\" + \"1/32\\n\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Assertions.assertEquals(expectedText, actualText);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return actualText;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Next command should work when lecture begins."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param logic The logic component."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @throws IOException exception."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private void testLectureSortingNextWorks(Logic logic) throws IOException, FileParsingException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String actualText;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String expectedText;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        actualText \u003d logic.executeCommand(\"next\").execute();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        expectedText \u003d \"\\nSorting problem has a variety of interesting algorithmic solutions that embody many \""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Computer Science ideas:\\n\""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Comparison versus non-comparison based strategies,\\n\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Iterative versus Recursive implementation,\\n\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Divide-and-Conquer paradigm (this or that),\\n\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Best/Worst/Average-case Time Complexity analysis,\\n\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Randomized Algorithms, etc.\\n\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"\\n\" + \"2/32\\n\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Assertions.assertEquals(expectedText, actualText);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Back command should fail at the beginning of the lecture at slide 1."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param logic The logic component."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param expectedText The expected text from the user."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @throws IOException exception."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private void testLectureSortingBackFailsAtBeginning(Logic logic, String expectedText) throws IOException,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "            FileParsingException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String actualText;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        actualText \u003d logic.executeCommand(\"back\").execute();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Assertions.assertEquals(expectedText, actualText);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Start command should start the lecture."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param logic The logic component."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @return The expected text of the user."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @throws IOException exception."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private String testLectureSortingStart(Logic logic) throws IOException, FileParsingException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String actualText;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String expectedText;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        actualText \u003d logic.executeCommand(\"start\").execute();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        expectedText \u003d \"\\nSorting is a very classic problem of reordering items (that can be compared, e.g. integers,\""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \" floating-point numbers, strings, etc) of an array (or a list) in a certain order (increasing,\""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \" non-decreasing, decreasing, non-increasing, lexicographical, etc).\\n\""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"\\n\" + \"1/32\\n\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Assertions.assertEquals(expectedText, actualText);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return expectedText;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * Select command should lock in the chapter and start the quiz."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @param logic The logic component."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     * @throws IOException exception."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    private void testLectureSortingSelect(Logic logic) throws IOException, FileParsingException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String actualText;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String expectedText;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        actualText \u003d logic.executeCommand(\"lecture sorting\").execute();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        expectedText \u003d \"You have selected Chapter 1. Type \u0027start\u0027 to begin.\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Assertions.assertEquals(expectedText, actualText);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 2,
      "sevenmatt7": 9,
      "therealcs1010": 208,
      "modakshantanu": 6
    }
  },
  {
    "path": "src/test/java/com/algosenpai/app/commands/LoadCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "package com.algosenpai.app.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.exceptions.FileParsingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.logic.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.stats.ChapterStat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "public class LoadCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    void loadFromValidFile() throws IOException, FileParsingException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        UserStats userStats \u003d UserStats.getDefaultUserStats();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        UserStats userStats1 \u003d new UserStats(\"ABC\",\"girl\",1,2,new ArrayList\u003cChapterStat\u003e());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Storage.saveData(\"testTextFile.txt\",userStats1.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Logic logic \u003d new Logic(userStats);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        String userInput \u003d \"load testTextFile.txt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        logic.executeCommand(userInput).execute();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Assertions.assertEquals(userStats,userStats1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sevenmatt7": 1,
      "modakshantanu": 29
    }
  },
  {
    "path": "src/test/java/com/algosenpai/app/commands/MenuCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "package com.algosenpai.app.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.logic.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import com.algosenpai.app.ui.components.DialogBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "import org.testfx.framework.junit5.ApplicationTest;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "public class MenuCommandTest extends ApplicationTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    public void start(Stage stage) throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        FXMLLoader fxmlLoader \u003d new FXMLLoader(MenuCommandTest.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Scene scene \u003d new Scene(ap, 500, 650);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        UserStats stats \u003d new UserStats(\"./UserData.txt\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Logic logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        fxmlLoader.\u003cUi\u003egetController().setLogic(logic, stats, false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        stage.setTitle(\"AlgoSenpai Adventures\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    void tearDown() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        FxToolkit.hideStage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    void testMenuMousePress() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        clickOn(\"#userInput\").write(\"menu\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Assertions.assertEquals(\"menu\", actualText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    void testMenuKeyPress() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        clickOn(\"#userInput\").write(\"menu\").press(KeyCode.ENTER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Assertions.assertEquals(\"menu\", actualText);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    void testMenuWithSpace() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        clickOn(\"#userInput\").write(\" menu \").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Assertions.assertEquals(\" menu \", actualText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    void testMenuOutput() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        clickOn(\"#userInput\").write(\"menu\").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Assertions.assertEquals(\"Senpai will teach you! Try these commands :\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Critical :\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"*\\tlecture\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"*\\tquiz\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"*\\tarcade\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"*\\treset\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"*\\texit\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Utility :\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"*\\treview\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"*\\thistory\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                + \"*\\tdelete\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"*\\thelp\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"*\\tprint\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"*\\tarchive\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"*\\tsave\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Misc :\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"*\\tchapters\\n\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"*\\tclear\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"*\\tvolume\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"*\\tresult\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"*\\tstats\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Type `menu \u003ccommand\u003e` to see how to use certain commands.\\n\", actualText);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    void testMenuLectureCommandOutput() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        clickOn(\"#userInput\").write(\"menu lecture\").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(2);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Assertions.assertEquals(\"This command allows you to pick a chapter that you are \""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"interested in revising.\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"The lecture ends after all the slides are done or if you type `end`.\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Format :\\n\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"`lecture` will list the current chapters available for the lecture.\\n\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"`lecture sorting` will pick the lecture on sorting.\\n\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"**Tips\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"You can start the chapter after you selected a chapter using `start`.\\n\", actualText);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    void testMenuQuizCommandOutput() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        clickOn(\"#userInput\").write(\"menu quiz\").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(2);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Assertions.assertEquals(\"This command allows you to pick a chapter that you are interested in\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \" practising.\\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"The quiz ends after 10 questions or if you type `end`.\\n\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Format :\\n\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"`quiz` will list the current chapters available for the lecture.\\n\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"`quiz linkedlist` will pick the quiz questions from the Linked List chapter.\\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"**Tips\\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"You can start the chapter after you selected a chapter using `start`.\\n\", actualText);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    void testMenuArcadeCommandOutput() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        clickOn(\"#userInput\").write(\"menu arcade\").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(2);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Assertions.assertEquals(\"This command allows you to play the arcade version of the quiz.\\n\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"The game ends only when you get a wrong answer.\\n\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Format :\\n\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"`arcade` will start the arcade immediately.\\n\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"**Tips\\n\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"You can use this mode during your final revision to consolidate your learning.\\n\", actualText);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    void testMenuResetCommandOutput() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        clickOn(\"#userInput\").write(\"menu reset\").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(2);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Assertions.assertEquals(\"This command allows you to reset all the progress you have made.\\n\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"This is for users who wish to achieve higher stats after clearing all the chapters.\\n\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Format :\\n\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"`reset` will reset the game.\\n\", actualText);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    void testMenuExitCommandOutput() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        clickOn(\"#userInput\").write(\"menu exit\").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(2);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Assertions.assertEquals(\"This command allows you to exit the game, and can be done anytime in\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \" the game.\\n\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Format :\\n\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"`exit` will exit the game.\\n\", actualText);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    void testMenuReviewCommandOutput() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        clickOn(\"#userInput\").write(\"menu review\").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(2);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Assertions.assertEquals(\"This command allows you to review the questions which has went wrong \""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"during your quiz.\\n\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Format :\\n\""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"`review 2` will show how the answer was derived for Question 2 of your last quiz.\\n\", actualText);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    void testMenuHistoryCommandOutput() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        clickOn(\"#userInput\").write(\"menu history\").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(2);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Assertions.assertEquals(\"This command allows you to see the past commands you have made.\\n\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Format :\\n\""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"`history 5` will show the past 5 commands made by you.\\n\""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"**Tips\\n\""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"The history command can only display as many commands as you have made.\\n\", actualText);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    void testMenuDeleteCommandOutput() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        clickOn(\"#userInput\").write(\"menu delete\").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(2);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Assertions.assertEquals(\"This command allows you to delete a particular number of chat bubbles \""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                + \"on the screen.\\n\""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Format :\\n\""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                + \"`delete 5` will delete the past 5 chat bubbles on the screen.\\n\""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"**Tips\\n\""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                + \"The delete command can be used as an alternative to the clear command in the event that\\n\""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                + \"you do not want to clear all the past chat bubbles.\\n\", actualText);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    void testMenuHelpCommandOutput() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        clickOn(\"#userInput\").write(\"menu help\").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(2);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        Assertions.assertEquals(\"This command will recommend you problems that you can find on Kattis that \""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                + \"are suitable to\\n\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                + \"your current proficiency level. Your proficiency is measured by the percentage of questions that\\n\""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                + \"you get correct for that particular chapter.\\n\""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Format :\\n\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                + \"`help bitmask` will list recommended questions from Kattis on the bitmask topic.\\n\""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                + \"that can help you to improve and enhance your understanding on the topic.\\n\""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"**Tips\\n\""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                + \"You can practise the questions available after doing the quizzes and attempting the lectures\\n\""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                + \" so that you will be able to apply the concepts you\u0027ve learnt to solve algorithmic problems.\\n\","
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "                actualText);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    void testMenuPrintCommandOutput() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        clickOn(\"#userInput\").write(\"menu print\").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(2);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Assertions.assertEquals(\"This command allows you to print different documents into a pdf format.\\n\""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Format :\\n\""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"`print` will show you the exact format for the command.\\n\""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"`print archive archive.pdf` will print your archived questions into a pdf named archive.pdf.\\n\""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"`print quiz quiz.pdf` will print the current quiz into a pdf named quiz.pdf.\\n\""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"`print user user.pdf` will print your stats into a pdf called user.pdf.\\n\", actualText);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    void testMenuArchiveCommandOutput() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        clickOn(\"#userInput\").write(\"menu archive\").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(2);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Assertions.assertEquals(\"This command allows you to archive particular questions from the quiz.\\n\""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Format :\\n\""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"`archive 1` will archive the first question of the quiz.\\n\""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"**Tips\\n\""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Use this to save questions that you are unsure of, and want to review at a \""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"later date.\\n\", actualText);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    void testMenuSaveCommandOutput() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        clickOn(\"#userInput\").write(\"menu save\").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(2);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Assertions.assertEquals(\"This command allows you to save your current progress.\\n\""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Format :\\n\""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"`save` will save the game.\\n\", actualText);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    void testMenuChaptersCommandOutput() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        clickOn(\"#userInput\").write(\"menu chapters\").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(2);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Assertions.assertEquals(\"This command allows you to see all the chapters that are \""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"currently available in the game.\\n\""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Format :\\n\""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"`chapters` will display all the chapters.\\n\", actualText);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    void testMenuClearCommandOutput() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        clickOn(\"#userInput\").write(\"menu clear\").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(2);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Assertions.assertEquals(\"This command allows you to clear the screen should you \""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"feel that it is too cluttered.\\n\""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Format :\\n\""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"`clear` will clear the screen.\\n\""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"**Tips\\n\""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"This is useful for when there are too many messages on your screen.\\n\", actualText);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    void testMenuVolumeCommandOutput() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        clickOn(\"#userInput\").write(\"menu volume\").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(2);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Assertions.assertEquals(\"This command allows you to change the volume.\\n\""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Format :\\n\""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"`volume` will show you the correct format.\\n\""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"`volume 0` will set the volume to 0.\\n\""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"`volume 100` will set it to the maximum volume.\\n\", actualText);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    void testMenuResultCommandOutput() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        clickOn(\"#userInput\").write(\"menu result\").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(2);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Assertions.assertEquals(\"This command displays the previous result attained by you.\\n\""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Format :\\n\""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"`result` will display the previous result attained by the latest quiz.\\n\", actualText);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    void testMenuStatsCommandOutput() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        clickOn(\"#userInput\").write(\"menu stats\").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(2);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Assertions.assertEquals(\"This command will show you the current statistics in game attained by you.\\n\""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"Format :\\n\""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                + \"`stats` will display the current statistics from different chapters.\\n\", actualText);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    \u003cT extends Node\u003e T find() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "        return lookup(\"#dialogContainer\").query();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "sevenmatt7"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 11,
      "sevenmatt7": 101,
      "therealcs1010": 228,
      "modakshantanu": 2
    }
  },
  {
    "path": "src/test/java/com/algosenpai/app/commands/PrintCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.exceptions.FileParsingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.logic.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class PrintCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    void testPrintMissingInput() throws IOException, FileParsingException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        UserStats stats \u003d new UserStats(\"./UserData.txt\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Logic logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Command command \u003d logic.executeCommand(\"print\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        String actualText \u003d command.execute();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Assertions.assertEquals(\"Please use the following format\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                + \"print \u003carchive | quiz |  user\u003e \u003cfilename\u003e.pdf\", actualText);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    void testPrintWrongFileExtension() throws IOException, FileParsingException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        UserStats stats \u003d new UserStats(\"./UserData.txt\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Logic logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Command command \u003d logic.executeCommand(\"print user testing.ppp\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        String actualText \u003d command.execute();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Assertions.assertEquals(\"Wrong file extension\", actualText);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    void testPrintCorrectInput() throws IOException, FileParsingException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        UserStats stats \u003d new UserStats(\"./UserData.txt\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Logic logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Command command \u003d logic.executeCommand(\"print user testing.pdf\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        String actualText \u003d command.execute();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Assertions.assertEquals(\"Successfully write to pdf\", actualText);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    void testPrintWrongDataSource() throws IOException, FileParsingException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        UserStats stats \u003d new UserStats(\"./UserData.txt\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Logic logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Command command \u003d logic.executeCommand(\"print hello testing.pdf\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        String actualText \u003d command.execute();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Assertions.assertEquals(\"Please use the following format\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "                + \"print \u003carchive | quiz |  user\u003e \u003cfilename\u003e.pdf\", actualText);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 48,
      "modakshantanu": 5
    }
  },
  {
    "path": "src/test/java/com/algosenpai/app/commands/ResetCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "package com.algosenpai.app.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import com.algosenpai.app.exceptions.FileParsingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import com.algosenpai.app.logic.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import com.algosenpai.app.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import com.algosenpai.app.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import com.algosenpai.app.ui.components.DialogBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import org.testfx.framework.junit5.ApplicationTest;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "public class ResetCommandTest extends ApplicationTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    public void start(Stage stage) throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        FXMLLoader fxmlLoader \u003d new FXMLLoader(ResetCommandTest.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Scene scene \u003d new Scene(ap, 500, 650);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        UserStats stats \u003d new UserStats(\"./UserData.txt\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Logic logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        fxmlLoader.\u003cUi\u003egetController().setLogic(logic, stats, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        stage.setTitle(\"AlgoSenpai Adventures\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    void tearDown() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        FxToolkit.hideStage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    void testResetMousePress() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        clickOn(\"#userInput\").write(\"reset\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Assertions.assertEquals(\"reset\", actualText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    void testResetKeyPress() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        clickOn(\"#userInput\").write(\"reset\").press(KeyCode.ENTER);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Assertions.assertEquals(\"reset\", actualText);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    void testResetWithSpace() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        clickOn(\"#userInput\").write(\" reset \").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Assertions.assertEquals(\" reset \", actualText);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    void testReset() throws IOException, FileParsingException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        UserStats stats \u003d new UserStats(\"./UserData.txt\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Logic logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Command command \u003d logic.executeCommand(\"reset\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        String actualText \u003d command.execute();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        if (stats.getUserExp() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            Assertions.assertEquals(\"OOPS!!! Error occurred. Your data has already been reset.\", actualText);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        } else if (stats.getUserExp() !\u003d 0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            Assertions.assertEquals(\"Are you sure you want to reset your progress? (y/n)\", actualText);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    void testResetWithUserConfirmation() throws IOException, FileParsingException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        UserStats stats \u003d new UserStats(\"./UserData.txt\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Logic logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Command command \u003d logic.executeCommand(\"reset\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        if (stats.getUserExp() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            String actualText \u003d command.execute();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            Assertions.assertEquals(\"OOPS!!! Error occurred. Your data has already been reset.\", actualText);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        } else if (stats.getUserExp() !\u003d 0) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            clickOn(\"#userInput\").write(\"y\").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            String actualText \u003d command.execute();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            Assertions.assertEquals(\"You progress has been reset!\", actualText);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    void testResetAndAbort() throws IOException, FileParsingException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        UserStats stats \u003d new UserStats(\"./UserData.txt\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Logic logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Command command \u003d logic.executeCommand(\"reset\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        if (stats.getUserExp() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            String actualText \u003d command.execute();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            Assertions.assertEquals(\"OOPS!!! Error occurred. Your data has already been reset.\", actualText);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        } else if (stats.getUserExp() !\u003d 0) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            clickOn(\"#userInput\").write(\"n\").clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            String actualText \u003d command.execute();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "            Assertions.assertEquals(\"Reset operation cancelled!\", actualText);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    \u003cT extends Node\u003e T find() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        return lookup(\"#dialogContainer\").query();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 129
    }
  },
  {
    "path": "src/test/java/com/algosenpai/app/commands/ReviewCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "package com.algosenpai.app.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.logic.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import com.algosenpai.app.ui.components.DialogBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import org.testfx.framework.junit5.ApplicationTest;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "public class ReviewCommandTest extends ApplicationTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    void testReviewKeyPress() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        clickOn(\"#userInput\").write(\"review 1\").press(KeyCode.ENTER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        assertEquals(\"There is no current quiz available!\", actualText);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    void testReviewMousePress() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        clickOn(\"#userInput\").write(\"review 1\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        clickOn(\"#sendButton\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        VBox container \u003d find();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        DialogBox dialogBox \u003d (DialogBox) container.getChildren().get(2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        String actualText \u003d dialogBox.getDialog().getText();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        assertEquals(\"There is no current quiz available!\", actualText);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    public void start(Stage stage) throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        FXMLLoader fxmlLoader \u003d new FXMLLoader(ReviewCommandTest.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Scene scene \u003d new Scene(ap, 500, 650);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        UserStats stats \u003d new UserStats(\"UserData.txt\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Logic logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        fxmlLoader.\u003cUi\u003egetController().setLogic(logic, stats, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        stage.setTitle(\"AlgoSenpai Adventures\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    void tearDown() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        FxToolkit.hideStage();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        System.gc();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    \u003cT extends Node\u003e T find() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        return lookup(\"#dialogContainer\").query();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 1,
      "therealcs1010": 71,
      "modakshantanu": 2
    }
  },
  {
    "path": "src/test/java/com/algosenpai/app/commands/SaveCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "package com.algosenpai.app.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.exceptions.FileParsingException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.logic.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "public class SaveCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    static void setup() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        new File(\"testTextFile.txt\").delete();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    void saveToCustomFile() throws FileParsingException, IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        UserStats userStats \u003d UserStats.getDefaultUserStats();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Logic logic \u003d new Logic(userStats);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        String userInput \u003d \"save testTextFile.txt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        logic.executeCommand(userInput).execute();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        UserStats userStats2 \u003d new UserStats(\"testTextFile.txt\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Assertions.assertEquals(userStats,userStats2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "modakshantanu": 32
    }
  },
  {
    "path": "src/test/java/com/algosenpai/app/commands/TabAutoCompleteTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "package com.algosenpai.app.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.logic.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import com.algosenpai.app.ui.components.DialogBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "import org.testfx.framework.junit5.ApplicationTest;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "public class TabAutoCompleteTest extends ApplicationTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    public void start(Stage stage) throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        FXMLLoader fxmlLoader \u003d new FXMLLoader(TabAutoCompleteTest.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Scene scene \u003d new Scene(ap, 500, 650);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        stage.setScene(scene);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        UserStats stats \u003d new UserStats(\"./UserData.txt\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Logic logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        fxmlLoader.\u003cUi\u003egetController().setLogic(logic, stats, false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        stage.setResizable(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        stage.setTitle(\"AlgoSenpai Adventures\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        stage.show();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    void tearDown() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        FxToolkit.hideStage();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        System.gc();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    void testTab_emptyString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        clickOn(\"#userInput\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                .press(KeyCode.TAB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                .press(KeyCode.TAB);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        TextField userInput \u003d lookup(\"#userInput\").query();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Assertions.assertEquals(\"\", userInput.getText());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    void testTab_matchFound() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        clickOn(\"#userInput\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "                .write(\"qui\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                .press(KeyCode.TAB);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        TextField userInput \u003d lookup(\"#userInput\").query();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "therealcs1010"
        },
        "content": "        Assertions.assertEquals(\"quiz\", userInput.getText());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    void testTab_noMatch() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        clickOn(\"#userInput\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                .write(\"x\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                .press(KeyCode.TAB);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        TextField userInput \u003d lookup(\"#userInput\").query();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Assertions.assertEquals(\"x\", userInput.getText());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    void testTab_completeCommand() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        clickOn(\"#userInput\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                .write(\"quiz\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                .press(KeyCode.TAB);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        TextField userInput \u003d lookup(\"#userInput\").query();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Assertions.assertEquals(\"quiz\", userInput.getText());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    void testTab_completeCommandPlusMore() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        clickOn(\"#userInput\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                .write(\"quizexitmenu\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "                .press(KeyCode.TAB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        TextField userInput \u003d lookup(\"#userInput\").query();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "        Assertions.assertEquals(\"quizexitmenu\", userInput.getText());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 1,
      "therealcs1010": 2,
      "modakshantanu": 101
    }
  },
  {
    "path": "src/test/java/com/algosenpai/app/commands/VolumeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.logic.Logic;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.logic.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.stats.UserStats;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.ui.controller.MusicController;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "public class VolumeCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    void testSoundLevelUpperBoundary() throws Exception {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        UserStats stats \u003d new UserStats(\"./UserData.txt\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Logic logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Command command \u003d logic.executeCommand(\"volume 110\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        String actualText \u003d command.execute();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Assertions.assertEquals(\"Sound level is from 0 to 100\", actualText);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    void testSoundLevelLowerBoundary() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        UserStats stats \u003d new UserStats(\"./UserData.txt\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Logic logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Command command \u003d logic.executeCommand(\"volume -1\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        String actualText \u003d command.execute();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Assertions.assertEquals(\"Sound level is from 0 to 100\", actualText);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    void testSoundLevelWrongInput() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        UserStats stats \u003d new UserStats(\"./UserData.txt\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Logic logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Command command \u003d logic.executeCommand(\"volume testing\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        String actualText \u003d command.execute();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Assertions.assertEquals(\"Select a number from 0 to 100 to adjust the sound\", actualText);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "modakshantanu"
        },
        "content": "    void testSoundLevelMissingInput() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        UserStats stats \u003d new UserStats(\"./UserData.txt\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Logic logic \u003d new Logic(stats);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Command command \u003d logic.executeCommand(\"volume\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        String actualText \u003d command.execute();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Assertions.assertEquals(\"volume \u003csound level\u003e\", actualText);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 47,
      "modakshantanu": 4
    }
  },
  {
    "path": "src/test/java/com/algosenpai/app/commands/parser/ParserCheckIntegerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "package com.algosenpai.app.commands.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.algosenpai.app.logic.parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "class ParserCheckIntegerTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    void testParserIsIntegerEmptyString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        boolean isInteger \u003d Parser.isInteger(\"\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Assertions.assertFalse(isInteger);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    void testParserIsIntegerStringInput() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        boolean isInteger \u003d Parser.isInteger(\"testing\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Assertions.assertFalse(isInteger);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    void testParserIsIntegerDoubleInput() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        boolean isInteger \u003d Parser.isInteger(\"1.0\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Assertions.assertFalse(isInteger);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    void testParserIsIntegerIntegerInput() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        boolean isInteger \u003d Parser.isInteger(\"1\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Assertions.assertTrue(isInteger);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 1,
      "nwjbrandon": 31
    }
  },
  {
    "path": "src/test/java/com/algosenpai/app/commands/parser/ParserParseInputTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "package com.algosenpai.app.commands.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import com.algosenpai.app.logic.parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import org.testfx.framework.junit5.ApplicationTest;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "class ParserParseInputTest extends ApplicationTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    void testParserTrim() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        ArrayList\u003cString\u003e actualText \u003d Parser.parseInput(\" menu \");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        ArrayList\u003cString\u003e expectedText \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        expectedText.add(\"menu\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Assertions.assertEquals(expectedText, actualText);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    void testParserMultipleSpaces() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        ArrayList\u003cString\u003e actualText \u003d Parser.parseInput(\"menu         select\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        ArrayList\u003cString\u003e expectedText \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        expectedText.add(\"menu\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        expectedText.add(\"select\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Assertions.assertEquals(expectedText, actualText);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    void testParserLowerInput() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        ArrayList\u003cString\u003e actualText \u003d Parser.parseInput(\"menu select\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        ArrayList\u003cString\u003e expectedText \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        expectedText.add(\"menu\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        expectedText.add(\"select\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Assertions.assertEquals(expectedText, actualText);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    void testParserOneWordInputLowerCase() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        ArrayList\u003cString\u003e actualText \u003d Parser.parseInput(\"MENU\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        ArrayList\u003cString\u003e expectedText \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        expectedText.add(\"menu\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Assertions.assertEquals(expectedText, actualText);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    void testParserMultipleWordsInputLowerCase() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        ArrayList\u003cString\u003e actualText \u003d Parser.parseInput(\"MENU SELECT\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        ArrayList\u003cString\u003e expectedText \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        expectedText.add(\"menu\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        expectedText.add(\"SELECT\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Assertions.assertEquals(expectedText, actualText);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    void testParserLowerCaseOnlyOnFirstWord() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        ArrayList\u003cString\u003e actualText \u003d Parser.parseInput(\"menu SELECT\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        ArrayList\u003cString\u003e expectedText \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        expectedText.add(\"menu\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        expectedText.add(\"SELECT\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "        Assertions.assertEquals(expectedText, actualText);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "carrieng0323852"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "carrieng0323852": 62
    }
  },
  {
    "path": "src/test/java/com/algosenpai/app/utility/PdfDocumentWriterUtilityTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "package com.algosenpai.app.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import com.itextpdf.text.DocumentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "class PdfDocumentWriterUtilityTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    void testFileExist() throws FileNotFoundException, DocumentException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        ArrayList\u003cString\u003e sample \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        sample.add(\"testing\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        PdfDocumentWriterUtility pdfDocumentWriterUtility \u003d new PdfDocumentWriterUtility();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        pdfDocumentWriterUtility.saveToPdf(sample, \"test_pdf_writer.pdf\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        File tempFile \u003d new File(\"test_pdf_writer.pdf\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        boolean exists \u003d tempFile.exists();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "        Assertions.assertTrue(exists);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwjbrandon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwjbrandon": 23
    }
  }
]
