[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\tid \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\tid \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    archiveVersion \u003d \"1.3\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "buildDir \u003d \u0027../main\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "File runningDir \u003d new File(\u0027../main/bin\u0027)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "runningDir.mkdirs()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "tasks.run.workingDir \u003d runningDir"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    mainClassName \u003d \"javafx.Launcher\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\t//mainClassName \u003d \"Main.Duke\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zyleet"
        },
        "content": "\t// https://mvnrepository.com/artifact/org.controlsfx/controlsfx"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zyleet"
        },
        "content": "\tcompile group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u002711.0.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaneQuah": 4,
      "-": 42,
      "zyleet": 18
    }
  },
  {
    "path": "reports/tests/test/css/base-style.css",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zyleet"
        },
        "content": "body {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    margin: 0;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    padding: 0;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    font-family: sans-serif;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    font-size: 12pt;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zyleet"
        },
        "content": "body, a, a:visited {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    color: #303030;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zyleet"
        },
        "content": "#content {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    padding-left: 50px;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    padding-right: 50px;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    padding-top: 30px;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    padding-bottom: 30px;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": "#content h1 {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    font-size: 160%;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    margin-bottom: 10px;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zyleet"
        },
        "content": "#footer {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    margin-top: 100px;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    font-size: 80%;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    white-space: nowrap;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zyleet"
        },
        "content": "#footer, #footer a {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    color: #a0a0a0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": "#line-wrapping-toggle {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    vertical-align: middle;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zyleet"
        },
        "content": "#label-for-line-wrapping-toggle {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    vertical-align: middle;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": "ul {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    margin-left: 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": "h1, h2, h3 {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    white-space: nowrap;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "h2 {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    font-size: 120%;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": "ul.tabLinks {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    padding-left: 0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    padding-top: 10px;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    padding-bottom: 10px;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    overflow: auto;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    min-width: 800px;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    width: auto !important;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    width: 800px;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zyleet"
        },
        "content": "ul.tabLinks li {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    float: left;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    height: 100%;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    list-style: none;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    padding-left: 10px;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    padding-right: 10px;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    padding-top: 5px;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    padding-bottom: 5px;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    margin-bottom: 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    -moz-border-radius: 7px;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    border-radius: 7px;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    margin-right: 25px;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    border: solid 1px #d4d4d4;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    background-color: #f0f0f0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zyleet"
        },
        "content": "ul.tabLinks li:hover {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    background-color: #fafafa;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zyleet"
        },
        "content": "ul.tabLinks li.selected {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    background-color: #c5f0f5;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    border-color: #c5f0f5;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zyleet"
        },
        "content": "ul.tabLinks a {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    font-size: 120%;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    display: block;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    outline: none;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    text-decoration: none;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    margin: 0;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    padding: 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zyleet"
        },
        "content": "ul.tabLinks li h2 {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    margin: 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    padding: 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zyleet"
        },
        "content": "div.tab {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zyleet"
        },
        "content": "div.selected {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    display: block;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zyleet"
        },
        "content": "div.deselected {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    display: none;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zyleet"
        },
        "content": "div.tab table {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    min-width: 350px;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    width: auto !important;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    width: 350px;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    border-collapse: collapse;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zyleet"
        },
        "content": "div.tab th, div.tab table {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    border-bottom: solid #d0d0d0 1px;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zyleet"
        },
        "content": "div.tab th {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    text-align: left;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    white-space: nowrap;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    padding-left: 6em;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zyleet"
        },
        "content": "div.tab th:first-child {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    padding-left: 0;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zyleet"
        },
        "content": "div.tab td {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    white-space: nowrap;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    padding-left: 6em;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    padding-top: 5px;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    padding-bottom: 5px;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zyleet"
        },
        "content": "div.tab td:first-child {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    padding-left: 0;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zyleet"
        },
        "content": "div.tab td.numeric, div.tab th.numeric {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    text-align: right;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zyleet"
        },
        "content": "span.code {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    display: inline-block;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    margin-top: 0em;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    margin-bottom: 1em;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zyleet"
        },
        "content": "span.code pre {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    font-size: 11pt;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    padding-top: 10px;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    padding-bottom: 10px;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    padding-left: 10px;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    padding-right: 10px;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    margin: 0;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    background-color: #f7f7f7;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    border: solid 1px #d0d0d0;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    min-width: 700px;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    width: auto !important;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    width: 700px;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zyleet"
        },
        "content": "span.wrapped pre {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    word-wrap: break-word;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    white-space: pre-wrap;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    word-break: break-all;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zyleet"
        },
        "content": "label.hidden {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    display: none;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zyleet": 179
    }
  },
  {
    "path": "reports/tests/test/css/style.css",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zyleet"
        },
        "content": "#summary {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    margin-top: 30px;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    margin-bottom: 40px;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": "#summary table {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    border-collapse: collapse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": "#summary td {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    vertical-align: top;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zyleet"
        },
        "content": ".breadcrumbs, .breadcrumbs a {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    color: #606060;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": ".infoBox {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    width: 110px;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    padding-top: 15px;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    padding-bottom: 15px;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    text-align: center;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zyleet"
        },
        "content": ".infoBox p {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    margin: 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zyleet"
        },
        "content": ".counter, .percent {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    font-size: 120%;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    font-weight: bold;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    margin-bottom: 8px;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": "#duration {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    width: 125px;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": "#successRate, .summaryGroup {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    border: solid 2px #d0d0d0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    -moz-border-radius: 10px;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    border-radius: 10px;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": "#successRate {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    width: 140px;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    margin-left: 35px;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "#successRate .percent {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    font-size: 180%;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": ".success, .success a {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    color: #008000;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zyleet"
        },
        "content": "div.success, #successRate.success {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    background-color: #bbd9bb;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    border-color: #008000;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zyleet"
        },
        "content": ".failures, .failures a {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    color: #b60808;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zyleet"
        },
        "content": ".skipped, .skipped a {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    color: #c09853;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zyleet"
        },
        "content": "div.failures, #successRate.failures {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    background-color: #ecdada;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    border-color: #b60808;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zyleet"
        },
        "content": "ul.linkList {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    padding-left: 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zyleet"
        },
        "content": "ul.linkList li {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    list-style: none;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    margin-bottom: 5px;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zyleet": 84
    }
  },
  {
    "path": "resources/main/view/DialogBox.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" fillHeight\u003d\"false\" maxHeight\u003d\"Infinity\" prefWidth\u003d\"634.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zyleet"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"Infinity\" text\u003d\"Label\" wrapText\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            \u003cFont name\u003d\"Consolas\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zyleet"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "zyleet": 6
    }
  },
  {
    "path": "resources/main/view/MainWindow.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zyleet"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zyleet"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": "\u003c?import javafx.scene.control.cell.PropertyValueFactory?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zyleet"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zyleet"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zyleet"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"720.0\" prefWidth\u003d\"1300.0\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\" fx:controller\u003d\"javafx.MainWindow\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"574.0\" layoutY\u003d\"678.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutY\u003d\"-2.0\" prefHeight\u003d\"680.0\" prefWidth\u003d\"650.0\" vbarPolicy\u003d\"ALWAYS\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"42.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"-2.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"634.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"678.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"574.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        \u003cAnchorPane layoutX\u003d\"650.0\" prefHeight\u003d\"589.0\" prefWidth\u003d\"498.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"650.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                \u003cTabPane fx:id\u003d\"tabPane\" prefHeight\u003d\"720.0\" prefWidth\u003d\"650.0\" tabClosingPolicy\u003d\"UNAVAILABLE\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    \u003ctabs\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        \u003cTab fx:id\u003d\"tabTask\" text\u003d\"Tasks\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                        \u003cTableView fx:id\u003d\"taskView\" prefHeight\u003d\"690.0\" prefWidth\u003d\"650.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                            \u003ccolumns\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cTableColumn maxWidth\u003d\"32.0\" minWidth\u003d\"32.0\" prefWidth\u003d\"32.0\" resizable\u003d\"false\" text\u003d\"ID\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                        \u003cPropertyValueFactory property\u003d\"number\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cTableColumn maxWidth\u003d\"80.0\" minWidth\u003d\"80.0\" resizable\u003d\"false\" text\u003d\"Task Type\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                        \u003cPropertyValueFactory property\u003d\"taskType\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cTableColumn maxWidth\u003d\"59.0\" minWidth\u003d\"59.0\" prefWidth\u003d\"59.0\" resizable\u003d\"false\" text\u003d\"Status\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                        \u003cPropertyValueFactory property\u003d\"isDone\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cTableColumn prefWidth\u003d\"364.0\" text\u003d\"Task\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                        \u003cPropertyValueFactory property\u003d\"description\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cTableColumn prefWidth\u003d\"113.0\" text\u003d\"Deadline\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                        \u003cPropertyValueFactory property\u003d\"deadline\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                            \u003c/columns\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                            \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                            \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                        \u003c/TableView\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            \u003c/content\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        \u003cTab fx:id\u003d\"tabChoices\" text\u003d\"Degree Choices\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                        \u003cTableView fx:id\u003d\"choicesView\" prefHeight\u003d\"690.0\" prefWidth\u003d\"650.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                            \u003ccolumns\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cTableColumn maxWidth\u003d\"32.0\" minWidth\u003d\"32.0\" prefWidth\u003d\"32.0\" resizable\u003d\"false\" text\u003d\"ID\"\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                        \u003cPropertyValueFactory property\u003d\"number\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cTableColumn minWidth\u003d\"80.0\" prefWidth\u003d\"617.0\" text\u003d\"Degree\"\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                        \u003cPropertyValueFactory property\u003d\"degree\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                            \u003c/columns\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                            \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                            \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                        \u003c/TableView\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            \u003c/content\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        \u003cTab fx:id\u003d\"tabDegrees\" text\u003d\"Degree Information\"\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                        \u003cTableView fx:id\u003d\"degreesView\" prefHeight\u003d\"690.0\" prefWidth\u003d\"650.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                            \u003ccolumns\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cTableColumn maxWidth\u003d\"32.0\" minWidth\u003d\"32.0\" prefWidth\u003d\"32.0\" resizable\u003d\"false\" text\u003d\"ID\"\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                        \u003cPropertyValueFactory property\u003d\"number\" /\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cTableColumn maxWidth\u003d\"100.0\" minWidth\u003d\"100.0\" prefWidth\u003d\"100.0\" text\u003d\"Module Code\"\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                        \u003cPropertyValueFactory property\u003d\"moduleCode\" /\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cTableColumn maxWidth\u003d\"60.0\" minWidth\u003d\"60.0\" prefWidth\u003d\"60.0\" text\u003d\"Credits\"\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                        \u003cPropertyValueFactory property\u003d\"moduleCredit\" /\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cTableColumn prefWidth\u003d\"175.0\" text\u003d\"Module Name\"\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                        \u003cPropertyValueFactory property\u003d\"moduleName\" /\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                            \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                            \u003c/columns\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                            \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                            \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                        \u003c/TableView\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            \u003c/content\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                  \u003cTab fx:id\u003d\"tabDiff\" text\u003d\"Degree Differences\"\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                              \u003cGridPane fx:id\u003d\"diffGrid\" layoutY\u003d\"342.0\" prefHeight\u003d\"350.0\" prefWidth\u003d\"650.0\" AnchorPane.bottomAnchor\u003d\"-1.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"342.0\"\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"5000.0\" minWidth\u003d\"10.0\" prefWidth\u003d\"325.0\" /\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                  \u003cRowConstraints maxHeight\u003d\"40.0\" minHeight\u003d\"40.0\" prefHeight\u003d\"40.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                  \u003cRowConstraints maxHeight\u003d\"5000.0\" minHeight\u003d\"10.0\" prefHeight\u003d\"250.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003cLabel alignment\u003d\"CENTER\" maxHeight\u003d\"40.0\" maxWidth\u003d\"5000.0\" minHeight\u003d\"40.0\" minWidth\u003d\"10.0\" prefHeight\u003d\"40.0\" prefWidth\u003d\"650.0\" text\u003d\"Similarities\" underline\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003cFont size\u003d\"28.0\" /\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003cTableView fx:id\u003d\"simiView\" prefHeight\u003d\"690.0\" prefWidth\u003d\"650.0\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003ccolumns\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003cTableColumn maxWidth\u003d\"100.0\" minWidth\u003d\"100.0\" prefWidth\u003d\"100.0\" resizable\u003d\"false\" text\u003d\"Module Code\"\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cPropertyValueFactory property\u003d\"moduleCode\" /\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003cTableColumn maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" resizable\u003d\"false\" text\u003d\"Credits\"\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cPropertyValueFactory property\u003d\"moduleCredit\" /\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003cTableColumn prefWidth\u003d\"175.0\" text\u003d\"Module Name\"\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cPropertyValueFactory property\u003d\"moduleName\" /\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003c/columns\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003c/TableView\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                              \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                              \u003cGridPane layoutY\u003d\"-1.0\" maxHeight\u003d\"40.0\" minHeight\u003d\"40.0\" prefHeight\u003d\"40.0\" prefWidth\u003d\"650.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"5000.0\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"400.0\" minWidth\u003d\"100.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"5000.0\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003cLabel alignment\u003d\"CENTER\" maxHeight\u003d\"40.0\" maxWidth\u003d\"5000.0\" minHeight\u003d\"40.0\" minWidth\u003d\"10.0\" prefHeight\u003d\"40.0\" prefWidth\u003d\"650.0\" text\u003d\"Differences\" underline\u003d\"true\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003cFont size\u003d\"28.0\" /\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003cLabel fx:id\u003d\"diffDegreeLabel2\" alignment\u003d\"CENTER_RIGHT\" maxHeight\u003d\"40.0\" maxWidth\u003d\"5000.0\" minHeight\u003d\"40.0\" minWidth\u003d\"10.0\" prefHeight\u003d\"17.0\" prefWidth\u003d\"236.0\" text\u003d\"Label\" GridPane.columnIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003cLabel fx:id\u003d\"diffDegreeLabel1\" maxHeight\u003d\"40.0\" maxWidth\u003d\"5000.0\" minHeight\u003d\"40.0\" minWidth\u003d\"10.0\" prefHeight\u003d\"17.0\" prefWidth\u003d\"241.0\" text\u003d\"Label\" /\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                              \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                              \u003cGridPane layoutY\u003d\"39.0\" prefHeight\u003d\"300.0\" prefWidth\u003d\"650.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"39.0\"\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003cTableView fx:id\u003d\"diffView1\" prefHeight\u003d\"231.0\" prefWidth\u003d\"78.0\"\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003ccolumns\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003cTableColumn maxWidth\u003d\"100.0\" minWidth\u003d\"100.0\" prefWidth\u003d\"100.0\" resizable\u003d\"false\" text\u003d\"Module Code\"\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cPropertyValueFactory property\u003d\"moduleCode1\" /\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003cTableColumn prefWidth\u003d\"175.0\" text\u003d\"Module Name\"\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cPropertyValueFactory property\u003d\"moduleName1\" /\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003cTableColumn maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" resizable\u003d\"false\" text\u003d\"Credits\"\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cPropertyValueFactory property\u003d\"moduleCredit1\" /\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003c/columns\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003c/TableView\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003cTableView fx:id\u003d\"diffView2\" prefHeight\u003d\"231.0\" prefWidth\u003d\"788.0\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003ccolumns\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003cTableColumn maxWidth\u003d\"100.0\" minWidth\u003d\"100.0\" prefWidth\u003d\"100.0\" resizable\u003d\"false\" text\u003d\"Module Code\"\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cPropertyValueFactory property\u003d\"moduleCode1\" /\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003cTableColumn prefWidth\u003d\"175.0\" text\u003d\"Module Name\"\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cPropertyValueFactory property\u003d\"moduleName1\" /\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003cTableColumn maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" resizable\u003d\"false\" text\u003d\"Credits\"\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cPropertyValueFactory property\u003d\"moduleCredit1\" /\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003c/columns\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003c/TableView\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                              \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                     \u003c/content\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                  \u003c/Tab\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    \u003c/tabs\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "zyleet": 247
    }
  },
  {
    "path": "src/main/java/command/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import degree.DegreeManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woblek"
        },
        "content": "import task.UniversityTaskHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import list.DegreeList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * AddCommand Class extends the abstract Command class."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * Called when items should be ADDED to tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * @author Kane Quah"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * @since 09/19"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private String arguments;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Memento memento;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Memento memento1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Memento memento2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private int listType \u003d 0; //0 for task list, 1 for degree list, 2 for both"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Creates AddCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param command command type to be used."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param arguments to be added."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public AddCommand(String command, String arguments) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * overwrites default execute to add tasks."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param tasks TasksList has tasks."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param ui UI prints messages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param storage Storage loads and saves files."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param degreesManager is the class which holds all information of degrees"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @throws DukeException DukeException throws exception."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage, DegreeList lists, DegreeManager degreesManager) throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        TaskList tasksBuffer;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        DegreeList degreesBuffer;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if (this.command.matches(\"event\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            this.listType \u003d 0; //0 for task list"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            tasksBuffer \u003d tasks.deepClone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            memento \u003d new Memento(tasksBuffer);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            tasks.add(this.command, this.arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            tasks.conflict_check();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        else if (this.command.matches(\"add\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            this.listType \u003d 2; //1 for degree list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            degreesBuffer \u003d lists.deepClone();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            tasksBuffer \u003d tasks.deepClone();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            memento1 \u003d new Memento(degreesBuffer);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            memento2 \u003d new Memento(tasksBuffer);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            if(this.arguments.matches(\"Biomedical Engineering|Chemical Engineering|Civil Engineering|\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    + \"Computer Engineering|Electrical Engineering|Environmental Engineering\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    + \"|Industrial and Systems Engineering|Mechanical Engineering|Materials Science and Engineering\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                lists.add_custom(this.arguments, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "woblek"
        },
        "content": "                UniversityTaskHandler universityTaskHandler \u003d new UniversityTaskHandler();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "woblek"
        },
        "content": "                universityTaskHandler.addDegreeTasks(this.arguments, tasks);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                throw new DukeException(\"Wrong formatting convention is used to add degree. The correct format is e.g. Computer Engineering\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            this.listType \u003d 0;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            tasksBuffer \u003d tasks.deepClone();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            memento \u003d new Memento(tasksBuffer);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            tasks.add(this.command, this.arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Overwrites default unexecute to remove the modification of taskList and degreeList."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Recalls the previous state of the taskList/degreeList via memento."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * It then returns this state to the current state of the taskList/degreeList."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param tasks   TasksList has tasks"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param ui      UI.UI prints messages"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param storage Storage.Storage loads and saves files"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param lists DegreeList has the array for the user to maintain a list of their degree choices."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @throws DukeException Throws the wrong amount of arguments."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void unExecute(TaskList tasks, UI ui, Storage storage, DegreeList lists, DegreeManager degreeManager) throws DukeException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        if (this.listType \u003d\u003d 0) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            TaskList tasksBuffer \u003d memento.getTaskState();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            tasks.clear();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            for (int i \u003d 0; i \u003c tasksBuffer.size(); i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                tasks.add(tasksBuffer.get(i));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } else if (this.listType \u003d\u003d 1) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            DegreeList degreesBuffer \u003d memento.getDegreeState();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            lists.clear();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            for (int i \u003d 0; i \u003c degreesBuffer.size(); i++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                lists.add(degreesBuffer.get(i));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } else if (this.listType \u003d\u003d 2) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            DegreeList degreesBuffer \u003d memento1.getDegreeState();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            TaskList tasksBuffer \u003d memento2.getTaskState();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            lists.clear();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            tasks.clear();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            for (int i \u003d 0; i \u003c degreesBuffer.size(); i++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                lists.add(degreesBuffer.get(i));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            for (int i \u003d 0; i \u003c tasksBuffer.size(); i++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                tasks.add(tasksBuffer.get(i));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woblek": 3,
      "manaswini05": 10,
      "KaneQuah": 46,
      "zyleet": 68
    }
  },
  {
    "path": "src/main/java/command/BadCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import degree.DegreeManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import list.DegreeList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * AddCommand Class extends the abstract Command class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * Called when items should be ADDED to tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * @author Kane Quah"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * @since 09/19"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "public class BadCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public BadCommand(String command, String arguments){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * overwrites default execute to throw errors."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param tasks TasksList has tasks"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param ui UI prints messages"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param storage Storage loads and saves files"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @param lists DegreeList has the array for the user to maintain a list of their degree choices."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param degreesManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @throws DukeException DukeException throws exception"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage, DegreeList lists, DegreeManager degreesManager) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "manaswini05": 2,
      "KaneQuah": 31,
      "zyleet": 1
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import degree.DegreeManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import list.DegreeList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * Abstract Command class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * Superclass of all commands."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * Abstract Method execute."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * Override Method unexecute."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * boolean exit."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * @author Kane Quah"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * @since 09/19"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    boolean exit \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    Memento memento; //A class to save the previous state of a list after a command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    Command() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * executes default."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param tasks   TasksList has tasks"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param ui      UI.UI prints messages"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param storage Storage.Storage loads and saves files"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @param lists DegreeList has the array for the user to maintain a list of their degree choices."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param degreesManager is the class which holds all information about degrees"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @throws DukeException DukeException throws exception"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public abstract void execute(TaskList tasks, UI ui, Storage storage, DegreeList lists, DegreeManager degreesManager) throws DukeException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * unexecutes default."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * To be overwritten by commands that modify the task list or degree list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Used to undo that modification to the task list or degree list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param tasks   TasksList has tasks"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param ui      UI.UI prints messages"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param storage Storage.Storage loads and saves files"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param lists DegreeList has the array for the user to maintain a list of their degree choices."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @throws DukeException DukeException throws exception"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    //Should not be abstract, as only some command classes will use unExecute i.e. print does not need unExecute"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void unExecute(TaskList tasks, UI ui, Storage storage, DegreeList lists , DegreeManager degreeManager) throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * checks if the command is an ExitCommand."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return boolean if the system should exit or not"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return this.exit;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "manaswini05": 4,
      "KaneQuah": 44,
      "zyleet": 18
    }
  },
  {
    "path": "src/main/java/command/CommandList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zyleet"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import degree.DegreeManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import list.DegreeList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zyleet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * Class to manage all commands that modify the taskList and degreeList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * Used to facilitate undoing and redoing of commands."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * Uses a stack as it only needs the latest command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zyleet"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * @author Lee Zhen Yu"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * @since 10/16"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": "public class CommandList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private int undoRedoPointer \u003d -1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Stack\u003cCommand\u003e commandList \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Stack\u003cString\u003e inputList \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    //Every time a new command is added, update all lists and storages"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private DegreeList lists;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private DegreeManager degreesManager \u003d new DegreeManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public CommandList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Method to add a command to this list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * To be stored until the command needs to be undone."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param newCommand The command that modified the taskList."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param tasks The taskList, needed for execution and unexecution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param ui The ui, needed for execution and unexecution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param storage The storage, needed for execution and unexecution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param lists The degreeList, needed for execution and unexecution."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param input The user input that resulted in this command, for the user\u0027s reference."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void addCommand(Command newCommand, TaskList tasks, UI ui, Storage storage, DegreeList lists, DegreeManager degreesManager, String input)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        this.lists \u003d lists;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        this.degreesManager \u003d degreesManager;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        deleteElementsAfterPointer(undoRedoPointer);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        newCommand.execute(tasks, ui, storage, lists, degreesManager);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        commandList.push(newCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        inputList.push(input);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        undoRedoPointer++;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * When a new command is added, and there are commands left that can still be redone."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Delete all commands after that pointer, and add the new command."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Once a new command has been added, we assume that the previous commands are no longer needed by the user."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param undoRedoPointer Pointer to the command in the stack."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private void deleteElementsAfterPointer(int undoRedoPointer) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        if (commandList.size() \u003c 1) return;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        for (int i \u003d commandList.size() - 1; i \u003e undoRedoPointer; i--) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            commandList.remove(i);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            inputList.remove(i);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Returns the saved state of the taskList."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return The previous saved state of the taskList."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public TaskList getTaskList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Returns the saved state of the degreeList."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return The previous saved state of the degreeList."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public DegreeList getDegreeLists() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return this.lists;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Method to undo the command modifying the taskList or degreeList."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * It looks for the latest command, unexecutes it, and it will return the previous state stored in its memento."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @throws DukeException throws when incorrect number of arguments passed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void undo() throws DukeException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        if (undoRedoPointer \u003d\u003d -1) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            throw new DukeException(\"There are no commands to undo!\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        Command command \u003d commandList.get(undoRedoPointer);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        System.out.println(\"Undo this command: \\\"\" + inputList.get(undoRedoPointer) + \"\\\"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        command.unExecute(tasks, ui, storage, lists, degreesManager);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        undoRedoPointer--;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Method to redo the command modifying the taskList or degreeList."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * It looks for the command pointer by undoRedoPointer and executes it."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * This will execute the command as per normal."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @throws DukeException throws when incorrect number of arguments passed."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void redo() throws DukeException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        if (undoRedoPointer \u003d\u003d commandList.size() - 1) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            throw new DukeException(\"There are no more commands to redo!\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        undoRedoPointer++;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        Command command \u003d commandList.get(undoRedoPointer);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        System.out.println(\"Redo this command: \\\"\" + inputList.get(undoRedoPointer) + \"\\\"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        command.execute(tasks, ui, storage, lists, degreesManager);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaneQuah": 2,
      "zyleet": 127
    }
  },
  {
    "path": "src/main/java/command/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import degree.DegreeManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import list.DegreeList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * ExitCommand Class extends the abstract Command class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * Called when user wants to exit."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * @author Kane Quah"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * @since 09/19"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.exit \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * overwrites default execute to exit."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param tasks   TasksList has tasks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param ui      UI prints messages"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param storage Storage loads and saves files"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @param lists DegreeList has the array for the user to maintain a list of their degree choices."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param degreesManager"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @throws DukeException DukeException throws exception"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage, DegreeList lists, DegreeManager degreesManager) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        boolean isClose \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            storage.store(tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            storage.add_degrees(lists);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            isClose \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"Exit Error: \" + e.getLocalizedMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            ui.hastaLaVista();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            if (isClose) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                ui.closeSuccess();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                ui.closeFailure();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            //ui.close();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "manaswini05": 5,
      "KaneQuah": 46,
      "zyleet": 2
    }
  },
  {
    "path": "src/main/java/command/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zyleet"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import degree.DegreeManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import list.DegreeList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zyleet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * AddCommand Class extends the abstract Command class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * Called when items should be ADDED to tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * @author Kane Quah"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * @since 09/19"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zyleet"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private String arguments;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Creates HelpCommand for a particular command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param command command type to be used."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param arguments to be added."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public HelpCommand(String command, String arguments) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Creates HelpCommand and display help for all commands."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param command command type to be used."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public HelpCommand(String command) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        this.arguments \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * overwrites default execute to add tasks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param tasks TasksList has tasks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param ui UI prints messages."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param storage Storage loads and saves files."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param degreesManager"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @throws DukeException DukeException throws exception."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage, DegreeList lists, DegreeManager degreesManager) throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        if (this.arguments.matches(\"\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            System.out.println(\"help: Displays a full list of possible commands.\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            + \"detail DEGREE|MODULE: View detailed information about a degree or module\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            + \"compare DEGREE DEGREE: Lists the module similarities and differences \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    + \"between two degree programs given their keywords.\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            + \"add DEGREE [t/TAG]...: To add a newly chosen degree programme into \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    + \"your personalised degree list.\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            + \"degreelist: Shows a list of all degrees in the list.\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            + \"swap INDEX INDEX: Swaps the position of two degrees in the degree list.\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            + \"replace INDEX NEWDEGREE: Replaces and existing degree in the list with a new one.\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            + \"delete INDEX: Deletes the specified item in the list.\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            + \"clear: Clears all degrees from the list.\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            + \"undo: Undo the previous change to the task or degree list.\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            + \"redo: Redo the command that was previously undone.\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            + \"custom KEYWORD KEYPHRASE: Customize a word to be evaluated as a \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    + \"phrase to be executed with additional parameters.\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            + \"bye: Exits the program.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            if (this.arguments.matches(\"detail\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                System.out.println(\"detail DEGREE: View detailed information about a degree \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                        + \"by using any of its aliases\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            } else if (this.arguments.matches(\"compare\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                System.out.println(\"compare DEGREE DEGREE: Lists the module similarities and differences \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        + \"between two degree programs given their keywords.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            } else if (this.arguments.matches(\"add\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                System.out.println(\"add DEGREE [t/TAG]...: To add a newly chosen degree programme into \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        + \"your personalised degree list.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "woblek"
        },
        "content": "                System.out.println(\"Here are the possible degrees that you can add to your personalised degree list:\\n\" +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "woblek"
        },
        "content": "                        \"Biomedical Engineering\\n\" +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "woblek"
        },
        "content": "                        \"Chemical Engineering\\n\" +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "woblek"
        },
        "content": "                        \"Civil Engineering\\n\" +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "woblek"
        },
        "content": "                        \"Computer Engineering\\n\" +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "woblek"
        },
        "content": "                        \"Electrical Engineering\\n\" +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "woblek"
        },
        "content": "                        \"Environmental Engineering\\n\" +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "woblek"
        },
        "content": "                        \"Industrial Systems Engineering\\n\" +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "woblek"
        },
        "content": "                        \"Mechanical Engineering\\n\" +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        \"Materials Science and Engineering\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            } else if (this.arguments.matches(\"degreelist\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                System.out.println(\"degreelist: Shows a list of all degrees in the list.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            } else if (this.arguments.matches(\"swap\")) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                System.out.println(\"swap INDEX INDEX: Swaps the position of two degrees in the degree list.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            } else if (this.arguments.matches(\"replace\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                System.out.println(\"replace INDEX NEWDEGREE: Replaces and existing degree in the list with a new one.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            } else if (this.arguments.matches(\"delete\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                System.out.println(\"delete INDEX: Deletes the specified item in the list.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            } else if (this.arguments.matches(\"clear\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                System.out.println(\"clear: Clears all degrees from the list.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            } else if (this.arguments.matches(\"custom\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                System.out.println(\"custom KEYWORD KEYPHRASE: Customize a word to be evaluated as a \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        + \"phrase to be executed with additional parameters.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            } else if (this.arguments.matches(\"bye\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                System.out.println(\"bye: Exits the program\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            } else if (this.arguments.matches(\"help\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                System.out.println(\"help: Displays a full list of possible commands.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            } else if (this.arguments.matches(\"undo\")) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                System.out.println(\"undo: Undo the previous change to the task or degree list.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            } else if (this.arguments.matches(\"redo\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                System.out.println(\"redo: Redo the command that was previously undone.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "woblek": 9,
      "KaneQuah": 5,
      "zyleet": 99
    }
  },
  {
    "path": "src/main/java/command/Memento.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zyleet"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import list.DegreeList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import degree.DegreeManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * Memento Class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * Used to store a previous state of a task or degree list, before any modifications."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zyleet"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * @author Lee Zhen Yu"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * @since 10/16"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zyleet"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zyleet"
        },
        "content": "public class Memento"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zyleet"
        },
        "content": "{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private DegreeList degreeList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Constructer method that can be overloaded with either a taskList or a degreeList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param taskList The state of the TaskList to be stored."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public Memento(TaskList taskList)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Constructer method that can be overloaded with either a taskList or a degreeList."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param degreeList The state of the degreeList to be stored."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public Memento(DegreeList degreeList)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        this.degreeList \u003d degreeList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Method to return the saved state of the taskList."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return The saved state of the taskList."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public TaskList getTaskState()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Method to return the saved state of the degreeList."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return The saved state of the degreeList."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public DegreeList getDegreeState()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return this.degreeList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zyleet": 58
    }
  },
  {
    "path": "src/main/java/command/ModCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import degree.DegreeManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woblek"
        },
        "content": "import task.UniversityTaskHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import list.DegreeList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import list.DegreeListStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * ModCommand Class extends the abstract Command class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * Called when modifying a task in tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * @author Kane Quah"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * @since 09/19"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "public class ModCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    private DegreeListStorage dd \u003d new DegreeListStorage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private int listType \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public ModCommand(String command, String input) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Overwrites default execute to modify task in tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param tasks   TasksList has tasks"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param ui      UI prints messages"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param storage Storage loads and saves files"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @param lists DegreeList has the array for the user to maintain a list of their degree choices."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param degreesManager is the class which holds all information about degrees"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @throws DukeException DukeException throws exception"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage, DegreeList lists, DegreeManager degreesManager) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        DegreeList degreesBuffer;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        TaskList tasksBuffer;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        switch (this.command) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        case \"remove\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            this.listType \u003d 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            degreesBuffer \u003d lists.deepClone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            memento \u003d new Memento(degreesBuffer);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "woblek"
        },
        "content": "            UniversityTaskHandler universityTaskHandler \u003d new UniversityTaskHandler();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "woblek"
        },
        "content": "            universityTaskHandler.removeDegreeTasks(this.input, lists, tasks);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            lists.delete(this.input, this.dd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            this.listType \u003d 0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            tasksBuffer \u003d tasks.deepClone();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            memento \u003d new Memento(tasksBuffer);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            tasks.markDone(this.input);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            this.listType \u003d 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            tasksBuffer \u003d tasks.deepClone();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            memento \u003d new Memento(tasksBuffer);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            tasks.banishDelete(this.input);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        case \"select\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            this.listType \u003d 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            tasksBuffer \u003d tasks.deepClone();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            memento \u003d new Memento(tasksBuffer);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            tasks.select(this.input);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        case \"snooze\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            this.listType \u003d 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            tasksBuffer \u003d tasks.deepClone();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            memento \u003d new Memento(tasksBuffer);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            tasks.snoozeTask(this.input);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"Invalid ModCommand\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Overwrites default unexecute to remove the modification of taskList and degreeList."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Recalls the previous state of the taskList/degreeList via memento."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * It then returns this state to the current state of the taskList/degreeList."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param tasks   TasksList has tasks"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param ui      UI.UI prints messages"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param storage Storage.Storage loads and saves files"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param lists DegreeList has the array for the user to maintain a list of their degree choices."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void unExecute(TaskList tasks, UI ui, Storage storage, DegreeList lists, DegreeManager degreeManager) throws DukeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        if (this.listType \u003d\u003d 0) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            TaskList tasksBuffer \u003d memento.getTaskState();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            tasks.clear();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            for (int i \u003d 0; i \u003c tasksBuffer.size(); i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                tasks.add(tasksBuffer.get(i));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            DegreeList degreesBuffer \u003d memento.getDegreeState();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            lists.clear();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            for (int i \u003d 0; i \u003c degreesBuffer.size(); i++) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                lists.add(degreesBuffer.get(i));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woblek": 3,
      "manaswini05": 7,
      "KaneQuah": 50,
      "zyleet": 59
    }
  },
  {
    "path": "src/main/java/command/PrintCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import degree.DegreeManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import list.DegreeList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * PrintCommand Class extends the abstract Command class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * Called when printing items in tasks"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * @author Kane Quah"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * @since 09/19"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "public class PrintCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    public PrintCommand(String command) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public PrintCommand(String command, String input)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "//    protected PrintCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * overwrites default execute to print task in tasks."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param tasks   TasksList Object being used currently"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param ui      UI in charge of printing messages"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param storage Storage in charge of loading and saving files"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @param lists DegreeList has the array for the user to maintain a list of their degree choices."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param degreesManager"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @throws DukeException DukeException thrown when unable to execute"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage, DegreeList lists, DegreeManager degreesManager) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        if(this.command.matches(\"list\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            tasks.print();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        if(this.command.matches(\"choices\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            lists.print();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(this.command.matches(\"detail\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            degreesManager.print(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(this.command.matches(\"compare\")){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            degreesManager.compare(input);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "manaswini05": 13,
      "KaneQuah": 43,
      "zyleet": 1
    }
  },
  {
    "path": "src/main/java/command/SearchCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import degree.DegreeManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import list.DegreeList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * SearchCommand Class extends the abstract Command class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * Called when Searching for items in tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * @author Kane Quah"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * @since 09/19"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private String arguments;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public SearchCommand(String command, String input) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.arguments \u003d input;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * overwrites default execute to search for tasks."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param tasks   TasksList has tasks"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param ui      UI prints messages"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param storage Storage loads and saves files"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @param lists DegreeList has the array for the user to maintain a list of their degree choices."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param degreesManager"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @throws DukeException DukeException throws exception"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage, DegreeList lists, DegreeManager degreesManager) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if (this.command.matches(\"find\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            tasks.find(this.arguments);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        if (this.command.matches(\"schedule\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            tasks.view_schedule(this.arguments);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "manaswini05": 6,
      "KaneQuah": 40
    }
  },
  {
    "path": "src/main/java/command/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woblek"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woblek"
        },
        "content": "@@author woblek"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woblek"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woblek"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woblek"
        },
        "content": "import degree.DegreeManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woblek"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woblek"
        },
        "content": "import list.DegreeList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woblek"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woblek"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woblek"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woblek"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woblek"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woblek"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woblek"
        },
        "content": "    private String arguments;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woblek"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woblek"
        },
        "content": "    private Memento memento;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * Creates AddCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param command command type to be used."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param arguments to be added."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public SortCommand(String command, String arguments) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woblek"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woblek"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woblek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage, DegreeList lists, DegreeManager mydegrees) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woblek"
        },
        "content": "        TaskList tasksBuffer;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woblek"
        },
        "content": "        tasksBuffer \u003d tasks.deepClone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woblek"
        },
        "content": "        memento \u003d new Memento(tasksBuffer);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woblek"
        },
        "content": "        if (this.arguments.matches(\"priority\")){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woblek"
        },
        "content": "            tasks.sortPriority();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "woblek"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "woblek"
        },
        "content": "            throw new DukeException(\"That is not a valid way to sort your tasks!\\n\\n\\n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * Overwrites default unexecute to remove the modification of taskList and degreeList."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * Recalls the previous state of the taskList/degreeList via memento."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * It then returns this state to the current state of the taskList/degreeList."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "woblek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param tasks   TasksList has tasks"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param ui      UI.UI prints messages"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param storage Storage.Storage loads and saves files"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param lists DegreeList has the array for the user to maintain a list of their degree choices."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @throws DukeException Throws the wrong amount of arguments."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "woblek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public void unExecute(TaskList tasks, UI ui, Storage storage, DegreeList lists, DegreeManager degreeManager) throws DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "woblek"
        },
        "content": "        TaskList tasksBuffer \u003d memento.getTaskState();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "woblek"
        },
        "content": "        tasks.clear();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "woblek"
        },
        "content": "        for (int i \u003d 0; i \u003c tasksBuffer.size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "woblek"
        },
        "content": "            tasks.add(tasksBuffer.get(i));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "woblek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woblek": 66
    }
  },
  {
    "path": "src/main/java/command/SwapCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import degree.DegreeManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import list.DegreeList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import list.DegreeListStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "public class SwapCommand extends Command{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    private DegreeListStorage dd \u003d new DegreeListStorage();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    private int listType \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    public SwapCommand(String command, String input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        this.command \u003d command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * Overwrites default execute to modify task in tasks."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @param tasks   TasksList has tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @param ui      UI prints messages"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @param storage Storage loads and saves files"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @param lists DegreeList has the array for the user to maintain a list of their degree choices."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @throws DukeException DukeException throws exception"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void execute(TaskList tasks, UI ui, Storage storage, DegreeList lists, DegreeManager degreesManager) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        DegreeList degreesBuffer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        switch (this.command) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        case \"swap\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            this.listType \u003d 1; //1 for degree list"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            degreesBuffer \u003d lists.deepClone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            memento \u003d new Memento(degreesBuffer);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            lists.swap(this.input, this.dd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            throw new DukeException(\"Invalid SwapCommand\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Overwrites default unexecute to remove the modification of taskList and degreeList."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Recalls the previous state of the taskList/degreeList via memento."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * It then returns this state to the current state of the taskList/degreeList."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param tasks   TasksList has tasks"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param ui      UI.UI prints messages"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param storage Storage.Storage loads and saves files"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param lists DegreeList has the array for the user to maintain a list of their degree choices."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @throws DukeException Throws the wrong amount of arguments."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void unExecute(TaskList tasks, UI ui, Storage storage, DegreeList lists, DegreeManager degreeManager) throws DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        if (this.listType \u003d\u003d 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            TaskList tasksBuffer \u003d memento.getTaskState();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            tasks.clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            for (int i \u003d 0; i \u003c tasksBuffer.size(); i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                tasks.add(tasksBuffer.get(i));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            DegreeList degreesBuffer \u003d memento.getDegreeState();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            lists.clear();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            for (int i \u003d 0; i \u003c degreesBuffer.size(); i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                lists.add(degreesBuffer.get(i));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "manaswini05": 47,
      "KaneQuah": 3,
      "zyleet": 29
    }
  },
  {
    "path": "src/main/java/degree/Degree.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "package degree;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import module.ConjunctiveModule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import module.ModuleList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import module.NonDescriptive;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * Degree Class contains the module information for the Degree"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * It is split into 5 Lists: Common Core, Core Module, Faculty Requirements, Design \u0026 Projects, Electives"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * It contains information about the number of modular credits allocated to Unrestricted Elective Modules"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * It also contains information about the Common Aliases"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "public class Degree {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private ModuleList commonCore \u003d new ModuleList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private ModuleList coreMod \u003d new ModuleList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private ModuleList facultyReq \u003d new ModuleList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private ModuleList designProject \u003d new ModuleList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private ModuleList electives \u003d new ModuleList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private ModuleList master \u003d new ModuleList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private List\u003cString\u003e aliases \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    //private DisjointUnionSet aliases;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private Integer uem \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Creates the degree using the scraped information in the csv file"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param input is a list of strings which should be taken from storage"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    Degree(List\u003cString\u003e input) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        validateList(input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        for (int row \u003d 1; row\u003c input.size(); row++)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            String[] split \u003d input.get(row).split(\",\", -1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            assert(split.length \u003d\u003d 12);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            int col \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            setUem(split[col].strip());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            for(col \u003d 1; col \u003c split.length - 1; col +\u003d 2)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                //System.out.println(\"Trying to add \" + col +\": \"+split[col]+\" \"+split[col+1]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                addToList(col, split[col].strip(), split[col+1].strip());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            assert (col \u003d\u003d split.length - 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            addAlias(split[col].strip());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(uem \u003d\u003d null)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            setUem(\"0\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(this.aliases.isEmpty())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"There should be at least one common alias to refer to the degree\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        master.add(commonCore);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        master.add(coreMod);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        master.add(facultyReq);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        master.add(designProject);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        master.add(electives);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Adds aliases to this object\u0027s list of aliases"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param input is the string to be added, nothing will be added if it is blank"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private void addAlias(String input)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(!input.isBlank())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            this.aliases.add(input);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Adds to the ModuleLists in degree based on which column (subsection) it belongs to"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param list is the integer indicating the list to be added, should only be 1,3,5,7,9"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param module is the module code and name"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param mcs is the credit amount of the module"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @throws DukeException is thrown when any steps of the validation or adding fails;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private void addToList(Integer list, String module, String mcs) throws DukeException"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            if(module.isBlank() \u0026\u0026 mcs.isBlank())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            if(module.isBlank() ^ mcs.isBlank())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                throw new DukeException(\"Both module name and credits must be filled\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            Module mod \u003d createNewModule(module, mcs);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            switch(list) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                this.facultyReq.add(mod);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            case 3:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                this.commonCore.add(mod);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            case 5:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                this.coreMod.add(mod);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            case 7:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                this.designProject.add(mod);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            case 9:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                this.electives.add(mod);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                throw new DukeException(\"Invalid addition to list\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(e.getLocalizedMessage());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Create a New Module to be added into one of various lists"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param in is a String containing module(s) data"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param mcs is a String which should be a non-negative integer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return Module object which contains the module data"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @throws DukeException is thrown when invalid module format is given"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private Module createNewModule(String in, String mcs) throws DukeException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        int credits \u003d validInt(mcs);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(in.contains(\" OR \"))"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            String[] split \u003d in.split(\"\\\\s+OR\\\\s+\", -1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            validateModule(split);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            return new ConjunctiveModule(in, credits);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(validateModule(in)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            Scanner splitter \u003d new Scanner(in);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            String code \u003d splitter.next();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            String name \u003d splitter.nextLine();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            name \u003d name.strip();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            return new Module(code, name, credits);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return new NonDescriptive(in, credits);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Checks if the string given to it is a valid module code"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param input is a String which is the module name"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return true if it follows the specific module format, otherwise false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @throws DukeException is thrown when the module name does not match specifications"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private boolean validateModule(String input) throws DukeException"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        Scanner checker \u003d new Scanner(input);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        String code \u003d checker.next();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(!checker.hasNextLine())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        String name \u003d checker.nextLine();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        name \u003d name.strip();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(code.matches(Parser.moduleFormat) \u0026\u0026 name.isBlank())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"Module must have a valid name\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return code.matches(Parser.moduleFormat) \u0026\u0026 !name.isBlank();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Checks if the string arrays elements given to it are valid module codes"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param input is a String which is the module name"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @throws DukeException is thrown when the module name does not match specifications"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private void validateModule(String[] input) throws DukeException"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        try"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            for(String module: input)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                if(!validateModule(module))"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    throw new DukeException(\"Invalid Module Code for Conjunctive modules\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } catch (DukeException e){"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(e.getLocalizedMessage());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "       }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Sets the Unrestriced Elective Modules credit amount"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param in String which is a non negative integer"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @throws DukeException when a negative integer or invalid string is passed"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private void setUem(String in) throws DukeException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            if(in.isBlank())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            if(this.uem !\u003d null)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                throw new DukeException(\"Unrestricted Elective Modules Amount already has a value set.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            if(!in.isBlank())"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                this.uem \u003d validInt(in);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(e.getLocalizedMessage());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"That is NOT a valid integer\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Determines if a string to be converted is a non negative int"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param in is a String input which should be a valid non negative integer"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @throws DukeException when a negative integer or invalid string is passed"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private int validInt(String in) throws DukeException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            int amount \u003d Integer.parseInt(in);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            if(amount \u003c 0)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                throw new DukeException(\"Non Negative Integer expected.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            return amount;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(e.getLocalizedMessage());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"That is NOT a valid integer\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Validates the csv files split by newlines"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param input is list of lines from csv file"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @throws DukeException when format of csv is incorrect"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private void validateList(List\u003cString\u003e input) throws DukeException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(input \u003d\u003d null)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"Degree not found\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(input.isEmpty())"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"No data found\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(input.size() \u003d\u003d 1)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"Insufficient Data\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        String[] split \u003d input.get(1).split(\",\", -1);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(split.length !\u003d 12)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"Incorrect Number of Columns\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Compares this degree to another degree"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param other is the other degree class to be compared to"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    void compare(Degree other)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(\"Comparing between \" + getProperName() + \" \" + other.getProperName());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(\"General Education Modules (GE) (5 Modules, each of 4MCs)\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(\"Similarities:\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(\"Human and Cultures (H\u0026C)\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(\"GER 1000 Quantitative Reasoning (QR),\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(\"Thinking and Expression (T\u0026E)\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(\"Singapore Studies (SS)\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(\"GEQ 1000 Asking Questions (AQ))\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        printListHeader(\"Unrestricted Electives\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if (this.getUem() !\u003d other.getUem()) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            printCentralized(\"Differences:\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            printSideBySide(this.getUem(), other.getUem());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        else"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            printCentralized(\"Similarities:\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            printCentralized(String.valueOf(this.getUem()));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(\"Programme Requirements\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        printListHeader(\"Faculty Requirements:\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        printListDifference(this.getFacultyReq(), other.getFacultyReq());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        printListHeader(\"Common Core Requirements:\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        printListDifference(this.getCommonCore(), other.getCommonCore());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        printListHeader(\"Core Modules:\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        printListDifference(this.getCoreMod(), other.getCoreMod());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        printListHeader(\"Design and Project Modules:\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        printListDifference(this.getDesignProject(), other.getDesignProject());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        printListHeader(\"Electives:\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        printListDifference(this.getElectives(), other.getElectives());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        printListHeader(\"Total:\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        printCentralized(\"Similar:\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        printSideBySide(160, 160);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Prints out the degree details"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void print()"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(\"General Education Modules (GE) (5 Modules, each of 4MCs)\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(\"Human and Cultures (H\u0026C)\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(\"GER 1000 Quantitative Reasoning (QR),\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(\"Thinking and Expression (T\u0026E)\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(\"Singapore Studies (SS)\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(\"GEQ 1000 Asking Questions (AQ))\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        printListHeader(\"Unrestricted Electives\", this.uem);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(\"Programme Requirements\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        printListHeader(\"Faculty Requirements:\", this.facultyReq.getSum());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.facultyReq.print();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        printListHeader(\"Common Core Requirements:\", this.commonCore.getSum());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.commonCore.print();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        printListHeader(\"Core Modules:\", this.coreMod.getSum());"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.coreMod.print();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        printListHeader(\"Design and Project Modules:\", this.designProject.getSum());"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.designProject.print();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        printListHeader(\"Electives:\", this.electives.getSum());"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.electives.print();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        printListHeader(\"Total\", 160);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Compares 2 ModuleList classes and prints out the similarities followed by te differences"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param listOne is a ModuleList from the original class which called this method"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param listTwo is a ModuleList from the other degree to be compared with"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private void printListDifference(ModuleList listOne, ModuleList listTwo) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        ModuleList similar \u003d listOne.getSimilar(listTwo);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        ModuleList myDiff \u003d listOne.getDifference(listTwo);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        ModuleList theirDiff \u003d listTwo.getDifference(listOne);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        printCentralized(\"Similarities:\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(similar.getModules().isEmpty()) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            printCentralized(\"None\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            similar.printCentral(Parser.windowWidth/2);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        printCentralized(\"Differences:\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(myDiff.getModules().isEmpty() \u0026\u0026 theirDiff.getModules().isEmpty())"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            printCentralized(\"None\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        else"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            Set\u003cModule\u003e mySet \u003d myDiff.getModules();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            Set\u003cModule\u003e otherSet \u003d theirDiff.getModules();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            char[] halfScreen \u003d new char[Parser.windowWidth/2];"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            Arrays.fill(halfScreen,\u0027 \u0027);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            ArrayList\u003cString\u003e toPrint \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            for(Module x: mySet) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                toPrint.add(x.getPrint(Parser.windowWidth/2));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            int counter \u003d 0;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            for(Module y: otherSet) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                StringBuilder res \u003d new StringBuilder();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                if(counter \u003c mySet.size()) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    res.append(toPrint.get(counter));"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    res.append(y.getPrint(Parser.windowWidth/2));"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    toPrint.set(counter, res.toString());"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                else {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    res.append(halfScreen);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    res.append(y.getPrint(Parser.windowWidth/2));"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    toPrint.add(res.toString());"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                counter +\u003d 1;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            if(mySet.size() \u003e otherSet.size()) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                int diff \u003d otherSet.size();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                while(diff \u003c mySet.size()) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    String res \u003d toPrint.get(diff)"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                            + String.valueOf(halfScreen);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    toPrint.set(diff, res);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    diff +\u003d 1;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            for(String comparison: toPrint)"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                System.out.println(comparison);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(myDiff.getSum() !\u003d theirDiff.getSum())"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            printCentralized(\"Subtotal is DIFFERENT:\");"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            printSideBySide(myDiff.getSum() + similar.getSum(), theirDiff.getSum() + similar.getSum());"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        else"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            printCentralized(\"Subtotal is SAME:\");"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            printCentralized(String.valueOf(myDiff.getSum() + similar.getSum()));"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Given a string and an integer, it will print out the list header (string) and its total Mc value (int)"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param front is the header to be printed"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param sum is the value associated with that header"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private void printListHeader(String front, int sum)"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        result.append(front);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        char[] pad \u003d new char[Math.max(Parser.windowWidth - result.length() - 4, 0)];"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        Arrays.fill(pad, \u0027 \u0027);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        result.append(pad);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        result.append(sum);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(result.toString());"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Given a string, it will print out the list header (string)"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param front is the header to be printed"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private void printListHeader(String front)"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        result.append(front);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        char[] pad \u003d new char[Math.max(Parser.windowWidth - result.length(), 0)];"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        Arrays.fill(pad, \u0027 \u0027);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        result.append(pad);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(result.toString());"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * prints a String centralized to the windowwidth"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param item is the string to be printed"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private void printCentralized(String item) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        int len \u003d item.length();"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(len%2 \u003d\u003d 1)"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            len +\u003d 1;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        int padLen \u003d (Parser.windowWidth - len)/2;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        char[] pad \u003d new char[padLen];"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        Arrays.fill(pad, \u0027 \u0027);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        StringBuilder line \u003d new StringBuilder();"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        line.append(pad);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        line.append(item);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        line.append(pad);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        while(line.length() \u003c Parser.windowWidth)"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            line.append(\" \");"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(line.toString());"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Prints out the different uem counts for each degree"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param no1 an integer detailing the uem count of the first degree"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param no2 an integer detailing the uem count of the degree being compared"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private void printSideBySide(int no1, int no2) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        StringBuilder line \u003d new StringBuilder();"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        int padLen \u003d (Parser.windowWidth - 8)/4;"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        char[] pad \u003d new char[padLen];"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        Arrays.fill(pad, \u0027 \u0027);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        line.append(pad);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        line.append(no1);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(no1 \u003c 1000)"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            line.append(\" \");"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(no1 \u003c 100)"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            line.append(\" \");"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(no1 \u003c 10)"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            line.append(\" \");"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        line.append(pad);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        line.append(pad);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        line.append(no2);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(no2 \u003c 1000)"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            line.append(\" \");"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(no2 \u003c 100)"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            line.append(\" \");"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(no2 \u003c 10)"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            line.append(\" \");"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        line.append(pad);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        while(line.length() \u003c Parser.windowWidth)"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            line.append(\" \");"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(line.toString());"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Gets the uem value"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return uem value"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private int getUem() { return this.uem;}"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Gets the longest alias in the list of aliases"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return String which is the longest alias (thus proper)"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public String getProperName() {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        String res \u003d \"\";"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        for(String x:aliases) {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            if(x.length() \u003e res.length()) {"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                res \u003d x;"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return res;"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns the similar list of modules from all modules compared to another degree"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return ModuleList containing similar modules;"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public ModuleList masterSimilar(Degree other)"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return this.getMaster().getSimilar(other.getMaster());"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Returns the difference list of modules from all modules compared to another degree"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return ModuleList containing different modules;"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public ModuleList masterDifference(Degree other)"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return this.getMaster().getDifference(other.getMaster());"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Gets the CommonCore ModuleList from this Degree"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return ModuleList which is the CommonCore ModuleList from this Degree"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private ModuleList getCommonCore(){ return this.commonCore; }"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Gets the CoreMod ModuleList from this Degree"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return ModuleList which is the CoreMod ModuleList from this Degree"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private ModuleList getCoreMod(){return this.coreMod;}"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Gets the FacultyReq ModuleList from this Degree"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return ModuleList which is the FacultyReq ModuleList from this Degree"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private ModuleList getFacultyReq() {return this.facultyReq;}"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Gets the DesignProject ModuleList from this Degree"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return ModuleList which is the DesignProject ModuleList from this Degree"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private ModuleList getDesignProject() {return this.designProject;}"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Gets the Electives ModuleList from this Degree"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return ModuleList which is the Electives ModuleList from this Degree"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private ModuleList getElectives() {return this.electives;}"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Gets the master list of modules"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return ModuleList which contains all Modules this degree has"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    ModuleList getMaster() {return this.master;}"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Gets the list of aliases"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return an arraylist of aliases"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    List\u003cString\u003e getAlias() {return this.aliases;}"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaneQuah": 581,
      "zyleet": 3
    }
  },
  {
    "path": "src/main/java/degree/DegreeManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "package degree;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import list.DegreeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import module.ModuleList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "public class DegreeManager {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    //private Map\u003cString, List\u003cString\u003e\u003e degrees \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private Map\u003cString, Degree\u003e degreeInfo \u003d new TreeMap\u003c\u003e(String.CASE_INSENSITIVE_ORDER);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private Map\u003cString, List\u003cString\u003e\u003e disjointSetFake \u003d new TreeMap\u003c\u003e(String.CASE_INSENSITIVE_ORDER);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private ModuleList masterList \u003d new ModuleList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private boolean foundFlag \u003d true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Constructs a degree manager class which handles queries for degrees and returns the appropiate information"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param storage is the storage class which holds all stored information"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @throws DukeException when a degree has failed to load or could not be found"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public DegreeManager(Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        List\u003cString\u003e listdegrees \u003d storage.fetchListOutput(\"listdegrees\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(listdegrees \u003d\u003d null)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"listdegrees.csv file not found\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        for (String listdegree : listdegrees) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            String[] split \u003d listdegree.split(\",\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            addDegree(split, storage.fetchListOutput(split[0]));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            disjointSetFake.put(split[0], degreeInfo.get(split[0]).getAlias());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            masterList.add(degreeInfo.get(split[0]).getMaster());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Empty Instance of Degree Manager"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public DegreeManager() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Adds a new Degree to the list of degree information"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param split is the comma separated file containing information about the degree and its options"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @throws DukeException is thrown if there is no degree information in the first column"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private void addDegree(String[] split, List\u003cString\u003e degreecsv) throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            if (split.length \u003d\u003d 1)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                degreeInfo.put(split[0], new Degree(degreecsv));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                if (split[0].isBlank())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    throw new DukeException(\"Unable to find main degree\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                else"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    degreeInfo.put(split[0], new Degree(degreecsv));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"For Degree \" + split[0] + \": \" + e.getLocalizedMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void print(String item) throws DukeException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        for(Map.Entry\u003cString, List\u003cString\u003e\u003e aliases: disjointSetFake.entrySet())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            String degree \u003d aliases.getKey();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            List\u003cString\u003e commonNames \u003d aliases.getValue();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            for(String x : commonNames){"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                if(x.equalsIgnoreCase(item)){"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    degreeInfo.get(degree).print();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        throw new DukeException(item + \" was not found in our records!\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Clears out the current degreeManager."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        degreeInfo.clear();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Returns the size of this degreeManager."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return The number of degrees in this degreeManager."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return degreeInfo.size();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void compare(String input) throws DukeException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        String[] split \u003d input.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(split.length \u003e 2)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"Too many arguments!\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(split.length \u003c\u003d 1){"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"Too few arguments!\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        assert(split.length \u003d\u003d 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(split[0].equalsIgnoreCase(split[1]))"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"Invalid Comparison (to Self)\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        StringBuilder errorList \u003d new StringBuilder();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(!degreeInfo.containsKey(split[0]))"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            errorList.append(split[0]);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            errorList.append(\" \");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(!degreeInfo.containsKey(split[1]))"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            errorList.append(split[1]);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(errorList.length() \u003e 0)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"Unable to find matching degrees for: \"+ errorList.toString());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        degreeInfo.get(split[0]).compare(degreeInfo.get(split[1]));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Returns the modules of a certain degree as a moduleList."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param degree The name of the degree corresponding to the modules required."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return The modules of this degree as a moduleList."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public ModuleList getModuleList(String degree) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return degreeInfo.get(degree).getMaster();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Method to return the full name of a degree course to check if a degree exists."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return String full name of the course/degree"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public String getFullDegreeName(String degree) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return degreeInfo.get(degree).getProperName();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Method to return a flag to check if a degree exists."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return boolean check for existence of a degree."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public boolean getFoundFlag() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return this.foundFlag;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaneQuah": 108,
      "zyleet": 49
    }
  },
  {
    "path": "src/main/java/exception/DukeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "package exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * DukeException Class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Nothing much"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public DukeException(String errorMessage) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        // Call constructor of parent Exception"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaneQuah": 4,
      "-": 8
    }
  },
  {
    "path": "src/main/java/javafx/ChoicesFX.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zyleet"
        },
        "content": "package javafx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zyleet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * javafx class to display choice of degrees in a tabular format in the GUI."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * Each ChoicesFX object is a degree containing only its id and degree name."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * @author Lee Zhen Yu"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * @version %I%"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * @since 1.3"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zyleet"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zyleet"
        },
        "content": "public class ChoicesFX {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private final SimpleStringProperty degree \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private final SimpleStringProperty number \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Empty constructor."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public ChoicesFX() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        this(\"\", \"\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Constructor for this ChoicesFX object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param number The numerical ID of the degree."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param degree The name of the degree."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public ChoicesFX(String number, String degree) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        setNumber(number);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        setDegree(degree);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Returns the name of the degree."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return the name of the degree as a String."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public String getDegree() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return degree.get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Sets the name of the degree in this ChoicesFX object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param input The name of the degree to be used in this ChoicesFX object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void setDegree(String input) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        degree.set(input);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Returns the numerical ID of the Choice."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Required to be used by tableview."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return The numerical ID of this ChoicesFX as a string."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public String getNumber() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return number.get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Sets the numerical ID of this ChoicesFX object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param input The numerical ID of this ChoicesFX object as a string, used in the constructor"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void setNumber(String input) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        number.set(input);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zyleet": 73
    }
  },
  {
    "path": "src/main/java/javafx/DegreesFX.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zyleet"
        },
        "content": "package javafx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * javafx class to display degree data in a tabular format in the GUI."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * Each DegreesFX object is a module with an id, a module code, a name and number of credits."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zyleet"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * @author Lee Zhen Yu"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * @version %I%"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * @since 1.3"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zyleet"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zyleet"
        },
        "content": "public class DegreesFX {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private final SimpleStringProperty number \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private final SimpleStringProperty moduleCode \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private final SimpleStringProperty moduleName \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private final SimpleStringProperty moduleCredit \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Empty constructor."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public DegreesFX() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        this(\"\", \"\", \"\", \"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Constructor method for module data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Takes in important data to be displayed in the table view degreesView."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param number The numerical ID of the module."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param moduleCode The module code."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param moduleName The name of the module."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param moduleCredit The number of modular credits this module is worth as a string."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public DegreesFX(String number, String moduleCode, String moduleName, String moduleCredit) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        setNumber(number);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        setModuleCode(moduleCode);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        setModuleName(moduleName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        setModuleCredit(moduleCredit);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Returns the numerical ID of the module."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Required to be used by tableview."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return The numerical ID of the module as a string."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public String getNumber() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return number.get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Sets the numerical ID of this DegreesFX object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param input The numerical ID of this module as a string, used in the constructor"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void setNumber(String input) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        number.set(input);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Returns the module code of the module."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Required to be used by tableview."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return The module code of the module as a string."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return moduleCode.get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Sets the module code of this DegreesFX object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param input The module code of this module as a string, used in the constructor"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void setModuleCode(String input) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        moduleCode.set(input);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Returns the modular credits of the module."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Required to be used by tableview."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return The modular credits of the module as a string."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public String getModuleCredit() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return moduleCredit.get();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Sets the modular credit of this DegreesFX object"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param input The modular credit of this module as a string, used in the constructor"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void setModuleCredit(String input) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        moduleCredit.set(input);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Returns the name of the module."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Required to be used by tableview."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return The name of the module as a string."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public String getModuleName() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return moduleName.get();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Sets the name of this DegreesFX object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param input The name of this module as a string, used in the constructor"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void setModuleName(String input) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        moduleName.set(input);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zyleet": 120
    }
  },
  {
    "path": "src/main/java/javafx/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "package javafx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Lee Zhen Yu"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * @version %I%"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * @since 1.0"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends HBox {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Constructor that creates a dialog box containing text of the poster."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * The dimensions and settings of this dialog box is imported from an fxml file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param text The text to be shown in the dialog box"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private DialogBox(String text) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        //displayPicture.setImage(img);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Method to get and display a text and in a dialog box."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is used to get the input of the user."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param text The user input to be shown."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return A dialog box containing the text to be displayed in the GUI"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public static DialogBox getUserDialog(String text) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        var db \u003d new DialogBox(text);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Method to get and display text in a dialog box."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is used for responses from JavaFX.Main.Duke."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param text JavaFX.Main.Duke\u0027s response to user input."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return A flipped dialog box containing JavaFX.Main.Duke\u0027s response"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public static DialogBox getDukeDialog(String text) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        var db \u003d new DialogBox(text);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return db;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaneQuah": 4,
      "-": 69,
      "zyleet": 13
    }
  },
  {
    "path": "src/main/java/javafx/DiffFX.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zyleet"
        },
        "content": "package javafx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * javafx class to display degree data in a tabular format in the GUI."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * Each row will have 2 modules being compared against each other."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * Each module will display its module code, name and credits, for a total of 6 columns for each DiffFX object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zyleet"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * @author Lee Zhen Yu"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * @version %I%"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * @since 1.3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zyleet"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zyleet"
        },
        "content": "public class DiffFX {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private final SimpleStringProperty moduleCode1 \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private final SimpleStringProperty moduleName1 \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private final SimpleStringProperty moduleCredit1 \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Empty constructor."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public DiffFX() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        this(\"\", \"\", \"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Constructor for this DiffFX object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * It takes in 3 parameters from 1 module, and is used to display side by side another module with 3 parameters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param moduleCode1 The module code of the first module."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param moduleName1 The name of the first module."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param moduleCredit1 The number of credits the first module has."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public DiffFX(String moduleCode1, String moduleName1, String moduleCredit1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        setModuleCode1(moduleCode1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        setModuleName1(moduleName1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        setModuleCredit1(moduleCredit1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Returns the module code of the first module."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Required to be used by tableview."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return The module code of the module as a string."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public String getModuleCode1() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return moduleCode1.get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Sets the module code of this first module in this DegreesFX object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param input The module code of the first module as a string, used in the constructor"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void setModuleCode1(String input) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        moduleCode1.set(input);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Returns the modular credits of the first module."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Required to be used by tableview."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return The modular credits of the first module as a string."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public String getModuleCredit1() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return moduleCredit1.get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Sets the modular credit of the first module of this DegreesFX object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param input The modular credit of the first module as a string, used in the constructor."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void setModuleCredit1(String input) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        moduleCredit1.set(input);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Returns the name of the first module."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Required to be used by tableview."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return The name of the first module as a string."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public String getModuleName1() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return moduleName1.get();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Sets the name of the first module of this DegreesFX object."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param input The name of the first module as a string, used in the constructor."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void setModuleName1(String input) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        moduleName1.set(input);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zyleet": 97
    }
  },
  {
    "path": "src/main/java/javafx/Launcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "package javafx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A launcher class to workaround classpath issues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Lee Zhen Yu"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * @version %I%"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * @since 1.0"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(Main.class, args);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaneQuah": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/javafx/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "package javafx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import main.Duke;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A GUI for JavaFX.Main.Duke using FXML."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Lee Zhen Yu"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * @version %I%"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * @since 1.0"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    private Duke duke \u003d new Duke(\"save.txt\", \"savedegree.txt\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Main() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor to initialize the main window of the GUI."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * The settings are loaded from an fxml file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param stage The stage class"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            AnchorPane ap \u003d fxmlLoader.load();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            Scene scene \u003d new Scene(ap);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(scene);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            stage.setTitle(\"DEGREES.NUS\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.show();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (IOException | DukeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "manaswini05": 1,
      "KaneQuah": 3,
      "-": 42,
      "zyleet": 8
    }
  },
  {
    "path": "src/main/java/javafx/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "package javafx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import degree.DegreeManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import impl.org.controlsfx.autocompletion.AutoCompletionTextFieldBinding;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import impl.org.controlsfx.autocompletion.SuggestionProvider;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import javafx.scene.control.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import list.DegreeList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import main.Duke;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import module.ConjunctiveModule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import module.ModuleList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import module.NonDescriptive;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zyleet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * Controller for JavaFX.MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": " *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * @author Lee Zhen Yu"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * @version %I%"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * @since 1.0"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zyleet"
        },
        "content": "public class MainWindow extends AnchorPane {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Label diffDegreeLabel1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Label diffDegreeLabel2;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private TableView\u003cTaskFX\u003e taskView;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private TableView\u003cChoicesFX\u003e choicesView;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private TableView\u003cDegreesFX\u003e degreesView;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private TableView\u003cDiffFX\u003e diffView1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private TableView\u003cDiffFX\u003e diffView2;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private TableView\u003cSimiFX\u003e simiView;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private GridPane gridPane;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Tab tabTask;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Tab tabChoices;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Tab tabDegrees;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Tab tabDiff;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private DegreeList degreeList;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private DegreeManager degreeManager;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private ModuleList moduleList;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private boolean typoFlag;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Set\u003cString\u003e autoSuggestion \u003d new HashSet\u003c\u003e(Arrays.asList(\"list\", \"detail\", \"help\", \"todo\", \"delete\", \"clear\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            \"add\", \"swap\", \"bye\", \"replace\", \"undo\", \"redo\", \"sort\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private SuggestionProvider\u003cString\u003e provider \u003d SuggestionProvider.create(autoSuggestion);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private ObservableList\u003cTaskFX\u003e dataTask;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private ObservableList\u003cChoicesFX\u003e dataChoices;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private ObservableList\u003cDegreesFX\u003e dataDegrees;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private ObservableList\u003cDiffFX\u003e dataDiff1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private ObservableList\u003cDiffFX\u003e dataDiff2;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private ObservableList\u003cSimiFX\u003e dataSimi;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void initialize() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Method that runs when duke GUI is started up."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * It does not take any input from the terminal yet, and does not output to the terminal either."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param d The duke helper that is going to be initialized"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    //This method initializes duke"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void setDuke(Duke d) throws DukeException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        duke \u003d d;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        new AutoCompletionTextFieldBinding\u003c\u003e(this.userInput, provider);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        String logo \u003d \"  _____  ______ _____ _____  ______ ______  _____  _   _ _    _  _____ \\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \" |  __ \\\\|  ____/ ____|  __ \\\\|  ____|  ____|/ ____|| \\\\ | | |  | |/ ____|\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \" | |  | | |__ | |  __| |__) | |__  | |__  | (___  |  \\\\| | |  | | (___  \\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \" | |  | |  __|| | |_ |  _  /|  __| |  __|  \\\\___ \\\\ | . ` | |  | |\\\\___ \\\\ \\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \" | |__| | |___| |__| | | \\\\ \\\\| |____| |____ ____) || |\\\\  | |__| |____) |\\n\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \" |_____/|______\\\\_____|_|  \\\\_\\\\______|______|_____(_)_| \\\\_|\\\\____/|_____/ \\n\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        String welcome \u003d logo +\"\\n\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        String greeting;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        if (duke.reminder().isEmpty()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            greeting \u003d \"What would you like to do?\\n\\n\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            greeting \u003d duke.reminder() + \"\\n\\n\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        welcome +\u003d greeting;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                DialogBox.getDukeDialog(welcome)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        );"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        this.dataTask \u003d taskView.getItems();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        this.dataChoices \u003d choicesView.getItems();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        this.taskList \u003d duke.getTaskList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        this.degreeList \u003d duke.getDegreeList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        this.degreeManager \u003d duke.getDegreesManager(); //gets the entire degree manager from duke, only done once"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        String countString;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        for (int i \u003d 0; i \u003c this.taskList.size(); i++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            Task newTask \u003d this.taskList.get(i);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            countString \u003d Integer.toString(i + 1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            if (i \u003c\u003d 8) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                countString \u003d \"0\" + countString;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            this.dataTask.add(new TaskFX(countString, newTask.getStatusIcon(), newTask.getType(),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    newTask.getDescription(), newTask.getDueDate()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        for (int i \u003d 0; i \u003c this.degreeList.size(); i++) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            String newChoice \u003d this.degreeList.get(i);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            countString \u003d Integer.toString(i + 1);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            if (i \u003c\u003d 8) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                countString \u003d \"0\" + countString;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            this.dataChoices.add(new ChoicesFX(countString, newChoice));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing JavaFX.Main.Duke\u0027s"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * reply and then appends them to the dialog container."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Clears the user input after processing."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Also changes the tables in the GUI after every user input, assuming there are changes."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private void handleUserInput() throws DukeException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        typoFlag \u003d false;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        String input \u003d userInput.getText();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        String response \u003d duke.run(input);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                DialogBox.getUserDialog(input),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                DialogBox.getDukeDialog(response)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        );"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        typoFlag \u003d duke.getTypoFlag();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        //Learn new auto suggestions based on user inputs, and do not learn typos"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        if (!autoSuggestion.contains(input) \u0026\u0026 (!typoFlag)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            autoSuggestion.add(input);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            provider.clearSuggestions();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            provider.addPossibleSuggestions(autoSuggestion);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        this.taskList \u003d duke.getTaskList();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        this.degreeList \u003d duke.getDegreeList();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        boolean degreeFoundFlag \u003d degreeManager.getFoundFlag();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        this.dataTask.clear();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        this.dataChoices.clear();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        String countString;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        for (int i \u003d 0; i \u003c this.taskList.size(); i++) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            Task newTask \u003d this.taskList.get(i);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            countString \u003d Integer.toString(i + 1);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            if (i \u003c\u003d 8) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                countString \u003d \"0\" + countString;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            this.dataTask.add(new TaskFX(countString, newTask.getStatusIcon(), newTask.getType(),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    newTask.getDescription(), newTask.getDueDate()));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        for (int i \u003d 0; i \u003c this.degreeList.size(); i++) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            String newChoice \u003d this.degreeList.get(i);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            countString \u003d Integer.toString(i + 1);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            if (i \u003c\u003d 8) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                countString \u003d \"0\" + countString;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            this.dataChoices.add(new ChoicesFX(countString, newChoice));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        //Forces a tab to open corresponding to the list being displayed"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        if (input.matches(\"list\")) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            tabPane.getSelectionModel().select(tabTask);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } else if (input.matches(\"choices\")) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            tabPane.getSelectionModel().select(tabChoices);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } else if (input.equals(\"bye\")) { //If user wants to end program, create a separate thread with a timer to exit"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            // delay \u0026 exit on other thread"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            new Thread(() -\u003e {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    Thread.sleep(3000);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                } catch (InterruptedException ex) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                System.exit(0);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            }).start();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } else { //Now for commands with multiple words"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            Scanner temp \u003d new Scanner(input);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            String command \u003d temp.next();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            if (command.matches(\"detail\") \u0026\u0026 (!typoFlag) \u0026\u0026 (degreeFoundFlag)) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                this.dataDegrees \u003d degreesView.getItems();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                tabPane.getSelectionModel().select(tabDegrees);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                if (temp.hasNext()) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    this.dataDegrees.clear();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    String degreeName \u003d temp.next();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    tabDegrees.setText(\"Degree Information: \" + this.degreeManager.getFullDegreeName(degreeName)); //use these to change the degree tab name"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    List\u003cModule\u003e moduleList \u003d new ArrayList\u003c\u003e(this.degreeManager.getModuleList(degreeName).getModules());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    moduleList.add(new NonDescriptive(\"General Education Modules\", 20));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    Collections.sort(moduleList);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    int count \u003d 0;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    for(Module mod: moduleList) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        count++;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        countString \u003d Integer.toString(count);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        if (count \u003c\u003d 9) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            countString \u003d \"0\" + countString;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        String mcString \u003d Integer.toString(mod.getMc());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        if (mcString.length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            mcString \u003d \"0\" + mcString;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        //for standard modules"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        if (mod.getClass() \u003d\u003d Module.class) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            this.dataDegrees.add(new DegreesFX(countString, mod.getCode(), mod.getName(),"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    mcString));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        } else if (mod.getClass() \u003d\u003d NonDescriptive.class) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            //Non descriptive class has no module code, but the moduleCode property contains the name"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            this.dataDegrees.add(new DegreesFX(countString, \"-\", mod.getCode(),"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    mcString));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        } else if (mod.getClass() \u003d\u003d ConjunctiveModule.class) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            this.dataDegrees.add(new DegreesFX(countString, mod.getCode(), mod.getFullModuleName(),"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    mcString));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            } else if (command.matches(\"compare\") \u0026\u0026 (!typoFlag) \u0026\u0026 (degreeFoundFlag)) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                this.dataDiff1 \u003d diffView1.getItems();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                this.dataDiff2 \u003d diffView2.getItems();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                this.dataSimi \u003d simiView.getItems();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                tabPane.getSelectionModel().select(tabDiff);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                if (temp.hasNext()) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    dataDiff1.clear();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    dataDiff2.clear();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    dataSimi.clear();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    String[] split \u003d temp.nextLine().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    String degreeName1 \u003d split[1];"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    String degreeName2 \u003d split[2];"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    ModuleList ModuleList1 \u003d this.degreeManager.getModuleList(degreeName1);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    ModuleList ModuleList2 \u003d this.degreeManager.getModuleList(degreeName2);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    ModuleList diffModuleList2 \u003d this.degreeManager.getModuleList(degreeName2).getDifference(ModuleList1);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    ModuleList diffModuleList1 \u003d this.degreeManager.getModuleList(degreeName1).getDifference(ModuleList2);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    ModuleList simiModuleList \u003d this.degreeManager.getModuleList(degreeName2).getSimilar(ModuleList1);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    List\u003cModule\u003e diffModuleData1 \u003d new ArrayList\u003c\u003e(diffModuleList1.getModules());"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    List\u003cModule\u003e diffModuleData2 \u003d new ArrayList\u003c\u003e(diffModuleList2.getModules());"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    List\u003cModule\u003e simiModuleData \u003d new ArrayList\u003c\u003e(simiModuleList.getModules());"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    simiModuleData.add(new NonDescriptive(\"General Education Modules\", 20));"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    Collections.sort(diffModuleData1);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    Collections.sort(diffModuleData2);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    Collections.sort(simiModuleData);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    diffDegreeLabel1.setText(this.degreeManager.getFullDegreeName(degreeName1));"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    diffDegreeLabel2.setText(this.degreeManager.getFullDegreeName(degreeName2));"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    //For similar modules"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    for(Module mod: simiModuleData) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        String mcString \u003d Integer.toString(mod.getMc());"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        if (mcString.length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            mcString \u003d \"0\" + mcString;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        //for standard modules"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        if (mod.getClass() \u003d\u003d Module.class) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            this.dataSimi.add(new SimiFX(mod.getCode(), mod.getName(),"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    mcString));"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        } else if (mod.getClass() \u003d\u003d NonDescriptive.class) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            //Non descriptive class has no module code, but the moduleCode property contains the name"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            this.dataSimi.add(new SimiFX(\"-\", mod.getCode(),"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    mcString));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        } else if (mod.getClass() \u003d\u003d ConjunctiveModule.class) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            this.dataSimi.add(new SimiFX(mod.getCode(), mod.getFullModuleName(),"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    mcString));"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    //For first module differs"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    for(Module mod: diffModuleData1) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        String mcString \u003d Integer.toString(mod.getMc());"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        if (mcString.length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            mcString \u003d \"0\" + mcString;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        //for standard modules"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        if (mod.getClass() \u003d\u003d Module.class) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            this.dataDiff1.add(new DiffFX(mod.getCode(), mod.getName(),mcString));"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        } else if (mod.getClass() \u003d\u003d NonDescriptive.class) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            //Non descriptive class has no module code, but the moduleCode property contains the name"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            this.dataDiff1.add(new DiffFX(\"-\", mod.getCode(), mcString));"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        } else if (mod.getClass() \u003d\u003d ConjunctiveModule.class) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            this.dataDiff1.add(new DiffFX(mod.getCode(), mod.getFullModuleName(), mcString));"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    //For second module differs"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    for(Module mod: diffModuleData2) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        String mcString \u003d Integer.toString(mod.getMc());"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        if (mcString.length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            mcString \u003d \"0\" + mcString;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        //for standard modules"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        if (mod.getClass() \u003d\u003d Module.class) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            this.dataDiff2.add(new DiffFX(mod.getCode(), mod.getName(),mcString));"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        } else if (mod.getClass() \u003d\u003d NonDescriptive.class) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            //Non descriptive class has no module code, but the moduleCode property contains the name"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            this.dataDiff2.add(new DiffFX(\"-\", mod.getCode(), mcString));"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        } else if (mod.getClass() \u003d\u003d ConjunctiveModule.class) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            this.dataDiff2.add(new DiffFX(mod.getCode(), mod.getFullModuleName(), mcString));"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaneQuah": 8,
      "zyleet": 381
    }
  },
  {
    "path": "src/main/java/javafx/SimiFX.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zyleet"
        },
        "content": "package javafx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * javafx class to display degree data in a tabular format in the GUI."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * Each module will display its module code, name and credits, for only 3 columns in a SimiFX object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zyleet"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * @author Lee Zhen Yu"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * @version %I%"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * @since 1.3"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zyleet"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zyleet"
        },
        "content": "public class SimiFX {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private final SimpleStringProperty moduleCode \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private final SimpleStringProperty moduleName \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private final SimpleStringProperty moduleCredit \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Empty constructor."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public SimiFX() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        this(\"\", \"\", \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Constructor for this SimiFX object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * It takes in 3 parameters from 1 module that is common between both modules being compared."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param moduleCode The module code of the first module."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param moduleName The name of the first module."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param moduleCredit The number of credits the first module has."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public SimiFX(String moduleCode, String moduleName, String moduleCredit) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        setModuleCode(moduleCode);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        setModuleName(moduleName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        setModuleCredit(moduleCredit);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Returns the module code of the first module."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Required to be used by tableview."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return The module code of the module as a string."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return moduleCode.get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Sets the module code of this first module in this DegreesFX object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param input The module code of the first module as a string, used in the constructor"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void setModuleCode(String input) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        moduleCode.set(input);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Returns the modular credits of the module."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Required to be used by tableview."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return The modular credits of the module as a string."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public String getModuleCredit() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return moduleCredit.get();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Sets the modular credit of the module of this DegreesFX object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param input The modular credit of the module as a string, used in the constructor."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void setModuleCredit(String input) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        moduleCredit.set(input);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Returns the name of the first module."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Required to be used by tableview."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return The name of the first module as a string."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public String getModuleName() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return moduleName.get();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Sets the name of the module of this DegreesFX object."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param input The name of the module as a string, used in the constructor."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void setModuleName(String input) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        moduleName.set(input);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zyleet": 97
    }
  },
  {
    "path": "src/main/java/javafx/TaskFX.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zyleet"
        },
        "content": "package javafx;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zyleet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * javafx class to display task data in a tabular format in the GUI."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * Each TaskFX object is a task with names, status, type, description and optional deadline."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * @author Lee Zhen Yu"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * @version %I%"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * @since 1.3"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zyleet"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zyleet"
        },
        "content": "public class TaskFX {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private final SimpleStringProperty number \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private final SimpleStringProperty isDone \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private final SimpleStringProperty taskType \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private final SimpleStringProperty description \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private final SimpleStringProperty deadline \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Empty constructor method."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public TaskFX() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        this(\"\", \"\", \"\", \"\", \"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Constructor method for task data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Takes in important data to be displayed in the table view taskView"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param number The numerical ID of the task as a string."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param isDone The status of the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param taskType The type of task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param deadline The deadline of the task, if there is any."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public TaskFX(String number, String isDone, String taskType, String description, String deadline) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        setNumber(number);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        setIsDone(isDone);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        setTaskType(taskType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        setDeadline(deadline);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        setDescription(description);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Returns the numerical ID of the task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Required to be used by tableview."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return The numerical ID of the task as a string."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public String getNumber() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return number.get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Sets the numerical ID of this TaskFX object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param input The numerical ID of this task as a string, used in the constructor"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void setNumber(String input) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        number.set(input);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Returns the status of the task."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Required to be used by tableview."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return The status of the task as a string."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public String getIsDone() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return isDone.get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Sets the status of this TaskFX object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param input The status of this task as a string, used in the constructor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void setIsDone(String input) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        isDone.set(input);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Returns the task type of the task."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Required to be used by tableview."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return The task type of the task as a string."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public String getTaskType() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return taskType.get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Sets the task type of this TaskFX object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param input The task type of this task as a string, used in the constructor"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void setTaskType(String input) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        taskType.set(input);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Returns the description of the task."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Required to be used by tableview."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return The description of the task as a string."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return description.get();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Sets the description of this TaskFX object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param input The description of this task as a string, used in the constructor"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void setDescription(String input) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        description.set(input);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Returns the deadline of the task."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Required to be used by tableview."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return The deadline of the task as a string."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return deadline.get();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Sets the deadline of this TaskFX object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param input The deadline of this task as a string, used in the constructor"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void setDeadline(String input) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        deadline.set(input);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zyleet": 140
    }
  },
  {
    "path": "src/main/java/list/DegreeList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "package list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zyleet"
        },
        "content": "public class DegreeList implements Serializable, Cloneable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    private static ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    static int i \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    public static ArrayList\u003cString\u003e getDegrees(){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    //private static final String filename \u003d \"../data/savedegree.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public DegreeList(){}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * Fetches current size of ArrayList."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @return long size of ArrayList"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Method to facilitate the deep cloning of this taskList."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Returns a copy of this taskList, but with different references."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * This is to avoid shallow copying, which will also modify the saved state of the taskList."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return A copy of this taskList with different references to objects."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public DegreeList deepClone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            //Serialization of object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            ByteArrayOutputStream byteOutputStream \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            ObjectOutputStream objectOutputStream \u003d new ObjectOutputStream(byteOutputStream);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            objectOutputStream.writeObject(this);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            //De-serialization of object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            ByteArrayInputStream byteInputStream \u003d new ByteArrayInputStream(byteOutputStream.toByteArray());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            ObjectInputStream objectInputStream \u003d new ObjectInputStream(byteInputStream);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            return (DegreeList) objectInputStream.readObject();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (IOException | ClassNotFoundException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            System.out.println(e.getLocalizedMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * Out of Bounds checker."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @param request int The index to be checked if it exists"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @return boolean true if within range, false if not"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    private boolean isOutOfRange(int request) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        return ((request \u003c 0) || (request \u003e\u003d this.size()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Method to add a degree to degree list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Does not output anything to the user, used mostly for backend processes."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param input The degree to be added to the degree list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void add(String input) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        list.add(input); //Straightforward and quiet method to add degrees, for backend stuffs"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Method to add a degree to degree list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * User-friendly method to display the degree added."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param input The degree as specified by the user."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @throws DukeException The degree does not exist?"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void add_custom(String input, Storage storage) throws DukeException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        list.add(input);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        System.out.print(\"Added \" + input + \" to your choice of degrees.\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Displays the degree specified by the user."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param index The position of the degree in the degree list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return The degree in the degree list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @throws DukeException Throws when degree is not found within the degree list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public String get(int index) throws DukeException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        if (!this.isOutOfRange(index)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            return this.list.get(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            throw new DukeException(\"Requested Degree not found within degree list\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    public String conversion(int request) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        String imp \u003d list.get(request);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        return imp;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Method to delete a particular degree from the degree list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param input The degree to be deleted"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @throws DukeException Throws an error if the degree does not exist."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    public void delete(String input, DegreeListStorage dd) throws DukeException{"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            int request \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            request -\u003d 1;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            if (isOutOfRange(request)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                throw new DukeException(\"The index was not found within range\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                String imp \u003d conversion(request);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                System.out.println(\"Noted. I\u0027ve removed this degree:\\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                        + \"  \" + list.get(request));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                //dd.processing(imp);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                this.list.remove(request);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                System.out.println(\"Now you have \" + this.list.size() + \" degrees you are interested in.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            throw new DukeException(e.getLocalizedMessage());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            throw new DukeException(\"That is NOT a valid integer\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Method to print out the entire list of degrees for the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    public void print() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        if (list.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            System.out.println(\"Whoops, there doesn\u0027t seem to be anything here at the moment\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            for(int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                System.out.println((i+1) + \". \" + list.get(i));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * Method to swap two degrees."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * The user can input 2 indices to rank 2 degrees based on his order of preference."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @param input"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @param dd DegreeList Storage makes changes in the text file"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    public void swap(String input, DegreeListStorage dd) throws DukeException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        String[] split \u003d input.split(Parser.swap);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        if(split.length \u003c 3) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            throw new DukeException(\"Please mention both the indices to swap the degrees\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        } else if(split.length \u003e 3) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            throw new DukeException(\"Too many arguments\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        } else if (split.length \u003d\u003d 3){"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                String first_index \u003d split[0];"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                String second_index \u003d split[2];"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                int request \u003d Integer.parseInt(first_index);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                //String degree \u003d list.get(request - 1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                int request1 \u003d Integer.parseInt(second_index);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                //String degree1 \u003d list.get(request1 - 1);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                Collections.swap(list, request - 1, request1 - 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                System.out.println(\"Swap complete!\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "//            try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "//                //dd.work(degree, Integer.toString(request1 - 1));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "//            } catch (IOException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "//                e.printStackTrace();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "//            try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "//               // dd.work(degree1, Integer.toString(request - 1));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "//            } catch (IOException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "//                e.printStackTrace();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Deletes the entire degree list."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        list.clear();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "manaswini05": 116,
      "KaneQuah": 3,
      "zyleet": 77
    }
  },
  {
    "path": "src/main/java/list/DegreeListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "package list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import java.nio.charset.Charset;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "public class DegreeListStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    private static final String filename \u003d \"../data/savedegree.txt\"; //text file that stores all the information"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    File file \u003d new File(filename);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    ArrayList\u003cString\u003e list \u003d DegreeList.getDegrees();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    private static List\u003cString\u003e lines;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    UpdateFile upd \u003d new UpdateFile();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    List\u003cPair\u003cString, Integer\u003e\u003e store \u003d new ArrayList\u003cPair\u003cString, Integer\u003e\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * The method reads the text file upon launching Duke."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * The Degreelist of the user is then updated based on the rank each degree is given by the user/"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    public void ReadFile(List\u003cString\u003e st) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        for(int i \u003d 0; i \u003c st.size(); i++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            String[] data \u003d st.get(i).split(\"-\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            if (data[0].equals(\"degree\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                if(data.length \u003c 4) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                    store.add(new Pair\u003cString, Integer\u003e(data[1], Integer.parseInt(data[2])));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        store.sort(new Comparator\u003cPair\u003cString, Integer\u003e\u003e() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            public int compare(Pair\u003cString, Integer\u003e o1, Pair\u003cString, Integer\u003e o2) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                if (o1.getValue() \u003c o2.getValue()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                    return -1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                } else if (o1.getValue().equals(o2.getValue())) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                    return 0; // You can change this to make it then look at the"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                    //words alphabetical order"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                    return 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        for(int i \u003d 0; i \u003c store.size(); i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            list.add(store.get(i).getKey());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * The method deletes an item from the text file if the user wishes to remove a degree."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @param imp"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @return newLines"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    public static List\u003cString\u003e AddRemoved(String imp) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        List\u003cString\u003e newLines \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        for(String line: lines){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            String [] vals \u003d line.split(\"-\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            if(vals[1].equals(imp)){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                    newLines.add(vals[0] + \"-\" + vals[1] +  \"-\" + vals[2] + \"-\" + \"REMOVED\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                newLines.add(line);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        return newLines;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * The method calls the AddRemoved function in order to delete the item from the text file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @param imp"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    public void processing(String imp) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        lines \u003d Files.readAllLines(file.toPath(), Charset.defaultCharset());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        AddRemoved(imp); //the description of the task is passed onto the AddRemoved method which has been described above."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        Files.write(file.toPath(), AddRemoved(imp), Charset.defaultCharset());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        int index \u003d list.indexOf(imp);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        for(int i \u003d index + 1; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            upd.reduce_index(list.get(i));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "      }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        //System.out.print(index);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * The method updates the index of the degrees in the text file"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @param degree"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @return newLines"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    public static List\u003cString\u003e Swap(String degree, String index) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        List\u003cString\u003e newLines \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        for(String line: lines){"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            String [] vals \u003d line.split(\"-\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            if(vals[1].equals(degree)){"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                newLines.add(vals[0] + \"-\" + vals[1] +  \"-\" + index);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                newLines.add(line);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        return newLines;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * The method calls the Swap function in order to update the text file with the indices of the degrees post swapping."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @param degree"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    public void work(String degree, String index) throws IOException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        lines \u003d Files.readAllLines(file.toPath(), Charset.defaultCharset());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        Swap(degree, index);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        Files.write(file.toPath(), Swap(degree, index), Charset.defaultCharset());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "manaswini05": 128
    }
  },
  {
    "path": "src/main/java/list/MyClass.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "package list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "public class MyClass {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    String x;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    String y;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    public MyClass(String x, String y) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        this.x \u003d x;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        this.y \u003d y;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    public String getX() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        return x;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    public String getY() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        return y;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "manaswini05": 18
    }
  },
  {
    "path": "src/main/java/list/UpdateFile.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "package list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import java.nio.charset.Charset;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import java.util.AbstractList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "public class UpdateFile {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    private static final String filename \u003d \"../data/savedegree.txt\"; //text file that stores all the information"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    File file \u003d new File(filename);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    private static List\u003cString\u003e lines;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    private static ArrayList\u003cString\u003e list \u003d DegreeList.getDegrees();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * The method changes the value of the ranks of the degrees after a degree has been removed from the list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @param degree"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @return newLines"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    private static List\u003cString\u003e changeValueOf(String degree){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        List\u003cString\u003e newLines \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        for(String line: lines){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            String [] vals \u003d line.split(\"-\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            if(vals[1].equals(degree)){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                int newVal \u003d Integer.parseInt(vals[2]) - 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                newLines.add(vals[0] + \"-\" + vals[1] + \"-\" + newVal);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                newLines.add(line);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        return newLines;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    private static List\u003cString\u003e swapValue(String degree){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        List\u003cString\u003e newLines \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        for(String line: lines){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            String [] vals \u003d line.split(\"-\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            if(vals[1].equals(degree)){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                int newVal \u003d Integer.parseInt(vals[2]) - 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                newLines.add(vals[0] + \"-\" + vals[1] + \"-\" + newVal);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                newLines.add(line);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        return newLines;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * The method calls changeValueof function to write to the text file the new index of the degrees post removal of a degree."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @param degree"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    public void reduce_index(String degree) throws IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            lines \u003d Files.readAllLines(file.toPath(), Charset.defaultCharset());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            changeValueOf(degree);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            Files.write(file.toPath(), changeValueOf(degree), Charset.defaultCharset());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "manaswini05": 68
    }
  },
  {
    "path": "src/main/java/main/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "package main;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import degree.Degree;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import degree.DegreeManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import list.DegreeList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import list.DegreeListStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woblek"
        },
        "content": "import task.UniversityTaskHandler;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import list.DegreeList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zyleet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * The JavaFX.Main.Duke class inherits methods from Applications and allows it to be called by another class."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * It is no longer the main class, but rather it will initialize the parameters, save files and all other classes"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * not related to the GUI."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * It also acts as a liaison between the GUI and the terminal, as it will echo whatever is in the terminal to"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * the GUI."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zyleet"
        },
        "content": " *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * @author Lee Zhen Yu"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * @version %I%"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": " * @since 1.0"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zyleet"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": "public class Duke extends Application {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private DegreeManager degreesManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private TaskList myList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private UI ui;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Parser parse;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    private DegreeList lists;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private Map\u003cString, List\u003cString\u003e\u003e degrees \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private Map\u003cString, Degree\u003e degreeInfo \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private ArrayList\u003cString\u003e mydegrees \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "woblek"
        },
        "content": "    private UniversityTaskHandler universityTaskHandler \u003d new UniversityTaskHandler();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    private DegreeListStorage DegreeListStorage \u003d new DegreeListStorage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private CommandList commandList \u003d new CommandList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Boolean typoFlag;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public ArrayList\u003cString\u003e getTasks() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        return mydegrees;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * The constructor that is called when the GUI is starting up."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * It will initialise all the classes related to the management of user input and save data."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Its output will go to the terminal, which will then be echoed to the UI.UI as daduke."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Its initialization requires the file path of the save file in order to save the task data."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param filePath The file path of the save file."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    //Method to initialize all important classes and data on startup"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    public Duke(String filePath, String another_filePath) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        ui \u003d new UI(); //initialize ui class that handles input from user"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        this.storage \u003d new Storage(filePath, another_filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            myList \u003d new TaskList(storage.getTaskList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            myList \u003d new TaskList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            degreesManager \u003d new DegreeManager(this.storage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            degreesManager \u003d new DegreeManager();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            System.out.println(e.getLocalizedMessage());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            System.out.println(\"Degree Information Failed to Load, please contact Administrator\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            universityTaskHandler.loadDegreeTasks(storage.fetchListOutput(\"degreeTasks\")); //loads information from degreeTasks.txt"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            System.out.println(e.getLocalizedMessage());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        this.lists \u003d new DegreeList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        DegreeListStorage.ReadFile(storage.fetchListOutput(\"savedegree\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public String reminder() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        PrintStream ps \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        // IMPORTANT: Save the old System.out!"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        PrintStream old \u003d System.out;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        // Tell Java to use your special stream"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        System.setOut(ps);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        myList.printReminders();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        // Put things back"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        System.out.flush();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        System.setOut(old);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        // Show what happened"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        //System.out.println(output.toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Method to run the JavaFX.Main.Duke program."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return the string to be printed by JavaFx"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    //method output initial reading of save file"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public String run(String line) throws DukeException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        typoFlag \u003d false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        PrintStream ps \u003d new PrintStream(output);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        PrintStream old \u003d System.out;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.setOut(ps);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            Scanner temp \u003d new Scanner(line);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            String command;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            if (!temp.hasNext()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                throw new DukeException(\"Empty Command!\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                command \u003d temp.next();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            if (command.matches(\"undo\")) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                commandList.undo();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                this.myList \u003d commandList.getTaskList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                this.lists \u003d commandList.getDegreeLists();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            } else if (command.matches(\"redo\")) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                commandList.redo();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                this.myList \u003d commandList.getTaskList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                this.lists \u003d commandList.getDegreeLists();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                Command c \u003d Parser.parse(line);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                if ((c.getClass() \u003d\u003d AddCommand.class) | (c.getClass() \u003d\u003d ModCommand.class)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        | (c.getClass() \u003d\u003d SortCommand.class) | (c.getClass() \u003d\u003d SwapCommand.class)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    commandList.addCommand(c, this.myList, this.ui, this.storage, this.lists, this.degreesManager, line);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                } else if ((c.getClass() \u003d\u003d BadCommand.class) || c.getClass() \u003d\u003d null) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    typoFlag \u003d true; //when the user enters a command not understood by the program, trigger flag"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    c.execute(this.myList, this.ui, this.storage, this.lists, this.degreesManager);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    c.execute(this.myList, this.ui, this.storage, this.lists, this.degreesManager);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (DukeException | NullPointerException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            ui.showError(e.getLocalizedMessage());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            ui.showLine();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            System.out.flush();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            System.setOut(old);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            System.out.println(output.toString());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "woblek"
        },
        "content": "        ui.showWelcome(this.myList);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                String line \u003d ui.readCommand();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                Command c \u003d Parser.parse(line);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                c.execute(this.myList, this.ui, this.storage, this.lists, this.degreesManager);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            } catch (DukeException | NullPointerException e) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                ui.showError(e.getLocalizedMessage());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                ui.showLine();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Method to run the duke program with the file path of the save file."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * To be overwritten."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param args A duke program."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        new Duke(\"save.txt\", \"savedegree.txt\").run();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Method to be overwritten in the JavaFX.Main class."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param stage The stage object to be initialized, done in the JavaFX.Main class."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    // This entire start method is to be overwritten by the start method in JavaFX.Main"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Method to return the current task list in duke, for use in javafx"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return the task list to be used by javafx"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public TaskList getTaskList() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return this.myList;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Method to return the current choices of degree list in duke, for use in javafx"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return the choices of degrees list to be used by javafx"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public DegreeList getDegreeList() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return this.lists;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Method to check if the most recent input has a type and thus the command is not accepted"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return the flag to javafx to check for user typos"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public Boolean getTypoFlag () {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return this.typoFlag;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Method to return the degree information stored in duke, for use in javafx"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return the degree manager storing the degree information, of use in javafx"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public DegreeManager getDegreesManager () {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return this.degreesManager;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "woblek": 3,
      "manaswini05": 12,
      "KaneQuah": 80,
      "zyleet": 148
    }
  },
  {
    "path": "src/main/java/module/ConjunctiveModule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "package module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * Conjunctive Modules indicate that they are Modules of a standard type which can be used to complement each other"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * EG CEG Requirements: CG3207 OR CS3230"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * Explanation: Fulfilling either of these 2 counts towards \"fulfilling both\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "public class ConjunctiveModule extends Module {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private Map\u003cString, String\u003e modules \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private String fullModuleName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Conjuctive Modules are those linked together as either or requirements"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Fulfilling any one of them is equivalent to fulfilling the MCs allocated to them"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param input String of modules separated by \" OR \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param mc is the credit amount of a module"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public ConjunctiveModule(String input, Integer mc)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.mc \u003d mc;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        this.fullModuleName \u003d input;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        String[] split \u003d input.split(\"\\\\s+OR\\\\s+\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        for(String full: split)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            Scanner temp \u003d new Scanner(full);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            String code \u003d temp.next();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            String name \u003d temp.nextLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            name \u003d name.strip();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            modules.put(code, name);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            temp.close();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns the codes tagged to the conjunctive modules, separated by |"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return String of codes separated by |"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String getCode(){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        StringBuilder list \u003d new StringBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        for(Map.Entry\u003cString,String\u003e entry : modules.entrySet()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            String key \u003d entry.getKey();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            list.append(key).append(\"|\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        list.setLength(Math.max(list.length() - 1, 0));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return list.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Gets the string to be printed with a fixed width"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param setWidth the width the string should be fixed to"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return the String to be printed"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String getPrint(int setWidth) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        StringBuilder module \u003d new StringBuilder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        for(Map.Entry\u003cString,String\u003e entry : modules.entrySet()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            String key \u003d entry.getKey();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            String value \u003d entry.getValue();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            module.append(key).append(\" \").append(value).append(\" OR \");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        module.setLength(Math.max(module.length() - 4, 0));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(module.length() \u003e setWidth - 5) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            module.setLength(setWidth - 9);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            module.append(\"...  \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            char[] pad \u003d new char[Math.max(setWidth - module.length() - 4, 0)];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            Arrays.fill(pad, \u0027 \u0027);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            module.append(pad);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        module.append(getMc());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        while(module.length() \u003c setWidth)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            module.append(\" \");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return module.toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns the module\u0027s Name for the side tab"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return String which is the module name"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String tabModuleName() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        StringBuilder list \u003d new StringBuilder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        for(Map.Entry\u003cString,String\u003e entry : modules.entrySet()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            String value \u003d entry.getValue();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            list.append(value).append(\" OR \");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        list.setLength(Math.max(list.length() - 4, 0));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return list.toString();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns the view friendly version consisting of the module code and name separated by OR"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return String in the fashion described above"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void print()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        StringBuilder list \u003d new StringBuilder();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        for(Map.Entry\u003cString,String\u003e entry : modules.entrySet()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            String key \u003d entry.getKey();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            String value \u003d entry.getValue();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            list.append(key).append(\" \").append(value).append(\" OR \");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        list.setLength(Math.max(list.length() - 4, 0));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        char[] pad \u003d new char[Parser.windowWidth - list.length() - 4];"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        Arrays.fill(pad, \u0027 \u0027);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        list.append(pad);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        list.append(getMc());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(list.toString());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Returns both names of conjunctive modules in one string"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return the names of both conjunctive modules as a string"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public String getFullModuleName() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return this.fullModuleName;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaneQuah": 130,
      "zyleet": 11
    }
  },
  {
    "path": "src/main/java/module/Module.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "package module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * Basic Module class which expects a Module Code of type [A-Z]{2,3}[1-9]([0-9]{3}|X{3})[A-Z]{0,1}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * Example CS2113T, CS2101, MSE1102"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "public class Module implements Comparable\u003cModule\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    String code \u003d \"\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private String name \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    Integer mc \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Default module constructor"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    Module() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Normal module constructor accepts 2 strings which indicate the code and the name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param code String is the [A-Z]{2,3}[1-9]([0-9]{3}|X{3})[A-Z]{0,1} code"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param name String is the official name of the modules"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param mc is the credit amount of a module"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public Module(String code, String name, Integer mc)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.mc \u003d mc;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Outputs the user friendly view for people to know which module is it"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Follows default Parser screen width"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return String containing the module\u0027s code then its human friendly name, separated by a space"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String getPrint()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        StringBuilder module \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        module.append(getCode());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        module.append(\" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        module.append(getName());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(module.length() \u003e Parser.windowWidth - 4) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            module.setLength(Parser.windowWidth - 8);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            module.append(\"... \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            char[] pad \u003d new char[Math.max(Parser.windowWidth - module.length() - 4, 0)];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            Arrays.fill(pad, \u0027 \u0027);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            module.append(pad);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        module.append(getMc());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        while(module.length() \u003c Parser.windowWidth)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            module.append(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return module.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Gets the string to be printed with a fixed width"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param setWidth the width the string should be fixed to"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return the String to be printed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String getPrint(int setWidth) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        StringBuilder module \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        module.append(getCode());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        module.append(\" \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        module.append(getName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(module.length() \u003e setWidth - 5) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            module.setLength(setWidth - 9);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            module.append(\"...  \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            char[] pad \u003d new char[Math.max(setWidth - module.length() - 4, 0)];"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            Arrays.fill(pad, \u0027 \u0027);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            module.append(pad);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        module.append(getMc());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        while(module.length() \u003c setWidth)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            module.append(\" \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return module.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void print()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(getPrint());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns the module\u0027s Name for the side tab"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return String which is the module name"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String tabModuleName() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return this.getName();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns the module\u0027s code"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return string which is the module\u0027s code"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String tabModuleCode() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return this.getCode();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns the code of the module"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return String that is the module\u0027s code"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String getCode(){"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return this.code;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns the name of a module"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return String that is the human friendly name of the module"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public String getName(){"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns the credits allocated to the module"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return Integer that is the credits allocated to the module"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public Integer getMc()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return mc;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns the comparable version of this module"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return String which contains the module\u0027s code"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return this.getCode();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Compares between another object (preferably module) to determine if they are equivalent"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Criteria of comparison is preferably their code names"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * In the case of NonDescriptive Module, their code and mc value"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param obj is the object to be compared"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return true if it is a match (allowing conjunctive modules to be equivalent to a singular module)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(obj instanceof Module)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            return this.toString().equals(obj.toString());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        else"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Compare 2 modules based on their module code"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param other is the other module to be compared to"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return A negative integer, zero, or a positive integer as this module"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *          is less than, equal to, or greater than the supplied module object."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public int compareTo(Module other)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return this.getCode().compareTo(other.getCode());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Returns the full name of the modules."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * To be overwritten in the ConjunctiveModule class."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return The full name of this module."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public String getFullModuleName() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return this.getName();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaneQuah": 182,
      "zyleet": 12
    }
  },
  {
    "path": "src/main/java/module/ModuleList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "package module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "public class ModuleList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private Set\u003cModule\u003e modList \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private int sum \u003d 0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Default Module List constructor"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public ModuleList()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Creates a new Module List using an existng Set of Modules"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param list is a Set of Modules"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private ModuleList(Set\u003cModule\u003e list)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.modList \u003d new TreeSet\u003c\u003e(list);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        for(Module x: modList)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            this.sum +\u003d x.getMc();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Function to add a Module to the Module List"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param wry is a Module"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void add (Module wry)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(!this.modList.contains(wry)){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            modList.add(wry);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            this.updateSum(wry.getMc());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void add(ModuleList other)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        for(Module x: other.getModules())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            this.add(x);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Fetches the set of modules in the ModuleList"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return Set\u003cModule\u003e is the current set of Modules in the ModuleList"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public Set\u003cModule\u003e getModules()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return this.modList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Compares this ModuleList with the other ModuleList, returns similar modules as a ModuleList"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * the pair contains the difference for the calling object, then the compared object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param other is the other ModuleList to be compared to"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return ModuleList containing similar modules"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public ModuleList getSimilar(ModuleList other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        Set\u003cModule\u003e intersection \u003d new HashSet\u003c\u003e(other.getModules());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        intersection.retainAll(this.getModules());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return new ModuleList(intersection);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns the a Set of Modules from the Module List which are not in the set of modules to be compared;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param other is the the other ModuleList to be compared to"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return the set of modules which belong to this ModuleList but are not in the other ModuleList"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public ModuleList getDifference(ModuleList other)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        ModuleList subset \u003d this.getSimilar(other);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        Set\u003cModule\u003e difference \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        for(Module temp: this.getModules())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            if(!subset.getModules().contains(temp))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                difference.add(temp);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return new ModuleList(difference);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns the total number of MCs in the Module List"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return sum of the modules in the ModuleList List\u003cModule\u003e data structure"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public int getSum()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return this.sum;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Increases the current mc count by the amount given"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @params mc is the amount for the sum to be increased by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private void updateSum(int mc)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.sum +\u003d mc;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Prints out all modules in the list"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Follows maximum screen width"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void print()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        for(Module x: this.modList)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            x.print();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Prints out all modules in the list"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Follows maximum screen width"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void printCentral(int setWidth)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        for(Module x: this.modList)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            int padLen \u003d (Parser.windowWidth - setWidth)/2;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            char[] pad \u003d new char[padLen];"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            Arrays.fill(pad, \u0027 \u0027);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            String module \u003d x.getPrint(setWidth);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            StringBuilder line \u003d new StringBuilder();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            line.append(pad);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            line.append(module);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            while(line.length() \u003c Parser.windowWidth)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                line.append(\" \");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            System.out.println(line.toString());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return this.modList.size();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaneQuah": 152,
      "zyleet": 5
    }
  },
  {
    "path": "src/main/java/module/NonDescriptive.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "package module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * Constructs the NonDescriptive module which does not use the conventional code"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * It can be used as a placeholder to indicate other modular credit requirements"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * EG: Industrial Attachment, Technical Electives"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "public class NonDescriptive extends Module {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Constructs the NonDescriptive module which does not use the conventional code"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * It can be used as a placeholder to indicate other modular credit requirements"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * EG: Industrial Attachment, Technical Electives"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param input String indicating the name used as a code"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param mcs the credit bearing value tagged to it;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public NonDescriptive(String input, Integer mcs)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.code \u003d input;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.mc \u003d mcs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns the module\u0027s Name for the side tab"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return String which is the module name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String tabModuleName() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return this.getCode();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns the module\u0027s code"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return string which is the module\u0027s code"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String tabModuleCode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return \"-\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns the code and the allocated mc value"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return String in the form of code [MC]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return this.getCode() + \" \" + this.getMc();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaneQuah": 53
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import command.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * Parser class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * Handles Raw Input and determines if it is a valid command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * If not a valid command, it will return a BadCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zyleet"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public static String deadline \u003d \"\\\\s*/by\\\\s*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public static String event \u003d \"\\\\s*/at\\\\s*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public static String recurring \u003d \"\\\\s*/every\\\\s*\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public static String after \u003d \"\\\\s*/after\\\\s*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public static String within \u003d \"\\\\s*/between\\\\s*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public static String fixed \u003d \"\\\\s*/need\\\\s*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public static String taskSeparator \u003d \"\\\\s*\\\\|\\\\s*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public static String dateSeparator \u003d \"\\\\s*\\\\\u0026\\\\s*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public static String postpone \u003d \"\\\\s*/to\\\\s*\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    public static String swap \u003d \"\\\\s*\\\\s*\\\\s*\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public static String newLine \u003d \"\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public static int windowWidth \u003d 80;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public static String acceptedExtensions \u003d \"txt|csv\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public static String moduleFormat \u003d \"[A-Z]{2,3}[1-9]([0-9]{3}|X{3})[A-Z]{0,1}\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    Parser() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns the appropiate command based on line input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param line String which is the next line of input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return Command is of the appropriate type."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @throws DukeException throws when incorrect number of arguments passed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public static Command parse(String line) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        Scanner temp \u003d new Scanner(line);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        if (!temp.hasNext()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            throw new DukeException(\"Empty Command!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        String command \u003d temp.next();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        if (command.matches(\"list|bye|choices\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            if (temp.hasNextLine()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                throw new DukeException(command + \" should not have any other arguments (whitespace acceptable)\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                if (command.matches(\"list\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                    return new PrintCommand(command) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    };"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                } else if (command.matches(\"bye\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    return new ExitCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                } else if (command.matches(\"choices\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    return new PrintCommand(command);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } else if (command.matches(\"help\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            if (!temp.hasNextLine()) { //if the user wants to display all commands"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                return new HelpCommand(command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            } else { //if the user wants to display help for only one command"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                String input \u003d temp.nextLine();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                input \u003d input.strip();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                if (input.matches(\"help|detail|compare|add|degreelist|swap|replace|delete|clear|custom\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        + \"|bye|undo|redo\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    return new HelpCommand(command, input);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    throw new DukeException(\"I do not understand that command. \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            + \"Type \\\"help\\\" for a full list of available commands\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } else if (command.matches(\"todo|deadline|event|done|delete|find|select|recurring|after|within|fixed\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                + \"|snooze|schedule|add|remove|swap|sort|detail|compare\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            if (!temp.hasNextLine() \u0026\u0026 command.matches(\"detail\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                throw new DukeException(\"You can try \\\" detail come \\\" to show information on Computer Engineering!\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            } else if (!temp.hasNextLine() \u0026\u0026 command.matches(\"compare\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                throw new DukeException(\"You can try \\\" compare bme come \\\" to show differences between \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        + \"Biomedical Engineering and Computer Engineering!\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            } else if (!temp.hasNextLine()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of a \" + command + \" cannot be empty.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                String input \u003d temp.nextLine();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            input \u003d input.strip();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            //System.out.println(\"input is\" + input + \"\\nCommand is\" + command);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            if (input.isBlank()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                throw new DukeException(\"OOPS!!! The description of a \" + command + \" cannot be empty.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                //add new tasks"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                if (command.matches(\"todo|deadline|event|recurring|after|within|fixed|add\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    return new AddCommand(command, input);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                } else if (command.matches(\"done|delete|select|snooze|remove\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    return new ModCommand(command, input);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                } else if (command.matches(\"find|schedule\")) { //reading task list"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                    return new SearchCommand(command, input);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                } else if (command.matches(\"detail|compare\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    return new PrintCommand(command, input);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                } else if (command.matches(\"swap\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                    return new SwapCommand(command, input);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "woblek"
        },
        "content": "                } else if (command.matches(\"sort\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "woblek"
        },
        "content": "                    return new SortCommand(command, input);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return new BadCommand(\"bad\", \"\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woblek": 3,
      "manaswini05": 9,
      "KaneQuah": 46,
      "zyleet": 50
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import degree.Degree;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import javafx.util.Pair;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import list.DegreeList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "import main.Duke;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.nio.charset.Charset;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.nio.file.DirectoryStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zyleet"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * Storage class"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * Looks for file in certain folder to be parsed,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * then it is opened, same file is overwritten."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * @author Kane Quah"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * @since 08/19"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private File saveFile;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    private File another_saveFile;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private String saveFileString;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    private String another_saveFileString;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private String input \u003d \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    private String another_input \u003d \"\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    private final Path folder \u003d Paths.get(\"../data/\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    private final String folderName \u003d \"../data/\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    //private final Path folder \u003d Paths.get(\"..\\\\data\\\\\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    //private final String folderName \u003d \"..\\\\data\\\\\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private HashMap\u003cString, List\u003cString\u003e\u003e data \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private HashMap\u003cString, String\u003e readable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private List\u003cString\u003e fileNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private List\u003cPair\u003cString, String\u003e\u003e errorList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Constructs storage class with the target file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param filePath is name of save file as a string"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    public Storage(String filePath, String another_FilePath) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            if(filePath.isBlank()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                throw new DukeException(\"Save File Must be specified\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            if(another_FilePath.isBlank()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                throw new DukeException(\"Save File Must be specified\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            if(validateFile(filePath)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                throw new DukeException(\"Invalid File Name\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            if (validateFile(another_FilePath)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                throw new DukeException(\"Invalid File Name\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            setSaveFile(filePath, another_FilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            System.out.println(e.getLocalizedMessage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            System.out.println(\"Initializing save.txt\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        finally"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            if(input.isBlank()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                setSaveFile(\"save.txt\", \"savedegree.txt\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            load();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            System.out.println(e.getLocalizedMessage());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Sets up a save file for the lists of tasks"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param file is the name of the save file"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    private void setSaveFile(String file, String another_file)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.input \u003d file.substring(0, file.indexOf(\u0027.\u0027));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        this.another_input \u003d another_file.substring(0, file.indexOf(\u0027.\u0027));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.saveFileString \u003d folderName + file;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        this.another_saveFileString \u003d folderName + another_file;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.saveFile \u003d new File(saveFileString);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        this.another_saveFile \u003d new File(another_saveFileString);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * This method reads the folder."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void load() throws DukeException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        try (DirectoryStream\u003cPath\u003e directoryStream \u003d Files.newDirectoryStream(folder)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            for (Path path : directoryStream) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                String file \u003d path.toString().substring(folderName.length());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                //System.out.println(\"reading... \" + file);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                if(validateFile(file))"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    errorList.add(new Pair\u003c\u003e(file, \"Invalid File Type\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                String read \u003d file.substring(0, file.lastIndexOf(\u0027.\u0027));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                if(readable.containsKey(read))"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    errorList.add(new Pair\u003c\u003e(file, \"Same File Name with Different Extension detected\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                readable.put(read, path.toString());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                fileNames.add(read);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                //System.out.println(path.toString());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"Error Reading Files\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        for (String file : fileNames) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                // put the file\u0027s name and its content into the data structure"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                System.out.print(readable.get(file));System.out.println(\" +\" + file);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                List\u003cString\u003e lines \u003d Files.readAllLines(folder.resolve(readable.get(file)), StandardCharsets.UTF_8);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                data.put(file, lines);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                System.out.println(\"success for \" + file);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Finds the string if it exists"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Concatenates all the strings in the list with a new line between them, then returns the string"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param key is a String related to the data"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return single String with newline chars separating each string in the list"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private String getLineOutput(String key)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(data.containsKey(key))"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            for(String lines: data.get(key))"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                result \u003d result.concat(lines);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                result \u003d result.concat(\"\\n\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Fetches the list of strings which represent the output"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param key is a String related to the data"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return list of strings which is the data linked to they key or null"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public List\u003cString\u003e fetchListOutput(String key)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return data.getOrDefault(key, null);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * This method overwrites the file."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * It overwrites using the data stored in TaskList currently"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void store(TaskList list) throws DukeException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        try (BufferedWriter bufferedWriter \u003d new BufferedWriter(new FileWriter(this.saveFile))) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                String fileContent \u003d list.get(i).getType() + \" | \""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                        + (list.get(i).checkCompletion() ? \"1\" : \"0\") + \" | \" + list.get(i).getDescription();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                if (list.get(i).getType().matches(\"D|E\")) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    fileContent +\u003d \" | \" + list.get(i).getDueDate();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                } else if (list.get(i).getType().matches(\"R|A|W|F\")) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    fileContent +\u003d \" | \" + list.get(i).getAfter();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                bufferedWriter.write(fileContent);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                bufferedWriter.newLine();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } catch (IOException | DukeException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"Storage Attempt Failed\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "   * Adds a degree to storage"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "   *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "   * @params degrees"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "   * @throws DukeException"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "   */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void add_degrees(DegreeList degrees) throws DukeException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        ArrayList\u003cString\u003e degree_list \u003d degrees.getDegrees();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        try(BufferedWriter bw \u003d new BufferedWriter(new FileWriter(this.another_saveFile))) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            for(int i \u003d 0; i \u003c degree_list.size(); i++) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                String fileContent \u003d \"degree-\"+degree_list.get(i)+\"-\"+i;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                bw.write(fileContent);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                bw.newLine();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            throw new DukeException(\"Storage failed\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "  /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "   * Valid File Name checker"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "   *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "   * @returns true if the file name is valid"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "   */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private boolean validateFile (String file) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(file.isBlank()) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            //throw new DukeException(\"File Name cannot be blank\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(file.indexOf(\u0027.\u0027, file.indexOf(\u0027.\u0027) + 1) !\u003d -1) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            //throw new DukeException(\"File Name should not contain multiple dots\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if(file.lastIndexOf(\u0027.\u0027) \u003d\u003d -1 || file.lastIndexOf(\u0027.\u0027) \u003d\u003d file.length() - 1) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            //throw new DukeException(\"File Name has no extension\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return !file.substring(file.lastIndexOf(\u0027.\u0027) + 1).matches(Parser.acceptedExtensions);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            //throw new DukeException(\"File should be of extensions: \" + Parser.acceptedExtensions.replace(\"|\", \", \"));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns TaskList in expected format"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return returns an empty string if not initialized or the tasklist with \u0027\\n\u0027 chars separating"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String getTaskList() { return getLineOutput(input);}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "manaswini05": 39,
      "KaneQuah": 189,
      "zyleet": 20
    }
  },
  {
    "path": "src/main/java/task/After.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class After extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private String type \u003d \"A\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private String following;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Event initialization from String containing description and prerequisite."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String which contains description and prerequisite"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException DukeException thrown when invalid number of arguments are passed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public After(String description) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] split \u003d description.split(Parser.after);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        if (split.length \u003c 2) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"I threw exception\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Please use /after to indicate what needs to be done before doing this task\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } else if (split.length \u003e 2) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Too many /after in String\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            this.description \u003d split[0];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            this.following \u003d split[1];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            this.isDone \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Overloaded constructor which reads in a task from file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param bool        String should be 1 or 0, describes if the Task is done or not"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String contains description of Task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param following   String contains what needs to be done first before this task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public After(String bool, String description, String following) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woblek"
        },
        "content": "//        this.description \u003d description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woblek"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.following \u003d following;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d (1 \u003d\u003d Integer.parseInt(bool));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns Task in print friendly format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String which contains Task Type icon, status and Description and prerequisite if any"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public String toList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return \"[A][\" + this.getStatusIcon() + \"] \" + this.getDescription()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                + \" (After: \" + this.following + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns type of Task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String consisting of a single Letter (for now)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return \"A\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns the prerequisite of the task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return String containing prerequisite of the task defined by the user"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String getAfter() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return this.following;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "woblek": 2,
      "KaneQuah": 23,
      "-": 46,
      "zyleet": 4
    }
  },
  {
    "path": "src/main/java/task/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a class that inherits from the Task class."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * In addition to its parent\u0027s methods, it also has the ability to parse the input date."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Very similar to the myTasks.Event class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Lee Zhen Yu"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * @version %I%"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * @since 1.0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String type \u003d \"D\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Deadline initializes from String containing description and Date."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String which contains description and date"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException DukeException thrown when invalid number of arguments are passed"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Deadline(String description) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] split \u003d description.split(Parser.deadline);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if (split.length \u003c 2) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Please use /by to indicate date\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } else if (split.length \u003e 2) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Too many /by in String\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            this.description \u003d split[0];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            this.readDate(split[1]);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            this.isDone \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woblek"
        },
        "content": "            this.assignPriority();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Overloaded constructor which reads in a task from file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param bool        String should be 1 or 0, describes if the Task is done or not"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String contains description of Task"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param dueDate     String contains the date in correct format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Deadline(String bool, String description, String dueDate) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.readDate(dueDate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d (1 \u003d\u003d Integer.parseInt(bool));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "woblek"
        },
        "content": "        this.assignPriority();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns Task in print friendly format."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String which contains Task Type icon, status and Description and DueDate if any"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String toList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return \"[D][\" + this.getStatusIcon() + \"] \" + this.getDescription()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \" (By: \" + this.getDueDate() + \")\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * sets a new due date for the deadline task."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param postponeDetails is the details of the postponing."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @throws DukeException throws errors when format is incorrect."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public void snooze(String postponeDetails) throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] split \u003d postponeDetails.split(Parser.postpone);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if (split.length \u003c 2) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Please use /to to indicate date\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } else if (split.length \u003e 2) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Too many /to in String\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            this.readDate(split[1]);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns type of Task."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String consisting of a single Letter (for now)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return \"D\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woblek": 3,
      "KaneQuah": 29,
      "-": 61,
      "zyleet": 1
    }
  },
  {
    "path": "src/main/java/task/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private String type \u003d \"E\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Event initialization from String containing description and Date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String which contains description and date"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException DukeException thrown when invalid number of arguments are passed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public Event(String description) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] split \u003d description.split(Parser.event);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        //String[] split1 \u003d description.split(\" \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        if (split.length \u003c 2) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Please use /at to indicate date\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            this.isDone \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            this.description \u003d split[0];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            this.readDate(Arrays.copyOfRange(split, 1, split.length));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woblek"
        },
        "content": "            this.assignPriority();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        /*        else if (split.length \u003e 2) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"Too many /at in String\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Overloaded constructor which reads in a task from file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param bool        String should be 1 or 0, describes if the Task is done or not"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String contains description of Task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param dueDate     String contains the date in correct format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Event(String bool, String description, String dueDate) throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.readDate(dueDate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d (1 \u003d\u003d Integer.parseInt(bool));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woblek"
        },
        "content": "        this.assignPriority();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns Task in print friendly format."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String which contains Task Type icon, status and Description and DueDate if any"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String toList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return \"[E][\" + this.getStatusIcon() + \"] \" + this.getDescription()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \" (At: \" + this.getDueDate() + \")\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * sets a new date for the due date."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param postponeDetails are details of when to postpone."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @throws DukeException throws when details are incorrect."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public void snooze(String postponeDetails) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] split \u003d postponeDetails.split(Parser.postpone);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if (split.length \u003c 2) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Please use /to to indicate date\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } else if (split.length \u003e 2) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Too many /to in String\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            this.readDate(split[1]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns type of Task."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String consisting of a single Letter (for now)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return \"E\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woblek": 3,
      "KaneQuah": 29,
      "-": 53,
      "zyleet": 1
    }
  },
  {
    "path": "src/main/java/task/Fixed.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Fixed extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private String type \u003d \"F\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private String duration;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Event initialization from String containing description and duration."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String which contains description and duration"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException DukeException thrown when invalid number of arguments are passed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public Fixed(String description) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] split \u003d description.split(Parser.fixed);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        if (split.length \u003c 2) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"I threw exception\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            throw new DukeException(\"Please use /need to indicate the duration needed to complete this task\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } else if (split.length \u003e 2) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Too many /need in String\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            this.description \u003d split[0];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            this.duration \u003d split[1];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            this.isDone \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Overloaded constructor which reads in a task from file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param bool        String should be 1 or 0, describes if the Task is done or not"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String contains description of Task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param duration     String contains duration for the task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public Fixed(String bool, String description, String duration) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woblek"
        },
        "content": "//        this.description \u003d description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woblek"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d (1 \u003d\u003d Integer.parseInt(bool));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns Task in print friendly format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String which contains Task Type icon, status and Description and duration of task"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public String toList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return \"[F][\" + this.getStatusIcon() + \"] \" + this.getDescription()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                + \" (Need: \" + this.duration + \")\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns type of Task."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String consisting of a single Letter (for now)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return \"F\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns the time needed to complete this task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return String containing the duration needed as defined by the user"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String getAfter() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return this.duration;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "woblek": 3,
      "KaneQuah": 23,
      "-": 43,
      "zyleet": 7
    }
  },
  {
    "path": "src/main/java/task/Recurring.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Recurring extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private String type \u003d \"R\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private String frequency;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Event initialization from String containing description and frequency."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String which contains description and frequency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException DukeException thrown when invalid number of arguments are passed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public Recurring(String description) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] split \u003d description.split(Parser.recurring);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        if (split.length \u003c 2) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"I threw exception\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            throw new DukeException(\"Please use /every to indicate frequency of task\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } else if (split.length \u003e 2) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Too many /every in String\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            this.description \u003d split[0];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            this.frequency \u003d split[1];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            this.isDone \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Overloaded constructor which reads in a task from file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param bool        String should be 1 or 0, describes if the Task is done or not"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String contains description of Task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param frequency   String contains the frequency of this recurring task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Recurring(String bool, String description, String frequency) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woblek"
        },
        "content": "//        this.description \u003d description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woblek"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.frequency \u003d frequency;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d (1 \u003d\u003d Integer.parseInt(bool));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns Task in print friendly format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String which contains Task Type icon, status and Description and frequency if any"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public String toList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return \"[R][\" + this.getStatusIcon() + \"] \" + this.getDescription()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                + \" (Every: \" + this.frequency + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns type of Task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String consisting of a single Letter (for now)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return \"R\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Return the frequency of this task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String consisting of the user input"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String getAfter() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return this.frequency;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woblek": 2,
      "KaneQuah": 23,
      "-": 45,
      "zyleet": 4
    }
  },
  {
    "path": "src/main/java/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woblek"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * Task class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * Base class which determines what kind of data a Task should hold."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * @author Kane Quah"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * @since 08/2019"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zyleet"
        },
        "content": "public class Task implements Serializable {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    String description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean isDone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woblek"
        },
        "content": "    Integer taskPriority;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    //protected String dueDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date dueDate \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cDate\u003e tentativeDates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static DateFormat dateFormatter \u003d new SimpleDateFormat(\"dd-MM-yyyy HHmm\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static DateFormat dateFormatter_event \u003d new SimpleDateFormat(\"dd-MM-yyyy HHmm-HHmm\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Task initialization with string as input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String containing description information"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "woblek"
        },
        "content": "        this.taskPriority \u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Empty Task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Get the prerequisite of the task as defined by the user."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * To be overwritten by the After, Recurring, Within and Duration class"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAfter() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Attempts to parse date and input it as Date type."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date String which is in Date format"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException DukeException thrown when dateFormatter parsing fails"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    void readDate(String date) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            String[] split \u003d date.split(Parser.dateSeparator);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            if (split.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                this.dueDate \u003d dateFormatter.parse(date);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                this.readDate(split);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Error! Please enter date in the format DD-MM-YYYY 2359.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            //throw new DukeException(\"Please use DDD format for date\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Attempts to parse dates and input it as Array of Date."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param input String Array which shall be in Date format"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException DukeException thrown when dateFormatter parsing fails"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    void readDate(String[] input) throws DukeException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            if (input.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                readDate(input[0]);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                for (int i \u003d 0; i \u003c input.length; i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.tentativeDates.add(dateFormatter.parse(input[i]));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } catch (ParseException | DukeException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Error! Please enter date in the format DD-MM-YYYY 2359.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            //throw new DukeException(\"Please use DDD format for date\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * checks if tentative Dates exist."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true is it does else false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public boolean tentativeExists() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return !this.tentativeDates.isEmpty();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Clears ArrayList of Tentative Dates."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    void clearTentative() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tentativeDates.clear();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Changes the task\u0027s Date to newDate."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param newDate is the new dueDate of the Task"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    void changeDueDate(Date newDate) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        this.dueDate \u003d newDate;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns status icon."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String which is a status icon in unicode format"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return (isDone ? \"Y\" : \"N\"); //return Y or N"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Marks Task as Done, if Task is already done, throw exception."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException DukeException warns the use that the Task has already been done"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    void markDone() throws DukeException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if (this.isDone) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"But good sir, this task is already done!\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            this.isDone \u003d true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * empty method for overriding of child."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param snoozeDetails describes snooze."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @throws DukeException throws when snooze Details are incorrect."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "woblek"
        },
        "content": "    void snooze(String snoozeDetails) throws DukeException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns true/false type based on whether Task has been marked done."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return boolean describing if Task is Done"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public boolean checkCompletion() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns description."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String description"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns converted Date type into String."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String Date as per Date format"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDueDate() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if (this.dueDate !\u003d null) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            return dateFormatter.format(this.dueDate);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } else if (!this.tentativeDates.isEmpty()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            StringBuilder dates \u003d new StringBuilder();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            dates.append(dateFormatter.format(this.tentativeDates.get(0)));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            for (int i \u003d 1; i \u003c this.tentativeDates.size(); i++) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                dates.append(\" OR \").append(dateFormatter.format(this.tentativeDates.get(i)));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            return dates.toString();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public void setTaskPriority(Integer taskPriority) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "woblek"
        },
        "content": "        this.taskPriority \u003d taskPriority;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public Integer getTaskPriority() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "woblek"
        },
        "content": "        return taskPriority;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public void assignPriority(){"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "woblek"
        },
        "content": "        Integer daysAway \u003d (int)getDifferenceDays(this.dueDate);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "woblek"
        },
        "content": "        if (daysAway \u003c\u003d 3){"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "woblek"
        },
        "content": "            this.taskPriority \u003d 7;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "woblek"
        },
        "content": "        else if(daysAway \u003c\u003d 5){"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "woblek"
        },
        "content": "            this.taskPriority \u003d 5;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "woblek"
        },
        "content": "        else if (daysAway \u003c\u003d 7){"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "woblek"
        },
        "content": "            this.taskPriority \u003d 3;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "woblek"
        },
        "content": "        else{"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "woblek"
        },
        "content": "            this.taskPriority \u003d 2;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public static long getDifferenceDays(Date d1) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "woblek"
        },
        "content": "        Date d2 \u003d new Date();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "woblek"
        },
        "content": "        long diff \u003d d2.getTime() - d1.getTime();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "woblek"
        },
        "content": "        return TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getTentativeDate(int index) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        return tentativeDates.get(index);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Out of Bounds checker."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param request int The index to be checked if it exists"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return boolean true if within range, false if not"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    boolean outsideTentative(int request) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        return ((request \u003c 0) || (request \u003e\u003d this.tentativeDates.size()));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns Task in print friendly format."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String which contains Task Type icon, status and Description and DueDate if any"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String toList() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[?][\" + this.getStatusIcon() + \"] \" + this.getDescription() + \"(on:\" + getDueDate() + \")\";"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns type of Task."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String consisting of a single Letter (for now)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return \"G\";"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woblek": 39,
      "KaneQuah": 68,
      "-": 149,
      "zyleet": 8
    }
  },
  {
    "path": "src/main/java/task/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woblek"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woblek"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woblek"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * Tasklist stores an arraylist of tasks and performs actions on tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * Actions: Modify/Remove/Add Tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * @author Kane Quah"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * @since 08/19"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": "public class TaskList implements Serializable, Cloneable {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Method to facilitate the deep cloning of this taskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Returns a copy of this taskList, but with different references."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * This is to avoid shallow copying, which will also modify the saved state of the taskList."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return A copy of this taskList with different references to objects."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public TaskList deepClone() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            //Serialization of object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            ByteArrayOutputStream byteOutputStream \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            ObjectOutputStream objectOutputStream \u003d new ObjectOutputStream(byteOutputStream);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            objectOutputStream.writeObject(this);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            //De-serialization of object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            ByteArrayInputStream byteInputStream \u003d new ByteArrayInputStream(byteOutputStream.toByteArray());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            ObjectInputStream objectInputStream \u003d new ObjectInputStream(byteInputStream);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            return (TaskList) objectInputStream.readObject();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (IOException | ClassNotFoundException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            System.out.println(e.getLocalizedMessage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Overloaded Initializer which accepts a String Parameter with data."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param input String with data separated by newline characters"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @throws DukeException DukeException Thrown when input is empty or data format is wrong"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public TaskList(String input) throws DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if (input.isBlank()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"File was blank\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        String[] splitTasks \u003d input.split(Parser.newLine);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            for (int i \u003d 0; i \u003c splitTasks.length; i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                String[] split \u003d splitTasks[i].split(Parser.taskSeparator);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                switch (split[0]) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                case \"T\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    list.add(new Todo(split[1], split[2]));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                case \"D\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    list.add(new Deadline(split[1], split[2], split[3]));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                case \"E\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    list.add(new Event(split[1], split[2], split[3]));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                case \"R\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    list.add(new Recurring(split[1], split[2], split[3]));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                case \"A\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    list.add(new After(split[1], split[2], split[3]));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                case \"W\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    list.add(new Within(split[1], split[2], split[3]));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                case \"F\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    list.add(new Fixed(split[1], split[2], split[3]));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    throw new DukeException((i + 1) + \"has incorrect task format.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            list.clear();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"Issues encountered when creating tasks, initializing empty list.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Fetches current size of ArrayList."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return long size of ArrayList"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Out of Bounds checker."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param request int The index to be checked if it exists"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return boolean true if within range, false if not"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private boolean isOutOfRange(int request) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return ((request \u003c 0) || (request \u003e\u003d this.size()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Mark a Task as Done."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param input String which should be an Int type"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @throws DukeException DukeException thrown when An incorrect type input is given"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *                       or the requested index is out of range"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void markDone(String input) throws DukeException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            int request \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            request -\u003d 1;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            if (isOutOfRange(request)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                throw new DukeException(\"The index was not found within range\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                this.list.get(request).markDone();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                        + \"  \" + this.list.get(request).toList());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(e.getLocalizedMessage());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"That is NOT a valid integer\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Sends a Task to the Shadow Realm."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param input String which should be an Int type"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @throws DukeException DukeException thrown when An incorrect type input is given"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *                       or the requested index is out of range"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void banishDelete(String input) throws DukeException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            int request \u003d Integer.parseInt(input);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            request -\u003d 1;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            if (isOutOfRange(request)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                throw new DukeException(\"The index was not found within range\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                System.out.println(\"Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                        + \"  \" + list.get(request).toList());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                this.list.remove(request);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                System.out.println(\"Now you have \" + this.list.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(e.getLocalizedMessage());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"That is NOT a valid integer\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * passes a new date into the event or deadline class."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param input User input of the command to snooze a task as a string."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @throws DukeException throws when incorrect range or format was passed."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public void snoozeTask(String input) throws DukeException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "woblek"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "woblek"
        },
        "content": "            String[] split \u003d input.split(Parser.postpone);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "woblek"
        },
        "content": "            int request \u003d Integer.parseInt(split[0]);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "woblek"
        },
        "content": "            request -\u003d 1;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "woblek"
        },
        "content": "            if (split.length \u003c 2) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "woblek"
        },
        "content": "                throw new DukeException(\"Please use /to to indicate date\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            } else if (isOutOfRange(request)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                throw new DukeException(\"The index was not found within range\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            } else if (!(list.get(request).getType().matches(\"E\") | list.get(request).getType().matches(\"D\"))) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "woblek"
        },
        "content": "                throw new DukeException(\"Only Events and Deadlines can be snoozed\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "woblek"
        },
        "content": "                this.list.get(request).snooze(input);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                System.out.println(\"Noted. I\u0027ve snoozed this task:\\n\""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                        + \"  \" + list.get(request).toList());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "woblek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "woblek"
        },
        "content": "            throw new DukeException(e.getLocalizedMessage());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "woblek"
        },
        "content": "            throw new DukeException(\"That is NOT a valid integer\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Fetches a Task from the ArrayList, given an index."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param index int index of Task within ArrayList"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return Task Task within ArrayList"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @throws DukeException DukeException thrown when Task is not found within list"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public Task get(int index) throws DukeException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if (!this.isOutOfRange(index)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            return this.list.get(index);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"Requested Task not found within list\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public ArrayList\u003cTask\u003e get() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        return this.list;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Adds another task to the list, given the inputs."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param type  String indicating what type of Task should be added"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param input raw secondary input to be processed by the method"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @throws DukeException throws when invalid add type is passed"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void add(String type, String input) throws DukeException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        Task temp;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                temp \u003d new Todo(input);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                temp \u003d new Deadline(input);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                temp \u003d new Event(input);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            case \"recurring\":"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                temp \u003d new Recurring(input);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            case \"after\":"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                temp \u003d new After(input);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            case \"within\":"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                temp \u003d new Within(input);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            case \"fixed\":"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                temp \u003d new Fixed(input);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                throw new DukeException(\"What the Hell happened here?\\n\""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        + \"Command passed successfully to tasklist.add, not found in any case\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            this.list.add(temp);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            System.out.println(\"Got it. I\u0027ve added this task:\\n  \""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    + temp.toList() + \"\\nNow you have \" + this.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(e.getLocalizedMessage());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void add(Task task) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        this.list.add(task); //Straightforward command to add a task, for backend methods"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Finds a Task if any part of its description/date matches the input."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param input String to be matches to description/date"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @throws DukeException DukeException to be thrown when errors occur somehow"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void find(String input) throws DukeException {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        ArrayList\u003cInteger\u003e foundIndex \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        for (int i \u003d 0; i \u003c this.size(); i++) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            if (this.get(i).getDescription().contains(input) || this.get(i).getDueDate().contains(input)) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                foundIndex.add(i);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if (foundIndex.isEmpty()) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            System.out.println(\"There are no matching tasks in the list\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            for (Integer k : foundIndex) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                System.out.println((k + 1) + \". \" + this.get(k).toList());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Shows the schedule if the input matches any of the dates in the tasklist."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @param input String to be matches to description/date"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     * @throws DukeException DukeException to be thrown when errors occur somehow"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    public void view_schedule(String input) throws DukeException {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        ArrayList\u003cInteger\u003e foundDate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        for (int i \u003d 0; i \u003c this.size(); i++) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            if (this.get(i).getDueDate().contains(input)) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                foundDate.add(i);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if (foundDate.isEmpty()) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            System.out.println(\"You have no tasks today. Enjoy!\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            System.out.println(\"Here\u0027s what the day looks like:\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            for (Integer d : foundDate) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                System.out.println((d + 1) + \". \" + this.get(d).toList());"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Checks if there is any event with the same start time, that could lead to a conflict."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * The AddCommand class is classified to check for such instances when the type of task is an \"Event\"."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    public void conflict_check() throws DukeException {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        ArrayList\u003cString\u003e checkConflict \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size() - 1; i++) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            checkConflict.add(list.get(i).getDueDate());"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        for (int i \u003d 0; i \u003c checkConflict.size(); i++) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            if (checkConflict.get(i).equals(list.get(list.size() - 1).getDueDate())) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                System.out.println(\"There is a conflict in the schedule!\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "            }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "manaswini05"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "manaswini05"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Prints out all tasks in list."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * If list is empty, prints out message stating that it is empty"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void print() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if (this.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            System.out.println(\"Whoops, there doesn\u0027t seem to be anything here at the moment\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            int counter \u003d 1;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            for (Task task : list) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                System.out.println(counter++ + \". \" + task.toList());"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * Prints out all deadlines and events at startup"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public void printReminders() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "woblek"
        },
        "content": "        ArrayList\u003cTask\u003e reminderList \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "woblek"
        },
        "content": "        for (Task task : list) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "woblek"
        },
        "content": "            if (task.getType().matches(\"E\")|task.getType().matches(\"D\")){"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "woblek"
        },
        "content": "                reminderList.add(task);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "woblek"
        },
        "content": "            };"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "woblek"
        },
        "content": "        if (reminderList.size() \u003e 0){"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "woblek"
        },
        "content": "            System.out.println(\"Here are your reminders for upcoming tasks:\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            for (Task task : reminderList) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                System.out.println(counter + \". \" + task.toList());"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "woblek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Selects a Task from an Event with Tentative Dates."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param input String which should contain two whitespace separated numbers."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void select(String input) throws DukeException {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        String[] split \u003d input.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if (split.length !\u003d 2) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"Incorrect number of arguments, Index + Index method expected\");"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                int index \u003d Integer.parseInt(split[0]);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                int dateIndex \u003d Integer.parseInt(split[1]);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                index -\u003d 1;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                dateIndex -\u003d 1;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                if (isOutOfRange(index)) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    throw new DukeException(\"The index was not found within task range\");"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                } else if (!list.get(index).getType().equals(\"E\")) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    throw new DukeException(\"The Task you chose is not the Event Type!\");"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                } else if (!list.get(index).tentativeExists()) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    throw new DukeException(\"There are no Tentative Slots to be chosen from\");"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                } else if (list.get(index).outsideTentative(dateIndex)) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    throw new DukeException(\"Not a valid Selection (out of range)\");"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    this.list.get(index).changeDueDate(this.list.get(index).getTentativeDate(dateIndex));"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    this.list.get(index).clearTentative();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                    System.out.println(\"Tentative Date selected successfully\");"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                throw new DukeException(e.getLocalizedMessage());"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "                throw new DukeException(\"That is NOT a valid Integer\");"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * sorts this Tasklist according to the priority of all the tasks in descending order"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public void sortPriority(){"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "woblek"
        },
        "content": "        for (int i \u003d 0 ; i \u003c this.list.size(); i++){"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "woblek"
        },
        "content": "////            if (this.list.get(i).getTaskPriority() \u003d\u003d null){"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "woblek"
        },
        "content": "////                this.list.get(i).setTaskPriority(2);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "woblek"
        },
        "content": "//                System.out.println(this.list.get(i).toList());"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "woblek"
        },
        "content": "//                System.out.println(this.list.get(i).getTaskPriority());"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "woblek"
        },
        "content": "        Collections.sort(this.list, new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "woblek"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "woblek"
        },
        "content": "            public int compare(Task o1, Task o2) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "woblek"
        },
        "content": "                return (o2.taskPriority - o1.taskPriority);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "woblek"
        },
        "content": "//                return o1.getDescription().compareTo(o2.getDescription());"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "woblek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "woblek"
        },
        "content": "        });"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"Done! Your tasks have been sorted by priority; the most important one is at the top:\\n\");"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "woblek"
        },
        "content": "        print();"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * Deletes the entire taskList."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        list.clear();"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woblek": 61,
      "manaswini05": 30,
      "KaneQuah": 265,
      "zyleet": 76
    }
  },
  {
    "path": "src/main/java/task/Todo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String type \u003d \"T\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Task initialization with string as input."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String containing description information"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Overloaded constructor which reads in a task from file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param bool        String which should be 1 or 0, describing if the Task is done or not"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String which contains description of Task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public Todo(String bool, String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d (1 \u003d\u003d Integer.parseInt(bool));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns Task in print friendly format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String which contains Task Type icon, status and Description and DueDate if any"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String toList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[T][\" + this.getStatusIcon() + \"] \" + this.getDescription();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Returns type of Task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String consisting of a single Letter (for now)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return \"T\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "KaneQuah": 15,
      "-": 30,
      "zyleet": 1
    }
  },
  {
    "path": "src/main/java/task/UniversityTaskHandler.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "woblek"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "woblek"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woblek"
        },
        "content": "import list.DegreeList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "woblek"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "woblek"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "woblek"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "woblek"
        },
        "content": "/*"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "woblek"
        },
        "content": "@@author woblek"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "woblek"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "woblek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "woblek"
        },
        "content": " * DegreeTask stores an arraylist of tasklists relevant for each degree programme"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "woblek"
        },
        "content": " * It adds all relevant tasks related to a particular degree, and puts them into the user\u0027s tasklist"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "woblek"
        },
        "content": " * it removes all tasks from the user\u0027s tasklist related to a removed degree"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "woblek"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "woblek"
        },
        "content": "public class UniversityTaskHandler {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public static ArrayList\u003cTaskList\u003e fullDegreeTasklist \u003d new ArrayList\u003cTaskList\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "woblek"
        },
        "content": "    // this map relates all the engineering programmes with an arbitrary integer"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "woblek"
        },
        "content": "    private static final Map\u003cString, Integer\u003e degreeMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "woblek"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "woblek"
        },
        "content": "        Map\u003cString, Integer\u003e aMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "woblek"
        },
        "content": "        aMap.put(\"Biomedical Engineering\", 0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "woblek"
        },
        "content": "        aMap.put(\"Chemical Engineering\", 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "woblek"
        },
        "content": "        aMap.put(\"Civil Engineering\", 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "woblek"
        },
        "content": "        aMap.put(\"Computer Engineering\", 3);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "woblek"
        },
        "content": "        aMap.put(\"Electrical Engineering\", 4);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woblek"
        },
        "content": "        aMap.put(\"Environmental Engineering\", 5);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woblek"
        },
        "content": "        aMap.put(\"Industrial Systems Engineering\", 6);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woblek"
        },
        "content": "        aMap.put(\"Mechanical Engineering\", 7);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woblek"
        },
        "content": "        aMap.put(\"Materials Science Engineering\", 8);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woblek"
        },
        "content": "        degreeMap \u003d Collections.unmodifiableMap(aMap);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * takes in a list of strings of raw .txt data from degreeTasks.txt"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * builds an arraylist of Taskslists, each with tasks related to one degree programme"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public void loadDegreeTasks(List\u003cString\u003e taskDataRaw) throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "woblek"
        },
        "content": "        if(taskDataRaw \u003d\u003d null)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "woblek"
        },
        "content": "            throw new DukeException(\"degreeTasks.txt file not found\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "woblek"
        },
        "content": "        String toTasklist \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "woblek"
        },
        "content": "        for (int i \u003d 1; i \u003c taskDataRaw.size(); i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "woblek"
        },
        "content": "            if((taskDataRaw.get(i) !\u003d null) \u0026\u0026 (!taskDataRaw.get(i).equals(\"\")) \u0026\u0026 (taskDataRaw.get(i).matches(\"^[a-zA-Z]*$\"))){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "woblek"
        },
        "content": "                TaskList thisList \u003d new TaskList(toTasklist);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "woblek"
        },
        "content": "                fullDegreeTasklist.add(thisList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "woblek"
        },
        "content": "                toTasklist \u003d \"\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "woblek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "woblek"
        },
        "content": "            else{"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "woblek"
        },
        "content": "                toTasklist \u003d toTasklist + taskDataRaw.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "woblek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * appends all the tasks associated with each degreeName to the user\u0027s main tasklist"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param degreeName"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param userTasklist"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public void addDegreeTasks (String degreeName, TaskList userTasklist) throws DukeException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "woblek"
        },
        "content": "        int n \u003d fullDegreeTasklist.get(degreeMap.get(degreeName)).size();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "woblek"
        },
        "content": "        if (n \u003c 1){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "woblek"
        },
        "content": "            throw new DukeException(\"There are no tasks related to \" + degreeName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "woblek"
        },
        "content": "        for (int i \u003d 0; i \u003c n; i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "woblek"
        },
        "content": "            Task toAppend \u003d fullDegreeTasklist.get(degreeMap.get(degreeName)).get(i);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "woblek"
        },
        "content": "            if (!isDuplicate(toAppend, userTasklist)){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "woblek"
        },
        "content": "                userTasklist.add(toAppend);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "woblek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * removes all tasks that are related to the degree programme that has been deleted"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param userDegreeList"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param userTaskList"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public void removeDegreeTasks(String index, DegreeList userDegreeList, TaskList userTaskList) throws DukeException{"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "woblek"
        },
        "content": "        String removedDegree \u003d  userDegreeList.get(Integer.parseInt(index));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "woblek"
        },
        "content": "        TaskList removedTasklist \u003d new TaskList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "woblek"
        },
        "content": "        for (int i \u003d 0; i \u003c userTaskList.size(); i++){"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "woblek"
        },
        "content": "            if (userTaskList.get(i).description.toLowerCase().contains(removedDegree)){"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "woblek"
        },
        "content": "                removedTasklist.add(userTaskList.get(i));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "woblek"
        },
        "content": "                userTaskList.banishDelete(Integer.toString(i+1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "woblek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "woblek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * returns true if the task that you are trying to add to the user\u0027s tasklist is a duplicate"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param task"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @param userTasklist"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "woblek"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "woblek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public boolean isDuplicate (Task task, TaskList userTasklist) throws DukeException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "woblek"
        },
        "content": "        if (userTasklist.size() \u003d\u003d 0){"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "woblek"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "woblek"
        },
        "content": "        for (int i \u003d 0; i \u003c userTasklist.size(); i++){"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "woblek"
        },
        "content": "            if (task.toList().equals(userTasklist.get(i).toList())){"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "woblek"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "woblek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "woblek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "woblek"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "woblek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "woblek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woblek": 117
    }
  },
  {
    "path": "src/main/java/task/Within.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Within extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private String type \u003d \"W\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private String between;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Event initialization from String containing description and task completion window."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String which contains description and task completion window"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeException DukeException thrown when invalid number of arguments are passed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public Within(String description) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] split \u003d description.split(Parser.within);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        if (split.length \u003c 2) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(\"I threw exception\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Please use /between to indicate the window to complete this task\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } else if (split.length \u003e 2) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DukeException(\"Too many /between in String\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            this.description \u003d split[0];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            this.between \u003d split[1];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            this.isDone \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overloaded constructor which reads in a task from file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param bool        String should be 1 or 0, describes if the Task is done or not"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description String contains description of Task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @param between     String contains the time window to complete this task"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Within(String bool, String description, String between) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "woblek"
        },
        "content": "//        this.description \u003d description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "woblek"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.between \u003d between;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d (1 \u003d\u003d Integer.parseInt(bool));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns Task in print friendly format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String which contains Task Type icon, status and Description and time window if any"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    public String toList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[W][\" + this.getStatusIcon() + \"] \" + this.getDescription()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" (Between: \" + this.between + \")\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns type of Task."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String consisting of a single Letter (for now)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"W\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the time window to complete this task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     * @return String containing the window as defined by the user"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAfter() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.between;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "woblek": 2,
      "KaneQuah": 10,
      "-": 59,
      "zyleet": 4
    }
  },
  {
    "path": "src/main/java/ui/UI.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "woblek"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * UI class, displays system messages."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * Collects User input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * @author Kane Quah"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * @version 1.0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " * @since 08/19"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "public class UI {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private String loadingError \u003d \"Formatting Issues Encountered. New Task List initialized\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private String line \u003d \"_______________________________________________________________________________________\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            + \"_______\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private String goodBye \u003d \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private String closeSuccess \u003d \"File successfully saved!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private String closeFail \u003d \"File failed to save\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public UI() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Displays Welcome message."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woblek"
        },
        "content": "    public void showWelcome(TaskList task) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"Hello! Welcome to Degree.NUS\\n\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woblek"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woblek"
        },
        "content": "        task.printReminders();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "woblek"
        },
        "content": "        System.out.println(\"What can I do for you?\\n\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Reads the next line, to be parsed by Parser."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @return String next line"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @throws DukeException DukeException thrown if forced to read when there is nothing"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String readCommand() throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        if (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            return sc.nextLine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            throw new DukeException(\"There are no more lines to be read\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Prints out a line of dashes."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public String showLine() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(this.line);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        return this.line;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Prints out error."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * @param error String message from error"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void showError(String error) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(error);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Prints default loading error message."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(this.loadingError);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Prints out program termination line."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void hastaLaVista() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(this.goodBye);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Closes the scanner."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        this.sc.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Informs user if files were stored successfully."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void closeSuccess() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(this.closeSuccess);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     * Informs user that files failed to store."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    public void closeFailure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        System.out.println(this.closeFail);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woblek": 6,
      "KaneQuah": 96,
      "zyleet": 2
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": "\u003cfx:root alignment\u003d\"TOP_RIGHT\" fillHeight\u003d\"false\" maxHeight\u003d\"Infinity\" prefWidth\u003d\"634.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zyleet"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"Infinity\" text\u003d\"Label\" wrapText\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            \u003cFont name\u003d\"Consolas\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zyleet"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "zyleet": 6
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zyleet"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zyleet"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": "\u003c?import javafx.scene.control.cell.PropertyValueFactory?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zyleet"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zyleet"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zyleet"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"720.0\" prefWidth\u003d\"1300.0\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\" fx:controller\u003d\"javafx.MainWindow\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"574.0\" layoutY\u003d\"678.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutY\u003d\"-2.0\" prefHeight\u003d\"680.0\" prefWidth\u003d\"650.0\" vbarPolicy\u003d\"ALWAYS\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"42.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"-2.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"634.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            \u003c/content\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"678.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"574.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        \u003cAnchorPane layoutX\u003d\"650.0\" prefHeight\u003d\"589.0\" prefWidth\u003d\"498.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"650.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                \u003cTabPane fx:id\u003d\"tabPane\" prefHeight\u003d\"720.0\" prefWidth\u003d\"650.0\" tabClosingPolicy\u003d\"UNAVAILABLE\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    \u003ctabs\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        \u003cTab fx:id\u003d\"tabTask\" text\u003d\"Tasks\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                        \u003cTableView fx:id\u003d\"taskView\" prefHeight\u003d\"690.0\" prefWidth\u003d\"650.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                            \u003ccolumns\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cTableColumn maxWidth\u003d\"32.0\" minWidth\u003d\"32.0\" prefWidth\u003d\"32.0\" resizable\u003d\"false\" text\u003d\"ID\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                        \u003cPropertyValueFactory property\u003d\"number\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cTableColumn maxWidth\u003d\"80.0\" minWidth\u003d\"80.0\" resizable\u003d\"false\" text\u003d\"Task Type\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                        \u003cPropertyValueFactory property\u003d\"taskType\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cTableColumn maxWidth\u003d\"59.0\" minWidth\u003d\"59.0\" prefWidth\u003d\"59.0\" resizable\u003d\"false\" text\u003d\"Status\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                        \u003cPropertyValueFactory property\u003d\"isDone\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cTableColumn prefWidth\u003d\"364.0\" text\u003d\"Task\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                        \u003cPropertyValueFactory property\u003d\"description\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cTableColumn prefWidth\u003d\"113.0\" text\u003d\"Deadline\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                        \u003cPropertyValueFactory property\u003d\"deadline\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                            \u003c/columns\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                            \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                            \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                        \u003c/TableView\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            \u003c/content\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        \u003cTab fx:id\u003d\"tabChoices\" text\u003d\"Degree Choices\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                        \u003cTableView fx:id\u003d\"choicesView\" prefHeight\u003d\"690.0\" prefWidth\u003d\"650.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                            \u003ccolumns\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cTableColumn maxWidth\u003d\"32.0\" minWidth\u003d\"32.0\" prefWidth\u003d\"32.0\" resizable\u003d\"false\" text\u003d\"ID\"\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                        \u003cPropertyValueFactory property\u003d\"number\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cTableColumn minWidth\u003d\"80.0\" prefWidth\u003d\"617.0\" text\u003d\"Degree\"\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                        \u003cPropertyValueFactory property\u003d\"degree\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                            \u003c/columns\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                            \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                            \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                        \u003c/TableView\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            \u003c/content\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        \u003cTab fx:id\u003d\"tabDegrees\" text\u003d\"Degree Information\"\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                        \u003cTableView fx:id\u003d\"degreesView\" prefHeight\u003d\"690.0\" prefWidth\u003d\"650.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                            \u003ccolumns\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cTableColumn maxWidth\u003d\"32.0\" minWidth\u003d\"32.0\" prefWidth\u003d\"32.0\" resizable\u003d\"false\" text\u003d\"ID\"\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                        \u003cPropertyValueFactory property\u003d\"number\" /\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cTableColumn maxWidth\u003d\"100.0\" minWidth\u003d\"100.0\" prefWidth\u003d\"100.0\" text\u003d\"Module Code\"\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                        \u003cPropertyValueFactory property\u003d\"moduleCode\" /\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cTableColumn maxWidth\u003d\"60.0\" minWidth\u003d\"60.0\" prefWidth\u003d\"60.0\" text\u003d\"Credits\"\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                        \u003cPropertyValueFactory property\u003d\"moduleCredit\" /\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cTableColumn prefWidth\u003d\"175.0\" text\u003d\"Module Name\"\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                        \u003cPropertyValueFactory property\u003d\"moduleName\" /\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                            \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                            \u003c/columns\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                            \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                            \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                        \u003c/TableView\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                            \u003c/content\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                  \u003cTab fx:id\u003d\"tabDiff\" text\u003d\"Degree Differences\"\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                              \u003cGridPane fx:id\u003d\"diffGrid\" layoutY\u003d\"342.0\" prefHeight\u003d\"350.0\" prefWidth\u003d\"650.0\" AnchorPane.bottomAnchor\u003d\"-1.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"342.0\"\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"5000.0\" minWidth\u003d\"10.0\" prefWidth\u003d\"325.0\" /\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                  \u003cRowConstraints maxHeight\u003d\"40.0\" minHeight\u003d\"40.0\" prefHeight\u003d\"40.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                  \u003cRowConstraints maxHeight\u003d\"5000.0\" minHeight\u003d\"10.0\" prefHeight\u003d\"250.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003cLabel alignment\u003d\"CENTER\" maxHeight\u003d\"40.0\" maxWidth\u003d\"5000.0\" minHeight\u003d\"40.0\" minWidth\u003d\"10.0\" prefHeight\u003d\"40.0\" prefWidth\u003d\"650.0\" text\u003d\"Similarities\" underline\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003cFont size\u003d\"28.0\" /\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003cTableView fx:id\u003d\"simiView\" prefHeight\u003d\"690.0\" prefWidth\u003d\"650.0\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003ccolumns\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003cTableColumn maxWidth\u003d\"100.0\" minWidth\u003d\"100.0\" prefWidth\u003d\"100.0\" resizable\u003d\"false\" text\u003d\"Module Code\"\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cPropertyValueFactory property\u003d\"moduleCode\" /\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003cTableColumn maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" resizable\u003d\"false\" text\u003d\"Credits\"\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cPropertyValueFactory property\u003d\"moduleCredit\" /\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003cTableColumn prefWidth\u003d\"175.0\" text\u003d\"Module Name\"\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cPropertyValueFactory property\u003d\"moduleName\" /\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003c/columns\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003c/TableView\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                              \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                              \u003cGridPane layoutY\u003d\"-1.0\" maxHeight\u003d\"40.0\" minHeight\u003d\"40.0\" prefHeight\u003d\"40.0\" prefWidth\u003d\"650.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"5000.0\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"400.0\" minWidth\u003d\"100.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"5000.0\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003cLabel alignment\u003d\"CENTER\" maxHeight\u003d\"40.0\" maxWidth\u003d\"5000.0\" minHeight\u003d\"40.0\" minWidth\u003d\"10.0\" prefHeight\u003d\"40.0\" prefWidth\u003d\"650.0\" text\u003d\"Differences\" underline\u003d\"true\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003cfont\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003cFont size\u003d\"28.0\" /\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003c/font\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003cLabel fx:id\u003d\"diffDegreeLabel2\" alignment\u003d\"CENTER_RIGHT\" maxHeight\u003d\"40.0\" maxWidth\u003d\"5000.0\" minHeight\u003d\"40.0\" minWidth\u003d\"10.0\" prefHeight\u003d\"17.0\" prefWidth\u003d\"236.0\" text\u003d\"Label\" GridPane.columnIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003cLabel fx:id\u003d\"diffDegreeLabel1\" maxHeight\u003d\"40.0\" maxWidth\u003d\"5000.0\" minHeight\u003d\"40.0\" minWidth\u003d\"10.0\" prefHeight\u003d\"17.0\" prefWidth\u003d\"241.0\" text\u003d\"Label\" /\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                              \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                              \u003cGridPane layoutY\u003d\"39.0\" prefHeight\u003d\"300.0\" prefWidth\u003d\"650.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"39.0\"\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003cTableView fx:id\u003d\"diffView1\" prefHeight\u003d\"231.0\" prefWidth\u003d\"78.0\"\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003ccolumns\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003cTableColumn maxWidth\u003d\"100.0\" minWidth\u003d\"100.0\" prefWidth\u003d\"100.0\" resizable\u003d\"false\" text\u003d\"Module Code\"\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cPropertyValueFactory property\u003d\"moduleCode1\" /\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003cTableColumn prefWidth\u003d\"175.0\" text\u003d\"Module Name\"\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cPropertyValueFactory property\u003d\"moduleName1\" /\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003cTableColumn maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" resizable\u003d\"false\" text\u003d\"Credits\"\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cPropertyValueFactory property\u003d\"moduleCredit1\" /\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003c/columns\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003c/TableView\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003cTableView fx:id\u003d\"diffView2\" prefHeight\u003d\"231.0\" prefWidth\u003d\"788.0\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003ccolumns\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003cTableColumn maxWidth\u003d\"100.0\" minWidth\u003d\"100.0\" prefWidth\u003d\"100.0\" resizable\u003d\"false\" text\u003d\"Module Code\"\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cPropertyValueFactory property\u003d\"moduleCode1\" /\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003cTableColumn prefWidth\u003d\"175.0\" text\u003d\"Module Name\"\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cPropertyValueFactory property\u003d\"moduleName1\" /\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003cTableColumn maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" resizable\u003d\"false\" text\u003d\"Credits\"\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                \u003cPropertyValueFactory property\u003d\"moduleCredit1\" /\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                             \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003c/columns\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003ccolumnResizePolicy\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                          \u003cTableView fx:constant\u003d\"CONSTRAINED_RESIZE_POLICY\" /\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                       \u003c/columnResizePolicy\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                    \u003c/TableView\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                              \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                     \u003c/content\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                  \u003c/Tab\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    \u003c/tabs\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "zyleet": 247
    }
  },
  {
    "path": "src/test/java/command/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zyleet"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import degree.DegreeManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import list.DegreeList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Command testCommand \u003d new AddCommand(\"todo\", \"Sleep\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private TaskList testTaskList \u003d new TaskList(\"T | 0 | Send even more Help\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            + \"R | 0 | Deliver Help | Day\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            + \"A | 0 | Send less help | Sending Enough\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            + \"W | 0 | Sleeping | Jan 15th and 25th\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private UI testUi \u003d new UI();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Storage testStorage \u003d new Storage(\"dummy.txt\", \"dummydegree.txt\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private DegreeList testList \u003d new DegreeList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    //Variable to catch system.out.println, must be converted to string to be usable"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private ByteArrayOutputStream systemOutput \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private DegreeManager degreesManager \u003d new DegreeManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void setUpStreams() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        System.setOut(new PrintStream(systemOutput));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void restoreStreams() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    AddCommandTest() throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testAddEvent() throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testCommand \u003d new AddCommand(\"event\", \"Sleep /at 01-01-1970 2200\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        testCommand.execute(testTaskList, testUi, testStorage, testList, this.degreesManager);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testCommand \u003d new AddCommand(\"event\", \"Work /at 01-01-1970 2200\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        ByteArrayOutputStream freshOutput \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        System.setOut(new PrintStream(freshOutput)); //sets the system output to a different stream"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        testCommand.execute(testTaskList, testUi, testStorage, testList, this.degreesManager);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"  [E][N] Work (At: 01-01-1970 2200)\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"Now you have 6 tasks in the list.\\r\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"There is a conflict in the schedule!\\r\\n\", freshOutput.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testExecute() throws DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        testCommand.execute(testTaskList, testUi, testStorage, testList, this.degreesManager);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[T][N] Sleep\", testTaskList.get(4).toList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaneQuah": 7,
      "zyleet": 59
    }
  },
  {
    "path": "src/test/java/command/BadCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zyleet"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import degree.DegreeManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import list.DegreeList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zyleet"
        },
        "content": "class BadCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Command testCommand \u003d new BadCommand(\"Bad\", \"\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private TaskList testTaskList \u003d new TaskList(\"T | 0 | Send even more Help\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            + \"R | 0 | Deliver Help | Day\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            + \"A | 0 | Send less help | Sending Enough\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            + \"W | 0 | Sleeping | Jan 15th and 25th\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private UI testUi \u003d new UI();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Storage testStorage \u003d new Storage(\"dummy.txt\", \"dummydegree.txt\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private DegreeList testList \u003d new DegreeList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private DegreeManager degreesManager \u003d new DegreeManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    BadCommandTest() throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testExecute() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            testCommand.execute(testTaskList, testUi, testStorage, testList, this.degreesManager);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\", e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaneQuah": 6,
      "zyleet": 30
    }
  },
  {
    "path": "src/test/java/command/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zyleet"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import degree.DegreeManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import list.DegreeList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": "class ExitCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Command testCommand \u003d new ExitCommand();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private TaskList testTaskList \u003d new TaskList(\"T | 0 | Send even more Help\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            + \"R | 0 | Deliver Help | Day\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            + \"A | 0 | Send less help | Sending Enough\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            + \"W | 0 | Sleeping | Jan 15th and 25th\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private UI testUi \u003d new UI();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Storage testStorage \u003d new Storage(\"dummy.txt\", \"dummydegree.txt\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private DegreeList testList \u003d new DegreeList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    //Variable to catch system.out.println, must be converted to string to be usable"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private ByteArrayOutputStream systemOutput \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private DegreeManager degreesManager \u003d new DegreeManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void setUpStreams() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        System.setOut(new PrintStream(systemOutput));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void restoreStreams() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    ExitCommandTest() throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testExecute() throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "woblek"
        },
        "content": "//        testUi.showWelcome();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "            testCommand.execute(testTaskList, testUi, testStorage, testList, this.degreesManager);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Exit Error: Storage Attempt Failed\", e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woblek": 1,
      "KaneQuah": 5,
      "zyleet": 49
    }
  },
  {
    "path": "src/test/java/command/ModCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zyleet"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import degree.DegreeManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import list.DegreeList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": "class ModCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Command testCommand \u003d new ModCommand(\"dummy\", \"placeholder\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private TaskList testTaskList \u003d new TaskList(\"T | 0 | Send even more Help\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            + \"R | 0 | Deliver Help | Day\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            + \"A | 0 | Send less help | Sending Enough\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            + \"E | 0 | Sleeping | 01-01-1970 2200\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private UI testUi \u003d new UI();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Storage testStorage \u003d new Storage(\"dummy.txt\", \"dummydegree.txt\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private DegreeList testList \u003d new DegreeList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    //Variable to catch system.out.println, must be converted to string to be usable"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private ByteArrayOutputStream systemOutput \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private DegreeManager degreesManager \u003d new DegreeManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void setUpStreams() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        System.setOut(new PrintStream(systemOutput));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void restoreStreams() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    ModCommandTest() throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testDone() throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testCommand \u003d new ModCommand(\"done\", \"3\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        testCommand.execute(testTaskList, testUi, testStorage, testList, this.degreesManager);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"  [A][Y] Send less help (After: Sending Enough)\\r\\n\", systemOutput.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testSnooze() throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testCommand \u003d new ModCommand(\"snooze\", \"4 /to 12-12-2013 2345\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        testCommand.execute(testTaskList, testUi, testStorage, testList, this.degreesManager);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Noted. I\u0027ve snoozed this task:\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"  [E][N] Sleeping (At: 12-12-2013 2345)\\r\\n\", systemOutput.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testDelete() throws DukeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testCommand \u003d new ModCommand(\"delete\", \"1\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        testCommand.execute(testTaskList, testUi, testStorage, testList, this.degreesManager);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"  [T][N] Send even more Help\\r\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"Now you have 3 tasks in the list.\\r\\n\", systemOutput.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testSelect() throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        ByteArrayOutputStream freshOutput \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testTaskList.add(\"event\", \"Sleep /at 01-01-1970 2200\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testCommand \u003d new ModCommand(\"select\", \"5 1\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        System.setOut(new PrintStream(freshOutput)); //sets the system output to a different stream"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        testCommand.execute(testTaskList, testUi, testStorage, testList, this.degreesManager);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Tentative Date selected successfully\\r\\n\", freshOutput.toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaneQuah": 8,
      "zyleet": 75
    }
  },
  {
    "path": "src/test/java/command/PrintCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zyleet"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import degree.DegreeManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import list.DegreeList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": "class PrintCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private Command testCommand \u003d new PrintCommand(\"list\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private TaskList testTaskList \u003d new TaskList(\"T | 0 | Send even more Help\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            + \"R | 0 | Deliver Help | Day\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            + \"A | 0 | Send less help | Sending Enough\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            + \"W | 0 | Sleeping | Jan 15th and 25th\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private UI testUi \u003d new UI();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Storage testStorage \u003d new Storage(\"dummy.txt\", \"dummydegree.txt\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private DegreeList testList \u003d new DegreeList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    //Variable to catch system.out.println, must be converted to string to be usable"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private ByteArrayOutputStream systemOutput \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private DegreeManager degreesManager \u003d new DegreeManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    PrintCommandTest() throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void setUpStreams() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        System.setOut(new PrintStream(systemOutput));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void restoreStreams() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testExecute() throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        testCommand.execute(testTaskList, testUi, testStorage, testList, this.degreesManager);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"1. [T][N] Send even more Help\\r\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"2. [R][N] Deliver Help (Every: Day)\\r\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"3. [A][N] Send less help (After: Sending Enough)\\r\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"4. [W][N] Sleeping (Between: Jan 15th and 25th)\\r\\n\", systemOutput.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaneQuah": 6,
      "zyleet": 48
    }
  },
  {
    "path": "src/test/java/command/SearchCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zyleet"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import degree.DegreeManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import list.DegreeList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": "class SearchCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Command testCommand \u003d new SearchCommand(\"dummy\", \"placeholder\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private TaskList testTaskList \u003d new TaskList(\"T | 0 | Send even more Help\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            + \"R | 0 | Deliver Help | Day\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            + \"A | 0 | Send less help | Sending Enough\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            + \"E | 0 | Sleeping | 01-01-1970 2200\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private UI testUi \u003d new UI();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Storage testStorage \u003d new Storage(\"dummy.txt\", \"dummydegree.txt\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private DegreeList testList \u003d new DegreeList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    //Variable to catch system.out.println, must be converted to string to be usable"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private ByteArrayOutputStream systemOutput \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private DegreeManager degreesManager \u003d new DegreeManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    SearchCommandTest() throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void setUpStreams() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        System.setOut(new PrintStream(systemOutput));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void restoreStreams() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testFind() throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testCommand \u003d new SearchCommand(\"find\", \"Sleep\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        testCommand.execute(testTaskList, testUi, testStorage, testList, this.degreesManager);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Here are the matching tasks in your list:\\r\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"4. [E][N] Sleeping (At: 01-01-1970 2200)\\r\\n\", systemOutput.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testSchedule() throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testCommand \u003d new SearchCommand(\"schedule\", \"01-01-1970\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        testCommand.execute(testTaskList, testUi, testStorage, testList, this.degreesManager);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Here\u0027s what the day looks like:\\r\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"4. [E][N] Sleeping (At: 01-01-1970 2200)\\r\\n\", systemOutput.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaneQuah": 6,
      "zyleet": 55
    }
  },
  {
    "path": "src/test/java/parser/ParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zyleet"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import degree.DegreeManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import list.DegreeList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import main.Duke;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import task.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import ui.UI;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zyleet"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private TaskList testTaskList \u003d new TaskList(\"T | 0 | Send even more Help\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            + \"R | 0 | Deliver Help | Day\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            + \"A | 0 | Send less help | Sending Enough\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            + \"E | 0 | Sleeping | 01-01-1970 2200\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private UI testUi \u003d new UI();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Storage testStorage \u003d new Storage(\"dummy.txt\", \"dummydegree.txt\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private DegreeList testList \u003d new DegreeList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    //Variable to catch system.out.println, must be converted to string to be usable"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private ByteArrayOutputStream systemOutput \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    private DegreeManager degreesManager \u003d new DegreeManager();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void setUpStreams() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        System.setOut(new PrintStream(systemOutput));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void restoreStreams() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    ParserTest() throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testSingleInput() throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            Parser.parse(\"\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            //Empty commands should be rooted out in duke, not within parser"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Empty Command!\", e.getLocalizedMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            Parser.parse(\"list asdijoqwjeoiqjwe\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"list should not have any other arguments \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    + \"(whitespace acceptable)\", e.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            Parser.parse(\"bye asdijoqwjeoiqjwe\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"bye should not have any other arguments \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    + \"(whitespace acceptable)\", e.getMessage());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            Parser.parse(\"choices asdijoqwjeoiqjwe\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"choices should not have any other arguments \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    + \"(whitespace acceptable)\", e.getMessage());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testTaskInputFail() throws DukeException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            Parser.parse(\"todo\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The description of a todo cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            Parser.parse(\"event\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The description of a event cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            Parser.parse(\"deadline\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The description of a deadline cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            Parser.parse(\"schedule\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The description of a schedule cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            Parser.parse(\"snooze\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"☹ OOPS!!! The description of a snooze cannot be empty.\", e.getMessage());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testOtherInputs() throws DukeException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            Parser.parse(\"help asdiqwoiejqwe\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"I do not understand that command. \""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    + \"Type \\\"help\\\" for a full list of available commands\", e.getMessage());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testBadCommand() throws DukeException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            Command c \u003d Parser.parse(\"asdiqwoiejqwe\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            c.execute(testTaskList, testUi, testStorage, testList, this.degreesManager);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\", e.getMessage());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testAddCommand() throws DukeException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        Command c \u003d Parser.parse(\"todo JUnit Testing\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        c.execute(testTaskList, testUi, testStorage, testList, this.degreesManager);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[T][N] JUnit Testing\", testTaskList.get(4).toList());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        Command d \u003d Parser.parse(\"event JUnit Testing /at 01-01-1970 2200\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        d.execute(testTaskList, testUi, testStorage, testList, this.degreesManager);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[E][N] JUnit Testing (At: 01-01-1970 2200)\", testTaskList.get(5).toList());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        d.unExecute(testTaskList, testUi, testStorage, testList, this.degreesManager);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"[E][N] JUnit Testing (At: 01-01-1970 2200)\", testTaskList.get(5).toList());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Requested Task not found within list\", e.getMessage());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        c.unExecute(testTaskList, testUi, testStorage, testList, this.degreesManager);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"[T][N] JUnit Testing\", testTaskList.get(4).toList());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Requested Task not found within list\", e.getMessage());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testModCommand() throws DukeException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        Command c \u003d Parser.parse(\"done 3\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        c.execute(testTaskList, testUi, testStorage, testList, this.degreesManager);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        Command d \u003d Parser.parse(\"done 1\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        d.execute(testTaskList, testUi, testStorage, testList, this.degreesManager);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"  [A][Y] Send less help (After: Sending Enough)\\r\\n\""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"  [T][Y] Send even more Help\\r\\n\", systemOutput.toString());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        d.unExecute(testTaskList, testUi, testStorage, testList, this.degreesManager);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[T][N] Send even more Help\", testTaskList.get(0).toList());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        c.unExecute(testTaskList, testUi, testStorage, testList, this.degreesManager);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[A][N] Send less help (After: Sending Enough)\", testTaskList.get(2).toList());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"[T][N] JUnit Testing\", testTaskList.get(4).toList());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Requested Task not found within list\", e.getMessage());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testAnotherModCommand() throws DukeException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        Command c \u003d Parser.parse(\"delete 3\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        c.execute(testTaskList, testUi, testStorage, testList, this.degreesManager);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"  [A][N] Send less help (After: Sending Enough)\\r\\n\""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"Now you have 3 tasks in the list.\\r\\n\", systemOutput.toString());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testFindCommand() throws DukeException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        Command c \u003d Parser.parse(\"find Sleep\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        c.execute(testTaskList, testUi, testStorage, testList, this.degreesManager);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Here are the matching tasks in your list:\\r\\n\""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"4. [E][N] Sleeping (At: 01-01-1970 2200)\\r\\n\", systemOutput.toString());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testScheduleCommand() throws DukeException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        Command c \u003d Parser.parse(\"schedule 01-01-1970\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        c.execute(testTaskList, testUi, testStorage, testList, this.degreesManager);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Here\u0027s what the day looks like:\\r\\n\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"4. [E][N] Sleeping (At: 01-01-1970 2200)\\r\\n\", systemOutput.toString());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testSortCommand() throws DukeException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        Command c \u003d Parser.parse(\"sort priority\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        c.execute(testTaskList, testUi, testStorage, testList, this.degreesManager);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Done! Your tasks have been sorted by priority; the most important one is at the top:\\n\\r\""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"1. [E][N] Sleeping (At: 01-01-1970 2200)\\r\\n\""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"2. [T][N] Send even more Help\\r\\n\""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"3. [R][N] Deliver Help (Every: Day)\\r\\n\""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"4. [A][N] Send less help (After: Sending Enough)\\r\\n\", systemOutput.toString());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        c.unExecute(testTaskList, testUi, testStorage, testList, this.degreesManager);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        systemOutput.reset();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testTaskList.print();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"1. [T][N] Send even more Help\\r\\n\""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"2. [R][N] Deliver Help (Every: Day)\\r\\n\""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"3. [A][N] Send less help (After: Sending Enough)\\r\\n\""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"4. [E][N] Sleeping (At: 01-01-1970 2200)\\r\\n\", systemOutput.toString());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaneQuah": 11,
      "zyleet": 235
    }
  },
  {
    "path": "src/test/java/storage/StorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zyleet"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": "class StorageTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    Storage testStorage \u003d new Storage(\"dummy.txt\", \"dummydegree.txt\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "    void testLoad() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        //String buffer \u003d testStorage.load();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "KaneQuah"
        },
        "content": "        //assertEquals(\"\", buffer);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testStore() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "KaneQuah": 4,
      "zyleet": 17
    }
  },
  {
    "path": "src/test/java/task/AfterTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zyleet"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": "class AfterTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private After testAfter \u003d new After(\"Sleep /after Work\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private After testAfterOverload \u003d new After(\"0\", \"Sleep\", \"Work\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    AfterTest() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testExceptionThrown() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"/ast\", new After(\"Sleep /after /after Work\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Too many /after in String\", e.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"/ast\", new After(\"Sleep Work\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Please use /after to indicate what needs to be done before doing \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    + \"this task\", e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testGetType() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"A\", testAfter.getType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"A\", testAfterOverload.getType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testGetAfter() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Work\", testAfter.getAfter());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Work\", testAfterOverload.getAfter());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testGetStatusIcon() throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"N\", testAfter.getStatusIcon());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"N\", testAfterOverload.getStatusIcon());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertFalse(testAfter.checkCompletion());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertFalse(testAfterOverload.checkCompletion());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testAfter.markDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testAfterOverload.markDone();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertTrue(testAfter.checkCompletion());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertTrue(testAfterOverload.checkCompletion());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Y\", testAfter.getStatusIcon());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Y\", testAfterOverload.getStatusIcon());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            testAfter.markDone();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"But good sir, this task is already done!\", e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            testAfterOverload.markDone();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"But good sir, this task is already done!\", e.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testToList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[A][N] Sleep (After: Work)\", testAfter.toList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[A][N] Sleep (After: Work)\", testAfterOverload.toList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testGetDescription() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Sleep\", testAfter.getDescription());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Sleep\", testAfterOverload.getDescription());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zyleet": 87
    }
  },
  {
    "path": "src/test/java/task/DeadlineTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zyleet"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Deadline testDeadline \u003d new Deadline(\"Sleep /by 01-01-1970 2200\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Deadline testDeadlineOverload \u003d new Deadline(\"0\", \"Sleep\", \"01-01-1970 2200\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    DeadlineTest() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testExceptions() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        //Test wrong date format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Buffer\", new Deadline(\"Deadline /by 012312 23123\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Error! Please enter date in the format DD-MM-YYYY 2359.\", e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        //Test too many /by"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Buffer\", new Deadline(\"Deadline /by /by 01-01-1970 2200\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Too many /by in String\", e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        //Test no /by"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Buffer\", new Deadline(\"Deadline 01-01-1970 2200\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Please use /by to indicate date\", e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        //Test no /to"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            testDeadline.snooze(\"12-12-2013 2345\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Please use /to to indicate date\", e.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        //Test too many /to"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            testDeadline.snooze(\"/to /to 12-12-2013 2345\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Too many /to in String\", e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testToList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[D][N] Sleep (By: 01-01-1970 2200)\", testDeadline.toList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[D][N] Sleep (By: 01-01-1970 2200)\", testDeadlineOverload.toList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testSnooze() throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testDeadline.snooze(\"/to 12-12-2013 2345\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testDeadlineOverload.snooze(\"/to 12-12-2013 2345\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"12-12-2013 2345\", testDeadline.getDueDate());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"12-12-2013 2345\", testDeadlineOverload.getDueDate());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[D][N] Sleep (By: 12-12-2013 2345)\", testDeadline.toList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[D][N] Sleep (By: 12-12-2013 2345)\", testDeadlineOverload.toList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testGetStatusIcon() throws DukeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"N\", testDeadline.getStatusIcon());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"N\", testDeadlineOverload.getStatusIcon());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertFalse(testDeadline.checkCompletion());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertFalse(testDeadlineOverload.checkCompletion());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testDeadline.markDone();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testDeadlineOverload.markDone();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertTrue(testDeadline.checkCompletion());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertTrue(testDeadlineOverload.checkCompletion());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Y\", testDeadline.getStatusIcon());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Y\", testDeadlineOverload.getStatusIcon());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            testDeadline.markDone();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"But good sir, this task is already done!\", e.getMessage());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            testDeadlineOverload.markDone();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"But good sir, this task is already done!\", e.getMessage());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testGetType() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"D\", testDeadline.getType());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"D\", testDeadlineOverload.getType());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testGetDescription() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Sleep\", testDeadline.getDescription());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Sleep\", testDeadlineOverload.getDescription());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testGetDueDate() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"01-01-1970 2200\", testDeadline.getDueDate());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"01-01-1970 2200\", testDeadlineOverload.getDueDate());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zyleet": 124
    }
  },
  {
    "path": "src/test/java/task/EventTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zyleet"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Event testEvent \u003d new Event(\"Sleep /at 01-01-1970 2200\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Event testEventOverload \u003d new Event(\"0\", \"Sleep\", \"01-01-1970 2200\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    EventTest() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testExceptions() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        //Test wrong date format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Buffer\", new Event(\"Deadline /at 012312 23123\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Error! Please enter date in the format DD-MM-YYYY 2359.\", e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        //Test too many /at without a date following"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Buffer\", new Event(\"Deadline /at /at 01-01-1970 2200\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Error! Please enter date in the format DD-MM-YYYY 2359.\", e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        //Test no /at"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Buffer\", new Event(\"Deadline 01-01-1970 2200\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Please use /at to indicate date\", e.getMessage());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        //Test no /to"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            testEvent.snooze(\"12-12-2013 2345\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Please use /to to indicate date\", e.getMessage());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        //Test too many /to"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            testEvent.snooze(\"/to /to 12-12-2013 2345\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Too many /to in String\", e.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testToList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[E][N] Sleep (At: 01-01-1970 2200)\", testEvent.toList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[E][N] Sleep (At: 01-01-1970 2200)\", testEventOverload.toList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testSnooze() throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testEvent.snooze(\"/to 12-12-2013 2345\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testEventOverload.snooze(\"/to 12-12-2013 2345\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"12-12-2013 2345\", testEvent.getDueDate());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"12-12-2013 2345\", testEventOverload.getDueDate());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[E][N] Sleep (At: 12-12-2013 2345)\", testEvent.toList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[E][N] Sleep (At: 12-12-2013 2345)\", testEventOverload.toList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testGetStatusIcon() throws DukeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"N\", testEvent.getStatusIcon());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"N\", testEventOverload.getStatusIcon());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertFalse(testEvent.checkCompletion());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertFalse(testEventOverload.checkCompletion());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testEvent.markDone();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testEventOverload.markDone();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertTrue(testEvent.checkCompletion());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertTrue(testEventOverload.checkCompletion());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Y\", testEvent.getStatusIcon());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Y\", testEventOverload.getStatusIcon());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            testEvent.markDone();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"But good sir, this task is already done!\", e.getMessage());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            testEventOverload.markDone();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"But good sir, this task is already done!\", e.getMessage());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testGetType() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"E\", testEvent.getType());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"E\", testEventOverload.getType());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testGetDescription() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Sleep\", testEvent.getDescription());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Sleep\", testEventOverload.getDescription());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testGetDueDate() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"01-01-1970 2200\", testEvent.getDueDate());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"01-01-1970 2200\", testEventOverload.getDueDate());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testTentative() throws DukeException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        Event testTentativeEvent \u003d new Event(\"Sleep /at 01-01-1970 2200 \""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                                + \"/at 02-02-1971 2200 \""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                                + \"/at 03-03-1972 2200 \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                                + \"/at 04-04-1973 2200\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertTrue(testTentativeEvent.tentativeExists());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"01-01-1970 2200 OR 02-02-1971 2200 OR 03-03-1972 2200 \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"OR 04-04-1973 2200\", testTentativeEvent.getDueDate());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Tue Feb 02 22:00:00 SGT 1971\", testTentativeEvent.getTentativeDate(1).toString());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Fri Mar 03 22:00:00 SGT 1972\", testTentativeEvent.getTentativeDate(2).toString());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Wed Apr 04 22:00:00 SGT 1973\", testTentativeEvent.getTentativeDate(3).toString());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertFalse(testTentativeEvent.outsideTentative(2)); //Check if a request is outside tentative index"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertTrue(testTentativeEvent.outsideTentative(26));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testTentativeEvent.clearTentative();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertFalse(testTentativeEvent.tentativeExists());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zyleet": 146
    }
  },
  {
    "path": "src/test/java/task/FixedTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zyleet"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": "class FixedTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Fixed testFixed \u003d new Fixed(\"Sleep /need 8 hours\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Fixed testFixedOverload \u003d new Fixed(\"0\", \"Sleep\",\"8 hours\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    FixedTest() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testExceptionThrown() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"/ast\", new Fixed(\"Sleep /need /need 8 hours\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Too many /need in String\", e.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"/ast\", new Fixed(\"Sleep Work\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Please use /need to indicate the duration needed\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    + \" to complete this task\", e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testGetType() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"F\", testFixed.getType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"F\", testFixedOverload.getType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testGetAfter() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"8 hours\", testFixed.getAfter());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"8 hours\", testFixedOverload.getAfter());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testGetStatusIcon() throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"N\", testFixed.getStatusIcon());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"N\", testFixedOverload.getStatusIcon());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertFalse(testFixed.checkCompletion());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertFalse(testFixedOverload.checkCompletion());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testFixed.markDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testFixedOverload.markDone();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertTrue(testFixed.checkCompletion());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertTrue(testFixedOverload.checkCompletion());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Y\", testFixed.getStatusIcon());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Y\", testFixedOverload.getStatusIcon());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            testFixed.markDone();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"But good sir, this task is already done!\", e.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            testFixedOverload.markDone();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"But good sir, this task is already done!\", e.getMessage());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testToList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[F][N] Sleep (Need: 8 hours)\", testFixed.toList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[F][N] Sleep (Need: 8 hours)\", testFixedOverload.toList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testGetDescription() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Sleep\", testFixed.getDescription());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Sleep\", testFixedOverload.getDescription());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zyleet": 87
    }
  },
  {
    "path": "src/test/java/task/RecurringTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zyleet"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": "class RecurringTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Recurring testRecurring \u003d new Recurring(\"Sleep /every 16 hours\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Recurring testRecurringOverload \u003d new Recurring(\"0\", \"Sleep\",\"16 hours\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    RecurringTest() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testExceptionThrown() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"/ast\", new Recurring(\"Sleep /every /every 16 hours\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Too many /every in String\", e.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"/ast\", new Recurring(\"Sleep Work\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Please use /every to indicate frequency of task\", e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testGetType() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"R\", testRecurring.getType());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"R\", testRecurringOverload.getType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testGetAfter() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"16 hours\", testRecurring.getAfter());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"16 hours\", testRecurringOverload.getAfter());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testGetStatusIcon() throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"N\", testRecurring.getStatusIcon());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"N\", testRecurringOverload.getStatusIcon());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertFalse(testRecurring.checkCompletion());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertFalse(testRecurringOverload.checkCompletion());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testRecurring.markDone();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testRecurringOverload.markDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertTrue(testRecurring.checkCompletion());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertTrue(testRecurringOverload.checkCompletion());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Y\", testRecurring.getStatusIcon());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Y\", testRecurringOverload.getStatusIcon());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            testRecurring.markDone();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"But good sir, this task is already done!\", e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            testRecurringOverload.markDone();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"But good sir, this task is already done!\", e.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testToList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[R][N] Sleep (Every: 16 hours)\", testRecurring.toList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[R][N] Sleep (Every: 16 hours)\", testRecurringOverload.toList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testGetDescription() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Sleep\", testRecurring.getDescription());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Sleep\", testRecurringOverload.getDescription());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zyleet": 86
    }
  },
  {
    "path": "src/test/java/task/TaskListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zyleet"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zyleet"
        },
        "content": "class TaskListTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private TaskList testTaskListSave \u003d new TaskList(\"T | 0 | Send even more Help\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            + \"R | 0 | Deliver Help | Day\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            + \"A | 0 | Send less help | Sending Enough\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            + \"W | 0 | Sleeping | Jan 15th and 25th\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    //Variable to catch system.out.println, must be converted to string to be usable"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private ByteArrayOutputStream systemOutput \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void setUpStreams() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        System.setOut(new PrintStream(systemOutput));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void restoreStreams() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    TaskListTest() throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testSize() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(4, testTaskListSave.size());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testMarkDone() throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testTaskListSave.markDone(\"1\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertTrue(testTaskListSave.get(0).checkCompletion());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"  [T][Y] Send even more Help\\r\\n\", systemOutput.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            testTaskListSave.markDone(\"100\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"The index was not found within range\", e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            testTaskListSave.markDone(\"asdasd\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"That is NOT a valid integer\", e.getMessage());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testBanishDelete() throws DukeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[T][N] Send even more Help\", testTaskListSave.get(0).toList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testTaskListSave.banishDelete(\"1\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Noted. I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"  [T][N] Send even more Help\\r\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"Now you have 3 tasks in the list.\\r\\n\", systemOutput.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(3, testTaskListSave.size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[R][N] Deliver Help (Every: Day)\", testTaskListSave.get(0).toList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            testTaskListSave.banishDelete(\"100\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"The index was not found within range\", e.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            testTaskListSave.banishDelete(\"asdasdasd\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"That is NOT a valid integer\", e.getMessage());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testSnoozeTask() throws DukeException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        ByteArrayOutputStream freshOutput \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testTaskListSave.add(\"event\", \"Sleep /at 01-01-1970 2200\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        System.setOut(new PrintStream(freshOutput)); //sets the system output to a different stream"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testTaskListSave.snoozeTask(\"5 /to 12-12-2013 2345\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Noted. I\u0027ve snoozed this task:\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"  [E][N] Sleep (At: 12-12-2013 2345)\\r\\n\", freshOutput.toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            testTaskListSave.snoozeTask(\"5 /to /to 12-12-2013 2345\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Too many /to in String\", e.getMessage());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            testTaskListSave.snoozeTask(\"10 /to 12-12-2013 2345\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"The index was not found within range\", e.getMessage());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            testTaskListSave.snoozeTask(\"2 /to 12-12-2013 2345\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Only Events and Deadlines can be snoozed\", e.getMessage());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            testTaskListSave.snoozeTask(\"asdasdasd\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"That is NOT a valid integer\", e.getMessage());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testGet() throws DukeException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[T][N] Send even more Help\", testTaskListSave.get(0).toList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Send even more Help\", testTaskListSave.get(0).getDescription());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"T\", testTaskListSave.get(0).getType());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"N\", testTaskListSave.get(0).getStatusIcon());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[R][N] Deliver Help (Every: Day)\", testTaskListSave.get(1).toList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Deliver Help\", testTaskListSave.get(1).getDescription());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"R\", testTaskListSave.get(1).getType());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"N\", testTaskListSave.get(1).getStatusIcon());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Day\", testTaskListSave.get(1).getAfter());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Dummy string\", testTaskListSave.get(9).getAfter());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Requested Task not found within list\", e.getMessage());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testAdd() throws DukeException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testTaskListSave.add(\"todo\", \"Sleep\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[T][N] Sleep\", testTaskListSave.get(4).toList());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"  [T][N] Sleep\\n\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"Now you have 5 tasks in the list.\\r\\n\", systemOutput.toString());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testTaskListSave.add(\"recurring\", \"Sleep /every 16 hours\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[R][N] Sleep (Every: 16 hours)\", testTaskListSave.get(5).toList());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testTaskListSave.add(\"fixed\", \"Sleep /need 8 hours\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[F][N] Sleep (Need: 8 hours)\", testTaskListSave.get(6).toList());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testTaskListSave.add(\"after\", \"Sleep /after Work\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[A][N] Sleep (After: Work)\", testTaskListSave.get(7).toList());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testTaskListSave.add(\"event\", \"Sleep /at 01-01-1970 2200\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[E][N] Sleep (At: 01-01-1970 2200)\", testTaskListSave.get(8).toList());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testTaskListSave.add(\"deadline\", \"Sleep /by 01-01-1970 2200\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[D][N] Sleep (By: 01-01-1970 2200)\", testTaskListSave.get(9).toList());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testTaskListSave.add(\"within\", \"Sleep /between Jan 25th and Jan 30th\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[W][N] Sleep (Between: Jan 25th and Jan 30th)\", testTaskListSave.get(10).toList());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(11, testTaskListSave.size());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"  [T][N] Sleep\\n\""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"Now you have 5 tasks in the list.\\r\\n\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"  [R][N] Sleep (Every: 16 hours)\\n\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"Now you have 6 tasks in the list.\\r\\n\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"  [F][N] Sleep (Need: 8 hours)\\n\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"Now you have 7 tasks in the list.\\r\\n\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"  [A][N] Sleep (After: Work)\\n\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"Now you have 8 tasks in the list.\\r\\n\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"  [E][N] Sleep (At: 01-01-1970 2200)\\n\""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"Now you have 9 tasks in the list.\\r\\n\""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"  [D][N] Sleep (By: 01-01-1970 2200)\\n\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"Now you have 10 tasks in the list.\\r\\n\""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"  [W][N] Sleep (Between: Jan 25th and Jan 30th)\\n\""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"Now you have 11 tasks in the list.\\r\\n\", systemOutput.toString());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            testTaskListSave.add(\"todasdasdo\", \"Sleep\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"What the Hell happened here?\\n\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                    + \"Command passed successfully to tasklist.add, not found in any case\", e.getMessage());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testFind() throws DukeException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testTaskListSave.find(\"Sleep\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Here are the matching tasks in your list:\\r\\n\""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"4. [W][N] Sleeping (Between: Jan 15th and 25th)\\r\\n\", systemOutput.toString());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testNotFound() throws DukeException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testTaskListSave.find(\"asdasdasdasdasfsdfsdfsdfsdf\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"There are no matching tasks in the list\\r\\n\", systemOutput.toString());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testViewSchedule() throws DukeException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        ByteArrayOutputStream freshOutput \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testTaskListSave.add(\"event\", \"Sleep /at 01-01-1970 2200\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        System.setOut(new PrintStream(freshOutput)); //sets the system output to a different stream"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testTaskListSave.view_schedule(\"01-01-1970\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Here\u0027s what the day looks like:\\r\\n\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"5. [E][N] Sleep (At: 01-01-1970 2200)\\r\\n\", freshOutput.toString());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testNoSchedule() throws DukeException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testTaskListSave.view_schedule(\"02-02-1900 2310\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"You have no tasks today. Enjoy!\\r\\n\", systemOutput.toString());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testConflictCheck() throws DukeException {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        ByteArrayOutputStream freshOutput \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testTaskListSave.add(\"event\", \"Sleep /at 01-01-1970 2200\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testTaskListSave.add(\"event\", \"Work /at 01-01-1970 2200\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        System.setOut(new PrintStream(freshOutput)); //sets the system output to a different stream"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testTaskListSave.conflict_check();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"There is a conflict in the schedule!\\r\\n\", freshOutput.toString());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testEmptyPrint() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        TaskList testEmptyList \u003d new TaskList();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testEmptyList.print();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Whoops, there doesn\u0027t seem to be anything \""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"here at the moment\\r\\n\", systemOutput.toString());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testPrint() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testTaskListSave.print();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"1. [T][N] Send even more Help\\r\\n\""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"2. [R][N] Deliver Help (Every: Day)\\r\\n\""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"3. [A][N] Send less help (After: Sending Enough)\\r\\n\""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"4. [W][N] Sleeping (Between: Jan 15th and 25th)\\r\\n\", systemOutput.toString());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testSelect() throws DukeException {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        ByteArrayOutputStream freshOutput \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testTaskListSave.add(\"event\", \"Sleep /at 01-01-1970 2200 \""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                        + \"/at 02-02-1971 2200 \""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                        + \"/at 03-03-1972 2200 \""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                        + \"/at 04-04-1973 2200\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        System.setOut(new PrintStream(freshOutput)); //sets the system output to a different stream"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testTaskListSave.select(\"5 1\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Tentative Date selected successfully\\r\\n\", freshOutput.toString());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            testTaskListSave.select(\"5 1\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"There are no Tentative Slots to be chosen from\", e.getMessage());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testSelectFail() throws DukeException {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testTaskListSave.add(\"event\", \"Sleep /at 01-01-1970 2200 \""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                        + \"/at 02-02-1971 2200 \""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                        + \"/at 03-03-1972 2200 \""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                                                        + \"/at 04-04-1973 2200\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            testTaskListSave.select(\"100 1\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"The index was not found within task range\", e.getMessage());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            testTaskListSave.select(\"3 1\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"The Task you chose is not the Event Type!\", e.getMessage());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            testTaskListSave.select(\"5 10\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Not a valid Selection (out of range)\", e.getMessage());"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zyleet"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zyleet": 308
    }
  },
  {
    "path": "src/test/java/task/TodoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zyleet"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": "class TodoTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Todo testTodo \u003d new Todo(\"Sleep\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Todo testTodoOverload \u003d new Todo(\"0\", \"Sleep\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    TodoTest() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testExceptionThrown() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testGetType() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"T\", testTodo.getType());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"T\", testTodoOverload.getType());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testGetStatusIcon() throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"N\", testTodo.getStatusIcon());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"N\", testTodoOverload.getStatusIcon());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertFalse(testTodo.checkCompletion());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertFalse(testTodoOverload.checkCompletion());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testTodo.markDone();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testTodoOverload.markDone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertTrue(testTodo.checkCompletion());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertTrue(testTodoOverload.checkCompletion());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Y\", testTodo.getStatusIcon());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Y\", testTodoOverload.getStatusIcon());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            testTodo.markDone();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"But good sir, this task is already done!\", e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            testTodoOverload.markDone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"But good sir, this task is already done!\", e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testToList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[T][N] Sleep\", testTodo.toList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[T][N] Sleep\", testTodoOverload.toList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testGetDescription() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Sleep\", testTodo.getDescription());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Sleep\", testTodoOverload.getDescription());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zyleet": 67
    }
  },
  {
    "path": "src/test/java/task/WithinTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zyleet"
        },
        "content": "package task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import exception.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": "class WithinTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Within testWithin \u003d new Within(\"Sleep /between Monday and Friday\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private Within testWithinOverload \u003d new Within(\"0\", \"Sleep\", \"Monday and Friday\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    WithinTest() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testExceptionThrown() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"/ast\", new Within(\"Sleep /between /between Monday and Friday\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Too many /between in String\", e.getMessage());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"/ast\", new Within(\"Sleep Monday and Friday\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"Please use /between to indicate the window to complete this task\", e.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testGetType() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"W\", testWithin.getType());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"W\", testWithinOverload.getType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testGetWithin() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Monday and Friday\", testWithin.getAfter());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Monday and Friday\", testWithinOverload.getAfter());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testGetStatusIcon() throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"N\", testWithin.getStatusIcon());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"N\", testWithinOverload.getStatusIcon());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertFalse(testWithin.checkCompletion());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertFalse(testWithinOverload.checkCompletion());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testWithin.markDone();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testWithinOverload.markDone();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertTrue(testWithin.checkCompletion());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertTrue(testWithinOverload.checkCompletion());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Y\", testWithin.getStatusIcon());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Y\", testWithinOverload.getStatusIcon());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            testWithin.markDone();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"But good sir, this task is already done!\", e.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            testWithinOverload.markDone();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zyleet"
        },
        "content": "            assertEquals(\"But good sir, this task is already done!\", e.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testToList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[W][N] Sleep (Between: Monday and Friday)\", testWithin.toList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"[W][N] Sleep (Between: Monday and Friday)\", testWithinOverload.toList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testGetDescription() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Sleep\", testWithin.getDescription());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Sleep\", testWithinOverload.getDescription());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zyleet": 86
    }
  },
  {
    "path": "src/test/java/ui/UITest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zyleet"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zyleet"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zyleet"
        },
        "content": "class UITest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    UI testUi \u003d new UI();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    //Variable to catch system.out.println, must be converted to string to be usable"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private ByteArrayOutputStream systemOutput \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    private PrintStream originalOut \u003d System.out;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void setUpStreams() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        System.setOut(new PrintStream(systemOutput));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void restoreStreams() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        System.setOut(originalOut);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "woblek"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "woblek"
        },
        "content": "//    void testShowWelcome() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "woblek"
        },
        "content": "//        testUi.showWelcome();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "woblek"
        },
        "content": "//        assertEquals(\"Hello! I\u0027m Duke\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "woblek"
        },
        "content": "//                + \"What can I do for you?\\n\\r\\n\", systemOutput.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "woblek"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testReadCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        String buffer \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testUi.showWelcome();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        systemOutput.reset();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testShowLine() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        String buffer \u003d testUi.showLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"____________________________________________________________\", buffer);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"_________________________________________\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zyleet"
        },
        "content": "                + \"___________________\\r\\n\", systemOutput.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testShowError() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testUi.showError(\"This is a test of the error message.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"This is a test of the error message.\\r\\n\", systemOutput.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testShowLoadingError() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testUi.showLoadingError();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Formatting Issues Encountered. New Task List initialized\\r\\n\", systemOutput.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testHastaLaVista() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testUi.hastaLaVista();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"Bye. Hope to see you again soon!\\r\\n\", systemOutput.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testCloseSuccess() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testUi.closeSuccess();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"File successfully saved!\\r\\n\", systemOutput.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zyleet"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    void testCloseFailure() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        testUi.closeFailure();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zyleet"
        },
        "content": "        assertEquals(\"File failed to save\\r\\n\", systemOutput.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zyleet"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zyleet"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "woblek": 6,
      "zyleet": 76
    }
  }
]
