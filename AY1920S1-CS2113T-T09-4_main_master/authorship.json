[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.8.4\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    archiveBaseName \u003d \"Entertainment-Pro\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    archiveVersion \u003d \"1.4.0\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "group \u0027entertainment.pro\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    compile group: \u0027com.googlecode.json-simple\u0027, name: \u0027json-simple\u0027, version: \u00271.1\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    implementation \u0027com.fasterxml.jackson.core:jackson-core:2.9.8\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    implementation \u0027com.fasterxml.jackson.core:jackson-annotations:2.9.8\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    implementation \u0027com.fasterxml.jackson.core:jackson-databind:2.9.8\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    implementation \u0027com.google.code.gson:gson:2.8.2\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    compile group: \u0027info.movito\u0027, name: \u0027themoviedbapi\u0027, version:\u00271.9\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "jacoco {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    toolVersion \u003d \"0.8.4\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        xml.enabled true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        csv.enabled true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    jacocoReportPath \u0027build/reports/jacoco/test/jacocoTestReport.xml\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "sourceSets {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    main {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        java {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            srcDirs \u003d [\u0027src/main/java\u0027]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        resources {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            srcDirs \u003d [\u0027src/main/resources\u0027]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    jcenter()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//javafx {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    mainClassName \u003d \"entertainment.pro.Launcher\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 6,
      "Pdotdeep": 57,
      "nwenhui": 4,
      "-": 37
    }
  },
  {
    "path": "src/main/java/entertainment/pro/Launcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.storage.user.WatchlistHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * Start the javafx program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static WatchlistHandler tasks;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        tasks \u003d new WatchlistHandler();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        Application.launch(Main.class,args);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hotspur1997": 1,
      "Riyas97": 14,
      "nwenhui": 1
    }
  },
  {
    "path": "src/main/java/entertainment/pro/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * This class handles application wide tasks and services."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.ui.MovieHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private Stage mainWindow;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private Scene mainMoviesScene;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private BorderPane mainLayout;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Reponsible for starting the application."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        mainWindow \u003d primaryStage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        setUp();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        // Display window and the root scene"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        mainMoviesScene \u003d new Scene(mainLayout);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        mainWindow.setTitle(\"Entertainment Pro\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        mainWindow.setScene(mainMoviesScene);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        mainWindow.show();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for setting the scene for the window."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            FXMLLoader loader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            loader.setLocation(getClass().getClassLoader().getResource(\"MainPage.fxml\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            mainLayout \u003d loader.load();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            // setup the controller\u0027s window and reference to this main application class"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            MovieHandler controller \u003d loader.getController();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            controller.setMainApplication(this);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            controller.setWindow(mainWindow);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            //Ui.printLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 53
    }
  },
  {
    "path": "src/main/java/entertainment/pro/commons/assertions/CommandAssertions.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//@@author pdotdeep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.commons.assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " * Command assertions management class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public class CommandAssertions {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Asserts that the String is all lower case."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param str input string to be checked"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return true is string is all lower"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static boolean assertIsLowerString(String str) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        char[] charArray \u003d str.toCharArray();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (int i \u003d 0; i \u003c charArray.length; i++) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            //if any character is in upper case, return false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (Character.isUpperCase(charArray[i])) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Asserts that the String Array is all lower case."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param strArr input string array to be checked"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return true is string array is all lower"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static boolean assertIsLowerStringArr(String [] strArr) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (String s : strArr) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            char[] charArray \u003d s.toCharArray();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            for (int i \u003d 0; i \u003c charArray.length; i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                //if any character is in upper case, return false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                if (Character.isUpperCase(charArray[i])) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Asserts that the String Arraylist is all lower case."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param strArrL input string array list to be checked"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return true is string array is all lower"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static boolean assertIsLowerStringList(ArrayList\u003cString\u003e strArrL) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (String s : strArrL) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            char[] charArray \u003d s.toCharArray();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            for (int i \u003d 0; i \u003c charArray.length; i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                //if any character is in upper case, return false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                if (Character.isUpperCase(charArray[i])) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pdotdeep": 76
    }
  },
  {
    "path": "src/main/java/entertainment/pro/commons/enums/CommandKeys.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//@@author pdotdeep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.commons.enums;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " * This class enumerates different Keywords used in command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public enum CommandKeys {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    SEARCH,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    MOVIES,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    TVSHOWS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    CAST,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    NONE,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    UNDEF,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    MORE,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    HELP,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    VIEW,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    PROFILE,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    FILTERS,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    WATCHLIST,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    YES,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    INFO,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    ADD,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    BLACKLIST,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    SHOWTIMES,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    SET,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    NAME,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    AGE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    PREFERENCE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    REMOVE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    PLAYLIST,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    CREATE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    DELETE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    RESTRICTION,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    CLEAR,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    SORT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    GET,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    RECOMMENDATION,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    TV,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    BACK,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    ENTRY,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    DONE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    LIST,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    FIND,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    CINEMA,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    ME,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    EXIT"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pdotdeep": 49
    }
  },
  {
    "path": "src/main/java/entertainment/pro/commons/exceptions/DuplicateEntryException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//@@author pdotdeep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.commons.exceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " * Exception for duplicate entry."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public class DuplicateEntryException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public DuplicateEntryException(String source) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        super(\"Duplicate Entry in \" + source);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pdotdeep": 12
    }
  },
  {
    "path": "src/main/java/entertainment/pro/commons/exceptions/DuplicateGenreException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.strings.PromptMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * Responsible for throwing exception when user adds a genre that already exist in the database."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class DuplicateGenreException extends Exceptions {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public DuplicateGenreException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        super(PromptMessages.REPETITVE_GENRE_NAME);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 11,
      "Pdotdeep": 1
    }
  },
  {
    "path": "src/main/java/entertainment/pro/commons/exceptions/EmptyCommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//@@author pdotdeep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.commons.exceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " * Exception for empty commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public class EmptyCommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public EmptyCommandException(String msg) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pdotdeep": 12
    }
  },
  {
    "path": "src/main/java/entertainment/pro/commons/exceptions/EmptyResultExceptions.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.strings.PromptMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * Exceptions when there is results that match user\u0027s inputs."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class EmptyResultExceptions extends Exceptions {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public EmptyResultExceptions() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        super(PromptMessages.NO_RESULTS_FOUND);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 11,
      "Pdotdeep": 1
    }
  },
  {
    "path": "src/main/java/entertainment/pro/commons/exceptions/Exceptions.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * Displays an error when a operation fails in the app."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class Exceptions extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public Exceptions(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 10
    }
  },
  {
    "path": "src/main/java/entertainment/pro/commons/exceptions/FailedApiException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * Exception thrown when API fetch request fails due to some unknown reasons."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class FailedApiException extends Exceptions {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public FailedApiException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 10
    }
  },
  {
    "path": "src/main/java/entertainment/pro/commons/exceptions/GenreDoesNotExistException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.strings.PromptMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * Responsible for throwing exception when user wants to remove a genre that does not exist in the database."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class GenreDoesNotExistException extends Exceptions {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public GenreDoesNotExistException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        super(PromptMessages.GENRE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 11,
      "Pdotdeep": 1
    }
  },
  {
    "path": "src/main/java/entertainment/pro/commons/exceptions/InvalidFormatCommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "package entertainment.pro.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.strings.PromptMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * Exception thrown when the command enterted by user is invalid."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "public class InvalidFormatCommandException extends Exceptions {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public InvalidFormatCommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public InvalidFormatCommandException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        super(PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 3,
      "nwenhui": 13,
      "Pdotdeep": 1
    }
  },
  {
    "path": "src/main/java/entertainment/pro/commons/exceptions/InvalidGenreNameEnteredException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.strings.PromptMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * Exception thrown when user enters a invalid genre name."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class InvalidGenreNameEnteredException extends Exceptions {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public InvalidGenreNameEnteredException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        super(PromptMessages.INVALID_GENRE_NAME);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 11,
      "Pdotdeep": 1
    }
  },
  {
    "path": "src/main/java/entertainment/pro/commons/exceptions/InvalidParameterException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * Exception thrown when user enters a invalid parameter."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class InvalidParameterException extends Exceptions {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public InvalidParameterException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 10
    }
  },
  {
    "path": "src/main/java/entertainment/pro/commons/exceptions/MissingInfoException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " * Exception for commands that are incomplete."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public class MissingInfoException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public MissingInfoException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pdotdeep": 11
    }
  },
  {
    "path": "src/main/java/entertainment/pro/commons/exceptions/NoPermissionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "package entertainment.pro.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwenhui"
        },
        "content": " * Exception for when user do not have permission to that command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "public class NoPermissionException extends Exceptions {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public NoPermissionException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwenhui": 10
    }
  },
  {
    "path": "src/main/java/entertainment/pro/commons/exceptions/ParseExceptionInExtraction.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.strings.PromptMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * Exception thrown when parse exception detected when extracting data."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class ParseExceptionInExtraction extends Exceptions {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public ParseExceptionInExtraction() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        super(PromptMessages.PARSE_EXCEPTION_IN_EXTRACTION);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 11,
      "Pdotdeep": 1
    }
  },
  {
    "path": "src/main/java/entertainment/pro/commons/exceptions/PreferenceExceptions.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "package entertainment.pro.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import com.fasterxml.jackson.core.type.TypeReference;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.model.GenreId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.model.UserProfile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.storage.utils.EditProfileJson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * This class handles exceptions related to setting genre preferences."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwenhui"
        },
        "content": " * @@author nwenhui"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "public class PreferenceExceptions extends Exceptions {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public PreferenceExceptions(String message) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * check whether user can clear their adult restriction."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: clear -a"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @throws PreferenceExceptions when user\u0027s age is below 21"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static void checkForSetAdult(UserProfile userProfile) throws PreferenceExceptions {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (userProfile.getUserAge() \u003c 21) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throw new PreferenceExceptions(\"ohno u are below 21 yrs old and \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    + \"are not allowed to clear your adult restriction :(\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to check whether a genre id can be added to user\u0027s preferences."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: add -g"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @throws PreferenceExceptions when id already belongs to preferences or when id already belongs to restrictions"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static void checkForAddGenre(int id, ArrayList\u003cInteger\u003e preferences,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                                        ArrayList\u003cInteger\u003e restrictions) throws PreferenceExceptions, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (int log : preferences) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (id \u003d\u003d log) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                throw new PreferenceExceptions(\"ohno \u003c\" + findGenreName(id)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                        + \"\u003e is already in your preferences :( pls try again with another genre\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (int log : restrictions) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (id \u003d\u003d log) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                throw new PreferenceExceptions(\"ohno \u003c\" + findGenreName(id)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                        + \"\u003e is already in your restrictions :( pls try again with another genre\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to check whether a genre id can be removed from user\u0027s preferences."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: remove -g"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @throws PreferenceExceptions when id don\u0027t belong to preferences"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static void checkForRemoveGenre(int id, ArrayList\u003cInteger\u003e preferences)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throws PreferenceExceptions, IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        boolean flag \u003d true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (int log : preferences) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (id \u003d\u003d log) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                flag \u003d false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (flag) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throw new PreferenceExceptions(\"ohno \u003c\" + findGenreName(id)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    + \"\u003e does not belong to your preferences :( pls try again with another genre\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private static String findGenreName(int id) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ObjectMapper mapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        InputStream inputStream \u003d new FileInputStream(\"EPdata/GenreId.json\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        TypeReference\u003cArrayList\u003cGenreId\u003e\u003e typeReference \u003d new TypeReference\u003cArrayList\u003cGenreId\u003e\u003e() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        };"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ArrayList\u003cGenreId\u003e genreIds \u003d mapper.readValue(inputStream, typeReference);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (GenreId log : genreIds) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (log.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                inputStream.close();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                return log.getGenre();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        inputStream.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return \"0\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 2,
      "nwenhui": 89
    }
  },
  {
    "path": "src/main/java/entertainment/pro/commons/exceptions/RestrictionExceptions.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "package entertainment.pro.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import com.fasterxml.jackson.core.type.TypeReference;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.model.GenreId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.model.UserProfile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * This class handles exceptions related to setting genre restrictions."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwenhui"
        },
        "content": " * @@author nwenhui"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "public class RestrictionExceptions extends Exceptions {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public RestrictionExceptions(String message) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to check whether a genre id can be added to user\u0027s restrictions."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: add -g"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @throws RestrictionExceptions when id already belongs to preferences or when id already belongs to restrictions"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static void checkForAddGenre(int id, ArrayList\u003cInteger\u003e preferences,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                                        ArrayList\u003cInteger\u003e restrictions) throws RestrictionExceptions, IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (int log : preferences) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (id \u003d\u003d log) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                throw new RestrictionExceptions(\"ohno \u003c\" + findGenreName(id)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                        + \"\u003e is already in your preferences :( pls try again with another genre\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (int log : restrictions) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (id \u003d\u003d log) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                throw new RestrictionExceptions(\"ohno \u003c\" + findGenreName(id)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                        + \"\u003e is already in your restrictions :( pls try again with another genre\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to check whether a genre id can be removed from user\u0027s restrictions."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: remove -g"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @throws RestrictionExceptions when id don\u0027t belong to preferences"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static void checkForRemoveGenre(int id, ArrayList\u003cInteger\u003e restrictions)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throws RestrictionExceptions, IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        boolean flag \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (int log : restrictions) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (id \u003d\u003d log) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                flag \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (flag) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throw new RestrictionExceptions(\"ohno \u003c\" + findGenreName(id)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    + \"\u003e does not belong to your restrictions :( pls try again with another genre\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private static String findGenreName(int id) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ObjectMapper mapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        InputStream inputStream \u003d new FileInputStream(\"EPdata/GenreId.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        TypeReference\u003cArrayList\u003cGenreId\u003e\u003e typeReference \u003d new TypeReference\u003cArrayList\u003cGenreId\u003e\u003e() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        };"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ArrayList\u003cGenreId\u003e genreIds \u003d mapper.readValue(inputStream, typeReference);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (GenreId log : genreIds) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (log.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                inputStream.close();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                return log.getGenre();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        inputStream.close();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return \"0\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 2,
      "nwenhui": 76
    }
  },
  {
    "path": "src/main/java/entertainment/pro/commons/exceptions/logic/PlaylistExceptions.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "package entertainment.pro.commons.exceptions.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.strings.PromptMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.commons.exceptions.InvalidFormatCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.commons.exceptions.InvalidParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.model.MovieInfoObject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.model.Playlist;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.model.PlaylistMovieInfoObject;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.model.UserProfile;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.storage.utils.EditPlaylistJson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwenhui"
        },
        "content": " * logic for handling exceptions in playlist commands."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "public class PlaylistExceptions {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to check if create command is in correct format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: playlist create PLAYLIST_NAME"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * checks: whether user input payload"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * whether playlist name for new playlist is in use"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static void checkCreateCommand(String payload, UserProfile userProfile)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throws InvalidFormatCommandException, InvalidParameterException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        checkPayload(payload);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        checkNameExist(payload, userProfile);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to check if delete command is in correct format."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: playlist delete PLAYLIST_NAME"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * checks: whether user input payload"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * whether playlist to be deleted exists"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static void checkDeleteCommand(String payload, UserProfile userProfile)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throws InvalidFormatCommandException, InvalidParameterException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        checkPayload(payload);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        checkPayloadPlaylist(payload, userProfile);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to check if add command is in correct format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: playlist add PLAYLIST_NAME [-m INDEX...]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * checks: whether user input payload"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * whether playlist to be edited exists"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * whether INDEX is a number"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * whether INDEX is within range"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * whether the movie is already in the playlist"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static void checkAddCommand(String payload, Map\u003cString, ArrayList\u003cString\u003e\u003e flagMap,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                                       UserProfile userProfile, ArrayList\u003cMovieInfoObject\u003e movies)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throws InvalidFormatCommandException, InvalidParameterException, IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        checkPayload(payload);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        checkPayloadPlaylist(payload, userProfile);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        Playlist playlist \u003d new EditPlaylistJson(payload).load();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (Map.Entry\u003cString, ArrayList\u003cString\u003e\u003e flag : flagMap.entrySet()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            checkFlagMap(flag);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            for (String log : flag.getValue()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                checkIndexInput(log);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                int index \u003d Integer.parseInt(log.trim()) - 1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                checkIndex(index, movies.size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                checkMovieForAdd(movies.get(index), playlist);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to check if remove command is in correct format."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: playlist remove PLAYLIST_NAME [-m INDEX...]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * checks: whether user input payload"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * whether playlist to be edited exists"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * whether INDEX is a number"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * whether INDEX is within range (if within range then movie is already in playlist and can be deleted)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static void checkRemoveCommand(String payload, Map\u003cString, ArrayList\u003cString\u003e\u003e flagMap,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                                          UserProfile userProfile, ArrayList\u003cMovieInfoObject\u003e movies)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throws InvalidFormatCommandException, InvalidParameterException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        checkPayload(payload);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        checkPayloadPlaylist(payload, userProfile);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (Map.Entry\u003cString, ArrayList\u003cString\u003e\u003e flag : flagMap.entrySet()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            checkFlagMap(flag);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            for (String log : flag.getValue()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                checkIndexInput(log);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                int index \u003d Integer.parseInt(log.trim()) - 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                checkIndex(index, movies.size());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to check if set command is in correct format."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: playlist set PLAYLIST_NAME [-n NEW_PLAYLIST_NAME] [-d NEW_DESCRIPTION]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * checks: whether user input payload"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * whether playlist to be edited exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * whether NEW_PLAYLIST_NAME is in use"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static void checkSetCommand(String payload, Map\u003cString, ArrayList\u003cString\u003e\u003e flagMap,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                                       UserProfile userProfile)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throws InvalidFormatCommandException, InvalidParameterException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        checkPayload(payload);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        checkPayloadPlaylist(payload, userProfile);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (Map.Entry\u003cString, ArrayList\u003cString\u003e\u003e flag : flagMap.entrySet()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            checkSetFlagMap(flag);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (flag.getKey().equals(\"-n\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                String newName \u003d appendFlagMap(flag.getValue());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                checkNameExist(newName, userProfile);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to check if clear command is in correct format."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: playlist clear PLAYLIST_NAME"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * checks: whether user input payload"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * whether playlist to be edited exists"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static void checkClearCommand(String payload, UserProfile userProfile)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throws InvalidFormatCommandException, InvalidParameterException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        checkPayload(payload);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        checkPayloadPlaylist(payload, userProfile);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to check whether that command\u0027s payload is empty."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: all playlist commands"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @throws InvalidFormatCommandException when payload is empty"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private static void checkPayload(String payload) throws InvalidFormatCommandException, InvalidParameterException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (payload.isEmpty()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throw new InvalidFormatCommandException(PromptMessages.PLAYLIST_PAYLOAD_EMPTY);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } else if (payload.charAt(0) \u003d\u003d \u0027-\u0027) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throw new InvalidParameterException(PromptMessages.INVALID_PAYLOAD);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to check whether playlist with that name exists."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: create / set -n"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @throws InvalidParameterException when that name already belongs to an existing playlist"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private static void checkNameExist(String name, UserProfile userProfile) throws InvalidParameterException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (String log : userProfile.getPlaylistNames()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (name.equals(log)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                throw new InvalidParameterException(PromptMessages.PLAYLIST_EXISTS_START + name"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                        + PromptMessages.PLAYLIST_EXISTS_END);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to check whether a particular movie can be added to playlist."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: add -m"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @throws InvalidParameterException when movie already belongs to playlist"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private static void checkMovieForAdd(MovieInfoObject movie, Playlist playlist) throws InvalidParameterException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        boolean flag \u003d false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (PlaylistMovieInfoObject log : playlist.getMovies()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (movie.getId() \u003d\u003d log.getId()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                flag \u003d true;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (flag) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throw new InvalidParameterException(PromptMessages.CANNOT_ADD_TO_PLAYLIST_START + movie.getMovieTitle()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    + PromptMessages.CANNOT_ADD_TO_PLAYLIST_END);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to check whether playlist name in playload exists."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: set / add / remove / clear / delete"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @throws InvalidParameterException when payload playlist does not exist"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private static void checkPayloadPlaylist(String name, UserProfile userProfile) throws InvalidParameterException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        boolean flag \u003d true;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (String log : userProfile.getPlaylistNames()) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (name.equals(log)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                flag \u003d false;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (flag) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throw new InvalidParameterException(PromptMessages.PLAYLIST_DOES_NOT_EXISTS_START + name"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    + PromptMessages.PLAYLIST_DOES_NOT_EXISTS_END);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to check whether the index indicated is out of range."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: add -m / remove -m"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @throws InvalidParameterException when index is out of bounds"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private static void checkIndex(int i, int size) throws InvalidParameterException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if ((i \u003c 0) || (i \u003e\u003d size)) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throw new InvalidParameterException(PromptMessages.INDEX_OUT_OF_BOUNDS_START + ++i"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    + PromptMessages.INDEX_OUT_OF_BOUNDS_END + size);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * check whether user input a number for movie index."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @throws InvalidParameterException when user input characters instead"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private static void checkIndexInput(String input) throws InvalidParameterException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        boolean flag \u003d false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            Integer.parseInt(input);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            flag \u003d true;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (flag) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throw new InvalidParameterException(PromptMessages.INDEX_NOT_NUMBER_START + input"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    + PromptMessages.INDEX_NOT_NUMBER_END);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * check whether flag used is valid for this command."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: add / remove"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @throws InvalidFormatCommandException when flag is not [-m]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private static void checkFlagMap(Map.Entry\u003cString, ArrayList\u003cString\u003e\u003e log) throws InvalidFormatCommandException {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (!log.getKey().equals(\"-m\")) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throw new InvalidFormatCommandException(PromptMessages.INVALID_FLAG_START + log.getKey()"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    + PromptMessages.INVALID_FLAG_END);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * check whether flag used is valid for this command."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: set"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @throws InvalidFormatCommandException when flag is not [-n] or [-d]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private static void checkSetFlagMap(Map.Entry\u003cString, ArrayList\u003cString\u003e\u003e log)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throws InvalidFormatCommandException {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        boolean flag \u003d true;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (log.getKey().equals(\"-n\") || log.getKey().equals(\"-d\")) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            flag \u003d false;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (flag) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throw new InvalidFormatCommandException(PromptMessages.INVALID_FLAG_START + log.getKey()"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    + PromptMessages.INVALID_FLAG_END);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private static String appendFlagMap(ArrayList\u003cString\u003e flagMapArrayList) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        String appends \u003d \"\";"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        boolean flag \u003d true;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (String log : flagMapArrayList) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (!flag) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                appends +\u003d \", \";"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            appends +\u003d log.trim();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            flag \u003d false;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return appends;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 8,
      "nwenhui": 260,
      "Pdotdeep": 1
    }
  },
  {
    "path": "src/main/java/entertainment/pro/commons/exceptions/logic/SetExceptions.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "package entertainment.pro.commons.exceptions.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.strings.PromptMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.commons.exceptions.InvalidFormatCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.commons.exceptions.InvalidParameterException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.commons.exceptions.NoPermissionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.model.UserProfile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.storage.user.ProfileCommands;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import org.json.simple.JSONArray;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import org.json.simple.JSONObject;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import org.json.simple.parser.JSONParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import org.json.simple.parser.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwenhui"
        },
        "content": " * logic for handling exceptions in set commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "public class SetExceptions {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to check if name command is in correct format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: set name USER_NAME"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * checks: whether user input payload"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static void checkNameCommand(String payload) throws InvalidFormatCommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        checkPayload(payload);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to check if age command is in correct format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: set age USER_AGE"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * checks: whether user input payload"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * whether payload is a number"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * whether payload is a positive number"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static void checkAgeCommand(String payload) throws InvalidParameterException, InvalidFormatCommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        checkPayload(payload);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        checkAgeInput(payload);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        checkPositiveNumber(payload);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to check if preference command is in correct format."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: set preference [-a YES / NO] [-g GENRE...]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * checks: whether user use valid flags"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * for [-g]:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * whether GENRE is valid"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * whether GENRE belongs to preference / restriction"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * for [-a]:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * whether user\u0027s age is \u003e\u003d 21"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * whether flagging input is valid"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static void checkPreferenceCommand(Map\u003cString, ArrayList\u003cString\u003e\u003e flagMap, UserProfile userProfile)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throws InvalidFormatCommandException, InvalidParameterException, IOException, NoPermissionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (Map.Entry\u003cString, ArrayList\u003cString\u003e\u003e flag : flagMap.entrySet()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            System.out.println(count++);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            checkPreferenceFlag(flag);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (flag.getKey().equals(\"-g\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                for (String log : flag.getValue()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    checkValidGenre(log);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    checkForSetPreference(findGenreID(log.trim()), userProfile.getGenreIdRestriction());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            } else if (flag.getKey().equals(\"-a\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                checkAgeForSetAdult(userProfile);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                checkForSetAdult(flag.getValue().get(0));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to check if restriction command is in correct format."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: set restriction [-g GENRE...]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * checks: whether user use valid flags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * whether GENRE is valid"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * whether GENRE belongs to preference / restriction"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static void checkRestrictionCommand(Map\u003cString, ArrayList\u003cString\u003e\u003e flagMap, UserProfile userProfile)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throws IOException, InvalidParameterException, InvalidFormatCommandException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (Map.Entry\u003cString, ArrayList\u003cString\u003e\u003e flag : flagMap.entrySet()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            checkRestrictionFlag(flag);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            for (String log : flag.getValue()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                checkValidGenre(log);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                checkForSetRestriction(findGenreID(log.trim()), userProfile.getGenreIdPreference());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to check if sort command is in correct format."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: set sort 1 / 2 / 3"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * checks: whether user valid input"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static void checkSortCommand(String payload) throws InvalidParameterException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        checkSortPayload(payload);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to check whether that command\u0027s payload is empty."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: all set commands"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @throws InvalidFormatCommandException when payload is empty"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private static void checkPayload(String payload) throws InvalidFormatCommandException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (payload.isEmpty()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throw new InvalidFormatCommandException(PromptMessages.SET_PAYLOAD_EMPTY);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * check whether user input a number for age."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: age"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @throws InvalidParameterException when user input characters instead"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private static void checkAgeInput(String input) throws InvalidParameterException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        boolean flag \u003d false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            Integer.parseInt(input);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            flag \u003d true;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (flag) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throw new InvalidParameterException(PromptMessages.INDEX_NOT_NUMBER_START + input"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    + PromptMessages.INDEX_NOT_NUMBER_END);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * check whether user input a positive integer for age."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: age"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @throws InvalidParameterException when user input negative sign"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private static void checkPositiveNumber(String age) throws InvalidParameterException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (age.contains(\"-\")) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throw new InvalidParameterException(PromptMessages.AGE_IS_NEGATIVE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * check whether flag used is valid for this command."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: preference"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @throws InvalidFormatCommandException when flag is not [-g] or [-a]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private static void checkPreferenceFlag(Map.Entry\u003cString, ArrayList\u003cString\u003e\u003e log)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throws InvalidFormatCommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        boolean flag \u003d true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (log.getKey().equals(\"-g\") || log.getKey().equals(\"-a\")) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            flag \u003d false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (flag) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throw new InvalidFormatCommandException(PromptMessages.INVALID_FLAG_START + log.getKey()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    + PromptMessages.INVALID_FLAG_END);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * check whether user input adult options correctly."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: preference -a"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @throws InvalidFormatCommandException when user input options !\u003d yes or no"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private static void checkForSetAdult(String option) throws InvalidFormatCommandException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        boolean flag \u003d true;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (option.equalsIgnoreCase(\"yes\") || option.equalsIgnoreCase(\"no\")) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            flag \u003d false;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (flag) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throw new InvalidFormatCommandException(PromptMessages.INVALID_ADULT_OPTION_START + option"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    + PromptMessages.INVALID_ADULT_OPTION_END);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * check whether flag used is valid for this command."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: restriction"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @throws InvalidFormatCommandException when flag is not [-g]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private static void checkRestrictionFlag(Map.Entry\u003cString, ArrayList\u003cString\u003e\u003e log)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throws InvalidFormatCommandException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (!log.getKey().equals(\"-g\")) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throw new InvalidFormatCommandException(PromptMessages.INVALID_FLAG_START + log.getKey()"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    + PromptMessages.INVALID_FLAG_END);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to check whether the user input a valid genre name."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: preference -g / restriction -g"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @throws InvalidParameterException when genre does not exist"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private static void checkValidGenre(String inputGenre) throws InvalidParameterException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        String[] genres \u003d {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"Action\", \"Adventure\", \"Animation\", \"Comedy\", \"Crime\","
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"Documentary\", \"Drama\", \"Family\", \"Fantasy\", \"History\","
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"Horror\", \"Music\", \"Mystery\", \"Romance\", \"Science Fiction\","
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"TV Movie\", \"Thriller\", \"War\", \"Western\""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        };"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        boolean flag \u003d true;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (String log : genres) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (inputGenre.equalsIgnoreCase(log)) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                flag \u003d false;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (flag) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throw new InvalidParameterException(PromptMessages.INVALID_GENRE_NAME_START + inputGenre"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    + PromptMessages.INVALID_GENRE_NAME_END);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to check whether a genre id can be set to user\u0027s preferences."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: preference -g"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @throws InvalidParameterException when id already belongs to restrictions"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static void checkForSetPreference(int id, ArrayList\u003cInteger\u003e restrictions) throws IOException,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            InvalidParameterException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (int log : restrictions) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (id \u003d\u003d log) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                throw new InvalidParameterException(PromptMessages.GENRE_IN_RESTRICTION_START + findGenreName(id)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                        + PromptMessages.GENRE_IN_RESTRICTION_END);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to check whether a genre id can be set to user\u0027s restriction."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: restriction -g"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @throws InvalidParameterException when id already belongs to preferences"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static void checkForSetRestriction(int id, ArrayList\u003cInteger\u003e preferences) throws InvalidParameterException,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                IOException {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (int log : preferences) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (id \u003d\u003d log) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                throw new InvalidParameterException(PromptMessages.GENRE_IN_PREFERENCE_START + findGenreName(id)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                        + PromptMessages.GENRE_IN_PREFERENCE_END);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * check whether user can edit their adult restriction."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: preference -a"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @throws NoPermissionException when user\u0027s age is below 21"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private static void checkAgeForSetAdult(UserProfile userProfile) throws NoPermissionException {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (userProfile.getUserAge() \u003c 21) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throw new NoPermissionException(PromptMessages.AGE_RESTRICTED);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to check if user use correct options for sort."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * command: sort"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @throws InvalidParameterException when user input !\u003d 1 or 2 or 3"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private static void checkSortPayload(String payload) throws InvalidParameterException {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        boolean flag \u003d true;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (payload.equals(\"1\") || payload.equals(\"2\") || payload.equals(\"3\")) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            flag \u003d false;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (flag) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throw new InvalidParameterException(PromptMessages.INVALID_SORT_OPTION_START + payload"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    + PromptMessages.INVALID_SORT_OPTION_END);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to find genreId for corresponding genre name."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private static Integer findGenreID(String genreName) throws IOException {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        InputStream inputStream \u003d ProfileCommands.class.getResourceAsStream(\"/data/GenreId.json\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        InputStreamReader inputStreamReader \u003d new InputStreamReader(inputStream);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        BufferedReader bufferedReader \u003d new BufferedReader(inputStreamReader);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        String genreListString \u003d \"\";"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            genreListString +\u003d line;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        bufferedReader.close();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        inputStreamReader.close();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        inputStream.close();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return Integer.parseInt(parseToId(genreListString, genreName.trim()));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to find genre name for corresponding id."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private static String findGenreName(int id) throws IOException {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        InputStream inputStream \u003d ProfileCommands.class.getResourceAsStream(\"/data/GenreId.json\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        InputStreamReader inputStreamReader \u003d new InputStreamReader(inputStream);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        BufferedReader bufferedReader \u003d new BufferedReader(inputStreamReader);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        String genreListString \u003d \"\";"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            genreListString +\u003d line;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        bufferedReader.close();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        inputStreamReader.close();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        inputStream.close();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return parseToName(genreListString, Integer.toString(id));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private static String parseToName(String genreListString, String id) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        JSONParser parser \u003d new JSONParser();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        JSONArray jsonArray \u003d new JSONArray();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            jsonArray \u003d (JSONArray) parser.parse(genreListString);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (org.json.simple.parser.ParseException e) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (Object o : jsonArray) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            JSONObject jsonObject \u003d (JSONObject) o;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            String genreId \u003d (String) jsonObject.get(\"id\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (genreId.equals(id)) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                return (String) jsonObject.get(\"genre\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return \"0\";"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private static String parseToId(String genreListString, String name) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        JSONParser parser \u003d new JSONParser();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        JSONArray jsonArray \u003d new JSONArray();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            jsonArray \u003d (JSONArray) parser.parse(genreListString);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (Object o : jsonArray) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            JSONObject jsonObject \u003d (JSONObject) o;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            String genreName \u003d (String) jsonObject.get(\"genre\");"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (genreName.equalsIgnoreCase(name)) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                return (String) jsonObject.get(\"id\");"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return \"0\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 11,
      "nwenhui": 337,
      "Pdotdeep": 7
    }
  },
  {
    "path": "src/main/java/entertainment/pro/commons/strings/CommandRootKeyStrings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//@@author pdotdeep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.commons.strings;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " *  Constant Strings for Root Key Words."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public class CommandRootKeyStrings {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String SEARCH \u003d \"search\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String HELP \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String VIEW \u003d \"view\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String WATCHLIST \u003d \"watchlist\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String YES \u003d \"yes\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String BLACKLIST \u003d \"blacklist\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String SET \u003d \"set\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String PREFERENCE \u003d \"preference\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String PLAYLIST \u003d \"playlist\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String RESTRICTION \u003d \"restriction\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String EXIT \u003d \"exit\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String FIND \u003d \"find\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pdotdeep": 22
    }
  },
  {
    "path": "src/main/java/entertainment/pro/commons/strings/PromptMessages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.commons.strings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * Contains and defines messages printed by the app."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class PromptMessages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    // view back messages"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String VIEW_BACK_FAILURE \u003d \"Sorry, there is nothing to view back!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String VIEW_BACK_SUCCESS \u003d \"Nice! Displaying back your search results...\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String TO_VIEW_BACK_SEARCHES \u003d \"To go back to search results, enter \u0027view back\u0027\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    // process message"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String WAIT_FOR_APP_TO_PROCESS \u003d \"Please wait while the app processes your request...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    //genre related messages"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String INVALID_GENRE_NAME \u003d \"I\u0027m sorry but you have entered a invalid genre...\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String REPETITVE_GENRE_NAME \u003d \"I\u0027m sorry but the genre entered by you already exists \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            + \"or you are entering the same genre more than a time...\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String GENRE_DOES_NOT_EXIST \u003d \"I\u0027m sorry but the genre entered by you does not exists \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            + \"under your preferences\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    //ui related messages"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String SETTING_LABELS_UI \u003d \"Setting/editing labels in UI\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    // general search related messages"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String STARTING_SEARCH_MESSAGE \u003d \"Starting search request...\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String RETRIEVING_SEARCH_PROFILE \u003d \"Retrieving seacrh profile set by user...\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String REMOVE_BLACLISTED_ITEMS_FROM_SEARCH \u003d \"Removing blacklisted items from search results.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String DISPLAYING_MORE_INFO \u003d \"Displaying more info about a movie/TV\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String UPDATING_SORT_IN_UI \u003d \"Updating sort options in the UI\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String UNSUPPORTED_ENCODING_SEARCH \u003d \"Unsupported Encoding Exception detected\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    // search for movies related messages"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String SEARCH_TYPE_IS_MOVIES \u003d \"Search type is movies...\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String VIEW_CURRENT_MOVIES_SUCCESS \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"Data fetch is complete! Displaying list of currently showing movies...\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String VIEW_UPCOMING_MOVIES_SUCCESS \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"Data fetch is complete! Displaying list of upcoming movies...\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String VIEW_TRENDING_MOVIES_SUCCESS \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"Data fetch is complete! Displaying list of most trending movies...\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String VIEW_POPULAR_MOVIES_SUCCESS \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"Data fetch is complete! Displaying list of most popular movies...\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String VIEW_TOP_RATED_MOVIES_SUCCESS \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"Data fetch is complete! Displaying list of top-rated movies...\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String VIEW_SEARCH_MOVIES_SUCCESS \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"Data fetch is complete! Displaying list of movies related to the title entered...\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String SEARCH_TYPE_IS_CURRENT_MOVIES \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \"Search type is currently showing movies...\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String SEARCH_TYPE_IS_UPCOMING_MOVIES \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \"Search type is upcoming movies...\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String SEARCH_TYPE_IS_TRENDING_MOVIES \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \"Search type is most trending movies...\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String SEARCH_TYPE_IS_POPULAR_MOVIES \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \"Search type is most popular movies...\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String SEARCH_TYPE_IS_TOP_RATED_MOVIES \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \"Search type is top-rated movies...\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String SEARCH_TYPE_IS_SEARCH_MOVIES \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \"Search type is movies related to the title entered...\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    // search for tv related messages"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String SEARCH_TYPE_IS_TV \u003d \"Search type is TV shows...\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String VIEW_CURRENT_TV_SUCCESS \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"Data fetch is complete! Displaying list of currently showing TV shows...\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String VIEW_TRENDING_TV_SUCCESS \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"Data fetch is complete! Displaying list of most trending TV shows...\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String VIEW_POPULAR_TV_SUCCESS \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"Data fetch is complete! Displaying list of most popular TV shows...\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String VIEW_TOP_RATED_TV_SUCCESS \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"Data fetch is complete! Displaying list of top-rated TV shows...\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String VIEW_SEARCH_TV_SUCCESS \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"Data fetch is complete! Displaying list of TV shows related to the title entered...\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String SEARCH_TYPE_IS_CURRENT_TV \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \"Search type is currently showing TV shows...\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String SEARCH_TYPE_IS_TRENDING_TV \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \"Search type is most trending TV shows...\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String SEARCH_TYPE_IS_POPULAR_TV \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \"Search type is most popular TV shows...\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String SEARCH_TYPE_IS_TOP_RATED_TV \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \"Search type is top-rated TV shows...\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String SEARCH_TYPE_IS_SEARCH_TV \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \"Search type is TV shows related to the title entered...\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    // general search failure related messages"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String EMPTY_PARAM_IN_SEARCH \u003d \"Empty parameter entered in search command\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String INVALID_PARAM_IN_SEARCH \u003d \"Invalid parameter entered in search command\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    // invalid combination of parameters message"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String INVALID_COMBI_OF_FLAGS \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"I\u0027m sorry but this is a invalid command. \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    + \"You can either set your preferences to be what\u0027s saved on the app \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    + \"or enter new preferences particularly for this search request \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    + \"but can\u0027t do both at the same time!\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    // no result found message"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String NO_RESULTS_FOUND \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"I\u0027m very sorry but could not find any results that matches your request. \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    + \"Try entering a different command!\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    // API related message"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String STARTING_DATA_FETCH_FROM_API \u003d \"Starting data fetch from MovieDB API\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String DATA_OBTAINED_FROM_API \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"[Data displayed here was obtained from an external source]\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String RECACHING_DATA_API_ERROR \u003d \"Sorry, but something went wrong when recaching data\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String API_FAIL_GENERAL \u003d \"I\u0027sorry, but something went wrong when fetching data. \""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            + \"Please specify your search request clearly...\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String API_NULL_DATA \u003d \"Null data in API\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String API_TIME_OUT \u003d \"☹ I\u0027sorry, but your request took so long\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String API_MALFORMED_URL \u003d \"Malformed URL in fetching data\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String SOCKET_TIMEOUT_URL \u003d \"Socket Timeout in fetching data\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String IO_ERROR_URL \u003d \"I/O Exception in fetching data\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String API_INVALID_REQUEST \u003d \"☹ I\u0027sorry, but your request is either unclear or invalid\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String NULL_URL \u003d \"Null URL detected.\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String DATA_EXTRACT_FROM_API_SUCCESS \u003d \"Data has been extracted from API successfully\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String EXTRACT_MORE_INFO_START \u003d \"Extracting more information about a particular movie/TV show\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String EXTRACT_MORE_INFO_COMPLETE \u003d \"Extraction of more information about a particular \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            + \"movie/TV show complete\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String EXTRACT_CAST_SUCCESS \u003d \"Extraction of cast details is a success\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String EXTRACT_CERT_SUCCESS \u003d \"Extraction of cert details is a success\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String UNABLE_TO_EXTRACT_CAST \u003d \"Unable to extract cast details from API\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String UNABLE_TO_EXTRACT_CERT \u003d \"Unable to extract cert details from API\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    // exit related message"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String EXIT \u003d \"App is going to close.\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    // data parsing and filtering related messages"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String NO_GENRES_PREF_SET \u003d \"No genre preference was set by user for this search request\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String NO_GENRES_RESTRICT_SET \u003d \"No genre preference was set by user for this search request\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String FAILED_ADULT_REQUIREMENT \u003d \"This movie/TV show will not be added to \""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            + \"the search results because \""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            + \"it failed adult requirement\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String FAILED_NAME_REQUIREMENT \u003d \"This movie/TV show will not be added to the search \""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            + \"results because \""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            + \"it failed to match the name entered by user\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String FAILED_GENRE_PREF_REQUIREMENT \u003d \"This movie/TV show will not be added to the \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            + \"search results because \""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            + \"it does not contains the genre wanted by user\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String FAILED_GENRE_RESTRICT_REQUIREMENT \u003d \"This movie/TV show will not be added \""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            + \"to the search results because it contains the genre restricted by user\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String PASSED_REQUIREMENT \u003d \"This movie/TV show will be added to the search results because \""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            + \"it passed the requirements\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String RATINGS_FOUND_AS_LONG \u003d \"Ratings for a movie/TV show was found to be in long\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String DATA_PARSING_BEGINS \u003d \"Beginning data parsing\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String CHECK_CONDITION \u003d \"Checking whether the search results meet user\u0027 wants if any\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String CHECK_SORT_CONDITION \u003d \"Checking whether the search results need to be sorted \""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            + \"according to users\u0027 needs\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String SORT_ALPHA_ORDER \u003d \"Succssfully sorted results in alphabetical order\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String SORT_BY_RATINGS \u003d \"Succssfully sorted results by ratings\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String SORT_BY_RELEASE_DATE \u003d \"Succssfully sorted results by release dates\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String DATA_PROCESSING_IS_COMPLETE \u003d \"Data processing is complete. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            + \"Sending data to MovieHandler class.\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    // retrieve data from local files message"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String DATA_OBTAINED_FROM_LOCAL_FILES \u003d"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"[Data displayed here was obtained from storage files as weak/no internet connection was detected.\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    + \"Please take note that posters for search results are unavailable for offline search requests]\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String IO_EXCEPTION_IN_OFFLINE \u003d \"IO Exception when extracting data from offline\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String DATA_EXTRACT_FROM_OFFLINE_NEEDED \u003d \"Data needs to be extracted from offline files\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String DATA_EXTRACT_FROM_OFFLINE_SUCCESS \u003d \"Data has been extracted from \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            + \"offline files successfully\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String START_OFFLINE_DATA_EXTRACTION \u003d \"Extraction of offline data begins\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String OFFLINE_DATA_EXTRACTION_FAILED \u003d \"Unable to extract data from offline files\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String OFFLINE_DATA_EXTRACTION_SUCCESS \u003d \"Extraction of offline data is successful\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String EXTRACTING_FROM_FILE \u003d \"Extracting from respective file\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String EXTRACTED_FROM_FILE \u003d \"Extracted from respective file\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String PARSE_EXCEPTION_IN_EXTRACTION \u003d \"Parse exception took place when extracting data\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    // view more info related message"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String TO_VIEW_MORE_INFO \u003d \"To view more information about a movie/TV show, enter the command, \""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            + \"\u0027view entry NUM\u0027 where NUM is the integer of the movie/TV show printed below its title.\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    // preference related messages"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String EDIT_PREFERENCES_COMMAND \u003d \"User have entered command to edit preferences.\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String CHECKING_FLAGS \u003d \"Starting to check which categories user want to edit\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String INVALID_PREFERENCE_FLAGS \u003d \"Invalid flag detected\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String EMPTY_PREFERENCE_FLAGS \u003d \"No flags detected\";"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String PREFERENCES_SUCCESS \u003d \"Nice! You have successfully updated your preferences\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String SUBROOT_PREFERENCE \u003d \"Checking for subroot command entered...\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String SUBROOT_PREFERENCE_ADD \u003d \"Subroot command entered is add...\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String SUBROOT_PREFERENCE_REMOVE \u003d \"Subroot command entered is remove...\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String SUBROOT_PREFERENCE_CLEAR \u003d \"Subroot command entered is clear...\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String NO_SUBROOT_PREFERENCE \u003d \"No subroot command detected\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String UPDATING_INTEREFACE \u003d \"Editing preferences done. Now, updating interface..\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String INVALID_GENRE_NAME_ERROR \u003d \"I\u0027m sorry but you have entered a invalid genre...\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String REPETITVE_GENRE_NAME_ERROR \u003d \"I\u0027m sorry but the genre entered by you already exists \""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            + \"or you are entering the same genre more than a time...\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String GENRE_DOES_NOT_EXIST_ERROR \u003d \"I\u0027m sorry but the genre entered by you does not exists \""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            + \"under your preferences\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String DID_YOU_MEAN \u003d \"Did you mean:\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String LOGGER_UNKNOWN_COMMAND_TYPED \u003d \"Unknown command typed\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String COMMAND_MISSING_ARGS \u003d \"Command is missing a few arguments\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String UNABLE_TO_PROCESS \u003d \"Sorry we are unable to process your command. \""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            + \"Please check help for more details!\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    // autocomplete related messages"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String AUTOCOMPLETION_PROMPT \u003d \"Did you mean this?\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    // command related messages"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String UNKNOWN_COMMAND \u003d \"I\u0027m sorry, but I don\u0027t know what that means. \""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            + \"Refer to help for command formats :-(\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"Invalid format/parameter is used. Refer to help for command formats :-(\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String OUT_OF_BOUNDS \u003d \"⚠ Index requested is out of bounds! :-(\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String MISSING_ARGUMENTS \u003d \"You are missing a few arguments! Type \u0027help me\u0027 to find out more!\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String MISSING_COMMAND \u003d \"You have entered an empty command!\";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    // blacklist related messages"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String BLACKLIST_ADD_SUCCUESS \u003d \"Successfully added to blacklist!\";"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String BLACKLIST_REMOVE_SUCCUESS \u003d \"Successfully removed from  blacklist!\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String BLACKLIST_REMOVE_FAILURE \u003d \"Could not find item in your blacklist. Check Spelling?\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String DUPLICATE_BLACKLIST \u003d \"Blacklisted item already exists. Here is your blacklist\\n\";"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String EXECUTING_MISTYPED_COMMAND \u003d \"Executing mistyped command\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    // file related messages"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String FILE_NOT_FOUND \u003d \"File not found!\";"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static final String FILES_NOT_FOUND \u003d \"File not found! Please wait for next update!\";"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    //PlaylistExceptions / SetExceptions messages"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String PLAYLIST_PAYLOAD_EMPTY \u003d"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"☹ I\u0027m sorry, but you did not enter a name for your playlist. Please try again in with playlist name\";"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String PLAYLIST_EXISTS_START \u003d"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"☹ I\u0027m sorry, but there\u0027s already a playlist with called \u003c\";"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String PLAYLIST_EXISTS_END \u003d"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"\u003e. Please try again with another name.\";"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String CANNOT_ADD_TO_PLAYLIST_START \u003d"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"☹ I\u0027m sorry, but \u003c\";"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String CANNOT_ADD_TO_PLAYLIST_END \u003d"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"\u003e. Please try again with another item\";"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String PLAYLIST_DOES_NOT_EXISTS_START \u003d"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"☹ I\u0027m sorry, but \u003c\";"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String PLAYLIST_DOES_NOT_EXISTS_END \u003d"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"\u003e does not exists. Please try again with another playlist title.\";"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String INDEX_OUT_OF_BOUNDS_START \u003d"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"☹ I\u0027m sorry, but the index \u003c \";"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String INDEX_OUT_OF_BOUNDS_END \u003d"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"\u003e is out of range :( Please try again with another index\";"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String INDEX_NOT_NUMBER_START \u003d"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"☹ I\u0027m sorry, but \u003c\";"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String INDEX_NOT_NUMBER_END \u003d"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"\u003e is not a number :( Please try again with a number\";"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String INVALID_FLAG_START \u003d"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"☹ I\u0027m sorry, but \u003c\";"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String INVALID_FLAG_END \u003d"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"\u003e is not a valid flag. Please try again in the correct format\";"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String INVALID_GENRE_NAME_START \u003d"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"☹ I\u0027m sorry, but \u003c\";"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String INVALID_GENRE_NAME_END \u003d"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"\u003e is not a valid genre. Please try again with another genre\";"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String GENRE_IN_RESTRICTION_START \u003d"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"☹ I\u0027m sorry, but \u003c\";"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String GENRE_IN_RESTRICTION_END \u003d"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"\u003e is already in your restrictions. Please try again with another genre\";"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String GENRE_IN_PREFERENCE_START \u003d"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"☹ I\u0027m sorry, but \u003c\";"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String GENRE_IN_PREFERENCE_END \u003d"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"\u003e is already in your preferences. Please try again with another genre\";"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String AGE_RESTRICTED \u003d"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"☹ I\u0027m sorry, but you are below 21 yrs old and are not allowed to set your adult restriction\";"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String SET_PAYLOAD_EMPTY \u003d"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"☹ I\u0027m sorry, but you did not enter your name/age. Please try again\";"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String INVALID_ADULT_OPTION_START \u003d"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"☹ I\u0027m sorry, but \u003c\";"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String INVALID_ADULT_OPTION_END \u003d"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"\u003e is an invalid option for adult preferences. Please try again with yes / no\";"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String INVALID_SORT_OPTION_START \u003d"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"☹ I\u0027m sorry, but \u003c\";"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String INVALID_SORT_OPTION_END \u003d"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"\u003e is an invalid sort option. Please try again with 1 / 2 / 3\";"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String AGE_IS_NEGATIVE \u003d"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"☹ I\u0027m sorry, but age needs to be a positive integer. Please try again\";"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String INVALID_PAYLOAD  \u003d"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \"☹ I\u0027m sorry, but payload can\u0027t start with \u0027-\u0027. Please try again\";"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    // cache related messages"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String READING_CACHE_FILES \u003d \"Reading cache files\";"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String RECONFIG_CACHE_FILES \u003d \"Reconfiguring cache files\";"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String NEED_TO_CACHE_FILES_AGAIN \u003d \"Need to recache file again...\";"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String NO_NEED_TO_CACHE_FILES_AGAIN \u003d \"No Need to recache file again.\";"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String READING_CACHE_DATA \u003d \"Reading cache data\";"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String READING_CACHE_DATA_IS_COMPLETE \u003d \"Reading cache data is complete\";"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String IO_EXCEPTION_CACHE_DATA \u003d \"IO Exception happened when reading data\";"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String CLASS_EXCEPTION_CACHE_DATA \u003d \"Class exception happened when reading data\";"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static final String WRITING_CACHE_DATA \u003d \"Reading cache data\";"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    //PlaylistCommand logger/feedback messages"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String PLAYLIST_CREATED \u003d \"Playlist successfully created!\";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String PLAYLIST_CREATE_ERROR \u003d \"An error occurred while trying to create playlist.\";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String PLAYLIST_DELETED \u003d \"Playlist successfully deleted!\";"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String PLAYLIST_DELETE_ERROR \u003d \"An error occurred while trying to delete playlist.\";"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String SHOWS_ADDED \u003d \"Items successfully added to playlist!\";"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String SHOWS_ADD_ERROR \u003d \"An error occurred while trying to add items to playlist.\";"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String SHOWS_REMOVED \u003d \"Items successfully removed from playlist!\";"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String SHOWS_REMOVE_ERROR \u003d \"An error occurred while trying to remove items from playlist.\";"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String PLAYLIST_CLEARED \u003d \"Playlist successfully cleared!\";"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String PLAYLIST_CLEARED_ERROR \u003d \"An error occurred while trying to clear playlist.\";"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String PLAYLIST_RENAMED \u003d \"Playlist successfully renamed!\";"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String PLAYLIST_DESCRIPTION \u003d \"Playlist\u0027s description successfully changed!\";"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String SETTING_ERROR \u003d \"An error occurred while setting details of playlists.\";"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String PLAYLIST_LISTED \u003d \"All playlist successfully listed!\";"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String PLAYLIST_BACKED \u003d \"Successfully returned to playlist\u0027s information page\";"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    //SetCommand logger/feedback messages"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String NAME_SET \u003d \"Successfully set user\u0027s name!\";"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String AGE_SET \u003d \"Successfully set user\u0027s age!\";"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String PREFERENCE_SET \u003d \"Successfully set user\u0027s preferences!\";"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String RESTRICTION_SET \u003d \"Successfully set user\u0027s restrictions!\";"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String SORT_SET \u003d \"Successfully set user\u0027s sort preference!\";"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String NAME_SET_ERROR \u003d \"An error occurred while setting user\u0027s name\";"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String AGE_SET_ERROR \u003d \"An error occurred while setting user\u0027s age\";"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String PREFERENCE_SET_ERROR \u003d \"An error occurred while setting user\u0027s preferences\";"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String RESTRICTION_SET_ERROR \u003d \"An error occurred while setting user\u0027s restrictions\";"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static final String SORT_SET_ERROR \u003d \"An error occurred while setting user\u0027s sort preference\";"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 147,
      "Pdotdeep": 52,
      "nwenhui": 126
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/cinemarequesterapi/CinemaInfoFetcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.logic.cinemarequesterapi;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * Interface for client classes to be notified about a fetch request by CinemaInfo objects."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "public interface CinemaInfoFetcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    void fetchedCinemasJson(String json);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    void connectionTimedOut();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hotspur1997": 4,
      "Riyas97": 3,
      "Pdotdeep": 4
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/cinemarequesterapi/CinemaRetrieveRequest.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.logic.cinemarequesterapi;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.strings.PromptMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.Exceptions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.movierequesterapi.RequestListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.movierequesterapi.UrlRetriever;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import entertainment.pro.model.CinemaInfoObject;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import org.json.simple.JSONArray;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import org.json.simple.JSONObject;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import org.json.simple.parser.JSONParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import org.json.simple.parser.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * Class that handles fetching results from The Google API service and then parsing them into CinemaInfoObjects."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "public class CinemaRetrieveRequest implements CinemaInfoFetcher {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private RequestListener variableListener;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    private ArrayList\u003cCinemaInfoObject\u003e parsedCinemas;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static final String MAIN_URL \u003d \"https://maps.googleapis.com/maps/api/place\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            + \"/textsearch/json?query\u003dcinemas+near+\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    private static final String API_KEY \u003d \"AIzaSyBocJpxC7ChqlrS_mq6L-GpgudmXCzcXig\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * constructor for cinema retrieve request class."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param variableListener calls the thread to execute the API"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public CinemaRetrieveRequest(RequestListener variableListener) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.variableListener \u003d variableListener;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        parsedCinemas \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * finds the nearest cinemas upon entering a desired location."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param location area to search"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * @return an array_list of cinemas with their info contained inside the CinemaInfoObject Class"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public ArrayList\u003cCinemaInfoObject\u003e searchNearestCinemas(String location)  {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            String[] token \u003d location.split(\" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            String result \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            for (int i \u003d 0; i \u003c token.length; i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                result +\u003d token[i];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                if (i !\u003d token.length - 1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    result +\u003d \"%20\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            String url \u003d MAIN_URL + result + \"\u0026key\u003d\" + API_KEY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            UrlRetriever retrieve \u003d new UrlRetriever();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            String json \u003d retrieve.readUrlAsString(new URL(url));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            fetchedCinemasJson(json);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        } catch (MalformedURLException | Exceptions e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        return parsedCinemas;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * parses the results from json into a CinemaInfoObject."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param json json result from the api request"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void fetchedCinemasJson(String json) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        if (json \u003d\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            variableListener.requestTimedOut(PromptMessages.NO_RESULTS_FOUND);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        JSONParser parser \u003d new JSONParser();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        JSONObject cinemaData \u003d new JSONObject();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            cinemaData \u003d (JSONObject) parser.parse(json);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            JSONArray cinemas;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            cinemas \u003d (JSONArray) cinemaData.get(\"results\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            parsedCinemas.clear();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            for (int i \u003d 0; i \u003c cinemas.size(); i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                parsedCinemas.add(parseCinemaJson((JSONObject) (cinemas.get(i))));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            Collections.sort(parsedCinemas, Comparator.comparingDouble(CinemaInfoObject::getRating));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            Collections.reverse(parsedCinemas);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * extracts out the data of each cinema from JSONObject to a MovieInfoObject."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param cinemaData JSONObject to be parsed"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * @return CinemaInfoObject of the desired cinema"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    private CinemaInfoObject parseCinemaJson(JSONObject cinemaData) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        String name \u003d (String) (cinemaData.get(\"name\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        double rating;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            rating \u003d (double) (cinemaData.get(\"rating\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        } catch (ClassCastException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            long doubleRating \u003d (long) (cinemaData.get(\"rating\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            rating \u003d (double) (doubleRating);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        String address \u003d (String) (cinemaData.get(\"formatted_address\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        CinemaInfoObject cinema \u003d new CinemaInfoObject(name, rating, address);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        return cinema;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * returns a list of retrieved cinemas from the users location."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * @return a list of cinemas nearest to the desired location"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public ArrayList\u003cCinemaInfoObject\u003e getParsedCinemas() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        return parsedCinemas;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * The function is called when the fetcher reported a connection time out."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * Notify the request listener."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public void connectionTimedOut() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        variableListener.requestTimedOut(PromptMessages.NO_RESULTS_FOUND);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hotspur1997": 91,
      "Riyas97": 26,
      "Pdotdeep": 13
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/contexts/CommandContext.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//@@author pdotdeep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.logic.contexts;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.enums.CommandKeys;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.parsers.CommandStructure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " * Represents the context for all Root and Subroot commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " * Auto complete makes use of helper functions from this class to perform autocompletion for commands"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public class CommandContext {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    static ArrayList\u003cString\u003e keywordsRoot \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    static ArrayList\u003cString\u003e keywordsSubRoot \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Initialises the Context to the all root and subroot commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static void initialiseContext() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (keywordsRoot.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            for (Map.Entry\u003cCommandKeys, CommandKeys[]\u003e e: CommandStructure.cmdStructure.entrySet()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                keywordsRoot.add(e.getKey().toString().toLowerCase());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                for (CommandKeys a: e.getValue()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    keywordsSubRoot.add(a.toString().toLowerCase());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Gets all Root Commands."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static ArrayList\u003cString\u003e getRoot() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return keywordsRoot;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Given the incomplete keyword, returns all possible root commands."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param key Incomplete root command from user input"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return An arraylist of possible root commands that the user might be trying to type"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static ArrayList\u003cString\u003e getPossibilitiesForRoot(String key) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e hints \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (String a : keywordsRoot) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (a.toLowerCase().startsWith(key.toLowerCase())) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                hints.add(a.toLowerCase());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return (ArrayList\u003cString\u003e) hints.clone();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Given the a certain Root command, the possible subRoot commands are returned."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param root index of the movie to mark as done"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static ArrayList\u003cString\u003e getPossibilitiesSubRootGivenRoot(String root) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e hints \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (Map.Entry\u003cCommandKeys, CommandKeys[]\u003e e : CommandStructure.cmdStructure.entrySet()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (e.getKey().toString().toLowerCase().trim().equals(root.trim().toLowerCase())) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                for (CommandKeys sr: e.getValue()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    hints.add(sr.toString().toLowerCase());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return hints;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Given the incomplete keyword, returns all possible subroot commands."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param key Incomplete subroot command from user input"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return An arraylist of possible root commands that the user might be trying to type"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static ArrayList\u003cString\u003e getPossibilitiesSubRoot(String key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e hints \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (String a : keywordsSubRoot) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (a.toLowerCase().startsWith(key.toLowerCase())) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                hints.add(a.toLowerCase());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return hints;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Given the incomplete keyword, returns all possible subroot commands."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param key  Incomplete subroot command from user input"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param root The root command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return An arraylist of possible root commands that the user might be trying to type"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static ArrayList\u003cString\u003e getPossibilitiesSubRoot(String root, String key) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e hints \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (CommandKeys a : CommandStructure.cmdStructure.get(CommandKeys.valueOf(root.toUpperCase()))) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (a.toString().toLowerCase().startsWith(key.toLowerCase())) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                hints.add(a.toString().toLowerCase());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return hints;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pdotdeep": 126
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/contexts/ContextHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//@@author pdotdeep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.logic.contexts;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.assertions.CommandAssertions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.enums.CommandKeys;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.parsers.CommandStructure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.storage.user.Blacklist;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.storage.user.WatchlistHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.storage.utils.EditProfileJson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.ui.Controller;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.ui.MovieHandler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " * Contains helper functions for autocompletion."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public class ContextHelper {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static final int NO_WORDS \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static final int ONE_WORD \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static final int TWO_WORDS \u003d 2;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static final int MORE_THAN_TWO_WORDS \u003d 3;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * test function to gain access to private isRootCommandComplete function for the purpose of testing."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param testRoot testcase for root"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return true if the testRoot command is completed"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static boolean testisRootCommandComplete(String testRoot) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return isRootCommandComplete(testRoot);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Checks if root command is complete or incomplete."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param root String root, either in complete or incomplete form"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return true if the Root command is completed"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static boolean isRootCommandComplete(String root) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assert (CommandAssertions.assertIsLowerString(root));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (CommandKeys c : CommandStructure.AllRoots) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (c.toString().toLowerCase().equals(root)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * test function to gain access to private isSubRootCommandComplete function for the purpose of testing."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param testSubRoot testcase for subroot"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return true if the testSubRoot command is completed"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static boolean testisSubRootCommandComplete(String testSubRoot) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assert (CommandAssertions.assertIsLowerString(testSubRoot));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return isSubRootCommandComplete(testSubRoot);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Checks if subroot command is complete or incomplete."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param subRoot String subRoot, either in complete or incomplete form"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return true if the subRoot command is completed"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static boolean isSubRootCommandComplete(String subRoot) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assert (CommandAssertions.assertIsLowerString(subRoot));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (Map.Entry\u003cCommandKeys, CommandKeys[]\u003e e: CommandStructure.cmdStructure.entrySet()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            for (CommandKeys a: e.getValue()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                if (a.toString().toLowerCase().equals(subRoot)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Returns the Incomplete words of the user input."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * If the incomplete word is only the command, then a single word is returned."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * If payload is incomplete, the entire payload is returned"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param command    Incomplete user input"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param controller Ui controller"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return String of incomplete words"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static String getLastIncompleteWords(String command, Controller controller) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String[] splitCommand \u003d command.split(\" \");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String incompleteCommand \u003d \"\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (splitCommand.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        } else if (splitCommand.length \u003c\u003d 2) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            int lastIndex \u003d splitCommand.length;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            lastIndex -\u003d 1;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            incompleteCommand \u003d splitCommand[lastIndex];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            String processedCommand \u003d String.join(\" \","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    Arrays.copyOfRange(splitCommand, 2, splitCommand.length));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            String[] commandFlagSplit \u003d processedCommand.split(\"-[a-z]\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            String[] lastinput \u003d commandFlagSplit[commandFlagSplit.length - 1].split(\",\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            incompleteCommand \u003d lastinput[lastinput.length - 1];"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return incompleteCommand.trim();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Returns the index of the end of the common substring between between 2 input Strings."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param a first String"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param b second String"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return index of the end of common substring"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static int subStringIndex(String a, String b) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assert (CommandAssertions.assertIsLowerString(a));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assert (CommandAssertions.assertIsLowerString(b));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (int i \u003d 0;; i++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (i \u003e\u003d a.length() || i \u003e\u003d b.length()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (!(a.charAt(i) \u003d\u003d b.charAt(i))) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return counter;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Given all posssible strings that the user can be typing,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * compute the common substring amongst all thee possibilities."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Function returns the difference in string between the"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * incomplete user input and common substring of all ossibilites."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param allPossibilities  Arraylist of all possible Strings the user could be trying to type"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param incompleteCommand incomplete String by user"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return String to be added to incomplete command by autocomplete"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static String completeCommand(ArrayList\u003cString\u003e allPossibilities, String incompleteCommand) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assert (CommandAssertions.assertIsLowerString(incompleteCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (allPossibilities.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        int lengthOfLongestCommonSubstring \u003d allPossibilities.get(0).length();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (int i \u003d 0; i \u003c allPossibilities.size() - 1; i++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            int commonSubIndex \u003d subStringIndex(allPossibilities.get(i).toLowerCase(),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    allPossibilities.get(i + 1).toLowerCase());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (commonSubIndex \u003c lengthOfLongestCommonSubstring) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                lengthOfLongestCommonSubstring \u003d commonSubIndex;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (incompleteCommand.length() \u003e lengthOfLongestCommonSubstring) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String completed \u003d allPossibilities.get(0).substring(incompleteCommand.length(),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                lengthOfLongestCommonSubstring);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return completed.trim();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Function to Filter hints based on incomplete command received."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param hints all hints"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param incompleteCmd incomplete command"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return possible hints based on incomplete Command."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static ArrayList\u003cString\u003e filterHints(ArrayList\u003cString\u003e hints, String incompleteCmd) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assert (CommandAssertions.assertIsLowerString(incompleteCmd));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e filteredHints \u003d  new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (String s : hints) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (s.toLowerCase().contains(incompleteCmd.toLowerCase())) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                filteredHints.add(s);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return filteredHints;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Gets all hints pertaining to the current user input and specific to the root command and subRoot command."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param root              Root command entered"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param subRoot           SubRoot Command entered"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param incompleteCommand Incomplete portion of the user input"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @returns all possible strings"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static ArrayList\u003cString\u003e commandSpecificHints(String root, String subRoot, String incompleteCommand) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assert (CommandAssertions.assertIsLowerString(root));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assert (CommandAssertions.assertIsLowerString(subRoot));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assert (CommandAssertions.assertIsLowerString(incompleteCommand));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        switch (root) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case (\"blacklist\"):"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            ArrayList\u003cString\u003e hints \u003d Blacklist.getBlackListHints(incompleteCommand);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (!subRoot.equals(\"remove\")) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                hints.addAll(SearchResultContext.getPossibilities(incompleteCommand));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            return hints;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case (\"watchlist\"):"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            ArrayList\u003cString\u003e watchlisthints \u003d WatchlistHandler.getWatchListHints(incompleteCommand);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (!subRoot.equals(\"remove\")) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                watchlisthints.addAll(SearchResultContext.getPossibilities(incompleteCommand));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            return watchlisthints;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case (\"playlist\"):"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                ArrayList\u003cString\u003e playlistNames \u003d new EditProfileJson().load().getPlaylistNames();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                return filterHints(playlistNames, incompleteCommand);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                return new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            return SearchResultContext.getPossibilities(incompleteCommand);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Updates the command input field based on the hints."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param controller MovieUI controller"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param allPossibilities  All possible suggestions for incomplete command"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param incompleteCommand The incomplete part of the command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static void updateCommandInputFieldWithHints(Controller controller,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                                                         ArrayList\u003cString\u003e allPossibilities,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                                                         String incompleteCommand) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String update \u003d completeCommand(allPossibilities, incompleteCommand);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ((MovieHandler) controller).updateTextField(update);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Creates a sublist of size newSize."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param hints         all of the suggestions for autocomplete."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param newSize       the required size of the subset."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return a subset of the hints. Used when the number of hints is far too long."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static ArrayList\u003cString\u003e getSubList(ArrayList\u003cString\u003e hints, int newSize) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e sublist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (String s : hints) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (newSize-- \u003c 0) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            sublist.add(s);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        sublist.add(\"...\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return sublist;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Gets all hints pertaining to the current user input."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param command    the current user input"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param controller for the UI."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @returns all possible strings"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static ArrayList\u003cString\u003e getAllHints(String command, Controller controller) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assert (CommandAssertions.assertIsLowerString(command));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        command \u003d command.toLowerCase();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String [] splitCommand \u003d command.split(\" \");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String incompleteCommand \u003d getLastIncompleteWords(command, controller);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e allPossibilities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (splitCommand.length \u003d\u003d NO_WORDS) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            return CommandContext.getRoot();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        } else if (splitCommand.length \u003d\u003d ONE_WORD \u0026\u0026 isRootCommandComplete(splitCommand[0])) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            allPossibilities \u003d  CommandContext.getPossibilitiesSubRootGivenRoot(splitCommand[0]);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            updateCommandInputFieldWithHints(controller, allPossibilities, \"\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        } else if (splitCommand.length \u003d\u003d ONE_WORD) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            allPossibilities \u003d  CommandContext.getPossibilitiesForRoot(incompleteCommand);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            updateCommandInputFieldWithHints(controller, allPossibilities, incompleteCommand);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        } else if (splitCommand.length \u003d\u003d TWO_WORDS \u0026\u0026 isSubRootCommandComplete(splitCommand[1])) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            allPossibilities \u003d commandSpecificHints("
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    splitCommand[0],"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    splitCommand[1],"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    \"\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (allPossibilities.size() \u003e 10) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                allPossibilities \u003d getSubList(allPossibilities, 10);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        } else if (splitCommand.length \u003d\u003d TWO_WORDS) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            allPossibilities \u003d CommandContext"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    .getPossibilitiesSubRoot(splitCommand[0], incompleteCommand);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            updateCommandInputFieldWithHints(controller, allPossibilities, incompleteCommand);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            allPossibilities \u003d commandSpecificHints("
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    splitCommand[0],"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    splitCommand[1],"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    incompleteCommand);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            updateCommandInputFieldWithHints(controller, allPossibilities, incompleteCommand);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return allPossibilities;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Pdotdeep": 331
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/contexts/SearchResultContext.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//@@author pdotdeep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.logic.contexts;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.model.MovieInfoObject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " * Represents the context for all Root and Subroot commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " * Auto complete makes use of helper functions from this class to perform autocompletion for commands"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public class SearchResultContext {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    static ArrayList\u003cString\u003e keywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    static ArrayList\u003cMovieInfoObject\u003e mMovies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    static ArrayList\u003cMovieInfoObject\u003e mCurrentMovies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * checkstyle made me put javadoc here \u003e:( whoever made this function pls edit the the javadoc tqtq -wh."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static void initialiseContext(String[] listOfKeys) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (String a : listOfKeys) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            keywords.add(a);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Given the a certain Root command, the possible subRoot commands are returned."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param key index of the movie to mark as done"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return Arraylist of possible string values"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static ArrayList\u003cString\u003e getPossibilities(String key) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e hints \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (String a : keywords) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (a.toLowerCase().startsWith(key.toLowerCase())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                hints.add(a);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return hints;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Gets the search result at a certain index."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param i index of the movie to return"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return Return MovieInfoObject"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static MovieInfoObject getItemAtIndex(int i) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return mCurrentMovies.get(i - 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Add results from the search query into search result context."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param moviesInfo Arraylist of Search results"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static void addResults(ArrayList\u003cMovieInfoObject\u003e moviesInfo) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        mCurrentMovies.clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (MovieInfoObject mi : moviesInfo) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            mCurrentMovies.add(mi);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (mMovies.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            for (MovieInfoObject mi : moviesInfo) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                mMovies.add(mi);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                keywords.add(mi.getTitle());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        HashMap\u003cLong, Integer\u003e movieDup \u003d new HashMap\u003cLong, Integer\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (MovieInfoObject a : mMovies) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            movieDup.put(a.getId(), new Integer(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (MovieInfoObject e : moviesInfo) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (movieDup.get(e.getId()) \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                mMovies.add(e);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                keywords.add(e.getTitle());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Gets the movies to display from the Search Result Context."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return Arraylist of MovieInfoObjects"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static ArrayList\u003cMovieInfoObject\u003e getMoviesToDisplay() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return mMovies;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pdotdeep": 97
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/execution/CommandStack.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//@@author pdotdeep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.logic.execution;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.strings.PromptMessages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.enums.CommandKeys;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.exceptions.Exceptions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.parsers.CommandSuper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " * Contains all the commands the user entered to be kept track of."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public class CommandStack {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static ArrayList\u003cCommandSuper\u003e myStack \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static int counter \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static long lastexec \u003d System.currentTimeMillis();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(CommandStack.class.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Adds the command to the command Stack."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static void pushCmd(CommandSuper cmd) throws IOException, Exceptions {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (cmd.getRoot() \u003d\u003d CommandKeys.YES) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            executeLastCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            myStack.add(cmd);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (cmd.isExecute()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                cmd.executeCommands();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Returns the next command for the command history."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return the next command in the list"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static String nextCommand() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (myStack.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (System.currentTimeMillis() - lastexec \u003e 3000) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            counter \u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            counter +\u003d 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            counter %\u003d myStack.size();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        lastexec \u003d System.currentTimeMillis();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return myStack.get(myStack.size() - 1 - counter).toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * pops the latest command from the command list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return returns the latest commmand"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static CommandSuper popCmd() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (myStack.size() \u003c 1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        CommandSuper topCmd \u003d myStack.get(myStack.size() - 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        myStack.remove(myStack.size() - 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return topCmd;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * returns the latest command from the command list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return returns the latest commmand"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static CommandSuper topCmd() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return myStack.size() \u003c 1 ? null : myStack.get(myStack.size() - 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Clears the command list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static void clearStack() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        myStack.clear();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Execute the latest command."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * This is in the case where by the user mistyped the command and has to type \u0027yes\u0027 to the"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * prompt to execute the predicted command"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static void executeLastCommand() throws IOException, Exceptions {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        logger.log(Level.INFO, PromptMessages.EXECUTING_MISTYPED_COMMAND);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (myStack.size() \u003c 1) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        CommandSuper cmd \u003d myStack.get(myStack.size() - 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (!cmd.isExecute()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            cmd.executeCommands();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            cmd.setExecute(true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Returns the size of the command stack."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return MyStack Size"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static int getSize() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return myStack.size();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pdotdeep": 120
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/movierequesterapi/InfoFetcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.logic.movierequesterapi;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * Interface for client classes to be updated about a data fetch by MovieInfoFetcher."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * Called when search requests are done."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * As such, this listener is not called when data fetch is done to extract cast"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * and cert information for a movie/TV show."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public interface InfoFetcher {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Called when data have been extracted from the MovieDB API and need to be parsed into a JSONArray."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param json Sting containing all the data."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    void fetchedJson(String json);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Called when data was not extracted from the MovieDB API due to weak/no internet connection."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for fetching data from offline storage files."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    void fetchOfflineData();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 22
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/movierequesterapi/MovieInfoFetcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.logic.movierequesterapi;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.strings.PromptMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.Exceptions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * Class responsible for fetching data from the MovieDB API asynchronously."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class MovieInfoFetcher implements Runnable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private URL movieRequestUrl;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private InfoFetcher movieRequestListener;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(MovieInfoFetcher.class.getName());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for constructing fetcher with a given URL."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param requestUrl The URL for sending the HTTP request"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param listener   The listener to call when the fetch completes or fails"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public MovieInfoFetcher(URL requestUrl, InfoFetcher listener) throws Exceptions {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        movieRequestListener \u003d listener;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        movieRequestUrl \u003d requestUrl;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (requestUrl \u003d\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.WARNING, PromptMessages.NULL_URL);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            throw new Exceptions(PromptMessages.NULL_URL);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for beginning the data fetch asynchronously."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String json \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            json \u003d UrlRetriever.readUrlAsString(movieRequestUrl);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            movieRequestListener.fetchedJson(json);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.DATA_EXTRACT_FROM_API_SUCCESS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (NullPointerException | Exceptions e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.DATA_EXTRACT_FROM_OFFLINE_NEEDED);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            movieRequestListener.fetchOfflineData();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.DATA_EXTRACT_FROM_OFFLINE_SUCCESS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 48,
      "Pdotdeep": 2
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/movierequesterapi/RequestListener.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.logic.movierequesterapi;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.model.MovieInfoObject;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * Interface responsible for listening to completed fetch requests from the MovieDB API."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public interface RequestListener {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Called to print message that data has been successfully fetched from the MovieDB API in the UI."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param message String to be printed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    void requestCompleted(String message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Called to print message that data was not extracted from the MovieDB API"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * due to bad/no internet connection in the UI."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Also, called whenit is unable tp recache data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param message String to be printed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    void requestTimedOut(String message);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Called when there was no data found that matches the search request."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    void emptyResults();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Called to transmit search results data to be displayed in the UI."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param resultData contains all the search results data to be displayed in the UI."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    void obtainedResultsData(ArrayList\u003cMovieInfoObject\u003e resultData);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 39
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/movierequesterapi/RetrieveRequest.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.logic.movierequesterapi;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.strings.PromptMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.Exceptions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.EmptyResultExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.model.SearchProfile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.storage.utils.OfflineSearchStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import entertainment.pro.logic.movierequesterapi.RequestListener;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import org.json.simple.JSONArray;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import org.json.simple.JSONObject;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import org.json.simple.parser.JSONParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.model.MovieInfoObject;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.io.UnsupportedEncodingException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.net.URLEncoder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * Class responsible for fetching results from The MovieDB API and parsing them into objects."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class RetrieveRequest implements InfoFetcher {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String DEFAULT_IMAGE_FILENAME \u003d \"/images/FakeMoviePoster.png\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String RECACHE_IO_ERROR \u003d \"IOException took place when recaching data\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String PRINT_SUITABLE_FOR \u003d \"Suitable for \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String UNAVAILABLE_INFO \u003d \"Unavailable\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String RECACHE_PARSE_ERROR \u003d \"Parsing error took place when recaching data\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TO_SPECIFY_ADULT \u003d \"adult\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final int MAX_FILES \u003d 20;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TO_SPECIFY_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static RequestListener requestListener;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static ArrayList\u003cMovieInfoObject\u003e finalSearchResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static SearchProfile searchProfile;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static RetrieveRequest.MoviesRequestType getType;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static boolean isOffline \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static String messageToBePrinted \u003d \"\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(RetrieveRequest.class.getName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    // API Usage constants"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String MAIN_URL \u003d \"http://api.themoviedb.org/3/\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String API_KEY \u003d \"5d467eb39777ed643edb8312fb71c157\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    // General API keywords used for both movies and TV shows"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String REGION_SPECIFIED_IN_API \u003d \"\u0026region\u003dSG\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TO_SPECIFY_QUERY \u003d \"\u0026query\u003d\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String ADD_ADULT_OPTION \u003d \"\u0026include_adult\u003d\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TO_SPECIFY_MOVIES \u003d \"movie/\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TO_SPECIFY_TV_SHOWS \u003d \"tv/\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TO_SPECIFY_ISO \u003d \"iso_3166_1\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TO_SPECIFY_RATING \u003d \"rating\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TO_SPECIFY_UK \u003d \"GB\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TO_SPECIFY_US \u003d \"US\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TO_SPECIFY_CERTIFICATION \u003d \"certification\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TO_SPECIFY_RELEASE_DATES \u003d \"release_dates\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TO_SPECIFY_TRUE \u003d \"true\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TO_SPECIFY_U \u003d \"U\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TO_SPECIFY_PG \u003d \"PG\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TO_SPECIFY_12A \u003d \"12A\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TO_SPECIFY_18A \u003d \"18A\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TO_SPECIFY_CERT \u003d \"cert\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TO_SPECIFY_CAST \u003d \"cast\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    // General Data Request URL\u0027s"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String RELEASE_DATES_URL \u003d \"/release_dates?api_key\u003d\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String CREDITS_URL \u003d \"/credits?api_key\u003d\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String RATINGS_URL \u003d \"/content_ratings?api_key\u003d\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    // Data Request URL\u0027s for movies"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String CURRENT_MOVIE_URL \u003d \"movie/now_playing?api_key\u003d\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String POPULAR_MOVIE_URL \u003d \"movie/popular?api_key\u003d\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String UPCOMING_MOVIE_URL \u003d \"movie/upcoming?api_key\u003d\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String MOVIE_SEARCH_URL \u003d \"search/movie?api_key\u003d\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TRENDING_MOVIE_URL \u003d \"trending/movie/day?api_key\u003d\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TOP_RATED_MOVIE_URL \u003d \"movie/top_rated?api_key\u003d\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String GENRE_LIST_MOVIE_URL \u003d \"genre/movie/list?api_key\u003d\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    // Data Request URL\u0027s for TV shows"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String CURRENT_TV_URL \u003d \"tv/on_the_air?api_key\u003d\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String POPULAR_TV_URL \u003d \"tv/popular?api_key\u003d\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TV_SEARCH_URL \u003d \"search/tv?api_key\u003d\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TRENDING_TV_URL \u003d \"trending/tv/day?api_key\u003d\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TOP_RATED_TV_URL \u003d \"tv/top_rated?api_key\u003d\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String GENRE_LIST_TV_URL \u003d \"genre/tv/list?api_key\u003d\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    // Data Keys for both movie and TV shows"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String MOVIE_TITLE \u003d \"title\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String ADULT \u003d \"adult\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TV_TITLE \u003d \"name\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String RELEASE_DATE \u003d \"release_date\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String DATA_ID \u003d \"id\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String GENRES \u003d \"genre_ids\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String SUMMARY \u003d \"overview\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String RATING \u003d \"vote_average\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String BACKDROP_PATH \u003d \"backdrop_path\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String POSTER_PATH \u003d \"poster_path\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String KEYWORD_FOR_SEARCH_REQUESTS \u003d \"results\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String KEYWORD_FOR_CAST_REQUESTS \u003d \"cast\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String KEYWORD_FOR_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    // Config URL"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String CONFIG_URL \u003d MAIN_URL + \"configuration?api_key\u003d\" + API_KEY;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    // Config constants"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final int DAYS_TILL_RECACHE \u003d 30;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String CONFIG_FILENAME \u003d \"config.dat\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    // Config Keys"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String CONFIG_BASE_URL \u003d \"base_url\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String CONFIG_SECURE_BASE_URL \u003d \"secure_base_url\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String CONFIG_BACKDROP_SIZES \u003d \"backdrop_sizes\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String CONFIG_POSTER_SIZES \u003d \"poster_sizes\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    // Config values"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static Date lastConfigCachedDate;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static String imageBaseURL;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static String imageSecureBaseURL;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static String[] resultsPosterSizes;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static String[] resultsBackdropSizes;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private boolean configWasRead;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Enumerates different types of requests that can be done with MovieDB API."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public enum MoviesRequestType {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        CURRENT_MOVIES,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        POPULAR_MOVIES,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        UPCOMING_MOVIES,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TRENDING_MOVIES,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TOP_RATED_MOVIES,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        SEARCH_MOVIES,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        CURRENT_TV,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        POPULAR_TV,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TRENDING_TV,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TOP_RATED_TV,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        SEARCH_TV,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for setting SearchProfile."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Which will be in turn used to filter search results according to user\u0027s prefererences."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param searchProfile Object that contains all the users\u0027 preferences for a particular search."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void setSearchProfile(SearchProfile searchProfile) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.searchProfile \u003d searchProfile;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for setting up interface that listens to completed fetch requests from the MovieDB API."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Also, checks if config is needed."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param listener Interface that listens to completed fetch requests from the MovieDB API."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @throws Exceptions when there is an issue with reading/writing config files."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public RetrieveRequest(RequestListener listener) throws Exceptions {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        requestListener \u003d listener;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        // Check if configuration is needed"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        checkIfConfigNeeded();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for begining appropriate data request fetch based on type on another thread."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Listener will be called once the data has been fetched and parsed into a object."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param type The request type to fetch the appropriate data from the API."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @throws Exceptions to detect UnsupportedEncodingException"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void beginSearchRequest(RetrieveRequest.MoviesRequestType type) throws Exceptions {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        getType \u003d type;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        boolean isAdult;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            // check if search is for movies or TV shows"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            isAdult \u003d searchProfile.isAdult();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            isAdult \u003d false;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String requestUrl \u003d RetrieveRequest.MAIN_URL;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        // to fetch data for currently showing movies"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        case CURRENT_MOVIES:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            requestUrl +\u003d RetrieveRequest.CURRENT_MOVIE_URL + RetrieveRequest.API_KEY"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    + REGION_SPECIFIED_IN_API;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            messageToBePrinted \u003d PromptMessages.VIEW_CURRENT_MOVIES_SUCCESS;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.SEARCH_TYPE_IS_CURRENT_MOVIES);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        // to fetch data for popular movies"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        case POPULAR_MOVIES:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            requestUrl +\u003d RetrieveRequest.POPULAR_MOVIE_URL + API_KEY"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    + REGION_SPECIFIED_IN_API;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            messageToBePrinted \u003d PromptMessages.VIEW_POPULAR_MOVIES_SUCCESS;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.SEARCH_TYPE_IS_POPULAR_MOVIES);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        // to fetch data for upcoming movies"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        case UPCOMING_MOVIES:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            requestUrl +\u003d RetrieveRequest.UPCOMING_MOVIE_URL + API_KEY"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    + REGION_SPECIFIED_IN_API;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            messageToBePrinted \u003d PromptMessages.VIEW_UPCOMING_MOVIES_SUCCESS;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.SEARCH_TYPE_IS_UPCOMING_MOVIES);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        // to fetch data for trending movies"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        case TRENDING_MOVIES:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            requestUrl +\u003d RetrieveRequest.TRENDING_MOVIE_URL + API_KEY"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    + REGION_SPECIFIED_IN_API;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            messageToBePrinted \u003d PromptMessages.VIEW_TRENDING_MOVIES_SUCCESS;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.SEARCH_TYPE_IS_TRENDING_MOVIES);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        // to fetch data for top-rated movies"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        case TOP_RATED_MOVIES:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            requestUrl +\u003d RetrieveRequest.TOP_RATED_MOVIE_URL + API_KEY;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            messageToBePrinted \u003d PromptMessages.VIEW_TOP_RATED_MOVIES_SUCCESS;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.SEARCH_TYPE_IS_TOP_RATED_MOVIES);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        // to fetch data for currently playing TV shows on the air"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        case CURRENT_TV:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            requestUrl +\u003d RetrieveRequest.CURRENT_TV_URL + API_KEY;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            messageToBePrinted \u003d PromptMessages.VIEW_CURRENT_TV_SUCCESS;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.SEARCH_TYPE_IS_CURRENT_TV);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        // to fetch data for popular TV shows"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        case POPULAR_TV:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            requestUrl +\u003d RetrieveRequest.POPULAR_TV_URL + API_KEY;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            messageToBePrinted \u003d PromptMessages.VIEW_POPULAR_TV_SUCCESS;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.SEARCH_TYPE_IS_POPULAR_TV);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        // to fetch data for trending TV shows"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        case TRENDING_TV:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            requestUrl +\u003d RetrieveRequest.TRENDING_TV_URL + API_KEY;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            messageToBePrinted \u003d PromptMessages.VIEW_TRENDING_TV_SUCCESS;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.SEARCH_TYPE_IS_TRENDING_TV);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        // to fetch data for top-rated TV shows"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        case TOP_RATED_TV:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            requestUrl +\u003d RetrieveRequest.TOP_RATED_TV_URL + API_KEY;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            messageToBePrinted \u003d PromptMessages.VIEW_TOP_RATED_TV_SUCCESS;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.SEARCH_TYPE_IS_TOP_RATED_TV);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        // to fetch data for movies that match the keyword entered by user"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        case SEARCH_MOVIES:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                requestUrl +\u003d RetrieveRequest.MOVIE_SEARCH_URL + API_KEY + TO_SPECIFY_QUERY"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                        + URLEncoder.encode(searchProfile.getName(), \"UTF-8\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            } catch (UnsupportedEncodingException e) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                logger.log(Level.WARNING, PromptMessages.UNSUPPORTED_ENCODING_SEARCH);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                throw new Exceptions(PromptMessages.API_FAIL_GENERAL);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            messageToBePrinted \u003d PromptMessages.VIEW_SEARCH_MOVIES_SUCCESS;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.SEARCH_TYPE_IS_SEARCH_MOVIES);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        case SEARCH_TV:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                requestUrl +\u003d RetrieveRequest.TV_SEARCH_URL + API_KEY + TO_SPECIFY_QUERY"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                        + URLEncoder.encode(searchProfile.getName(), \"UTF-8\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            } catch (UnsupportedEncodingException e) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                logger.log(Level.WARNING, PromptMessages.UNSUPPORTED_ENCODING_SEARCH);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                throw new Exceptions(PromptMessages.API_FAIL_GENERAL);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            messageToBePrinted \u003d PromptMessages.VIEW_SEARCH_TV_SUCCESS;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.SEARCH_TYPE_IS_SEARCH_TV);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            requestListener.emptyResults();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            throw new EmptyResultExceptions();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        // add adult preference to the url to fetch data approrpariately"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        requestUrl +\u003d ADD_ADULT_OPTION + isAdult;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        // System.out.println(requestUrl);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        fetchJsonData(requestUrl);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible and called when information about cast and certication is needed about a movie or TV show."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * This data have to be fetched by MovieDB API."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param object Object that contains all the details about a movie or TV show."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @throws Exceptions when exceptions are detected when extracting information."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void beginMoreInfoRequest(MovieInfoObject object) throws Exceptions {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (!isOffline) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.EXTRACT_MORE_INFO_START);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            String certDetail \u003d null;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            certDetail \u003d getCertStrings(object);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            object.setCertInfo(certDetail);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            ArrayList\u003cString\u003e castDetail \u003d getCastStrings(object);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            object.setCastInfo(castDetail);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.EXTRACT_MORE_INFO_COMPLETE);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for extracting and returning the cert details about a movie/TV show."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * This function unlike beginSearchRequest does not call any listener."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param infoObject Object that contains details about the movie/TV show."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return The cert details pertaining to the movie/TV show."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @throws Exceptions when detect MalformedURLException or ParserException."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static String getCertStrings(MovieInfoObject infoObject) throws Exceptions {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String cert \u003d UNAVAILABLE_INFO;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            String url \u003d MAIN_URL;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            boolean isMovie \u003d infoObject.isMovie();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            // if object is a movie"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (isMovie) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                url +\u003d TO_SPECIFY_MOVIES + infoObject.getId() + RELEASE_DATES_URL;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                url +\u003d TO_SPECIFY_TV_SHOWS + infoObject.getId() + RATINGS_URL;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            String jsonResult \u003d \"\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            url +\u003d API_KEY;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            System.out.println(url);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            jsonResult \u003d UrlRetriever.readUrlAsString(new URL(url));"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            JSONParser parser \u003d new JSONParser();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            JSONObject jsonData \u003d (JSONObject) parser.parse(jsonResult);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            JSONArray casts \u003d (JSONArray) jsonData.get(KEYWORD_FOR_SEARCH_REQUESTS);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (isMovie) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                cert \u003d getMovieCertFromJson(casts);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                cert \u003d getTvCertFromJson(casts);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.EXTRACT_CERT_SUCCESS);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (MalformedURLException | org.json.simple.parser.ParseException | ClassCastException"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                | NullPointerException ex) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.UNABLE_TO_EXTRACT_CERT);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            cert \u003d UNAVAILABLE_INFO;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return cert;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for extracting and returning the certification for a TV show from a JSONArray."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param certInfo JSONArray from which the certification for the TV show is extacted."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return Certification for the TV show from a JSONArray."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static String getTvCertFromJson(JSONArray certInfo) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String cert \u003d UNAVAILABLE_INFO;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String certStrings \u003d \"\";"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            for (int i \u003d 0; i \u003c certInfo.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                JSONObject castPair \u003d (JSONObject) certInfo.get(i);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                if (castPair.get(TO_SPECIFY_ISO).equals(TO_SPECIFY_UK)) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    certStrings \u003d castPair.get(TO_SPECIFY_RATING).toString();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    if (certStrings.equals(TO_SPECIFY_12A) || certStrings.equals(TO_SPECIFY_18A)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                            || certStrings.equals(TO_SPECIFY_U) || certStrings.equals(TO_SPECIFY_PG)) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                        cert \u003d certStrings;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                        cert \u003d PRINT_SUITABLE_FOR + certStrings + \" years \u0026 above\";"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (ClassCastException | NullPointerException ex) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            cert \u003d UNAVAILABLE_INFO;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (cert.equals(\"\\\"\\\"\") || (cert.equals(\"\\\" \\\"\"))) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            cert \u003d UNAVAILABLE_INFO;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return cert;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for extracting and returning the certification for a movie from a JSONArray."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param certInfo JSONArray from which the certification for the movie is extacted."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return Certification for the movie from a JSONArray."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static String getMovieCertFromJson(JSONArray certInfo) throws org.json.simple.parser.ParseException,"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            ClassCastException, NullPointerException {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String cert \u003d UNAVAILABLE_INFO;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String certStrings \u003d \"\";"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            for (int i \u003d 0; i \u003c certInfo.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                JSONObject castPair \u003d (JSONObject) certInfo.get(i);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                if (castPair.get(TO_SPECIFY_ISO).equals(TO_SPECIFY_US)) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    //SONArray jsonArray \u003d castPair.get(RELEASE_DATE)"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    Map certMap \u003d (Map) certInfo.get(i);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    Iterator\u003cMap.Entry\u003e itr1 \u003d certMap.entrySet().iterator();"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    while (itr1.hasNext()) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                        Map.Entry pair \u003d itr1.next();"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                        if (pair.getKey().equals(TO_SPECIFY_RELEASE_DATES)) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                            certStrings \u003d pair.getValue().toString();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    System.out.println(\"this is:\" + certStrings);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    String[] getCert \u003d certStrings.strip().split(TO_SPECIFY_CERTIFICATION);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    if (getCert.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                        cert \u003d getCert[1].substring(2, getCert[1].length() - 2);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                        cert \u003d getCert[getCert.length - 1].substring(2, getCert[getCert.length - 1].length() - 2);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (NullPointerException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            cert \u003d UNAVAILABLE_INFO;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (cert.equals(\"\\\"\\\"\") || (cert.equals(\"\\\" \\\"\"))) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            cert \u003d UNAVAILABLE_INFO;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return cert;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for extracting and returning the list of cast details about a movie/TV show."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * This function unlike beginSearchRequest does not call any listener."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param infoObject Object that contains details about the movie/TV show."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return the list of cast pertaining to the movie/TV show."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @throws Exceptions when detect MalformedURLExcpetion and/or ParserException."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static ArrayList\u003cString\u003e getCastStrings(MovieInfoObject infoObject) throws Exceptions {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e castInfoStrings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            String url \u003d MAIN_URL;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            boolean isMovie \u003d infoObject.isMovie();"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            // object is a movie"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (isMovie) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                url +\u003d TO_SPECIFY_MOVIES;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                url +\u003d TO_SPECIFY_TV_SHOWS;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            url +\u003d infoObject.getId() + CREDITS_URL + API_KEY;"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            System.out.println(url);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            String jsonResult \u003d \"\";"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            jsonResult \u003d UrlRetriever.readUrlAsString(new URL(url));"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            JSONParser parser \u003d new JSONParser();"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            JSONObject jsonData \u003d (JSONObject) parser.parse(jsonResult);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            JSONArray casts \u003d (JSONArray) jsonData.get(KEYWORD_FOR_CAST_REQUESTS);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            for (int i \u003d 0; i \u003c casts.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                JSONObject castPair \u003d (JSONObject) casts.get(i);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                castInfoStrings.add((String) castPair.get(KEYWORD_FOR_NAME));"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.EXTRACT_CAST_SUCCESS);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (MalformedURLException | org.json.simple.parser.ParseException | ClassCastException"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                | NullPointerException ex) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.UNABLE_TO_EXTRACT_CAST);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            castInfoStrings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return castInfoStrings;"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * api request to search movies to add to the watchlist."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param movieTitle movie name to be added to watchlist."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return first movie title in the search result."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @throws Exceptions API request errors such as bad encoding or incorrect URL."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public String beginAddRequest(String movieTitle) {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            finalSearchResults.clear();"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            String url \u003d MAIN_URL + MOVIE_SEARCH_URL + API_KEY + \"\u0026query\u003d\" + URLEncoder.encode(movieTitle, \"UTF-8\");"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            UrlRetriever retrieve \u003d new UrlRetriever();"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            String json \u003d retrieve.readUrlAsString(new URL(url));"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            fetchedJson(json);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        } catch (UnsupportedEncodingException | MalformedURLException | Exceptions ex) {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        if (finalSearchResults.isEmpty()) {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        return finalSearchResults.get(0).getTitle();"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * api request to search movies by genre to add to the watchlist."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param genre genreid of the api to search."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param adult parameter to determine if adult feature needs to be enabled."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return Array_list of movies results based on the genre."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @throws Exceptions API request errors such as bad encoding or incorrect URL."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public ArrayList\u003cMovieInfoObject\u003e beginSearchGenre(String genre, boolean adult) throws Exceptions {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            String url \u003d MAIN_URL + \"discover/movie?with_genres\u003d\" + URLEncoder.encode(genre, \"UTF-8\") + \"\u0026api_key\u003d\""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                + API_KEY + \"\u0026language\u003den-US\u0026page\u003d1\" + \"\u0026include_adult\u003d\";"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            url +\u003d adult;"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            UrlRetriever retrieve \u003d new UrlRetriever();"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            String json \u003d retrieve.readUrlAsString(new URL(url));"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            fetchedJson(json);"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            //fetchJSONData(url);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (UnsupportedEncodingException ex) {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        } catch (MalformedURLException e) {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return finalSearchResults;"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for retrieving data from offline storage files when there is no/weak internet connection."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Once data has been retrieved, calls another function to further parse the data."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void fetchOfflineData() {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        logger.log(Level.INFO, PromptMessages.START_OFFLINE_DATA_EXTRACTION);"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        isOffline \u003d true;"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        JSONArray resultsJson \u003d new JSONArray();"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        OfflineSearchStorage offlineSearchStorage \u003d new OfflineSearchStorage();"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            resultsJson \u003d offlineSearchStorage.load();"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.OFFLINE_DATA_EXTRACTION_SUCCESS);"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (Exceptions e) {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.WARNING, PromptMessages.OFFLINE_DATA_EXTRACTION_FAILED);"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            requestListener.emptyResults();"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        parseJson(resultsJson);"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Called after JSON data has been fetched by the fetcher."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Parse the data into a JSONArray."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param json String that contains all the data extracted by fetcher."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void fetchedJson(String json) {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        isOffline \u003d false;"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        JSONObject data \u003d new JSONObject();"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        JSONParser parser \u003d new JSONParser();"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        JSONArray searchResults \u003d new JSONArray();"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            data \u003d (JSONObject) parser.parse(json);"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            searchResults \u003d (JSONArray) data.get(KEYWORD_FOR_SEARCH_REQUESTS);"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (org.json.simple.parser.ParseException e) {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.SEVERE, PromptMessages.PARSE_EXCEPTION_IN_EXTRACTION);"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            requestListener.emptyResults();"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        parseJson(searchResults);"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for filtering results according to user\u0027s preferences."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Also responsible for sorting results according to user\u0027s preferences."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param searchResults JSONArray that contains data about all the search results."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static void parseJson(JSONArray searchResults) {"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        logger.log(Level.INFO, PromptMessages.DATA_PARSING_BEGINS);"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cMovieInfoObject\u003e parsedMovies \u003d new ArrayList(20);"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        int size \u003d 0;"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        //max size of results that are to be displayed set at 20"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        for (int i \u003d 0; i \u003c searchResults.size(); i++) {"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (size \u003e MAX_FILES) {"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            // add results that meet user stated preferences"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.CHECK_CONDITION);"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (checkCondition((JSONObject) searchResults.get(i))) {"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                parsedMovies.add(parseMovieJson((JSONObject) searchResults.get(i)));"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                size +\u003d 1;"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (parsedMovies.isEmpty()) {"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.NO_RESULTS_FOUND);"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            requestListener.emptyResults();"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        finalSearchResults \u003d parsedMovies;"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (searchProfile.isSortByAlphabetical()) {"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            sortByAlphaOrder();"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } else if (searchProfile.isSortByLatestRelease()) {"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            sortByLatestRelease();"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } else if (searchProfile.isSortByHighestRating()) {"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            sortByHighestRating();"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (isOffline) {"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            // to print a message that offline data is being used"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            messageToBePrinted +\u003d \"\\n\" + PromptMessages.DATA_OBTAINED_FROM_LOCAL_FILES + \"\\n\";"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            messageToBePrinted +\u003d \"\\n\" + PromptMessages.TO_VIEW_MORE_INFO;"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            requestListener.requestTimedOut(messageToBePrinted);"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            // to print message that data was extracted from API successfully"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            messageToBePrinted +\u003d \"\\n\" + PromptMessages.DATA_OBTAINED_FROM_API + \"\\n\";"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            messageToBePrinted +\u003d \"\\n\" + PromptMessages.TO_VIEW_MORE_INFO;"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            requestListener.requestCompleted(messageToBePrinted);"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        logger.log(Level.INFO, PromptMessages.DATA_PROCESSING_IS_COMPLETE);"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        requestListener.obtainedResultsData(finalSearchResults);"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for sorting the list of search results by their ratings from highly rated to least highly rated."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static void sortByHighestRating() {"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        finalSearchResults.sort(new Comparator\u003cMovieInfoObject\u003e() {"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            public int compare(MovieInfoObject v1, MovieInfoObject v2) {"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                return Double.compare(v2.getRatingInfo(), v1.getRatingInfo());"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        logger.log(Level.INFO, PromptMessages.SORT_BY_RATINGS);"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for sorting the list of search results by their release dates from latest to least latest."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static void sortByLatestRelease() {"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        finalSearchResults.sort(new Comparator\u003cMovieInfoObject\u003e() {"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            public int compare(MovieInfoObject v1, MovieInfoObject v2) {"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                return v2.getReleaseDateInfo().compareTo(v1.getReleaseDateInfo());"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        logger.log(Level.INFO, PromptMessages.SORT_BY_RELEASE_DATE);"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for sorting the list of search results in alphabetical order from lowest letter to highest letter."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static void sortByAlphaOrder() {"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        finalSearchResults.sort(new Comparator\u003cMovieInfoObject\u003e() {"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            public int compare(MovieInfoObject v1, MovieInfoObject v2) {"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                return v1.getTitle().compareTo(v2.getTitle());"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        logger.log(Level.INFO, PromptMessages.SORT_ALPHA_ORDER);"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for returning the type of search request that is being done."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return type of search request that is being done."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static MoviesRequestType getGetType() {"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return getType;"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Called to fetch data from API for search requests."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param urlString The URL pertaining to the type of search request to be carried off."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private void fetchJsonData(String urlString) {"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        Thread fetchThread \u003d null;"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (urlString.isEmpty() || urlString.isBlank()) {"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.SEVERE, PromptMessages.NULL_URL);"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            messageToBePrinted \u003d PromptMessages.API_INVALID_REQUEST;"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            requestListener.requestTimedOut(messageToBePrinted);"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.STARTING_DATA_FETCH_FROM_API);"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            fetchThread \u003d new Thread(new MovieInfoFetcher(new URL(urlString), this));"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            fetchThread.start();"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            //System.out.println(\"bef MovieInfoFetcher\");"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (MalformedURLException | Exceptions ex) {"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.SEVERE, PromptMessages.API_MALFORMED_URL);"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            messageToBePrinted \u003d PromptMessages.NO_RESULTS_FOUND;"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            requestListener.requestTimedOut(messageToBePrinted);"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Called to parses the given JSON string for a movie/TV into a MovieInfo object."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param data JSONObject containing the information about a movie/TV show."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return MovieInfo object containing information about a movie/TV show."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static MovieInfoObject parseMovieJson(JSONObject data) {"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String title \u003d UNAVAILABLE_INFO;"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        boolean isMovie \u003d false;"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        // parse title"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        //if the search request was for movies"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (searchProfile.isMovie()) {"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            title \u003d (String) data.get(MOVIE_TITLE);"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            isMovie \u003d true;"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            title \u003d (String) data.get(TV_TITLE);"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        // Parse id"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        long id \u003d (long) data.get(DATA_ID);"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        // Parse rating"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        double rating \u003d 0.0;"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            rating \u003d (double) data.get(RATING);"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (ClassCastException ex) {"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            // the rating was parsed with a long value, cast to double (issue in simple json library)"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.RATINGS_FOUND_AS_LONG);"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            Long longRating \u003d (Long) data.get(RATING);"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            rating \u003d longRating.doubleValue();"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String summary \u003d (String) data.get(SUMMARY);"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        // Parse genre id array"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        JSONArray genreIDsJsonArray \u003d (JSONArray) data.get(GENRES);"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cLong\u003e genreID \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        for (int i \u003d 0; i \u003c genreIDsJsonArray.size(); i++) {"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            genreID.add((long) genreIDsJsonArray.get(i));"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        // Parse date string from json"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        Date releaseDate \u003d new Date();"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String releaseDateString \u003d \"\";"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (searchProfile.isMovie()) {"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            releaseDateString \u003d (String) data.get(RELEASE_DATE);"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            releaseDateString \u003d (String) data.get(\"first_air_date\");"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        SimpleDateFormat formatter1 \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (releaseDateString !\u003d null) {"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                releaseDate \u003d formatter1.parse(releaseDateString);"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                releaseDate \u003d new Date();"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        // Get poster and backdrop paths"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String posterPath \u003d \"\";"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String backdropPath \u003d \"\";"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        MovieInfoObject movieInfo;"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (isOffline) {"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            posterPath \u003d DEFAULT_IMAGE_FILENAME;"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            backdropPath \u003d DEFAULT_IMAGE_FILENAME;"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            String cert \u003d (String) data.get(TO_SPECIFY_CERT);"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            JSONArray jsonArray \u003d (JSONArray) data.get(TO_SPECIFY_CAST);"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            ArrayList\u003cString\u003e getCast \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            for (int i \u003d 0; i \u003c jsonArray.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                getCast.add((String) jsonArray.get(i));"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            movieInfo \u003d new MovieInfoObject(id, title, isMovie, releaseDate, summary,"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    posterPath, backdropPath, rating, genreID, searchProfile.isAdult(), cert, getCast);"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            posterPath \u003d (String) data.get(POSTER_PATH);"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            backdropPath \u003d (String) data.get(BACKDROP_PATH);"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            movieInfo \u003d new MovieInfoObject(id, title, isMovie, releaseDate, summary,"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    posterPath, backdropPath, rating, genreID, searchProfile.isAdult());"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        // If the base url was fetched and loaded, set the root path and poster size"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (imageBaseURL !\u003d null) {"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            movieInfo.setPosterRootPath(imageBaseURL, resultsPosterSizes[resultsPosterSizes.length - 3], isOffline);"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            posterPath \u003d DEFAULT_IMAGE_FILENAME;"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            backdropPath \u003d DEFAULT_IMAGE_FILENAME;"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            movieInfo.setPosterRootPath(imageBaseURL, resultsPosterSizes[resultsPosterSizes.length - 3], isOffline);"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return movieInfo;"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for checking if API config data needs to be recached."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @throws Exceptions when file is not found or there is IO Exception."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private void checkIfConfigNeeded() throws Exceptions {"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        boolean configNeeded \u003d true;"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        // Get last cache date and reconfig if more than 5 days passed"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        File configFile \u003d new File(CONFIG_FILENAME);"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (configFile.exists() \u0026\u0026 !configFile.isDirectory()) {"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.READING_CACHE_FILES);"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            readConfigData();"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            // Parse date and if more than 30 days passed, a recache is required"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            Date now \u003d new Date();"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            int diffInDays \u003d (int) (now.getTime() - lastConfigCachedDate.getTime()) / (1000 * 3600 * 24);"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (diffInDays \u003c DAYS_TILL_RECACHE) {"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                configNeeded \u003d false;"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (configNeeded || !configWasRead) {"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.NEED_TO_CACHE_FILES_AGAIN);"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            reCacheConfigData();"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            // No config needed - read cached data from config file"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.NO_NEED_TO_CACHE_FILES_AGAIN);"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            readConfigData();"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsiblr for reading in the config data from disk."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private void readConfigData() {"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.READING_CACHE_DATA);"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            ObjectInputStream file \u003d new ObjectInputStream(new FileInputStream(CONFIG_FILENAME));"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            lastConfigCachedDate \u003d (Date) file.readObject();"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            imageBaseURL \u003d file.readUTF();"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            imageSecureBaseURL \u003d file.readUTF();"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            resultsPosterSizes \u003d (String[]) file.readObject();"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            resultsBackdropSizes \u003d (String[]) file.readObject();"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            configWasRead \u003d true;"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            file.close();"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.READING_CACHE_DATA_IS_COMPLETE);"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (FileNotFoundException ex) {"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            // No file found, config will be recached"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.WARNING, PromptMessages.FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            configWasRead \u003d false;"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            // Error reading - config will be recached"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.WARNING, PromptMessages.IO_EXCEPTION_CACHE_DATA);"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            configWasRead \u003d false;"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (ClassNotFoundException ex) {"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.WARNING, PromptMessages.CLASS_EXCEPTION_CACHE_DATA);"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            configWasRead \u003d false;"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for  writing out the config data to file."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Function is called after all config data was recached."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private void writeConfigData() {"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.WRITING_CACHE_DATA);"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            ObjectOutputStream file \u003d new ObjectOutputStream(new FileOutputStream(CONFIG_FILENAME));"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            file.writeObject(new Date());"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            file.writeUTF(imageBaseURL);"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            file.writeUTF(imageSecureBaseURL);"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            file.writeObject(resultsPosterSizes);"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            file.writeObject(resultsBackdropSizes);"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            file.close();"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            // Failed to write, data will be not be cached and will be recached on next run"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.SEVERE, RECACHE_PARSE_ERROR);"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            messageToBePrinted \u003d PromptMessages.RECACHING_DATA_API_ERROR;"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            requestListener.requestTimedOut(messageToBePrinted);"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for re-caching the config data to the binary config file."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @throws Exceptions when encounter ParseException or IOException."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private void reCacheConfigData() throws Exceptions {"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            // Download the config data and parse"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.RECONFIG_CACHE_FILES);"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            String configJson \u003d UrlRetriever.readUrlAsString(new URL(CONFIG_URL));"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            JSONObject configRootData \u003d null;"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (configJson !\u003d null) {"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                JSONParser parser \u003d new JSONParser();"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    configRootData \u003d (JSONObject) parser.parse(configJson);"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    JSONObject imageConfigData \u003d (JSONObject) configRootData.get(\"images\");"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    // Get the base url data"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    imageBaseURL \u003d (String) imageConfigData.get(CONFIG_BASE_URL);"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    imageSecureBaseURL \u003d (String) imageConfigData.get(CONFIG_SECURE_BASE_URL);"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    // Get the string arrays for the poster and backdrop size strings"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    JSONArray posterSizesData \u003d (JSONArray) imageConfigData.get(CONFIG_POSTER_SIZES);"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    JSONArray backdropSizesData \u003d (JSONArray) imageConfigData.get(CONFIG_BACKDROP_SIZES);"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    resultsPosterSizes \u003d Arrays.copyOf(posterSizesData.toArray(),"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                            posterSizesData.toArray().length, String[].class);"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    resultsBackdropSizes \u003d Arrays.copyOf(backdropSizesData.toArray(),"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                            backdropSizesData.toArray().length, String[].class);"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    writeConfigData();"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                } catch (org.json.simple.parser.ParseException ex) {"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    logger.log(Level.SEVERE, RECACHE_PARSE_ERROR);"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    messageToBePrinted \u003d PromptMessages.RECACHING_DATA_API_ERROR;"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    requestListener.requestTimedOut(messageToBePrinted);"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            // Failed to download config data"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.SEVERE, RECACHE_IO_ERROR);"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            messageToBePrinted \u003d PromptMessages.RECACHING_DATA_API_ERROR;"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            requestListener.requestTimedOut(messageToBePrinted);"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * REsponsible for checking whether a movie/TV show meets users\u0027 preferences and requirements."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param entryInfo JSONObject containing all the information about a movie/TV show."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return true if the movie/TV show meets users\u0027 preferences and requirements."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static boolean checkCondition(JSONObject entryInfo) {"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (isOffline) {"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            System.out.println(entryInfo.get(TO_SPECIFY_NAME));"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if ((!(searchProfile.isAdult())) \u0026\u0026 (entryInfo.get(TO_SPECIFY_ADULT).equals(TO_SPECIFY_TRUE))) {"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                logger.log(Level.INFO, PromptMessages.FAILED_ADULT_REQUIREMENT);"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if ((getType.equals(MoviesRequestType.SEARCH_MOVIES))"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    || (getType.equals(MoviesRequestType.SEARCH_TV))) {"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                String searchName \u003d searchProfile.getName().toLowerCase();"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                String entryInfoName \u003d extractName(entryInfo);"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                if (entryInfoName.indexOf(searchName) \u003d\u003d -1) {"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    //if (!(searchName.contains(entryInfoName))) {"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    logger.log(Level.INFO, PromptMessages.FAILED_NAME_REQUIREMENT);"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        Set\u003cLong\u003e genrePref \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        Set\u003cLong\u003e genreRestric \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        boolean haveGenrePref \u003d true;"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        boolean haveGenreRestrict \u003d true;"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            for (int i \u003d 0; i \u003c searchProfile.getGenreIdPreference().size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                System.out.println(\"thiss \" + searchProfile.getGenreIdPreference().get(i));"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                genrePref.add(Long.valueOf(searchProfile.getGenreIdPreference().get(i)));"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.INVALID_GENRE_NAME);"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            haveGenrePref \u003d false;"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (genrePref.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.NO_GENRES_PREF_SET);"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            haveGenrePref \u003d false;"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            for (int i \u003d 0; i \u003c searchProfile.getGenreIdRestriction().size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                genreRestric.add(Long.valueOf(searchProfile.getGenreIdRestriction().get(i)));"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.INVALID_GENRE_NAME);"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            haveGenreRestrict \u003d false;"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (genreRestric.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.NO_GENRES_RESTRICT_SET);"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            haveGenreRestrict \u003d false;"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        JSONArray jsonArray \u003d (JSONArray) entryInfo.get(GENRES);"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        boolean containPrefGenre \u003d false;"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        for (int i \u003d 0; i \u003c jsonArray.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            // System.out.println(jsonArray.get(i));"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (genreRestric.contains((long) jsonArray.get(i))) {"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                // System.out.println(\"this2\");"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                logger.log(Level.INFO, PromptMessages.FAILED_GENRE_RESTRICT_REQUIREMENT);"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            } else if (genrePref.contains((long) jsonArray.get(i))) {"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                containPrefGenre \u003d true;"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                //   System.out.println(\"mannns\");"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if ((containPrefGenre) || !(haveGenrePref)) {"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.PASSED_REQUIREMENT);"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.FAILED_GENRE_PREF_REQUIREMENT);"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for extracting movie/TV show name from the JSONObject."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param entryInfo JSONObject from which movie/TV show name will be extacted."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return The movie/TV show name from the JSONObject."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static String extractName(JSONObject entryInfo) {"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String filename \u003d \"\";"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (searchProfile.isMovie()) {"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            filename \u003d ((String) entryInfo.get(MOVIE_TITLE)).toLowerCase();"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            filename \u003d ((String) entryInfo.get(TV_TITLE)).toLowerCase();"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return filename;"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hotspur1997": 11,
      "Riyas97": 959,
      "Pdotdeep": 6,
      "nwenhui": 2
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/movierequesterapi/UrlRetriever.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.logic.movierequesterapi;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.strings.PromptMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.Exceptions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.net.SocketTimeoutException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * Static utility class responsible for reading and returning the contents of the given URL as a string."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class UrlRetriever {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TO_SPECIFY_GET \u003d \"GET\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final int SET_REQUEST_TIME \u003d 20 * 1000;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final int STATUS_OK \u003d 200;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(UrlRetriever.class.getName());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for reading and returning the contents of the given URL as a string."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param url The URL to read data from."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return the contents of the URL as a string."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static String readUrlAsString(URL url) throws Exceptions {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            HttpURLConnection connection \u003d (HttpURLConnection) url.openConnection();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            connection.setRequestMethod(TO_SPECIFY_GET);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            connection.setReadTimeout(SET_REQUEST_TIME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            int statusCode \u003d connection.getResponseCode();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            String line \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            StringBuilder dataStr \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            // Status OK - get the data from the stream"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (statusCode \u003d\u003d STATUS_OK) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                dataStr \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                BufferedReader input \u003d new BufferedReader(new InputStreamReader(connection.getInputStream()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                line \u003d input.readLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                while (line !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    dataStr.append(line);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    line \u003d input.readLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                return dataStr.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (SocketTimeoutException ex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.SEVERE, PromptMessages.SOCKET_TIMEOUT_URL);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.SEVERE, PromptMessages.IO_ERROR_URL);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Riyas97": 59,
      "Pdotdeep": 1
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/parsers/CommandDebugger.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//@@author pdotdeep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.logic.parsers;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.strings.PromptMessages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.assertions.CommandAssertions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.enums.CommandKeys;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.exceptions.MissingInfoException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.model.CommandPair;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.ui.Controller;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " * CommandDebugger class to do spellchecking by checking for similarity with words."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " * JccardSimilarity algorithm used to quantify similarity"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public class CommandDebugger {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static final int INITSCORE \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(CommandDebugger.class.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Spellchcker function to determine closest possible words."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param undefinedCommandArr the user input split into array form"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param root Root command"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param controller UI controller"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static CommandPair commandSpellChecker(String[] undefinedCommandArr,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                                                  CommandKeys root, Controller controller)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        throws MissingInfoException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assert (CommandAssertions.assertIsLowerStringArr(undefinedCommandArr));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        logger.log(Level.INFO, PromptMessages.LOGGER_UNKNOWN_COMMAND_TYPED);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        root \u003d getCorrectedRoot(undefinedCommandArr, root);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        CommandKeys mostSimilarSub \u003d getCorrectedSubRoot(undefinedCommandArr, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        CommandPair cp \u003d new CommandPair(root, mostSimilarSub);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (undefinedCommandArr.length \u003c 1 \u0026\u0026 CommandStructure.hasSubRoot(root)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            cp.setValidCommand(false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return cp;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Get the corrected Root."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param undefinedCommandArr user input in array form."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param root root command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return the corrected root command."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static CommandKeys getCorrectedSubRoot(String[] undefinedCommandArr, CommandKeys root)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            throws MissingInfoException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        double score;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        score \u003d INITSCORE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        CommandKeys mostSimilarSub \u003d CommandKeys.NONE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (undefinedCommandArr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.COMMAND_MISSING_ARGS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            throw new MissingInfoException(\"You are missing a few arguments and presumably have a typo as well\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (root !\u003d CommandKeys.NONE \u0026\u0026 CommandStructure.hasSubRoot(root) \u0026\u0026 undefinedCommandArr.length \u003e 1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            for (CommandKeys s : CommandStructure.cmdStructure.get(root)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                double temp \u003d calculateJaccardSimilarity(s.toString().toLowerCase(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                        undefinedCommandArr[1]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                if (temp \u003e score) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    mostSimilarSub \u003d s;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    score \u003d temp;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return mostSimilarSub;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Get the corrected subroot."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param undefinedCommandArr user input in array form"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param root root command"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return the corrected root command"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static CommandKeys getCorrectedRoot(String[] undefinedCommandArr, CommandKeys root) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        double score \u003d INITSCORE;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (root \u003d\u003d CommandKeys.NONE \u0026\u0026 undefinedCommandArr.length \u003e 0) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            for (CommandKeys s : CommandStructure.AllRoots) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                double temp \u003d calculateJaccardSimilarity(s.toString().toLowerCase(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                        undefinedCommandArr[0]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                if (temp \u003e score) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    root \u003d s;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    score \u003d temp;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return root;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Compute string similarity based on  Jaccard Similarity algorithm."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return the similarity score based on the algorithm"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static Double calculateJaccardSimilarity(String word1, String word2) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assert (CommandAssertions.assertIsLowerString(word1));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assert (CommandAssertions.assertIsLowerString(word2));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Set\u003cString\u003e iset \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Set\u003cString\u003e unionSet \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        boolean isfilled \u003d false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        int leftLength \u003d word1.length();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        int rightLength \u003d word2.length();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (leftLength \u003d\u003d 0 || rightLength \u003d\u003d 0) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            return 0.0;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (int lefti \u003d 0; lefti \u003c leftLength; lefti++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            unionSet.add(String.valueOf(word1.charAt(lefti)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            for (int righti \u003d 0; righti \u003c rightLength; righti++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                if (!isfilled) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    unionSet.add(String.valueOf(word2.charAt(righti)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                if (word1.charAt(lefti) \u003d\u003d word2.charAt(righti)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    iset.add(String.valueOf(word1.charAt(lefti)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            isfilled \u003d true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return Double.valueOf(iset.size()) / Double.valueOf(unionSet.size());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pdotdeep": 138
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/parsers/CommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//@@author pdotdeep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.logic.parsers;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.assertions.CommandAssertions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.enums.CommandKeys;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.exceptions.EmptyCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.exceptions.Exceptions;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.exceptions.MissingInfoException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.strings.CommandRootKeyStrings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.strings.PromptMessages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.execution.CommandStack;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.parsers.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.parsers.commands.BlacklistCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.parsers.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.parsers.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.parsers.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.parsers.commands.MoreCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.parsers.commands.PlaylistCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.parsers.commands.PreferenceCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.parsers.commands.RestrictionCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.parsers.commands.SearchCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.parsers.commands.SetCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.parsers.commands.ViewCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.parsers.commands.WatchlistCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.parsers.commands.YesCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.model.CommandPair;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.ui.Controller;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.ui.MovieHandler;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " * CommandParser class to determine the root command given the user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(CommandParser.class.getName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Entry point to command parser Class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param command command that was entered by the user"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static void parseCommands(String command, Controller uicontroller) throws"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            IOException,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            Exceptions,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            EmptyCommandException,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            MissingInfoException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (command.trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            logger.log(Level.SEVERE, PromptMessages.MISSING_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            throw new EmptyCommandException(PromptMessages.MISSING_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String[] commandArr \u003d command.split(\" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        rootCommand(commandArr, command, uicontroller);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Function to get the most probable root and sub root command if there was a typo in the user command."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param commandArr command that was entered by the user in split array form"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param commandStr   command that was entered by the user."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param uicontroller the controller for the UI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static void processCommand(CommandPair command,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                                      String[] commandArr,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                                      String commandStr,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                                      Controller uicontroller)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            throws IOException, Exceptions, MissingInfoException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assert (CommandAssertions.assertIsLowerStringArr(commandArr));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (!command.isValidCommand()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        switch (command.getRootCommand()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case SEARCH:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            SearchCommand sc \u003d new SearchCommand(uicontroller);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            sc.initCommand(commandArr, commandStr, command.getSubRootCommand());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (command.isValidCommand()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandStack.pushCmd(sc);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case VIEW:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            ViewCommand vc \u003d new ViewCommand(uicontroller);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            vc.initCommand(commandArr, commandStr, command.getSubRootCommand());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (command.isValidCommand()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandStack.pushCmd(vc);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            HelpCommand hc \u003d new HelpCommand(uicontroller);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            hc.initCommand(commandArr, commandStr, command.getSubRootCommand());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (command.isValidCommand()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandStack.pushCmd(hc);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case MORE:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            MoreCommand mc \u003d new MoreCommand(uicontroller);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            mc.initCommand(commandArr, commandStr, command.getSubRootCommand());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (command.isValidCommand()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandStack.pushCmd(mc);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case YES:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            YesCommand yc \u003d new YesCommand(uicontroller);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            yc.initCommand(commandArr, commandStr, command.getSubRootCommand());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (command.isValidCommand()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandStack.pushCmd(yc);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case ADD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            AddCommand wc \u003d new AddCommand(uicontroller);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            wc.initCommand(commandArr, commandStr, command.getSubRootCommand());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (command.isValidCommand()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandStack.pushCmd(wc);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case SET:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            SetCommand stc \u003d new SetCommand(uicontroller);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            stc.initCommand(commandArr, commandStr, command.getSubRootCommand());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (command.isValidCommand()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandStack.pushCmd(stc);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case PLAYLIST:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            PlaylistCommand pc \u003d new PlaylistCommand(uicontroller);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            pc.initCommand(commandArr, commandStr, command.getSubRootCommand());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (command.isValidCommand()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandStack.pushCmd(pc);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case PREFERENCE:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            PreferenceCommand pfc \u003d new PreferenceCommand(uicontroller);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            pfc.initCommand(commandArr, commandStr, command.getSubRootCommand());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (command.isValidCommand()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandStack.pushCmd(pfc);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case RESTRICTION:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            RestrictionCommand rc \u003d new RestrictionCommand(uicontroller);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            rc.initCommand(commandArr, commandStr, command.getSubRootCommand());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (command.isValidCommand()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandStack.pushCmd(rc);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case BLACKLIST:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            BlacklistCommand bbc \u003d new BlacklistCommand(uicontroller);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            bbc.initCommand(commandArr, commandStr, command.getSubRootCommand());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (command.isValidCommand()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandStack.pushCmd(bbc);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case WATCHLIST:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            WatchlistCommand wlc \u003d new WatchlistCommand(uicontroller);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            wlc.initCommand(commandArr, commandStr, command.getSubRootCommand());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (command.isValidCommand()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandStack.pushCmd(wlc);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case FIND:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            FindCommand fc \u003d new FindCommand(uicontroller);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            fc.initCommand(commandArr, commandStr, command.getSubRootCommand());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (command.isValidCommand()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandStack.pushCmd(fc);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case EXIT:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            ExitCommand ec \u003d new ExitCommand(uicontroller);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            ec.initCommand(commandArr, commandStr, command.getSubRootCommand());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (command.isValidCommand()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandStack.pushCmd(ec);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            CommandPair pair \u003d CommandDebugger.commandSpellChecker(commandArr, CommandKeys.NONE, uicontroller);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            ((MovieHandler) uicontroller).setGeneralFeedbackText(PromptMessages.UNABLE_TO_PROCESS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Function to get the Root command for the comand."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param commandArr command that was entered by the user in split array form"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param command   command that was entered by the user."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param uicontroller the controller for the UI"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static void rootCommand(String[] commandArr, String command,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                                   Controller uicontroller) throws IOException, Exceptions, MissingInfoException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        switch (commandArr[0].toLowerCase()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case CommandRootKeyStrings.SEARCH:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            SearchCommand sc \u003d new SearchCommand(uicontroller);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (sc.initCommand(commandArr, command)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandStack.pushCmd(sc);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case CommandRootKeyStrings.VIEW:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            ViewCommand vc \u003d new ViewCommand(uicontroller);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (vc.initCommand(commandArr, command)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandStack.pushCmd(vc);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case CommandRootKeyStrings.HELP:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            HelpCommand hc \u003d new HelpCommand(uicontroller);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (hc.initCommand(commandArr, command)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandStack.pushCmd(hc);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case CommandRootKeyStrings.YES:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            YesCommand yc \u003d new YesCommand(uicontroller);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (yc.initCommand(commandArr, command)) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandStack.pushCmd(yc);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case CommandRootKeyStrings.SET:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            SetCommand stc \u003d new SetCommand(uicontroller);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (stc.initCommand(commandArr, command)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandStack.pushCmd(stc);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case CommandRootKeyStrings.PLAYLIST:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            PlaylistCommand pc \u003d new PlaylistCommand(uicontroller);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (pc.initCommand(commandArr, command)) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandStack.pushCmd(pc);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case CommandRootKeyStrings.PREFERENCE:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            PreferenceCommand pfc \u003d new PreferenceCommand(uicontroller);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (pfc.initCommand(commandArr, command)) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandStack.pushCmd(pfc);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case CommandRootKeyStrings.RESTRICTION:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            RestrictionCommand rc \u003d new RestrictionCommand(uicontroller);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (rc.initCommand(commandArr, command)) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandStack.pushCmd(rc);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case CommandRootKeyStrings.BLACKLIST:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            BlacklistCommand bbc \u003d new BlacklistCommand(uicontroller);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (bbc.initCommand(commandArr, command)) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandStack.pushCmd(bbc);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case CommandRootKeyStrings.WATCHLIST:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            WatchlistCommand wlc \u003d new WatchlistCommand(uicontroller);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (wlc.initCommand(commandArr, command)) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandStack.pushCmd(wlc);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case CommandRootKeyStrings.FIND:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            FindCommand fc \u003d new FindCommand(uicontroller);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (fc.initCommand(commandArr, command)) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandStack.pushCmd(fc);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case CommandRootKeyStrings.EXIT:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            ExitCommand ec \u003d new ExitCommand(uicontroller);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (ec.initCommand(commandArr, command)) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandStack.pushCmd(ec);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            CommandPair pair \u003d CommandDebugger.commandSpellChecker(commandArr, CommandKeys.NONE, uicontroller);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            askUserConfirmation(pair, uicontroller, commandArr);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            processCommand(pair, commandArr, command, uicontroller);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static void askUserConfirmation(CommandPair pair, Controller uicontroller, String[] commandArr) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (pair.getSubRootCommand() \u003d\u003d CommandKeys.NONE) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            ((MovieHandler) uicontroller).setAutoCompleteText(PromptMessages.DID_YOU_MEAN + pair.getRootCommandStr());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            ((MovieHandler) uicontroller).setAutoCompleteText(PromptMessages.DID_YOU_MEAN + pair.getRootCommandStr()"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    + \" \" + pair.getSubRootCommandStr() + \" \""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    + String.join(\" \", Arrays.copyOfRange(commandArr, 2, commandArr.length)));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pdotdeep": 289
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/parsers/CommandStructure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//@@author pdotdeep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.logic.parsers;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.enums.CommandKeys;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " * Class to define command structure and command keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public class CommandStructure {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Defining the Command structure for the program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static TreeMap\u003cCommandKeys, CommandKeys[]\u003e cmdStructure \u003d new TreeMap\u003cCommandKeys, CommandKeys[]\u003e() {{"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            put(CommandKeys.SEARCH, new CommandKeys[] {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandKeys.MOVIES, CommandKeys.TVSHOWS, CommandKeys.CAST, CommandKeys.FILTERS"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            });"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            put(CommandKeys.VIEW, new CommandKeys[] {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandKeys.PROFILE, CommandKeys.FILTERS, CommandKeys.PREFERENCE, CommandKeys.WATCHLIST,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandKeys.INFO, CommandKeys.BLACKLIST,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandKeys.MOVIES, CommandKeys.TV, CommandKeys.BACK, CommandKeys.ENTRY, CommandKeys.RECOMMENDATION"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            });"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            put(CommandKeys.BLACKLIST, new CommandKeys[] {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandKeys.ADD, CommandKeys.REMOVE"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            });"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            put(CommandKeys.HELP, new CommandKeys[]{"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandKeys.SEARCH, CommandKeys.VIEW, CommandKeys.HELP, CommandKeys.MORE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandKeys.SET,  CommandKeys.PLAYLIST, CommandKeys.ME, CommandKeys.BLACKLIST,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandKeys.WATCHLIST, CommandKeys.GET, CommandKeys.PREFERENCE, CommandKeys.RESTRICTION,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandKeys.FIND, CommandKeys.EXIT"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            });"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            put(CommandKeys.YES, new CommandKeys[] {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                //EMPTY"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            put(CommandKeys.EXIT, new CommandKeys[] {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    //EMPTY"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            put(CommandKeys.SET, new CommandKeys[] {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandKeys.NAME, CommandKeys.AGE, CommandKeys.PREFERENCE, CommandKeys.SORT, CommandKeys.RESTRICTION"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            put(CommandKeys.PREFERENCE, new CommandKeys[] {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandKeys.ADD, CommandKeys.REMOVE, CommandKeys.CLEAR"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            put(CommandKeys.PLAYLIST, new CommandKeys[] {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandKeys.CREATE, CommandKeys.DELETE, CommandKeys.ADD, CommandKeys.REMOVE,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandKeys.SET, CommandKeys.LIST, CommandKeys.CLEAR, CommandKeys.BACK"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            put(CommandKeys.RESTRICTION, new CommandKeys[] {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandKeys.ADD, CommandKeys.REMOVE, CommandKeys.CLEAR"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            });"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            put(CommandKeys.WATCHLIST, new CommandKeys[] {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandKeys.ADD,  CommandKeys.SET,  CommandKeys.DELETE"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            });"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            put(CommandKeys.FIND, new CommandKeys[] {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                CommandKeys.CINEMA"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            });"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }};"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static boolean hasSubRoot(CommandKeys root) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return CommandStructure.cmdStructure.get(root).length !\u003d 0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static boolean hasSubRoot(String root) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return CommandStructure.cmdStructure.get(CommandKeys.valueOf(root)).length !\u003d 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static CommandKeys[] AllRoots \u003d new CommandKeys[]{"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        CommandKeys.SEARCH,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        CommandKeys.VIEW,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        CommandKeys.HELP,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        CommandKeys.YES,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        CommandKeys.SET,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        CommandKeys.PLAYLIST,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        CommandKeys.BLACKLIST,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        CommandKeys.WATCHLIST,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        CommandKeys.PREFERENCE,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        CommandKeys.RESTRICTION,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        CommandKeys.FIND,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        CommandKeys.EXIT"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    };"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pdotdeep": 99
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/parsers/CommandSuper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//@@author pdotdeep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.logic.parsers;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import com.google.common.annotations.VisibleForTesting;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.strings.PromptMessages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.assertions.CommandAssertions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.exceptions.Exceptions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.exceptions.InvalidFormatCommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.exceptions.MissingInfoException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.ui.Controller;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.ui.MovieHandler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.enums.CommandKeys;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.model.CommandPair;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " * Template command class for each root command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " * Contains helper functions to breakdown command to useful functions."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public abstract class CommandSuper {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private Controller uicontroller;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private CommandKeys[] subCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private CommandKeys root;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMap \u003d new TreeMap\u003cString, ArrayList\u003cString\u003e\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private CommandKeys subRootCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private String payload;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private boolean execute \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(CommandSuper.class.getName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    protected CommandSuper() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        logger \u003d Logger.getLogger(CommandSuper.class.getName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Function to decide if the command should be executed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * If there is a typo in the command, the command should not be executed"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public boolean isExecute() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return execute;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void setExecute(boolean execute) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        this.execute \u003d execute;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public CommandKeys getRoot() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return root;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public TreeMap\u003cString, ArrayList\u003cString\u003e\u003e getFlagMap() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return flagMap;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public CommandKeys getSubRootCommand() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return subRootCommand;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public String getPayload() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return payload;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Constructor for each Command Super class."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public CommandSuper(CommandKeys root, CommandKeys[] subCommand, Controller uicontroller) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        this.uicontroller \u003d uicontroller;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        this.subCommand \u003d subCommand;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        this.root \u003d root;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        logger \u003d Logger.getLogger(root.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public Controller getUiController() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return uicontroller;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * initialise the Command values."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param commandArr command that was entered by the user in split array form"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param command   command that was entered by the user."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public boolean initCommand(String[] commandArr, String command) throws MissingInfoException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assert (CommandAssertions.assertIsLowerString(command));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assert (CommandAssertions.assertIsLowerStringArr(commandArr));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (!subCommand(commandArr)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            processFlags(command);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        } catch (InvalidFormatCommandException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            ((MovieHandler) this.getUiController()).setGeneralFeedbackText(PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        processPayload(commandArr);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * initialise the Command values."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param commandArr command that was entered by the user in split array form"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param command   command that was entered by the user."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param subRootCommand the subRoot command  that was found"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void initCommand(String[] commandArr, String command, CommandKeys subRootCommand) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        this.subRootCommand \u003d subRootCommand;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            processFlags(command);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        } catch (InvalidFormatCommandException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            ((MovieHandler) this.getUiController()).setGeneralFeedbackText(PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        processPayload(commandArr);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        setExecute(false);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Find the subRoot Command of the user command."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param commandArr command that was entered by the user in split array form"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public boolean subCommand(String[] commandArr) throws MissingInfoException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (commandArr.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            subRootCommand \u003d CommandKeys.NONE;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (CommandStructure.cmdStructure.get(root).length \u003e 0) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                setExecute(false);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                if (uicontroller !\u003d null) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    throw new MissingInfoException(PromptMessages.COMMAND_MISSING_ARGS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                setExecute(true);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                for (CommandKeys cmd : subCommand) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    assert (CommandAssertions.assertIsLowerString(commandArr[1]));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    if (CommandKeys.valueOf(commandArr[1].toUpperCase()) \u003d\u003d cmd) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                        subRootCommand \u003d cmd;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                        execute \u003d true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                logger.log(Level.SEVERE, e.toString());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            CommandPair cmds \u003d CommandDebugger.commandSpellChecker(commandArr, root, this.uicontroller);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            subRootCommand \u003d cmds.getSubRootCommand();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            setExecute(false);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (uicontroller !\u003d null) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                ((MovieHandler) uicontroller).setAutoCompleteText(getDidYouMeanText(commandArr));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Get Feedback String."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return Feedback to ask user about his/her intentions for the command"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private String getDidYouMeanText(String[] commandArr) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return PromptMessages.DID_YOU_MEAN + root.toString().toLowerCase() + \" \""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                + subRootCommand.toString().toLowerCase() + \" \""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                + String.join(\" \", Arrays.copyOfRange(commandArr, 2, commandArr.length));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * find flag values."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param command   command that was entered by the user."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void processFlags(String command) throws InvalidFormatCommandException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String[] commandArr \u003d command.split(\" \");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String f \u003d \"\";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        boolean found \u003d false;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e flagOrder \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        logger.log(Level.INFO, \"Finding Flags\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (String s :commandArr) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (s.matches(\"-[a-z,A-Z]\")) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                flagOrder.add(s);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        boolean first \u003d true;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (flagOrder.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String[] commandFlagSplit \u003d command.split(\"-[a-z,A-Z]\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (String flagValues : commandFlagSplit) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (first) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                first \u003d false;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            String[] flagsIndividualValues \u003d flagValues.split(\",\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            ArrayList\u003cString\u003e listOfString \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                listOfString \u003d flagMap.get(flagOrder.get(counter));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                throw new InvalidFormatCommandException();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (listOfString \u003d\u003d null) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                listOfString \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            for (String individualFlags: flagsIndividualValues) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                listOfString.add(individualFlags.toLowerCase().trim());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            flagMap.put(flagOrder.get(counter), listOfString);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (flagOrder.size() !\u003d 0) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (flagMap.get(flagOrder.get(flagOrder.size() - 1)) \u003d\u003d null) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                flagMap.put(flagOrder.get(flagOrder.size() - 1), new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (Map.Entry\u003cString, ArrayList\u003cString\u003e\u003e entry : flagMap.entrySet()) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            System.out.println(\"Key: \" + entry.getKey() + \" Value: \" + entry.getValue());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Find payload of the user Command based on the interpretation by Command Parser."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param commandArr command that was entered by the user in split array form"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void processPayload(String[] commandArr) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (this.root !\u003d CommandKeys.NONE) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (this.subRootCommand !\u003d CommandKeys.NONE) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                payload \u003d  getThePayload(2, commandArr);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                payload \u003d getThePayload(1, commandArr);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            payload \u003d \"\";"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * find payload of the user Command."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param commandArr command that was entered by the user in split array form"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param start the start index of the payload in the user command"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static String getThePayload(int start, String[] commandArr) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        while (i \u003c commandArr.length \u0026\u0026 !commandArr[i].matches(\"-[a-z,A-Z]\")) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            System.out.println(i + \".\" + commandArr[i]);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String payload \u003d \"\";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (int j \u003d start; j \u003c i; j++) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            payload +\u003d commandArr[j];"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            payload +\u003d \" \";"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return payload.trim();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Print Command method."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String payload \u003d getPayload();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String flagsStr \u003d \"\";"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (Map.Entry\u003cString, ArrayList\u003cString\u003e\u003e entry : flagMap.entrySet()) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            flagsStr +\u003d entry.getKey();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            flagsStr +\u003d \" \";"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            boolean first \u003d true;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            for (String val : entry.getValue()) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                if (first) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    flagsStr +\u003d val;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    first \u003d false;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                flagsStr +\u003d \" , \";"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                flagsStr +\u003d val;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            flagsStr +\u003d \" \";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return getRoot().toString().toLowerCase() + \" \" + getSubRootCommand().toString().toLowerCase()"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                + \" \"  + payload + \" \" + flagsStr;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Abstract class to be implemented for each root command class."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public abstract void executeCommands() throws IOException, Exceptions;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pdotdeep": 337
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/parsers/TimeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * This class deals with manipulating a string into a date if it is possible to."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": " * @@author Hotspur1997"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "public class TimeParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    static Date date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * Manipulate a string into an date and return it back as string."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * If not, simply just return back the string."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public static Date convertStringToDate(String time) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Date date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            SimpleDateFormat formatter1 \u003d new SimpleDateFormat(\"dd/MM/yyyy HHmm\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            date \u003d formatter1.parse(time);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            return date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            //line \u003d convertDateToLine(date);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            // return line;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        } catch (ParseException e1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            SimpleDateFormat formatter2 \u003d new SimpleDateFormat(\"dd-MMM-yyyy HHmm\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                date \u003d formatter2.parse(time);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                return date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                //line \u003d convertDateToLine(date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                // return line;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            } catch (ParseException e2) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                SimpleDateFormat formatter3 \u003d new SimpleDateFormat(\"MMM dd yyyy HHmm\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                    date \u003d formatter3.parse(time);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                    return date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                    //line \u003d convertDateToLine(date);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                    //return line;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                } catch (ParseException e3) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                    SimpleDateFormat formatter4 \u003d new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                        date \u003d formatter4.parse(time);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                        return date;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                        //line \u003d convertDateToLine(date);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                        // return line;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                    } catch (ParseException e4) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                        SimpleDateFormat formatter5 \u003d new SimpleDateFormat(\"dd-MMM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                            date \u003d formatter5.parse(time);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                            return date;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                            //line \u003d convertDateToLine(date);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                            // return line;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                        } catch (ParseException e5) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                            SimpleDateFormat formatter6 \u003d new SimpleDateFormat(\"MMM dd yyyy HHmm\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                date \u003d formatter6.parse(time);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                return date;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                //line \u003d convertDateToLine(date);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                // return line;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                            } catch (ParseException e6) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                SimpleDateFormat formatter7 \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                        new SimpleDateFormat(\"dd\u0027st of\u0027 MMMMMMMM yyyy\u0027,\u0027 hh:mm aaa\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                    date \u003d formatter7.parse(time);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                    return date;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                } catch (ParseException e7) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                    SimpleDateFormat formatter8 \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                            new SimpleDateFormat(\"dd\u0027nd of\u0027 MMMMMMMM yyyy\u0027,\u0027 hh:mm aaa\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                    try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                        date \u003d formatter8.parse(time);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                        return date;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                    } catch (ParseException e8) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                        SimpleDateFormat formatter9"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                                \u003d new SimpleDateFormat(\"dd\u0027rd of\u0027 MMMMMMMM yyyy\u0027,\u0027 hh:mm aaa\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                            date \u003d formatter9.parse(time);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                            return date;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                        } catch (ParseException e9) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                            SimpleDateFormat formatter10"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                                    \u003d new SimpleDateFormat(\"dd\u0027th of\u0027 MMMMMMMM yyyy\u0027,\u0027 hh:mm aaa\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                            try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                                date \u003d formatter10.parse(time);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                                return date;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                            } catch (ParseException e10) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                                SimpleDateFormat formatter11 \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                                try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                                    date \u003d formatter11.parse(time);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                                    return date;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                                } catch (ParseException e11) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                                    return null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * Converts a date back to string and returns the string."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * @@author Hotspur1997."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public static String convertDateToLine(Date date) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        calendar.setTime(date);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        int actualDate \u003d calendar.get(Calendar.DATE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        if ((actualDate \u003c\u003d 3) || (actualDate \u003e\u003d 21)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            if (actualDate % 10 \u003d\u003d 1) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                return new SimpleDateFormat(\"dd\u0027st of\u0027 MMMMMMMM yyyy\u0027,\u0027 hh:mm aaa\").format(date);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            } else if (actualDate % 10 \u003d\u003d 2) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                return new SimpleDateFormat(\"dd\u0027nd of\u0027 MMMMMMMM yyyy\u0027,\u0027 hh:mm aaa\").format(date);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            } else if (actualDate % 10 \u003d\u003d 3) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                return new SimpleDateFormat(\"dd\u0027rd of\u0027 MMMMMMMM yyyy\u0027,\u0027 hh:mm aaa\").format(date);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                return new SimpleDateFormat(\"dd\u0027th of\u0027 MMMMMMMM yyyy\u0027,\u0027 hh:mm aaa\").format(date);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            return new SimpleDateFormat(\"dd\u0027th of\u0027 MMMMMMMM yyyy\u0027,\u0027 hh:mm aaa\").format(date);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * This function returns difference between two dates."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public static long getDiffHours(Date date1, Date date2) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        long diff \u003d Math.abs(date1.getTime() - date2.getTime());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        long diffHours \u003d diff / (60 * 60 * 1000);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        return diffHours;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * Get time portion of Date object only and convert it to String."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public static String getStringTime(Date date) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        SimpleDateFormat targetFormat \u003d new SimpleDateFormat(\"hh:mm aaa\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        return targetFormat.format(date);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public static String getStringDate(Date date) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        SimpleDateFormat targetFormat \u003d new SimpleDateFormat(\"d/MM/yyy\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        return targetFormat.format(date);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * Convert Date object to contain date only (no time)."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public static Date getDateOnly(Date date) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        SimpleDateFormat targetFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            return targetFormat.parse(targetFormat.format(date));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * Convert string of date only to Date object."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public static Date convertToDate(String s) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            SimpleDateFormat sourceFormat \u003d new SimpleDateFormat(\"d/MM/yyyy\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            return sourceFormat.parse(s);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        } catch (ParseException e1) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                SimpleDateFormat sourceFormat \u003d new SimpleDateFormat(\"d-MM-yyyy\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                return sourceFormat.parse(s);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            } catch (ParseException e2) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Hotspur1997": 191,
      "Riyas97": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/parsers/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.logic.parsers.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.Exceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.ui.Controller;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.ui.MovieHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.enums.CommandKeys;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.parsers.CommandStructure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.parsers.CommandSuper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.model.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.model.Period;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.storage.user.WatchlistHandler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//TODO remove this class"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public class AddCommand extends CommandSuper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public AddCommand(Controller uicontroller) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        super(CommandKeys.ADD, CommandStructure.cmdStructure.get(CommandKeys.ADD), uicontroller);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public void executeCommands() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        switch (this.getSubRootCommand()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case WATCHLIST:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                addToWatchList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            } catch (Exceptions exceptions) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                exceptions.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case BLACKLIST:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            //addToBlackList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Add items to the watchlist."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void addToWatchList() throws Exceptions {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            String movie \u003d ((MovieHandler) this.getUiController()).getApiRequester().beginAddRequest(getPayload());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            movie \u003d movie.toLowerCase();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            String type \u003d this.getFlagMap().get(\"-d\").get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            case \" d \":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                String endDate \u003d this.getFlagMap().get(\"-e\").get(0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                Deadline deadline \u003d new Deadline(movie, \"D\", endDate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                WatchlistHandler.add(deadline);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            case \" p \":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                String stDate \u003d this.getFlagMap().get(\"-s\").get(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                String enDate \u003d this.getFlagMap().get(\"-e\").get(0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                Period period \u003d new Period(movie, \"P\", stDate, enDate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                WatchlistHandler.add(period);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            WatchlistHandler.print_list((MovieHandler) (this.getUiController()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        } catch (NullPointerException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            ((MovieHandler) (this.getUiController())).setGeneralFeedbackText(\"Please enter a valid command in the \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    + \"form of: \\nadd watchlist \u003cname of movie\u003e -d \u003ctype of duke.task\u003e -s\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    + \" \u003cstart date only for duke.task\u003e -e \u003cend date for duke.task\u003e\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hotspur1997": 28,
      "Riyas97": 14,
      "Pdotdeep": 24,
      "nwenhui": 2
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/parsers/commands/BlacklistCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//@@author pdotdeep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.logic.parsers.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.strings.PromptMessages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.enums.CommandKeys;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.contexts.SearchResultContext;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.parsers.CommandStructure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.parsers.CommandSuper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.storage.user.Blacklist;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.ui.Controller;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.ui.MovieHandler;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " * Blacklist command class to handle blacklist command functions."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public class BlacklistCommand extends CommandSuper {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Blacklist.class.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Constructor for each Command Super class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public BlacklistCommand(Controller uicontroller) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        super(CommandKeys.BLACKLIST, CommandStructure.cmdStructure.get(CommandKeys.BLACKLIST), uicontroller);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Function to execute commands depending on the subroot command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void executeCommands() throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        switch (this.getSubRootCommand()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case ADD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            addToBlackList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case REMOVE:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            String movie \u003d getPayload();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            removeFromBlackList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            Blacklist.saveBlackList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Check if payload is an integer."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param radix the chosen radix."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param s string payload."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static boolean isInteger(String s, int radix) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (s.isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (int i \u003d 0; i \u003c s.length(); i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (i \u003d\u003d 0 \u0026\u0026 s.charAt(i) \u003d\u003d \u0027-\u0027) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                if (s.length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (Character.digit(s.charAt(i), radix) \u003c 0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Add items to the blacklist."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void addToBlackList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String payload \u003d getPayload().trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (getFlagMap().get(\"-k\") !\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                String[] movies \u003d payload.split(\",\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                for (String movie : movies) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    if (isInteger(movie.trim(), 10)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                        Blacklist.addToBlacklistKeyWord(SearchResultContext"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                                .getItemAtIndex(Integer.parseInt(movie.trim())).getTitle());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                        Blacklist.addToBlacklistKeyWord(movie.toLowerCase().trim());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                String[] movies \u003d payload.split(\",\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                for (String movie : movies) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    if (isInteger(movie.trim(), 10)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                        Blacklist.addToBlacklistMoviesID(SearchResultContext"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                                .getItemAtIndex(Integer.parseInt(movie.trim())));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                        Blacklist.addToBlacklistMovie(movie.toLowerCase().trim());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            ((MovieHandler) this.getUiController()).setGeneralFeedbackText(Blacklist.printList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        } catch (DuplicateEntryException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            ((MovieHandler) this.getUiController())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    .setGeneralFeedbackText(PromptMessages.DUPLICATE_BLACKLIST + Blacklist.printList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        logger.log(Level.INFO, PromptMessages.BLACKLIST_ADD_SUCCUESS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Removes items from the blacklist."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private void removeFromBlackList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String payload \u003d getPayload();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        boolean stat \u003d false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (getFlagMap().get(\"-k\") !\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            String[] movies \u003d payload.split(\",\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            for (String movie : movies) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                if (isInteger(movie.trim(), 10)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    stat \u003d Blacklist.removeFromBlacklistKeyWord(SearchResultContext"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                            .getItemAtIndex(Integer.parseInt(movie.trim()))"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                            .getTitle());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    stat \u003d Blacklist.removeFromBlacklistKeyWord(movie.toLowerCase().trim());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            String[] movies \u003d payload.split(\",\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            for (String movie : movies) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                if (isInteger(movie.trim(), 10)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    stat \u003d Blacklist.removeFromBlacklistMovies(SearchResultContext"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                            .getItemAtIndex(Integer.parseInt(movie.trim())));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    stat \u003d Blacklist.removeFromBlacklistMovieTitle(movie.toLowerCase().trim());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        logger.log(Level.INFO, PromptMessages.BLACKLIST_REMOVE_SUCCUESS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (stat) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            ((MovieHandler) getUiController()).setGeneralFeedbackText(PromptMessages.BLACKLIST_REMOVE_SUCCUESS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            ((MovieHandler) getUiController())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    .setGeneralFeedbackText(PromptMessages.BLACKLIST_REMOVE_FAILURE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Pdotdeep": 168
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/parsers/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.logic.parsers.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.enums.CommandKeys;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.strings.PromptMessages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.parsers.CommandStructure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.parsers.CommandSuper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.ui.Controller;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * This class is responsible for exiting the program."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public class ExitCommand extends CommandSuper {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(ExitCommand.class.getName());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Constructor for Command Super class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param uicontroller Controller class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public ExitCommand(Controller uicontroller) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        super(CommandKeys.EXIT, CommandStructure.cmdStructure.get(CommandKeys.EXIT), uicontroller);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for exiting from the app."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void executeCommands() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        logger.log(Level.INFO, PromptMessages.EXIT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 14,
      "Pdotdeep": 20
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/parsers/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "package entertainment.pro.logic.parsers.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.enums.CommandKeys;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.Exceptions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import entertainment.pro.logic.parsers.CommandStructure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import entertainment.pro.logic.parsers.CommandSuper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import entertainment.pro.model.CinemaInfoObject;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import entertainment.pro.ui.Controller;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import entertainment.pro.ui.MovieHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "public class FindCommand extends CommandSuper {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public static final int CONST \u003d 5;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Constructor for each Command Super class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param uicontroller UI controller for javafx"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public FindCommand(Controller uicontroller) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        super(CommandKeys.FIND, CommandStructure.cmdStructure.get(CommandKeys.FIND), uicontroller);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Function to execute commands depending on the subroot command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public void executeCommands() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        switch (this.getSubRootCommand()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case CINEMA:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                findCinemas();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            } catch (Exceptions exceptions) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                exceptions.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * find cinemas near a particular location in the payload and formats them to be displayed on the UI."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void findCinemas() throws Exceptions {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        String display \u003d \"Here is the list of cinemas near \" + getPayload() + \": \\n\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cCinemaInfoObject\u003e cinemas \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                ((MovieHandler) this.getUiController()).getCinemaApiRequester().searchNearestCinemas(getPayload());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        int length \u003d CONST;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        if (cinemas.size() \u003c CONST) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            length \u003d cinemas.size();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        if (length \u003e 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            for (int i \u003d 0; i \u003c length; i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                display +\u003d i + 1 + \". Name: \" + cinemas.get(i).getName() + \" [Rating: \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                        + cinemas.get(i).getRating() + \"]\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                display +\u003d \"    Address: \" + cinemas.get(i).getAddress() + \"\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                display +\u003d \"\\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            display \u003d \"no cinemas in this location, please try a different one\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ((MovieHandler) this.getUiController()).clearSearchTextField();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ((MovieHandler) this.getUiController()).setGeneralFeedbackText(display);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hotspur1997": 48,
      "Riyas97": 14,
      "Pdotdeep": 6
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/parsers/commands/GetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.logic.parsers.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.ui.Controller;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.ui.MovieHandler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.enums.CommandKeys;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.parsers.CommandStructure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.parsers.CommandSuper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "public class GetCommand extends CommandSuper {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    private int constant \u003d 5;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public GetCommand(Controller uicontroller) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        super(CommandKeys.GET, CommandStructure.cmdStructure.get(CommandKeys.GET), uicontroller);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public void executeCommands() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            switch (this.getSubRootCommand()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            case RECOMMENDATION:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                //executeRecommendationCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            ((MovieHandler) this.getUiController()).setGeneralFeedbackText(\"file unable to be found\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * prints out a list of recommendations based on the users set preferences."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @throws IOException file was not able to be found"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    private void executeRecommendationCommand() throws Exceptions {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        String feedback \u003d \"Your recommended movies are: \\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        MovieHandler movieHandler \u003d ((MovieHandler) this.getUiController());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cInteger\u003e preferenceIndices \u003d movieHandler.getUserProfile().getGenreIdPreference();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cMovieInfoObject\u003e  movies \u003d movieHandler.getAPIRequester()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                .beginSearchGenre(Integer.toString(preferenceIndices.get(0)), movieHandler.getUserProfile().isAdult());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        for (int i \u003d 0; i \u003c constant; i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            feedback +\u003d i + 1 + \". \" + movies.get(i).getTitle() + \"\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        movieHandler.setGeneralFeedbackText(feedback);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hotspur1997": 34,
      "Riyas97": 13,
      "Pdotdeep": 3
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/parsers/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//@@author pdotdeep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.logic.parsers.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.enums.CommandKeys;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.parsers.CommandStructure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.parsers.CommandSuper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.storage.utils.HelpStorage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.ui.Controller;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.ui.MovieHandler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " * Help command class to handle help command functions."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public class HelpCommand extends CommandSuper {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public HelpCommand(Controller uicontroller) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        super(CommandKeys.HELP, CommandStructure.cmdStructure.get(CommandKeys.HELP), uicontroller);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Function to execute commands depending on the subroot command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void executeCommands() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        //TODO Display help options"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ((MovieHandler) this.getUiController()).setGeneralFeedbackText(getHelp());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Function to get help pertaining to each root command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private String getHelp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return HelpStorage.getCmdHelp().get(getSubRootCommand());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pdotdeep": 38
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/parsers/commands/MoreCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.logic.parsers.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.ui.Controller;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.enums.CommandKeys;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.parsers.CommandStructure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.parsers.CommandSuper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//TODO REMOVE THIS CLASS"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public class MoreCommand extends CommandSuper {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public MoreCommand(Controller uicontroller) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        super(CommandKeys.MORE, CommandStructure.cmdStructure.get(CommandKeys.MORE), uicontroller);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void executeCommands() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 4,
      "Pdotdeep": 16
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/parsers/commands/PlaylistCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.logic.parsers.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.commons.exceptions.InvalidFormatCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.commons.exceptions.InvalidParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.commons.exceptions.logic.PlaylistExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.commons.strings.PromptMessages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.model.Playlist;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.model.UserProfile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.storage.user.PlaylistCommands;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.storage.utils.EditPlaylistJson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.storage.utils.EditProfileJson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.storage.user.ProfileCommands;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.ui.Controller;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.ui.MovieHandler;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.enums.CommandKeys;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.parsers.CommandStructure;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.parsers.CommandSuper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "public class PlaylistCommand extends CommandSuper {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private Logger logger \u003d Logger.getLogger(this.getClass().getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public PlaylistCommand(Controller uiController) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        super(CommandKeys.PLAYLIST, CommandStructure.cmdStructure.get(CommandKeys.PLAYLIST), uiController);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void executeCommands() throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        switch (this.getSubRootCommand()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case CREATE:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            executeCreatePlaylist();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            executeDeletePlaylist();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case ADD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            executeAddToPlaylist();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case REMOVE:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            executeRemoveFromPlaylist();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case SET:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            executeSetToPlaylist();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case CLEAR:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            executeClearPlaylist();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            executePlaylistListing();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case BACK:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            executeBackToPlaylistInfo();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * create new playlist."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * root: playlist"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * sub: create"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * payload: playlist name"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * flag: none"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private void executeCreatePlaylist() throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        MovieHandler movieHandler \u003d ((MovieHandler) this.getUiController());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        String createPlaylistName \u003d this.getPayload();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        UserProfile userProfile \u003d movieHandler.getUserProfile();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            PlaylistExceptions.checkCreateCommand(createPlaylistName, userProfile);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            PlaylistCommands command \u003d new PlaylistCommands(createPlaylistName);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            command.create();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ProfileCommands profileCommands \u003d new ProfileCommands(userProfile);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            userProfile \u003d profileCommands.addPlaylist(createPlaylistName);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            new EditProfileJson().updateProfile(userProfile);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            movieHandler.setLabels();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            movieHandler.refresh();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.PLAYLIST_CREATED);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (InvalidParameterException | InvalidFormatCommandException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            movieHandler.setGeneralFeedbackText(e.getMessage());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            logger.log(Level.WARNING, PromptMessages.PLAYLIST_CREATE_ERROR);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        movieHandler.clearSearchTextField();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * delete playlist."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * root: playlist"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * sub: delete"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * payload: playlist name"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * flag: none"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private void executeDeletePlaylist() throws IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        MovieHandler movieHandler \u003d ((MovieHandler) this.getUiController());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        String deletePlaylistName \u003d this.getPayload();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        UserProfile userProfile \u003d movieHandler.getUserProfile();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            PlaylistExceptions.checkDeleteCommand(deletePlaylistName, userProfile);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ProfileCommands profileCommands \u003d new ProfileCommands(userProfile);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            userProfile \u003d profileCommands.deletePlaylist(deletePlaylistName);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            PlaylistCommands playlistCommands \u003d new PlaylistCommands(deletePlaylistName);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            playlistCommands.delete();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            new EditProfileJson().updateProfile(userProfile);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            movieHandler.setLabels();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            movieHandler.refresh();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.PLAYLIST_DELETED);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (InvalidParameterException | InvalidFormatCommandException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            movieHandler.setGeneralFeedbackText(e.getMessage());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            logger.log(Level.WARNING, PromptMessages.PLAYLIST_DELETE_ERROR);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        movieHandler.clearSearchTextField();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * add movie titles to playlist."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * root: playlist"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * sub: add"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * payload: playlist name"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * flag: -m (movie number -- not movie ID)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private void executeAddToPlaylist() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        MovieHandler movieHandler \u003d ((MovieHandler) this.getUiController());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        String playlistName \u003d this.getPayload();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        UserProfile userProfile \u003d movieHandler.getUserProfile();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (movieHandler.getPageTracker().isMainPage()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                PlaylistExceptions.checkAddCommand(playlistName, this.getFlagMap(),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                        userProfile, movieHandler.getmMovies());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                EditPlaylistJson editPlaylistJson \u003d new EditPlaylistJson(playlistName);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                Playlist playlist \u003d editPlaylistJson.load();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                PlaylistCommands playlistCommands \u003d new PlaylistCommands(playlistName);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                playlist \u003d playlistCommands.add(playlist, this.getFlagMap(), movieHandler.getmMovies());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                editPlaylistJson.editPlaylist(playlist);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                logger.log(Level.INFO, PromptMessages.SHOWS_ADDED);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            } catch (InvalidFormatCommandException | InvalidParameterException | IOException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                movieHandler.setGeneralFeedbackText(e.getMessage());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                logger.log(Level.WARNING, PromptMessages.SHOWS_ADD_ERROR);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            movieHandler.setGeneralFeedbackText(\"there are no shows here to be added :( try making a search first!\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        movieHandler.clearSearchTextField();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * remove movie titles from playlist."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * root: playlist"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * sub: remove"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * payload: playlist name"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * flag: -m (movie number -- not movie ID)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private void executeRemoveFromPlaylist() throws IOException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        MovieHandler movieHandler \u003d ((MovieHandler) this.getUiController());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        String playlistName \u003d this.getPayload();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        UserProfile userProfile \u003d movieHandler.getUserProfile();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (movieHandler.getPageTracker().isPlaylistInfo()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                PlaylistExceptions.checkRemoveCommand(playlistName, this.getFlagMap(),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                        userProfile, movieHandler.getmMovies());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                movieHandler.setPlaylistName(playlistName);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                EditPlaylistJson editPlaylistJson \u003d new EditPlaylistJson(playlistName);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                Playlist playlist \u003d editPlaylistJson.load();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                PlaylistCommands playlistCommands \u003d new PlaylistCommands(playlistName);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                playlist \u003d playlistCommands.remove(playlist, this.getFlagMap());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                editPlaylistJson.editPlaylist(playlist);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                logger.log(Level.INFO, PromptMessages.SHOWS_REMOVED);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                movieHandler.refresh();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            } catch (InvalidParameterException | InvalidFormatCommandException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                movieHandler.setGeneralFeedbackText(e.getMessage());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                logger.log(Level.WARNING, PromptMessages.SHOWS_REMOVE_ERROR);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            movieHandler.setGeneralFeedbackText(\"there are not shows here to be removed :( \""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    + \"try going into the playlist first using the command: playlist list\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        movieHandler.clearSearchTextField();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * edit playlist\u0027s name and description."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * root: playlist"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * sub: set"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * payload: playlist name"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * flag: -n (for new playlist name)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     *       -d (for new playlist description)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private void executeSetToPlaylist() throws IOException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        MovieHandler movieHandler \u003d ((MovieHandler) this.getUiController());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        String playlistName \u003d this.getPayload();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        UserProfile userProfile \u003d movieHandler.getUserProfile();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            PlaylistExceptions.checkSetCommand(playlistName, this.getFlagMap(), userProfile);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            PlaylistCommands playlistCommands \u003d new PlaylistCommands(playlistName);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            EditPlaylistJson editPlaylistJson \u003d new EditPlaylistJson(playlistName);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            Playlist playlist \u003d editPlaylistJson.load();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (this.getFlagMap().containsKey(\"-n\")) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                String newName \u003d appendFlagMap(this.getFlagMap().get(\"-n\"));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                userProfile.renamePlaylist(playlistName, newName);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                new EditProfileJson().updateProfile(userProfile);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                if (movieHandler.getPlaylistName().equals(playlistName)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    movieHandler.setPlaylistName(newName);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                editPlaylistJson.renamePlaylist(playlist, newName);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                editPlaylistJson \u003d new EditPlaylistJson(newName);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                logger.log(Level.INFO, PromptMessages.PLAYLIST_RENAMED);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            playlist \u003d playlistCommands.setToPlaylist(playlist, this.getFlagMap());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            editPlaylistJson.editPlaylist(playlist);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            movieHandler.refresh();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.PLAYLIST_DESCRIPTION);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (InvalidParameterException | InvalidFormatCommandException e) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            movieHandler.setGeneralFeedbackText(e.getMessage());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            logger.log(Level.WARNING, PromptMessages.SETTING_ERROR);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        movieHandler.clearSearchTextField();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * clear out all movies in particular playlist."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * root: playlist"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * sub: clear"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * payload: playlist name"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * flag: none"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private void executeClearPlaylist() throws IOException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        MovieHandler movieHandler \u003d ((MovieHandler) this.getUiController());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        String playlistName \u003d this.getPayload();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        UserProfile userProfile \u003d movieHandler.getUserProfile();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            PlaylistExceptions.checkClearCommand(playlistName, userProfile);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            PlaylistCommands playlistCommands \u003d new PlaylistCommands(playlistName);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            EditPlaylistJson editPlaylistJson \u003d new EditPlaylistJson(playlistName);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            Playlist playlist \u003d editPlaylistJson.load();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            playlist \u003d playlistCommands.clear(playlist);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            editPlaylistJson.editPlaylist(playlist);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            movieHandler.refresh();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.PLAYLIST_CLEARED);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (InvalidParameterException | InvalidFormatCommandException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            movieHandler.setGeneralFeedbackText(e.getMessage());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            logger.log(Level.WARNING, PromptMessages.PLAYLIST_CLEARED_ERROR);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        movieHandler.clearSearchTextField();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to go to the page of playlist list."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * root: playlist"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * sub: list"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * payload: none"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * flag: none"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private void executePlaylistListing() throws IOException {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        MovieHandler movieHandler \u003d ((MovieHandler)this.getUiController());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (!movieHandler.getPageTracker().isPlaylistList()) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            movieHandler.showPlaylistList();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.PLAYLIST_LISTED);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            movieHandler.setGeneralFeedbackText(\"you are already on this page! try other commands instead\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        movieHandler.clearSearchTextField();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to back to the playlist info page after viewing a movie info in the playlist."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * root: playlist"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * sub: back"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * payload: none"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * flag: none"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private void executeBackToPlaylistInfo() throws IOException {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        MovieHandler movieHandler \u003d ((MovieHandler)this.getUiController());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (movieHandler.getPageTracker().isPlaylistMovieInfo()) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            movieHandler.backToPlaylistInfo();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.PLAYLIST_BACKED);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            movieHandler.setGeneralFeedbackText(\"you can\u0027t do that here :o\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private String appendFlagMap(ArrayList\u003cString\u003e flagMapArrayList) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        String appends \u003d \"\";"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        boolean flag \u003d true;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (String log : flagMapArrayList) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (!flag) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                appends +\u003d \", \";"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            appends +\u003d log.trim();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            flag \u003d false;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return appends;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 7,
      "nwenhui": 276,
      "Pdotdeep": 15
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/parsers/commands/PreferenceCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.logic.parsers.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.strings.PromptMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.DuplicateGenreException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.GenreDoesNotExistException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.commons.exceptions.InvalidFormatCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.model.UserProfile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.storage.user.ProfileCommands;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.InvalidGenreNameEnteredException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.storage.utils.EditProfileJson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.ui.Controller;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.ui.MovieHandler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.enums.CommandKeys;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.parsers.CommandStructure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.parsers.CommandSuper;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * This class is called when user wants to edit preferences."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * Input entered by the user starts with \u0027preference\u0027."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class PreferenceCommand extends CommandSuper {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private static final String GET_NEW_GENRE_PREF \u003d \"-g\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private static final String GET_NEW_GENRE_RESTRICT \u003d \"-r\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private static final String GET_NEW_SORT \u003d \"-s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private static final String GET_NEW_ADULT_RATING \u003d \"-a\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    ArrayList\u003cString\u003e containsPossibleInputs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    List\u003cString\u003e flagList \u003d Arrays.asList(GET_NEW_GENRE_PREF, GET_NEW_GENRE_RESTRICT, GET_NEW_SORT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            GET_NEW_ADULT_RATING);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(PreferenceCommand.class.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Constructor for Command Super class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param uiController Controller Class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public PreferenceCommand(Controller uiController) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        super(CommandKeys.PREFERENCE, CommandStructure.cmdStructure.get(CommandKeys.PREFERENCE), uiController);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for adding possible valid user inputs to the arraylist."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private void setContainsInputs() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        containsPossibleInputs.addAll(flagList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Called when user wants to edit preferences set on the app."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @throws InvalidFormatCommandException when the input entered by the user is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void executeCommands() throws InvalidFormatCommandException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        logger.log(Level.INFO, PromptMessages.EDIT_PREFERENCES_COMMAND);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        setContainsInputs();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        MovieHandler movieHandler \u003d ((MovieHandler) this.getUiController());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        logger.log(Level.INFO, PromptMessages.CHECKING_FLAGS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        for (Map.Entry\u003cString, ArrayList\u003cString\u003e\u003e entry : getFlagMap().entrySet()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            boolean isValidFlag \u003d false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            String k \u003d entry.getKey();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            for (int i \u003d 0; i \u003c containsPossibleInputs.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                if (k.equals(containsPossibleInputs.get(i))) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    isValidFlag \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (!isValidFlag) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                ((MovieHandler) this.getUiController()).setGeneralFeedbackText(PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                logger.log(Level.WARNING, PromptMessages.INVALID_PREFERENCE_FLAGS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                throw new InvalidFormatCommandException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (getFlagMap().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            ((MovieHandler) this.getUiController()).setGeneralFeedbackText(PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.WARNING, PromptMessages.EMPTY_PREFERENCE_FLAGS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            throw new InvalidFormatCommandException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        logger.log(Level.WARNING, PromptMessages.SUBROOT_PREFERENCE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        switch (this.getSubRootCommand()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case ADD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.WARNING, PromptMessages.SUBROOT_PREFERENCE_ADD);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            executeAddPreference(containsPossibleInputs, movieHandler);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case REMOVE:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.WARNING, PromptMessages.SUBROOT_PREFERENCE_REMOVE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            executeRemovePreference(containsPossibleInputs, movieHandler);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case CLEAR:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.WARNING, PromptMessages.SUBROOT_PREFERENCE_CLEAR);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            executeClearPreference(containsPossibleInputs, movieHandler);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.WARNING, PromptMessages.NO_SUBROOT_PREFERENCE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            ((MovieHandler) this.getUiController()).setGeneralFeedbackText(PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            throw new InvalidFormatCommandException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        logger.log(Level.WARNING, PromptMessages.UPDATING_INTEREFACE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        movieHandler.setLabels();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        System.out.println(\"this is done2\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Called when user wants to add elements to preference categories."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param containsPossibleInputs ArrayList containing the possible categories, user want to add elements."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param movieHandler           MovieHandler class"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @throws IOException           Input Output exception thrown if file has error"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @throws InvalidFormatCommandException when the input entered by the user is invalid."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private void executeAddPreference(ArrayList\u003cString\u003e containsPossibleInputs, MovieHandler movieHandler)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ProfileCommands command \u003d new ProfileCommands(movieHandler.getUserProfile());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        EditProfileJson editProfileJson \u003d new EditProfileJson();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        UserProfile userProfile \u003d editProfileJson.load();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        for (int i \u003d 0; i \u003c containsPossibleInputs.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (getFlagMap().containsKey(containsPossibleInputs.get(i))) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                System.out.println(\"ye\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    userProfile \u003d command.addPreference(this.getFlagMap(), containsPossibleInputs.get(i));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    movieHandler.setGeneralFeedbackText(PromptMessages.PREFERENCES_SUCCESS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                } catch (InvalidFormatCommandException invalidFormatCommandException) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    logger.log(Level.WARNING, PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    ((MovieHandler) this.getUiController()).setGeneralFeedbackText(PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    movieHandler.setGeneralFeedbackText(PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                } catch (InvalidGenreNameEnteredException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    logger.log(Level.WARNING, PromptMessages.INVALID_GENRE_NAME_ERROR);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    ((MovieHandler) this.getUiController()).setGeneralFeedbackText(PromptMessages.INVALID_GENRE_NAME);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                } catch (DuplicateGenreException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    logger.log(Level.WARNING, PromptMessages.REPETITVE_GENRE_NAME_ERROR);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    ((MovieHandler) this.getUiController()).setGeneralFeedbackText(PromptMessages.REPETITVE_GENRE_NAME);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        editProfileJson.updateProfile(userProfile);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        movieHandler.setLabels();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Called when user wants to remove elements from preference categories."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param containsPossibleInputs ArrayList containing the possible categories, user want to remove elements."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param movieHandler           MovieHandler class"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @throws IOException           Input Output exception thrown if file has error"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @throws InvalidFormatCommandException when the input entered by the user is invalid."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private void executeRemovePreference(ArrayList\u003cString\u003e containsPossibleInputs, MovieHandler movieHandler)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ProfileCommands command \u003d new ProfileCommands(movieHandler.getUserProfile());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        EditProfileJson editProfileJson \u003d new EditProfileJson();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        UserProfile userProfile \u003d editProfileJson.load();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        for (int i \u003d 0; i \u003c containsPossibleInputs.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (getFlagMap().containsKey(containsPossibleInputs.get(i))) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    userProfile \u003d command.removePreference(this.getFlagMap(), containsPossibleInputs.get(i));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    movieHandler.setGeneralFeedbackText(PromptMessages.PREFERENCES_SUCCESS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                } catch (InvalidFormatCommandException invalidFormatCommandException) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    logger.log(Level.WARNING, PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    ((MovieHandler) this.getUiController()).setGeneralFeedbackText(PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    movieHandler.setGeneralFeedbackText(PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                } catch (GenreDoesNotExistException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    logger.log(Level.WARNING, PromptMessages.GENRE_DOES_NOT_EXIST_ERROR);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    ((MovieHandler) this.getUiController()).setGeneralFeedbackText(PromptMessages.GENRE_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                } catch (InvalidGenreNameEnteredException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    logger.log(Level.WARNING, PromptMessages.INVALID_GENRE_NAME_ERROR);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    ((MovieHandler) this.getUiController()).setGeneralFeedbackText(PromptMessages.INVALID_GENRE_NAME);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        editProfileJson.updateProfile(userProfile);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        movieHandler.setLabels();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Called when user wants to clear elements from preference categories."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param containsPossibleInputs ArrayList containing the possible categories, user want to clear elements."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param movieHandler           MovieHandler class"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @throws InvalidFormatCommandException when the input entered by the user is invalid."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private void executeClearPreference(ArrayList\u003cString\u003e containsPossibleInputs,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                                        MovieHandler movieHandler) throws IOException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ProfileCommands command \u003d new ProfileCommands(movieHandler.getUserProfile());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        EditProfileJson editProfileJson \u003d new EditProfileJson();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        UserProfile userProfile \u003d editProfileJson.load();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        for (int i \u003d 0; i \u003c containsPossibleInputs.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (getFlagMap().containsKey(containsPossibleInputs.get(i))) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    userProfile \u003d command.clearPreference(this.getFlagMap(), containsPossibleInputs.get(i));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    movieHandler.setGeneralFeedbackText(PromptMessages.PREFERENCES_SUCCESS);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                } catch (InvalidFormatCommandException invalidFormatCommandException) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    logger.log(Level.WARNING, PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    ((MovieHandler) this.getUiController()).setGeneralFeedbackText(PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    movieHandler.setGeneralFeedbackText(PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        editProfileJson.updateProfile(userProfile);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        movieHandler.setLabels();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 167,
      "Pdotdeep": 10,
      "nwenhui": 34
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/parsers/commands/RemoveCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.logic.parsers.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.storage.user.WatchlistHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.ui.Controller;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.ui.MovieHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.enums.CommandKeys;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.parsers.CommandStructure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.parsers.CommandSuper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//TODO REMOVE THIS CLASS"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public class RemoveCommand extends CommandSuper {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Constructor for each Command Super class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public RemoveCommand(Controller uicontroller) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        super(CommandKeys.REMOVE, CommandStructure.cmdStructure.get(CommandKeys.REMOVE), uicontroller);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * executes the entertainment.pro.logic.parsers.commands based on the subroot command that is passed to it"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void executeCommands() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        switch (this.getSubRootCommand()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case WATCHLIST:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            String mov \u003d getPayload();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            System.out.println(mov);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (WatchlistHandler.removeFromWatchlist(mov, (MovieHandler)(this.getUiController()))) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                ((MovieHandler) getUiController())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                        .setGeneralFeedbackText(\"Successfully removed the movie from WatchList: \" + mov);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                ((MovieHandler) getUiController())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                        .setGeneralFeedbackText(\"Such a movie does not exist in your WatchList. Check your spelling?\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case BLACKLIST:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * checkstyle made me put javadoc here \u003e:( whoever made this function pls edit the the javadoc tqtq -wh."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static boolean isInteger(String s, int radix) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (s.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (int i \u003d 0; i \u003c s.length(); i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (i \u003d\u003d 0 \u0026\u0026 s.charAt(i) \u003d\u003d \u0027-\u0027) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                if (s.length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (Character.digit(s.charAt(i), radix) \u003c 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hotspur1997": 6,
      "Riyas97": 16,
      "Pdotdeep": 45
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/parsers/commands/RestrictionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.logic.parsers.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.storage.user.ProfileCommands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.ui.Controller;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.ui.MovieHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.enums.CommandKeys;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.parsers.CommandStructure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.parsers.CommandSuper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "public class RestrictionCommand extends CommandSuper {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public RestrictionCommand(Controller uiController) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        super(CommandKeys.RESTRICTION, CommandStructure.cmdStructure.get(CommandKeys.RESTRICTION), uiController);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void executeCommands() throws IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        switch (this.getSubRootCommand()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case ADD:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            executeAddRestriction();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case REMOVE:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            executeRemoveRestriction();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case CLEAR:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            executeClearRestriction();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * add to user preference."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * root: preference"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * sub: add"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * payload: none"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * flag: -g (genre name -- not genre ID)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private void executeAddRestriction() throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        MovieHandler movieHandler \u003d ((MovieHandler)this.getUiController());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ProfileCommands command \u003d new ProfileCommands(movieHandler.getUserProfile());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        command.addRestriction(this.getFlagMap());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        movieHandler.clearSearchTextField();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        movieHandler.setLabels();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * remove from user preference."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * root: preference"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * sub: remove"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * payload: none"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * flag: -g (genre name -- not genre ID)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private void executeRemoveRestriction() throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        MovieHandler movieHandler \u003d ((MovieHandler)this.getUiController());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ProfileCommands command \u003d new ProfileCommands(movieHandler.getUserProfile());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        command.removeRestriction(this.getFlagMap());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        movieHandler.clearSearchTextField();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        movieHandler.setLabels();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * clear all preference that was set previously."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * root: preference"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * sub: clear"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * payload: none"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * flag: -g (genre name -- not genre ID)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     *       -a (adult -- yes to allow adult content, no to restrict, set to yes by default)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private void executeClearRestriction() throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        MovieHandler movieHandler \u003d ((MovieHandler)this.getUiController());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ProfileCommands command \u003d new ProfileCommands(movieHandler.getUserProfile());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        command.clearRestriction();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        movieHandler.clearSearchTextField();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        movieHandler.setLabels();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 5,
      "nwenhui": 69,
      "Pdotdeep": 5
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/parsers/commands/SearchCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.logic.parsers.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.commons.exceptions.DuplicateGenreException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.commons.exceptions.Exceptions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.commons.exceptions.InvalidFormatCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.commons.exceptions.InvalidGenreNameEnteredException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.commons.exceptions.InvalidParameterException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.strings.PromptMessages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.movierequesterapi.RetrieveRequest;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.model.SearchProfile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.storage.user.ProfileCommands;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.ui.Controller;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.ui.MovieHandler;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.enums.CommandKeys;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.parsers.CommandStructure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.parsers.CommandSuper;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * This class is called when user enters the command for a search request."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class SearchCommand extends CommandSuper {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static final String GET_CURRENT \u003d \"/current\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static final String GET_UPCOMING \u003d \"/upcoming\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static final String GET_TRENDING \u003d \"/trend\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static final String GET_POPULAR \u003d \"/popular\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static final String GET_RATED \u003d \"/rated\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static final String GET_PREF \u003d \"-p\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static final String GET_NEW_GENRE_PREF \u003d \"-g\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static final String GET_NEW_GENRE_RESTRICT \u003d \"-r\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static final String GET_NEW_SORT \u003d \"-s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static final String GET_NEW_ADULT_RATING \u003d \"-a\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private boolean isMovie \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static final String USER_PREF_FOR_ALPHA_SORT \u003d \"1\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static final String USER_PREF_FOR_RELEASE_DATES_SORT \u003d \"2\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static final String USER_PREF_FOR_RATING_SORT \u003d \"3\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static final String USER_PREF_FOR_ADULT_TRUE \u003d \"true\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static final String USER_PREF_FOR_ADULT_FALSE \u003d \"false\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(SearchCommand.class.getName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    Set\u003cInteger\u003e genreSet \u003d new HashSet\u003cInteger\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Constructor for each Command Super class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param uiController The UI controller."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public SearchCommand(Controller uiController) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        super(CommandKeys.SEARCH, CommandStructure.cmdStructure.get(CommandKeys.SEARCH), uiController);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for extracting user preferences from the command and storing it in a SearchProfile object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Also responsible for extracting whether the search request is for movies or TV shows."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * And then call the approriate function to further extract the exact search request."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @throws Exceptions Exceptions thrown"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void executeCommands() throws Exceptions {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        logger.log(Level.INFO, PromptMessages.STARTING_SEARCH_MESSAGE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        genreSet.clear();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String payload \u003d getPayload();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        MovieHandler movieHandler \u003d ((MovieHandler) this.getUiController());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        logger.log(Level.INFO, PromptMessages.RETRIEVING_SEARCH_PROFILE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        SearchProfile searchProfile \u003d getPreferences(movieHandler, payload, isMovie);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        switch (this.getSubRootCommand()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case MOVIES:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            isMovie \u003d true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.SEARCH_TYPE_IS_MOVIES);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            searchProfile \u003d searchProfile.setMovie(true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            executeMovieSearch(payload, movieHandler, searchProfile);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case TVSHOWS:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.SEARCH_TYPE_IS_TV);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            executeTvSearch(payload, movieHandler, searchProfile);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            movieHandler.setGeneralFeedbackText(PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.SEVERE, PromptMessages.INVALID_PARAM_IN_SEARCH);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            throw new InvalidParameterException(PromptMessages.INVALID_PARAM_IN_SEARCH);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for extracting the exact movie related search request."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Calls appropriate function to execute it."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param payload       String consisting of a movie name entered by user if any."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param movieHandler  MovieHandler class used to later call the appropriate function."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param searchProfile Object that contains all the user preferences for the search request."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @throws Exceptions when user input is invalid or empty."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private void executeMovieSearch(String payload, MovieHandler movieHandler,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                                    SearchProfile searchProfile) throws Exceptions {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        movieHandler.setSearchProfile(searchProfile);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (payload.isEmpty() || payload.isBlank()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            movieHandler.setGeneralFeedbackText(PromptMessages.EMPTY_PARAM_IN_SEARCH);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.SEVERE, PromptMessages.EMPTY_PARAM_IN_SEARCH);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            throw new Exceptions(PromptMessages.EMPTY_PARAM_IN_SEARCH);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (payload.equals(GET_CURRENT)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            movieHandler.getApiRequester().beginSearchRequest(RetrieveRequest.MoviesRequestType.CURRENT_MOVIES);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } else if (payload.equals(GET_UPCOMING)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            movieHandler.getApiRequester().beginSearchRequest(RetrieveRequest.MoviesRequestType.UPCOMING_MOVIES);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } else if (payload.equals(GET_TRENDING)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            movieHandler.getApiRequester().beginSearchRequest(RetrieveRequest.MoviesRequestType.TRENDING_MOVIES);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } else if (payload.equals(GET_POPULAR)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            movieHandler.getApiRequester().beginSearchRequest(RetrieveRequest.MoviesRequestType.POPULAR_MOVIES);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } else if (payload.equals(GET_RATED)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            movieHandler.getApiRequester().beginSearchRequest(RetrieveRequest.MoviesRequestType.TOP_RATED_MOVIES);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            movieHandler.getApiRequester().beginSearchRequest(RetrieveRequest.MoviesRequestType.SEARCH_MOVIES);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for extracting the exact TV show related search request."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Calls appropriate function to execute it."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param payload       String consisting of a TV show name entered by user if any."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param movieHandler  MovieHandler class used to later call the appropriate function."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param searchProfile Object that contains all the user preferences for the search request."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @throws Exceptions when user input is blank or empty."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private void executeTvSearch(String payload, MovieHandler movieHandler,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                                 SearchProfile searchProfile) throws Exceptions {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        movieHandler.setSearchProfile(searchProfile);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (payload.isEmpty() || payload.isBlank()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            movieHandler.setGeneralFeedbackText(PromptMessages.EMPTY_PARAM_IN_SEARCH);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.SEVERE, PromptMessages.EMPTY_PARAM_IN_SEARCH);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            throw new Exceptions(PromptMessages.EMPTY_PARAM_IN_SEARCH);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (payload.equals(GET_CURRENT)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            movieHandler.getApiRequester().beginSearchRequest(RetrieveRequest.MoviesRequestType.CURRENT_TV);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } else if (payload.equals(GET_TRENDING)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            movieHandler.getApiRequester().beginSearchRequest(RetrieveRequest.MoviesRequestType.TRENDING_TV);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } else if (payload.equals(GET_POPULAR)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            movieHandler.getApiRequester().beginSearchRequest(RetrieveRequest.MoviesRequestType.POPULAR_TV);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } else if (payload.equals(GET_RATED)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            movieHandler.getApiRequester().beginSearchRequest(RetrieveRequest.MoviesRequestType.TOP_RATED_TV);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            movieHandler.getApiRequester().beginSearchRequest(RetrieveRequest.MoviesRequestType.SEARCH_TV);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for getting the user preferences for the particular search request."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Sets these preferences into SearchProfile Object."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param movieHandler    MovieHandler class to call appropriate function if needed"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param searchEntryName name of movie/TV show that user want search result to be based on, if any."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param isMovie         whether the search request is movie or TV shows related."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @throws InvalidFormatCommandException when user input is invalid."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private SearchProfile getPreferences(MovieHandler movieHandler, String searchEntryName, boolean isMovie)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throws InvalidFormatCommandException, InvalidGenreNameEnteredException, DuplicateGenreException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        SearchProfile searchProfile \u003d movieHandler.getSearchProfile();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        searchProfile \u003d searchProfile.iniitalizeBackSearchProfile();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (!(getPayload().isEmpty() || getPayload().isBlank())) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            searchProfile \u003d searchProfile.setName(getPayload());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (this.getFlagMap().containsKey(GET_PREF)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            this.getFlagMap().remove(GET_PREF);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (this.getFlagMap().isEmpty()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                searchProfile \u003d searchProfile.setFromUserPreference(searchEntryName,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                        isMovie, movieHandler.getUserProfile());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                movieHandler.setGeneralFeedbackText(PromptMessages.INVALID_COMBI_OF_FLAGS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                logger.log(Level.WARNING, PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                throw new InvalidFormatCommandException();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (this.getFlagMap().containsKey(GET_NEW_GENRE_PREF)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    searchProfile \u003d getGenresPrefForSearch(searchProfile);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                } catch (DuplicateGenreException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    logger.log(Level.WARNING, PromptMessages.REPETITVE_GENRE_NAME_ERROR);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    movieHandler.setGeneralFeedbackText(PromptMessages.REPETITVE_GENRE_NAME);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    throw new DuplicateGenreException();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (this.getFlagMap().containsKey(GET_NEW_GENRE_RESTRICT)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    searchProfile \u003d getGenresRestrictForSearch(searchProfile);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                } catch (DuplicateGenreException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    logger.log(Level.WARNING, PromptMessages.REPETITVE_GENRE_NAME_ERROR);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    movieHandler.setGeneralFeedbackText(PromptMessages.REPETITVE_GENRE_NAME);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    throw new DuplicateGenreException();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (this.getFlagMap().containsKey(GET_NEW_ADULT_RATING)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                searchProfile \u003d searchProfile.setAdult(getAdultPrefForSearch());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (this.getFlagMap().containsKey(GET_NEW_SORT)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                ArrayList\u003cString\u003e getUserSortPref \u003d getFlagMap().get(GET_NEW_SORT);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                ArrayList\u003cString\u003e getParams \u003d getFlagMap().get(GET_NEW_SORT);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                if (getParams.size() !\u003d 1) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    logger.log(Level.WARNING, PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    ((MovieHandler) this.getUiController()).setGeneralFeedbackText(PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    throw new InvalidFormatCommandException();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                String sortOption \u003d getUserSortPref.get(0);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                int sortOptionConvertToInt;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    sortOptionConvertToInt \u003d Integer.parseInt(sortOption);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    if (sortOptionConvertToInt \u003c\u003d 0 || sortOptionConvertToInt \u003e 3) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                        logger.log(Level.WARNING, PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                        movieHandler.setGeneralFeedbackText(PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                        throw new InvalidFormatCommandException();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    logger.log(Level.WARNING, PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    throw new InvalidFormatCommandException();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                searchProfile \u003d searchProfile.setSortByAlphabetical(getAlphaSortForSearch(getUserSortPref.get(0)));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                searchProfile \u003d searchProfile.setSortByLatestRelease(getDatesSortForSearch(getUserSortPref.get(0)));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                searchProfile \u003d searchProfile.setSortByHighestRating(getRatingSortForSearch(getUserSortPref.get(0)));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return searchProfile;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for returning whether user wants the search request results to sorted based on ratings."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param userPref String containing user preference."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return true if user wants the search request results to sorted based on ratings and false otherwise."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private boolean getRatingSortForSearch(String userPref) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (userPref.equals(USER_PREF_FOR_RATING_SORT)) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for returning whether user wants the search request results to sorted based on release dates."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param userPref String containing user preference."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return true if user wants the search request results to sorted based on release dates and false otherwise."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private boolean getDatesSortForSearch(String userPref) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (userPref.equals(USER_PREF_FOR_RELEASE_DATES_SORT)) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for returning whether user wants the search request results to sorted based on alphabetical order."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param userPref String containing user preference."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return true if user wants the search request results to sorted based on alphabetical order and false otherwise."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private boolean getAlphaSortForSearch(String userPref) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (userPref.equals(USER_PREF_FOR_ALPHA_SORT)) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for setting user genre preferences for the particular search request."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Sets these genre preferences into SearchProfile object."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param searchProfile Object that contains all the preferences for the particular search request."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private SearchProfile getGenresPrefForSearch(SearchProfile searchProfile) throws InvalidFormatCommandException,"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            InvalidGenreNameEnteredException, DuplicateGenreException {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e getParams \u003d getFlagMap().get(GET_NEW_GENRE_PREF);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (getParams.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            ((MovieHandler) this.getUiController()).setGeneralFeedbackText(PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.WARNING, PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            throw new InvalidFormatCommandException();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ArrayList\u003cInteger\u003e genrePreference \u003d searchProfile.getGenreIdPreference();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        for (String log : getFlagMap().get(GET_NEW_GENRE_PREF)) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                if (log.isBlank() || log.isEmpty()) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    ((MovieHandler) this.getUiController()).setGeneralFeedbackText(PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    logger.log(Level.WARNING, PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    throw new InvalidFormatCommandException();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                int genre \u003d ProfileCommands.findGenreID(log);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                if (genre \u003d\u003d 0) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    ((MovieHandler) this.getUiController()).setGeneralFeedbackText(PromptMessages.INVALID_GENRE_NAME);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    logger.log(Level.WARNING, PromptMessages.INVALID_GENRE_NAME_ERROR);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    throw new InvalidGenreNameEnteredException();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                if (genreSet.contains(genre)) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    logger.log(Level.WARNING, PromptMessages.REPETITVE_GENRE_NAME_ERROR);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    throw new DuplicateGenreException();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                genreSet.add(genre);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                genrePreference.add(genre);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                logger.log(Level.WARNING, PromptMessages.INVALID_GENRE_NAME_ERROR);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                ((MovieHandler) this.getUiController()).setGeneralFeedbackText(PromptMessages.INVALID_GENRE_NAME);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return searchProfile.setGenreIdPreference(genrePreference);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for setting user genre restrictions for the particular search request."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Sets these genre restrictions into SearchProfile object."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param searchProfile Object that contains all the preferences for the particular search request."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private SearchProfile getGenresRestrictForSearch(SearchProfile searchProfile)"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throws InvalidFormatCommandException, InvalidGenreNameEnteredException, DuplicateGenreException {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e getParams \u003d getFlagMap().get(GET_NEW_GENRE_RESTRICT);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (getParams.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.WARNING, PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            ((MovieHandler) this.getUiController()).setGeneralFeedbackText(PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            throw new InvalidFormatCommandException();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ArrayList\u003cInteger\u003e genreRestriction \u003d searchProfile.getGenreIdRestriction();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        for (String log : getFlagMap().get(GET_NEW_GENRE_RESTRICT)) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                if (log.isBlank() || log.isEmpty()) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    logger.log(Level.WARNING, PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    ((MovieHandler) this.getUiController()).setGeneralFeedbackText(PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    throw new InvalidFormatCommandException();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                int genre \u003d ProfileCommands.findGenreID(log);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                if (genre \u003d\u003d 0) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    logger.log(Level.WARNING, PromptMessages.INVALID_GENRE_NAME_ERROR);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    ((MovieHandler) this.getUiController()).setGeneralFeedbackText(PromptMessages.INVALID_GENRE_NAME);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    throw new InvalidGenreNameEnteredException();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                if (genreSet.contains(genre)) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    logger.log(Level.WARNING, PromptMessages.REPETITVE_GENRE_NAME_ERROR);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    throw new DuplicateGenreException();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                genreSet.add(genre);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                genreRestriction.add(genre);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                logger.log(Level.WARNING, PromptMessages.INVALID_GENRE_NAME_ERROR);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                ((MovieHandler) this.getUiController()).setGeneralFeedbackText(PromptMessages.INVALID_GENRE_NAME);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return searchProfile.setGenreIdRestriction(genreRestriction);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for returning whether user prefers adult content to be included inside search request results.."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return true if user prefers adult content to be included inside search request results and false otherwise."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @throws InvalidFormatCommandException when user input is invalid."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private boolean getAdultPrefForSearch() throws InvalidFormatCommandException {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        System.out.println(getFlagMap().get(GET_NEW_ADULT_RATING));"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e getParams \u003d getFlagMap().get(GET_NEW_ADULT_RATING);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (getParams.size() !\u003d 1) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.WARNING, PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            ((MovieHandler) this.getUiController()).setGeneralFeedbackText(PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            throw new InvalidFormatCommandException();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (getFlagMap().get(GET_NEW_ADULT_RATING).contains(USER_PREF_FOR_ADULT_TRUE)) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } else if (getFlagMap().get(GET_NEW_ADULT_RATING).contains(USER_PREF_FOR_ADULT_FALSE)) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.WARNING, PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            ((MovieHandler) this.getUiController()).setGeneralFeedbackText(PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throw new InvalidFormatCommandException();"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 307,
      "nwenhui": 42,
      "Pdotdeep": 35
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/parsers/commands/SetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.logic.parsers.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.commons.exceptions.InvalidFormatCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.commons.exceptions.InvalidParameterException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.commons.exceptions.NoPermissionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.commons.exceptions.logic.SetExceptions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.commons.strings.PromptMessages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.model.UserProfile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.storage.utils.EditProfileJson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.storage.user.ProfileCommands;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.ui.Controller;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.ui.MovieHandler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.storage.user.WatchlistHandler;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.enums.CommandKeys;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.parsers.CommandStructure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.parsers.CommandSuper;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class SetCommand extends CommandSuper {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private final Logger logger \u003d Logger.getLogger(this.getClass().getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public SetCommand(Controller uiController) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        super(CommandKeys.SET, CommandStructure.cmdStructure.get(CommandKeys.SET), uiController);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void executeCommands() throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        switch (this.getSubRootCommand()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case NAME:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            System.out.println(\"enter\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            executeSetName();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case AGE:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            executeSetAge();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case PREFERENCE:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            executeSetPreference();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case WATCHLIST:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            System.out.println(\"enter\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            executeTaskDone();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case RESTRICTION:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            executeSetRestriction();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case SORT:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            executeSort();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private void executeSort() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        MovieHandler movieHandler \u003d ((MovieHandler) this.getUiController());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            String getQuery \u003d getPayload();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            SetExceptions.checkSortCommand(getQuery);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ProfileCommands commands \u003d new ProfileCommands(movieHandler.getUserProfile());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            UserProfile userProfile \u003d movieHandler.getUserProfile();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (getQuery.equals(\"1\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                userProfile \u003d commands.setSort(true, false, false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            } else if (getQuery.equals(\"2\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                userProfile \u003d commands.setSort(false, true, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            } else if (getQuery.equals(\"3\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                userProfile \u003d commands.setSort(false, false, true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            new EditProfileJson().updateProfile(userProfile);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            movieHandler.setLabels();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.SORT_SET);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (InvalidParameterException | IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            movieHandler.setGeneralFeedbackText(e.getMessage());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            logger.log(Level.WARNING, PromptMessages.SORT_SET_ERROR);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * set user\u0027s name."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * root: set"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * sub: name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * payload: user\u0027s name"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * flag: none"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private void executeSetName() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        MovieHandler movieHandler \u003d ((MovieHandler) this.getUiController());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            SetExceptions.checkNameCommand(this.getPayload());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ProfileCommands command \u003d new ProfileCommands(movieHandler.getUserProfile());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            UserProfile userProfile \u003d movieHandler.getUserProfile();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            userProfile \u003d command.setName(this.getPayload());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            new EditProfileJson().updateProfile(userProfile);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            movieHandler.setLabels();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.NAME_SET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (InvalidFormatCommandException | IOException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            movieHandler.setGeneralFeedbackText(e.getMessage());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            logger.log(Level.WARNING, PromptMessages.NAME_SET_ERROR);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        movieHandler.clearSearchTextField();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * set user\u0027s age."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * root: set"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * sub: age"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * payload: user\u0027s age"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * flag: none"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private void executeSetAge() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        MovieHandler movieHandler \u003d ((MovieHandler) this.getUiController());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            SetExceptions.checkAgeCommand(this.getPayload());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ProfileCommands command \u003d new ProfileCommands(movieHandler.getUserProfile());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            UserProfile userProfile \u003d movieHandler.getUserProfile();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            userProfile \u003d command.setAge(this.getPayload());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            new EditProfileJson().updateProfile(userProfile);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            movieHandler.setLabels();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.AGE_SET);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (InvalidParameterException | InvalidFormatCommandException | IOException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            movieHandler.setGeneralFeedbackText(e.getMessage());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            logger.log(Level.WARNING, PromptMessages.AGE_SET_ERROR);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        movieHandler.clearSearchTextField();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * set user\u0027s preferences."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * root: set"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * sub: preference"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * payload: none"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * flag: -g (genre name -- not genre ID)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     *       -a (adult -- yes to allow adult content, no to restrict, set to yes by default)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private void executeSetPreference() throws IOException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        MovieHandler movieHandler \u003d ((MovieHandler) this.getUiController());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            UserProfile userProfile \u003d movieHandler.getUserProfile();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            SetExceptions.checkPreferenceCommand(this.getFlagMap(), userProfile);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ProfileCommands command \u003d new ProfileCommands(userProfile);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            userProfile \u003d command.setPreference(this.getFlagMap());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            new EditProfileJson().updateProfile(userProfile);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            movieHandler.setLabels();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.PREFERENCE_SET);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (InvalidParameterException | NoPermissionException | InvalidFormatCommandException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            movieHandler.setGeneralFeedbackText(e.getMessage());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            logger.log(Level.WARNING, PromptMessages.PREFERENCE_SET_ERROR);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        movieHandler.clearSearchTextField();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * set user\u0027s restrictions."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * root: set"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * sub: restriction"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * payload: none"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * flag: -g (genre name -- not genre ID)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private void executeSetRestriction() throws IOException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        MovieHandler movieHandler \u003d ((MovieHandler)this.getUiController());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            UserProfile userProfile \u003d movieHandler.getUserProfile();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            SetExceptions.checkRestrictionCommand(this.getFlagMap(), userProfile);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ProfileCommands command \u003d new ProfileCommands(movieHandler.getUserProfile());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            userProfile \u003d command.setRestriction(this.getFlagMap());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            new EditProfileJson().updateProfile(userProfile);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            movieHandler.setLabels();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.RESTRICTION_SET);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (InvalidFormatCommandException | InvalidParameterException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            movieHandler.setGeneralFeedbackText(e.getMessage());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            logger.log(Level.WARNING, PromptMessages.RESTRICTION_SET_ERROR);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        movieHandler.clearSearchTextField();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * set the duke.task on the watchlist as done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * root: set"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * sub: watchlist"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * payload: none"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * flag: -d (index of the element in the watchlist to be marked as done)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    private void executeTaskDone()  {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            String index \u003d this.getFlagMap().get(\"-d\").get(0);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            index \u003d index.strip();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            int i \u003d Integer.valueOf(index);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            System.out.println(i);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            WatchlistHandler.markIndexAsDone(i, (MovieHandler)(this.getUiController()));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        } catch (NullPointerException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            ((MovieHandler)(this.getUiController())).setGeneralFeedbackText(\"please enter a valid duke.task number\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hotspur1997": 19,
      "Riyas97": 24,
      "nwenhui": 145,
      "Pdotdeep": 8
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/parsers/commands/ViewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.logic.parsers.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.strings.PromptMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.enums.CommandKeys;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.Exceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import entertainment.pro.model.MovieInfoObject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.storage.user.Blacklist;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.storage.user.WatchlistHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.ui.Controller;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.ui.MovieHandler;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.parsers.CommandStructure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.parsers.CommandSuper;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * This class is responsible for calling the appropriate functions when the root command is \u0027view\u0027."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "public class ViewCommand extends CommandSuper {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private Controller controller;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    private int constant \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Constructor for Command Super class."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param uicontroller Ui controller class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public ViewCommand(Controller uicontroller) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        super(CommandKeys.VIEW, CommandStructure.cmdStructure.get(CommandKeys.VIEW), uicontroller);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void executeCommands() throws Exceptions {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        switch (this.getSubRootCommand()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case WATCHLIST:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            WatchlistHandler.print_list((MovieHandler) (this.getUiController()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case BLACKLIST:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            ((MovieHandler) this.getUiController()).setGeneralFeedbackText(Blacklist.printList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case ENTRY:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            int num \u003d Integer.parseInt(getPayload());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            executeEntryCommands(num);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case RECOMMENDATION:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            executeRecommendationCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case BACK:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            executeBackCommands();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for redirecting users back to list of movies/TV shows."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private void executeBackCommands() throws Exceptions {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        MovieHandler movieHandler \u003d ((MovieHandler) this.getUiController());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (movieHandler.isViewMoreInfoPage()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            movieHandler.displayItems();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            movieHandler.setGeneralFeedbackText(PromptMessages.VIEW_BACK_FAILURE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            throw new Exceptions(PromptMessages.VIEW_BACK_FAILURE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for displaying more information about a movie/TV show."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Called when user is viewing list of movies/TV shows from a search request and want to know more information."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param num The number of the movie or TV show in the list indicated below the title."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private void executeEntryCommands(int num) throws Exceptions {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ((MovieHandler) this.getUiController()).showMovie(num);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * prints out a list of recommendations based on the users set preferences."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * @throws IOException file was not able to be found"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    private void executeRecommendationCommand() throws Exceptions {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        String feedback \u003d \"Your recommended movies are: \\n\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        MovieHandler movieHandler \u003d ((MovieHandler) this.getUiController());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        ArrayList\u003cInteger\u003e preferenceIndices \u003d movieHandler.getUserProfile().getGenreIdPreference();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cMovieInfoObject\u003e movies \u003d movieHandler.getApiRequester()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                .beginSearchGenre(Integer.toString(preferenceIndices.get(0)), movieHandler.getUserProfile().isAdult());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        for (int i \u003d 0; i \u003c constant; i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            feedback +\u003d i + 1 + \". \" + movies.get(i).getTitle() + \"\\n\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        movieHandler.setGeneralFeedbackText(feedback);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Hotspur1997": 19,
      "Riyas97": 49,
      "nwenhui": 18,
      "Pdotdeep": 10
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/parsers/commands/WatchlistCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.logic.parsers.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.ui.Controller;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.enums.CommandKeys;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.parsers.CommandStructure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.parsers.CommandSuper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.model.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.model.Period;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.storage.user.WatchlistHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.ui.MovieHandler;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "public class WatchlistCommand  extends CommandSuper {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public WatchlistCommand(Controller uicontroller) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        super(CommandKeys.WATCHLIST, CommandStructure.cmdStructure.get(CommandKeys.WATCHLIST), uicontroller);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public void executeCommands() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        switch (this.getSubRootCommand()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case ADD:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                addToWatchList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case SET:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            if (getPayload().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                executeIndexTaskDone();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                executeNameTaskDone();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            deleteFromWatchlist();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * Add items to the watchlist."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    private void addToWatchList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            String movie \u003d ((MovieHandler) this.getUiController()).getApiRequester().beginAddRequest(getPayload());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            if (movie.equals(\"\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                ((MovieHandler) (this.getUiController())).setGeneralFeedbackText(\"Movie not found.\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                        + \"Please check your spelling\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            movie \u003d movie.toLowerCase();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            String type \u003d this.getFlagMap().get(\"-t\").get(0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            case \"d\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                addDeadlineTask(movie);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            case \"p\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                addPeriodTask(movie);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        } catch (NullPointerException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ((MovieHandler)(this.getUiController())).setGeneralFeedbackText("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    \"Please enter a valid command in the form of: \\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    + \"watchlist add \u003cname of movie\u003e -d \u003ctype of task\u003e -s \u003cstart date only for task\u003e \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    + \"-e \u003cend date for task\u003e\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * adds a deadline task to my watchlist."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param movie name of the movie title to be added to the watchlist"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private void addDeadlineTask(String movie) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        String endDate \u003d this.getFlagMap().get(\"-e\").get(0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Deadline deadline \u003d new Deadline(movie, \"D\", endDate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        if (!WatchlistHandler.add(deadline)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ((MovieHandler) this.getUiController()).clearSearchTextField();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            ((MovieHandler) this.getUiController()).setGeneralFeedbackText(\"No duplicates allowed\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            WatchlistHandler.print_list(( MovieHandler ) (this.getUiController()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * adds a period task to my watchlist."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param movie name of the movie title to be added to the watchlist"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private void addPeriodTask(String movie) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        String stDate \u003d this.getFlagMap().get(\"-s\").get(0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        String enDate \u003d this.getFlagMap().get(\"-e\").get(0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Period period \u003d new Period(movie, \"P\", stDate, enDate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        if (!WatchlistHandler.add(period)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ((MovieHandler)this.getUiController()).clearSearchTextField();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            ((MovieHandler)this.getUiController()).setGeneralFeedbackText(\"No duplicates allowed\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            WatchlistHandler.print_list((MovieHandler)(this.getUiController()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * set the task on the watchlist as done."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * root: set"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * sub: watchlist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * payload: none"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * flag: -d (index of the element in the watchlist to be marked as done)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    private void executeIndexTaskDone()  {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            String index \u003d this.getFlagMap().get(\"-i\").get(0);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            index \u003d index.strip();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            int i \u003d Integer.valueOf(index);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            System.out.println(i);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            WatchlistHandler.markIndexAsDone(i, (MovieHandler)(this.getUiController()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        } catch (NullPointerException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            ((MovieHandler)(this.getUiController())).setGeneralFeedbackText(\"please enter a valid task number\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * removes a movie of a certain name from the watchlist."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    private void executeNameTaskDone() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        String movie \u003d getPayload();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        if (!WatchlistHandler.markMovieAsDone(movie, (MovieHandler)(this.getUiController()))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            ((MovieHandler)(this.getUiController())).setGeneralFeedbackText(\"please enter a movie in the watchlist\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * removes an item from the watchlist."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    private void deleteFromWatchlist() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        String mov \u003d getPayload();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        System.out.println(mov);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (WatchlistHandler.removeFromWatchlist(mov, (MovieHandler)(this.getUiController()))) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            ((MovieHandler) getUiController()).setGeneralFeedbackText(\"Successfully removed the movie from WatchList: \""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    + mov);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ((MovieHandler) getUiController())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    .setGeneralFeedbackText(\"Such a movie does not exist in your WatchList. Check your spelling?\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hotspur1997": 103,
      "Riyas97": 17,
      "Pdotdeep": 11,
      "nwenhui": 20
    }
  },
  {
    "path": "src/main/java/entertainment/pro/logic/parsers/commands/YesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//@@author pdotdeep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.logic.parsers.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.enums.CommandKeys;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.parsers.CommandStructure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.parsers.CommandSuper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.ui.Controller;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " * Yes command class to handle Yes command functions."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public class YesCommand extends CommandSuper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public YesCommand(Controller uicontroller) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        super(CommandKeys.YES, CommandStructure.cmdStructure.get(CommandKeys.YES), uicontroller);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void executeCommands() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        //Do nothing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pdotdeep": 23
    }
  },
  {
    "path": "src/main/java/entertainment/pro/model/CinemaInfoObject.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "package entertainment.pro.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "public class CinemaInfoObject {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    private double rating;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * initialises the parameters of the information about the cinema."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public CinemaInfoObject(String name, double rating, String address) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * return the name of the cinema."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @return name of cinema"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * returns the rating of the cinema."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @return returns the rating of the cinema"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public double getRating() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * returns an address of the cinema or a description."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @return an address of the cinema or a description"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hotspur1997": 33,
      "nwenhui": 7
    }
  },
  {
    "path": "src/main/java/entertainment/pro/model/CommandPair.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//@@author pdotdeep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.enums.CommandKeys;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " * Template command pair class containing the root command and subroot command."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public class CommandPair {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private CommandKeys rootCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private CommandKeys subRootCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private boolean validCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * checkstyle made me put javadoc here \u003e:( whoever made this function pls edit the the javadoc tqtq -wh."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public CommandPair(CommandKeys rootCommand, CommandKeys subRootCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        this.rootCommand \u003d rootCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        this.subRootCommand \u003d subRootCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        validCommand \u003d true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * checkstyle made me put javadoc here \u003e:( whoever made this function pls edit the the javadoc tqtq -wh."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public CommandPair(CommandKeys rootCommand, CommandKeys subRootCommand, boolean isValid) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        this.rootCommand \u003d rootCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        this.subRootCommand \u003d subRootCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        validCommand \u003d isValid;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * getter for the root command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return Rootcommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public CommandKeys getRootCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return rootCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * getter for the root command in String."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return Rootcommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public String getRootCommandStr() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return rootCommand.toString().toLowerCase();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * getter for the subroot command in String."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return subRootcommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public String getSubRootCommandStr() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return subRootCommand.toString().toLowerCase();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Getter for subroot command."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return Subroot command"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public CommandKeys getSubRootCommand() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return subRootCommand;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * function to check if the command was valid."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Used to determine if the command should be executed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public boolean isValidCommand() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return validCommand;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void setValidCommand(boolean validCommand) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        this.validCommand \u003d validCommand;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pdotdeep": 77
    }
  },
  {
    "path": "src/main/java/entertainment/pro/model/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " * Deadline class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class Deadline extends Tasks  {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private MyDate date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Constructor for a deadline class where the user watched a movie by a certain time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param description which is the name of movie"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param type which is the type of movie"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param deadline which is the time by which the movie needs to be watched"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public Deadline(String description, String type, String deadline) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        super(description, type);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        //this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        date \u003d new MyDate(deadline);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * returns the deadline of the task in date format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * @return deadline of the task in date format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public MyDate getDate() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * function to change the deadline of the task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param time new deadline for the task to be changed to"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void setTime(String time) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        this.date \u003d new MyDate(time);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * returns the description of a task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * @return String type of the description of a task"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public String toMessage() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return description + \" (by: \" + date.toString() + \")\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Hotspur1997": 8,
      "Riyas97": 20,
      "Pdotdeep": 20
    }
  },
  {
    "path": "src/main/java/entertainment/pro/model/GenreId.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * Structure for GenreID object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class GenreId {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private String genre;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private int id;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public String getGenre() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return genre;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void setGenre(String genre) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.genre \u003d genre;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void setId(int id) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 25
    }
  },
  {
    "path": "src/main/java/entertainment/pro/model/MovieInfoObject.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * Model class to represent a movie/tv show by storing details about it."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class MovieInfoObject extends MovieModel {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private boolean isMovie;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private Date releaseDateInfo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private String summaryInfo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private String posterPathInfo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private String fullPosterPathInfo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private String backdropPathInfo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private String fullBackdropPathInfo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private double ratingInfo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private ArrayList\u003cLong\u003e genreIdInfo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private boolean isAdultContent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private String certInfo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private ArrayList\u003cString\u003e castInfo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private final String defaultImageFileName \u003d \"/images/FakeMoviePoster.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Constructor for MovieInfoObject."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param id the id of the movie/TV show stored in the MovieDB API."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param title the title of the movie or TV show stored in the MovieDB API."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param isMovie whether the objeect stored is a movie or TV show."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param releaseDateInfo the release date of the movie or TV show."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param summaryInfo the plot summary of the movie or TV show."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param posterPathInfo the file path of the poster."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param backdropPathInfo the file path of the backdrop poster."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param ratingInfo the rating of the movie or TV show."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param genreIdInfo the list of genres pertaining to the movie or TV show."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param isAdultContent whether the movie or TV show contains adult content."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param certInfo the certification obtained by the movie or TV show."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param castInfo the list of cast pertaining to the movie or TV show."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public MovieInfoObject(long id, String title, boolean isMovie, Date releaseDateInfo, String summaryInfo,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                           String posterPathInfo, String backdropPathInfo, double ratingInfo,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                           ArrayList\u003cLong\u003e genreIdInfo, boolean isAdultContent, String certInfo,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                           ArrayList\u003cString\u003e castInfo) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        super(id, title);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.isMovie \u003d isMovie;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.releaseDateInfo \u003d releaseDateInfo;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.summaryInfo \u003d summaryInfo;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.posterPathInfo \u003d posterPathInfo;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.fullPosterPathInfo \u003d fullPosterPathInfo;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.backdropPathInfo \u003d backdropPathInfo;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.fullBackdropPathInfo \u003d fullBackdropPathInfo;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.ratingInfo \u003d ratingInfo;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.genreIdInfo \u003d genreIdInfo;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.isAdultContent \u003d isAdultContent;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.certInfo \u003d certInfo;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.castInfo \u003d castInfo;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Construct info about a movie/tv show."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param id ID stored in the api."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param title Title of the movie/tv show."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public MovieInfoObject(long id, String title, boolean isMovie) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        super(id, title);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        isMovie \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.isAdultContent \u003d true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * constructor."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param id the id of the movie/TV show stored in the MovieDB API."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param title the title of the movie or TV show stored in the MovieDB API."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param isMovie whether the objeect stored is a movie or TV show."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param releaseDateInfo the release date of the movie or TV show."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param summaryInfo the plot summary of the movie or TV show."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param posterPathInfo the file path of the poster."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param backdropPathInfo the file path of the backdrop poster."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param ratingInfo the rating of the movie or TV show."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param genreIdInfo the list of genres pertaining to the movie or TV show."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param isAdultContent whether the movie or TV show contains adult content."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public MovieInfoObject(long id, String title, boolean isMovie, Date releaseDateInfo, String summaryInfo,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                           String posterPathInfo, String backdropPathInfo, double ratingInfo,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                           ArrayList\u003cLong\u003e genreIdInfo, boolean isAdultContent) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        super(id, title);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.isMovie \u003d isMovie;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.releaseDateInfo \u003d releaseDateInfo;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.summaryInfo \u003d summaryInfo;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.posterPathInfo \u003d posterPathInfo;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.fullPosterPathInfo \u003d fullPosterPathInfo;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.backdropPathInfo \u003d backdropPathInfo;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.fullBackdropPathInfo \u003d fullBackdropPathInfo;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.ratingInfo \u003d ratingInfo;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.genreIdInfo \u003d genreIdInfo;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.isAdultContent \u003d isAdultContent;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Resonsible for returning whether the object is storing a movie or TV show."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return true if the object is storing a movie and false otherwise."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public boolean isMovie() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return isMovie;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for setting whether the object is storing a movie or TV show."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param movie true if the object is storing a movie and false otherwise."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void setMovie(boolean movie) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        isMovie \u003d movie;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for returning the release date of the object."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return the release date of the movie/TV show."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public Date getReleaseDateInfo() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return releaseDateInfo;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for setting the release date of the object."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param releaseDateInfo the release date of the movie/TV show."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void setReleaseDateInfo(Date releaseDateInfo) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.releaseDateInfo \u003d releaseDateInfo;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for returning the plot summary of the object."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return the plot summary of the movie/TV show."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public String getSummaryInfo() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return summaryInfo;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for setting the plot summary of the object."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param summaryInfo the plot summary of the movie/TV show."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void setSummaryInfo(String summaryInfo) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.summaryInfo \u003d summaryInfo;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for returning the poster path of the object."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return the poster path of the movie/TV show."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public String getFullPosterPathInfo() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return fullPosterPathInfo;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * Repsonsible for setting the poster path of the object."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param fullPosterPathInfo the poster path of the movie/TV show."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void setFullPosterPathInfo(String fullPosterPathInfo) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.fullPosterPathInfo \u003d fullPosterPathInfo;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for returning the backdrop poster path of the object."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return the backdrop poster path of the movie/TV show."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public String getFullBackdropPathInfo() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return fullBackdropPathInfo;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * Repsonsible for setting the backdrop poster path of the object."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param fullBackdropPathInfo the backdrop poster path of the movie/TV show."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void setFullBackdropPathInfo(String fullBackdropPathInfo) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.fullBackdropPathInfo \u003d fullBackdropPathInfo;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for getting the rating of the movie/TV show."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return the rating of the movie/TV show."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public double getRatingInfo() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return ratingInfo;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible forsetting the rating of the movie/TV show."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param ratingInfo the rating of the movie/TV show."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void setRatingInfo(double ratingInfo) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.ratingInfo \u003d ratingInfo;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for returning the genre IDs pertaining to the movie/TV show."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return the genre IDs pertaining to the movie/TV show."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public ArrayList\u003cLong\u003e getGenreIdInfo() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return genreIdInfo;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for setting the genre IDs pertaining to the movie/TV show."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param genreIdInfo the genre IDs pertaining to the movie/TV show."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void setGenreIdInfo(ArrayList\u003cLong\u003e genreIdInfo) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.genreIdInfo \u003d genreIdInfo;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for returning whether the object contains adult content or not."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return true if contains adult content and false otherwise."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public boolean isAdultContent() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return isAdultContent;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for setting whether the object contains adult content or not."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param adultContent true if contains adult content and false otherwise."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void setAdultContent(boolean adultContent) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.isAdultContent \u003d adultContent;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for getting the cert information about the movie/TV show."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return the cert information about the movie/TV show."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public String getCertInfo() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return certInfo;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for setting the cert information about the movie/TV show."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param certInfo the cert information about the movie/TV show."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void setCertInfo(String certInfo) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.certInfo \u003d certInfo;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responisible for returning the list of cast information pertaining to the movie/TV show."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return the list of cast information pertaining to the movie/TV show."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public ArrayList\u003cString\u003e getCastInfo() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return castInfo;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responisible for setting the list of cast information pertaining to the movie/TV show."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param castInfo list of cast information pertaining to the movie/TV show."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void setCastInfo(ArrayList\u003cString\u003e castInfo) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.castInfo \u003d castInfo;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for setting the root path for the movie/TV show posters and backdrop posters."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param rootPath The root path for the poster images."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param posterSize A string representing the size variant of the posters to download"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void setPosterRootPath(String rootPath, String posterSize, boolean isOffline) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (isOffline) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            fullPosterPathInfo \u003d defaultImageFileName;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            fullBackdropPathInfo \u003d defaultImageFileName;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            fullPosterPathInfo \u003d String.format(\"%s%s%s\", rootPath, posterSize, posterPathInfo);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            fullBackdropPathInfo \u003d String.format(\"%s%s%s\", rootPath, posterSize, backdropPathInfo);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public long getId() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return super.getId();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public String getMovieTitle() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return super.getTitle();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 206,
      "nwenhui": 70,
      "Pdotdeep": 7
    }
  },
  {
    "path": "src/main/java/entertainment/pro/model/MovieModel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//@@author pdotdeep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " * Movie Model wrapper."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public class MovieModel {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private long id;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * construction for moviemodel."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param id the id of the movie/TV show stored in the MovieDB API."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param title the title of the movie or TV show stored in the MovieDB API."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public MovieModel(long id, String title) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Responsible for returning the id of the movie/TV show."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return the id of the movie/TV show."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public long getId() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Responsible for setting the id of the movie/TV show."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param id the id of the movie/TV show to be set."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void setId(long id) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Responsible for returning the title of the movie/TV show."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return the title of the movie/TV show."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Responsible for setting the title of the movie/TV show."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param title thhe title to be set."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pdotdeep": 55
    }
  },
  {
    "path": "src/main/java/entertainment/pro/model/MyDate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.parsers.TimeParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Date wrapper class for having a date object and string date."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "public class MyDate implements Comparable\u003cMyDate\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean hasEndDate \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date startdate \u003d null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date enddate \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private String startdateStr;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private String enddateStr;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for class."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException when fail to parse a String that is ought to have a special format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public MyDate(String s) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.startdateStr \u003d s;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.enddateStr \u003d s;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.startdate \u003d TimeParser.convertStringToDate(s);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.enddate \u003d TimeParser.convertStringToDate(s);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.startdate !\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startdateStr \u003d TimeParser.convertDateToLine(this.startdate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.enddate !\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            this.enddateStr \u003d TimeParser.convertDateToLine(this.enddate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor for class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public MyDate(String startDate,  String endDate) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        hasEndDate \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.startdateStr \u003d startDate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.enddateStr \u003d endDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.startdate \u003d TimeParser.convertStringToDate(startDate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.enddate \u003d TimeParser.convertStringToDate(endDate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.startdate !\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startdateStr \u003d TimeParser.convertDateToLine(this.startdate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.enddate !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            this.enddateStr \u003d TimeParser.convertDateToLine(this.enddate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the start date object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Date object of the Task"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getStartDate() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.startdate;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the end date object."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return Date object of the Task"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getEndDate() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.enddate;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * converts the period to a string representation."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * @return a string of the period"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String returnStr \u003d hasEndDate ? startdateStr + \" to \" + enddateStr : startdateStr;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return returnStr;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * function to compare two dates."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param o second object to compare the date to"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * @return an integer to determine if the date is lesser than or equal to the date compared to"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public int compareTo(MyDate o) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        if (getEndDate() \u003d\u003d null || o.getEndDate() \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        return getEndDate().compareTo(o.getEndDate());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hotspur1997": 12,
      "Riyas97": 2,
      "Pdotdeep": 3,
      "-": 91
    }
  },
  {
    "path": "src/main/java/entertainment/pro/model/PageTracker.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "package entertainment.pro.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwenhui"
        },
        "content": " * to track which page of the gui the user is at to help with refreshing to show live changes users make."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "public class PageTracker {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private boolean mainPage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private boolean playlistList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private boolean playlistInfo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private boolean playlistMovieInfo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * constructor for PageTracker."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public PageTracker() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        mainPage \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        playlistList \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        playlistInfo \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        playlistMovieInfo \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public boolean isMainPage() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return mainPage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void setMainPage(boolean mainPage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.mainPage \u003d mainPage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * set current page to MainPage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void setToMainPage() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        mainPage \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        playlistList \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        playlistInfo \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        playlistMovieInfo \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public boolean isPlaylistList() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return playlistList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void setPlaylistList(boolean playlistList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.playlistList \u003d playlistList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * set current page to PlaylistList."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void setToPlaylistList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        mainPage \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        playlistList \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        playlistInfo \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        playlistMovieInfo \u003d false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public boolean isPlaylistInfo() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return playlistInfo;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void setPlaylistInfo(boolean playlistInfo) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.playlistInfo \u003d playlistInfo;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * set current page to PlaylistInfo."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void setToPlaylistInfo() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        mainPage \u003d false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        playlistList \u003d false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        playlistInfo \u003d true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        playlistMovieInfo \u003d false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public boolean isPlaylistMovieInfo() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return playlistMovieInfo;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void setPlaylistMovieInfo(boolean playlistMovieInfo) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.playlistMovieInfo \u003d playlistMovieInfo;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * set current page to PlaylistMovieInfo."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void setToPlaylistMovieInfo() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        mainPage \u003d false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        playlistList \u003d false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        playlistInfo \u003d false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        playlistMovieInfo \u003d true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to find out which page the gui is currently on."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public String getCurrentPage() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (mainPage) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            return \"mainPage\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } else if (playlistList) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            return \"playlistList\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } else if (playlistInfo) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            return \"playlistInfo\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            return \"playlistMovieInfo\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwenhui": 108
    }
  },
  {
    "path": "src/main/java/entertainment/pro/model/Period.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " * Period class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "public class Period extends Tasks {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    private String start;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    private String end;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    private MyDate date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Constructor for a period class where the user watches a movie within a certain period of time."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param description which is the name of movie"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param type which is the type of movie"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param start which is the time by which the user first wants to watch the movie"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param end which is the time by which the movie needs to be watched"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public Period(String description, String type, String start, String end) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        super(description, type);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        date \u003d new MyDate(start, end);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * returns the time interval of the task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * @return time interval of the task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public String getPeriod() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        return date.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * returns the interval of the task in date format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * @return date format of the task interval"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public MyDate getDate() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * description of the task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * @return String format of the description of the task"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public String toMessage() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        return description"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                + \" (Period: \" + date.toString() + \")\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hotspur1997": 32,
      "Riyas97": 1,
      "Pdotdeep": 11,
      "nwenhui": 6
    }
  },
  {
    "path": "src/main/java/entertainment/pro/model/Playlist.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwenhui"
        },
        "content": " * structure for Playlist object."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class Playlist {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private final String playlistName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private final ArrayList\u003cPlaylistMovieInfoObject\u003e movies;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * constructor for Playlist."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * used for creating new playlist so there\u0027s only playlistName available"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public Playlist(String playlistName) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.playlistName \u003d playlistName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        description \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        movies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * constructor for Playlist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * used for loading Playlist from json files so all playlist attributes are available."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public Playlist(String playlistName, String description, ArrayList\u003cPlaylistMovieInfoObject\u003e movies) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.playlistName \u003d playlistName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.movies \u003d movies;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public String getPlaylistName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return playlistName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public Playlist setPlaylistName(String playlistName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return new Playlist(playlistName, this.getDescription(), this.getMovies());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public Playlist setDescription(String description) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return new Playlist(this.getPlaylistName(), description, this.getMovies());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public Playlist setBoth(String name, String description) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return new Playlist(name, description, this.getMovies());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public ArrayList\u003cPlaylistMovieInfoObject\u003e getMovies() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return movies;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public Playlist setMovies(ArrayList\u003cPlaylistMovieInfoObject\u003e movies) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return new Playlist(this.getPlaylistName(), this.getDescription(), movies);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to add movies to playlists."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public Playlist add(ArrayList\u003cPlaylistMovieInfoObject\u003e movies) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ArrayList\u003cPlaylistMovieInfoObject\u003e newMovies \u003d this.getMovies();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        newMovies.addAll(movies);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return new Playlist(this.getPlaylistName(), this.getDescription(), newMovies);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to remove movies from playlist."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public Playlist remove(ArrayList\u003cPlaylistMovieInfoObject\u003e movies) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ArrayList\u003cPlaylistMovieInfoObject\u003e newMovies \u003d this.getMovies();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        newMovies.removeAll(movies);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return new Playlist(this.getPlaylistName(), this.getDescription(), newMovies);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to clear movies in playlist."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public Playlist clear() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return new Playlist(this.getPlaylistName(), this.getDescription(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 22,
      "nwenhui": 63
    }
  },
  {
    "path": "src/main/java/entertainment/pro/model/PlaylistMovieInfoObject.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "package entertainment.pro.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "public class PlaylistMovieInfoObject extends MovieInfoObject {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private String stringDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * Construct info about a movie/tv show."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param id           id stored in the api."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param title        Title of the movie/tv show."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param date         Release date of the movie/tv show."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param summary      Plot summary of the movie/tv show."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param rating       Rating of the movie or tv show."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param genreIDs     Array of numbers that contains the genres belonging to the movie/tv show extracted from api."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param posterPath   Filepath of the movie/tv show poster."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param backdropPath Filepath of the movie/tv show backdrop poster."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public PlaylistMovieInfoObject(boolean isMovie, long id, String title, Date date, String summary,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                                   double rating, ArrayList\u003cLong\u003e genreIDs, String posterPath,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                                   String backdropPath, boolean isAdult, String stringDate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        super(id, title, isMovie, date, summary, posterPath, backdropPath, rating, genreIDs, isAdult);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.stringDate \u003d stringDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (super.getReleaseDateInfo() \u003d\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            convertStringToDate();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (stringDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            convertDateToString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public String getStringDate() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return stringDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void setStringDate(String stringDate) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.stringDate \u003d stringDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private void convertStringToDate() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            super.setReleaseDateInfo(new SimpleDateFormat(\"yyyy-MM-dd\").parse(stringDate));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            System.out.println(\"cant convert date\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private void convertDateToString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        DateFormat dateFormat \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        stringDate \u003d dateFormat.format(super.getReleaseDateInfo());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (this \u003d\u003d object) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        PlaylistMovieInfoObject playlistMovieInfoObject \u003d (PlaylistMovieInfoObject) object;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (playlistMovieInfoObject.getId() \u003d\u003d super.getId()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public long getId() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return super.getId();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 6,
      "nwenhui": 69
    }
  },
  {
    "path": "src/main/java/entertainment/pro/model/SearchProfile.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class SearchProfile extends UserProfile {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private final boolean isMovie;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Constructor for SearchProfile Object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param userName Name of the user stored according to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param userAge Age of the user stored according to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param genreIdPreference List of genres set by user for a particular search request."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param genreIdRestriction List of genres restricted by user for a particular search request."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param adult To indicate whether user prefers adult content for a paricular search request."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param playlistNames List of playlist stored by user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param sortByAlphabetical To indicate whether user want to sort results in alphabetical order."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param sortByHighestRating To indicate whether user want to sort results based on highest rating."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param sortByLatestRelease To indicate whether user want to sort results in alphabetical order."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param name String that user want the search results to be based on."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param isMovie To indicate whether the search request is for movies."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public SearchProfile(String userName, int userAge, ArrayList\u003cInteger\u003e genreIdPreference,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                         ArrayList\u003cInteger\u003e genreIdRestriction, boolean adult, ArrayList\u003cString\u003e playlistNames,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                         boolean sortByAlphabetical, boolean sortByHighestRating, boolean sortByLatestRelease,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                         String name, boolean isMovie) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        super(userName, userAge, genreIdPreference, genreIdRestriction, adult, playlistNames, sortByAlphabetical,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                sortByHighestRating, sortByLatestRelease);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        this.isMovie \u003d isMovie;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * constructor to initialise search profile to initial state."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private SearchProfile() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.name \u003d \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.isMovie \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for returning the name of movie/TV show that user want search results to be based on."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return The name of movie/TV show that user want search results to be based on."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for setting the name of movie/TV show that user want search results to be based on."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param name The name of movie/TV show that user want search results to be based on."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public SearchProfile setName(String name) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return new SearchProfile(this.getUserName(), this.getUserAge(), this.getGenreIdPreference(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.getGenreIdRestriction(), this.isAdult(), this.getPlaylistNames(), this.isSortByAlphabetical(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.isSortByHighestRating(), this.isSortByLatestRelease(), name, this.isMovie);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for returning whether the search request is for movies or TV shows."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return true if search request is for movies and false otherwise."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public boolean isMovie() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return isMovie;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for setting whether the search request is for movies or TV shows."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param movie true if search request is for movies and false otherwise."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public SearchProfile setMovie(boolean movie) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return new SearchProfile(this.getUserName(), this.getUserAge(), this.getGenreIdPreference(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.getGenreIdRestriction(), this.isAdult(), this.getPlaylistNames(), this.isSortByAlphabetical(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.isSortByHighestRating(), this.isSortByLatestRelease(), this.getName(), movie);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Set genreId Preference."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public SearchProfile setGenreIdPreference(ArrayList\u003cInteger\u003e genreIdPreference) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return new SearchProfile(this.getUserName(), this.getUserAge(), genreIdPreference, this.getGenreIdRestriction(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.isAdult(), this.getPlaylistNames(), this.isSortByAlphabetical(), this.isSortByHighestRating(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.isSortByLatestRelease(), this.getName(), this.isMovie);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Set genreId Restriction."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public SearchProfile setGenreIdRestriction(ArrayList\u003cInteger\u003e genreIdRestriction) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return new SearchProfile(this.getUserName(), this.getUserAge(), this.getGenreIdPreference(), genreIdRestriction,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.isAdult(), this.getPlaylistNames(), this.isSortByAlphabetical(), this.isSortByHighestRating(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.isSortByLatestRelease(), this.getName(), this.isMovie);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Set adult."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public SearchProfile setAdult(boolean adult) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return new SearchProfile(this.getUserName(), this.getUserAge(), this.getGenreIdPreference(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.getGenreIdRestriction(), adult, this.getPlaylistNames(), this.isSortByAlphabetical(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.isSortByHighestRating(), this.isSortByLatestRelease(), this.getName(), this.isMovie);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Set sort by alphabetical order."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public SearchProfile setSortByAlphabetical(boolean sortByAlphabetical) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return new SearchProfile(this.getUserName(), this.getUserAge(), this.getGenreIdPreference(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.getGenreIdRestriction(), this.isAdult(), this.getPlaylistNames(), sortByAlphabetical,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.isSortByHighestRating(), this.isSortByLatestRelease(), this.getName(), this.isMovie);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Set sort by release dates."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public SearchProfile setSortByLatestRelease(boolean sortByLatestRelease) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return new SearchProfile(this.getUserName(), this.getUserAge(), this.getGenreIdPreference(),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.getGenreIdRestriction(), this.isAdult(), this.getPlaylistNames(), this.isSortByAlphabetical(),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.isSortByHighestRating(), sortByLatestRelease, this.getName(), this.isMovie);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Set sort by highest ratings."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public SearchProfile setSortByHighestRating(boolean sortByHighestRating) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return new SearchProfile(this.getUserName(), this.getUserAge(), this.getGenreIdPreference(),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.getGenreIdRestriction(), this.isAdult(), this.getPlaylistNames(), this.isSortByAlphabetical(),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                sortByHighestRating, this.isSortByLatestRelease(), this.getName(), this.isMovie);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Set search profile from userprofile."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public SearchProfile setFromUserPreference(String entryName, boolean isMovie, UserProfile userProfile) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        SearchProfile searchProfile \u003d new SearchProfile();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        searchProfile \u003d searchProfile.setGenreIdPreference(userProfile.getGenreIdPreference());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        searchProfile \u003d searchProfile.setGenreIdRestriction(userProfile.getGenreIdRestriction());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        searchProfile \u003d searchProfile.setAdult(userProfile.isAdult());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        searchProfile \u003d searchProfile.setSortByAlphabetical(userProfile.isSortByAlphabetical());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        searchProfile \u003d searchProfile.setSortByLatestRelease(userProfile.isSortByLatestRelease());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        searchProfile \u003d searchProfile.setSortByHighestRating(userProfile.isSortByHighestRating());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        searchProfile \u003d searchProfile.setMovie(isMovie);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        searchProfile \u003d searchProfile.setName(entryName);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return searchProfile;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Initialize search profile."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public SearchProfile iniitalizeBackSearchProfile() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        SearchProfile searchProfile \u003d new SearchProfile();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cInteger\u003e newEmptyGenrePref \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cInteger\u003e newEmptyGenreRestrict \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        final String newEmptyEntry \u003d \"\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        searchProfile \u003d searchProfile.setGenreIdPreference(newEmptyGenrePref);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        searchProfile \u003d searchProfile.setGenreIdRestriction(newEmptyGenreRestrict);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        searchProfile \u003d searchProfile.setAdult(false);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        searchProfile \u003d searchProfile.setSortByAlphabetical(false);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        searchProfile \u003d searchProfile.setSortByHighestRating(false);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        searchProfile \u003d searchProfile.setSortByLatestRelease(false);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        searchProfile \u003d searchProfile.setName(newEmptyEntry);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        searchProfile \u003d searchProfile.setMovie(false);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return searchProfile;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 91,
      "nwenhui": 49,
      "Pdotdeep": 26
    }
  },
  {
    "path": "src/main/java/entertainment/pro/model/Tasks.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Tasks {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String type;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean done;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Represents a duke.task in a todolist."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * A duke.task can have description, type and whether is it done or not."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tasks(String description, String type) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.done \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setType(String type) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return done;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return (done ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Riyas97": 4,
      "-": 46
    }
  },
  {
    "path": "src/main/java/entertainment/pro/model/TimeInterval.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class TimeInterval {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date startDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private Date endDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public TimeInterval(Date s, Date e) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        startDate \u003d s;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        endDate \u003d e;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getStartDate() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public Date getEndDate() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/entertainment/pro/model/UserProfile.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "public class UserProfile {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private final String userName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private final int userAge;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private final ArrayList\u003cInteger\u003e genreIdPreference;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private final ArrayList\u003cInteger\u003e genreIdRestriction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private final boolean adult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private final ArrayList\u003cString\u003e playlistNames;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private final boolean sortByAlphabetical;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private final boolean sortByHighestRating;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private final boolean sortByLatestRelease;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Constructor for userprofile class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public UserProfile(String userName, int userAge, ArrayList\u003cInteger\u003e genreIdPreference,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                       ArrayList\u003cInteger\u003e genreIdRestriction, boolean adult, ArrayList\u003cString\u003e playlistNames,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                       boolean sortByAlphabetical, boolean sortByHighestRating, boolean sortByLatestRelease) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.userName \u003d userName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.userAge \u003d userAge;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.genreIdPreference \u003d genreIdPreference;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.genreIdRestriction \u003d genreIdRestriction;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.adult \u003d adult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.playlistNames \u003d playlistNames;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.sortByAlphabetical \u003d sortByAlphabetical;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.sortByHighestRating \u003d sortByHighestRating;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.sortByLatestRelease \u003d sortByLatestRelease;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Initialize userprofile class."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public UserProfile() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.userName \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.userAge \u003d -1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.genreIdPreference \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.genreIdRestriction \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.adult \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.playlistNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.sortByAlphabetical \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.sortByHighestRating \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.sortByLatestRelease \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Return genreIdPreference."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public ArrayList\u003cInteger\u003e getGenreIdPreference() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return genreIdPreference;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Set genreIdPreference."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public UserProfile setGenreIdPreference(ArrayList\u003cInteger\u003e genreIdPreference) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return new UserProfile(this.getUserName(), this.getUserAge(), genreIdPreference, this.getGenreIdRestriction(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.isAdult(), this.getPlaylistNames(), this.isSortByAlphabetical(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.isSortByHighestRating(), this.isSortByLatestRelease());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Return genreIdRestriction."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public ArrayList\u003cInteger\u003e getGenreIdRestriction() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return genreIdRestriction;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Set genreIdRestriction."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public UserProfile setGenreIdRestriction(ArrayList\u003cInteger\u003e genreIdRestriction) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return new UserProfile(this.getUserName(), this.getUserAge(), this.getGenreIdPreference(), genreIdRestriction,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.isAdult(), this.getPlaylistNames(), this.isSortByAlphabetical(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.isSortByHighestRating(), this.isSortByLatestRelease());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Return whether enable adult content."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public boolean isAdult() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return adult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Set whether enable adult content."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public UserProfile setAdult(boolean adult) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return new UserProfile(this.getUserName(), this.getUserAge(), this.getGenreIdPreference(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.getGenreIdRestriction(), adult, this.getPlaylistNames(), this.isSortByAlphabetical(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.isSortByHighestRating(), this.isSortByLatestRelease());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Return whether enable sort by alphabetical order."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public boolean isSortByAlphabetical() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return sortByAlphabetical;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Set sort by alphabetical order."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public UserProfile setSortByAlphabetical(boolean sortByAlphabetical) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return new UserProfile(this.getUserName(), this.getUserAge(), this.getGenreIdPreference(),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.getGenreIdRestriction(), this.isAdult(), this.getPlaylistNames(), sortByAlphabetical,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.isSortByHighestRating(), this.isSortByLatestRelease());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Return whether enable sort by ratings."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public boolean isSortByHighestRating() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return sortByHighestRating;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Set sort by ratings."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public UserProfile setSortByHighestRating(boolean sortByHighestRating) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return new UserProfile(this.getUserName(), this.getUserAge(), this.getGenreIdPreference(),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.getGenreIdRestriction(), this.isAdult(), this.getPlaylistNames(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.isSortByAlphabetical(), sortByHighestRating, this.isSortByLatestRelease());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Return whether enable sort by release dates."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public boolean isSortByLatestRelease() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return sortByLatestRelease;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Set sort by release dates."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public UserProfile setSortByLatestRelease(boolean sortByLatestRelease) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return new UserProfile(this.getUserName(), this.getUserAge(), this.getGenreIdPreference(),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.getGenreIdRestriction(), this.isAdult(), this.getPlaylistNames(),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.isSortByAlphabetical(), this.isSortByHighestRating(), sortByLatestRelease);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Add genres to genreIdRestriction."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public UserProfile addGenreIdRestriction(ArrayList\u003cInteger\u003e inputGenre) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ArrayList\u003cInteger\u003e newRestriction \u003d this.getGenreIdRestriction();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        newRestriction.addAll(inputGenre);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return new UserProfile(this.getUserName(), this.getUserAge(), this.getGenreIdPreference(),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                newRestriction, this.isAdult(), this.getPlaylistNames(), this.isSortByAlphabetical(),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.isSortByHighestRating(), this.isSortByLatestRelease());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Removes genres to genreIdRestriction."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public UserProfile removeGenreIdRestriction(ArrayList\u003cInteger\u003e inputGenre) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ArrayList\u003cInteger\u003e newRestriction \u003d this.getGenreIdRestriction();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        newRestriction.removeAll(inputGenre);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return new UserProfile(this.getUserName(), this.getUserAge(), this.getGenreIdPreference(),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                newRestriction, this.isAdult(), this.getPlaylistNames(), this.isSortByAlphabetical(),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.isSortByHighestRating(), this.isSortByLatestRelease());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Add genres to genreIdPreference."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public UserProfile addGenreIdPreference(ArrayList\u003cInteger\u003e inputGenre) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ArrayList\u003cInteger\u003e newPreference \u003d this.getGenreIdPreference();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        newPreference.addAll(inputGenre);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return new UserProfile(this.getUserName(), this.getUserAge(), newPreference,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.getGenreIdRestriction(), this.isAdult(), this.getPlaylistNames(),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.isSortByAlphabetical(), this.isSortByHighestRating(), this.isSortByLatestRelease());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Remove genres to genreIdPreference."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public UserProfile removeGenreIdPreference(ArrayList\u003cInteger\u003e inputGenre) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ArrayList\u003cInteger\u003e newPreference \u003d this.getGenreIdPreference();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        newPreference.removeAll(inputGenre);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return new UserProfile(this.getUserName(), this.getUserAge(), newPreference,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.getGenreIdRestriction(), this.isAdult(), this.getPlaylistNames(),"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.isSortByAlphabetical(), this.isSortByHighestRating(), this.isSortByLatestRelease());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Return playlist name."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public ArrayList\u003cString\u003e getPlaylistNames() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return playlistNames;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Set playlist name."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public UserProfile setPlaylistNames(ArrayList\u003cString\u003e playlistNames) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return new UserProfile(this.getUserName(), this.getUserAge(), this.getGenreIdPreference(),"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.getGenreIdRestriction(), this.isAdult(), playlistNames, this.isSortByAlphabetical(),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.isSortByHighestRating(), this.isSortByLatestRelease());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Add to playlist."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public UserProfile addPlaylist(String listName) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ArrayList\u003cString\u003e newPlaylistNames \u003d this.getPlaylistNames();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        newPlaylistNames.add(listName);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return new UserProfile(this.getUserName(), this.getUserAge(), this.getGenreIdPreference(),"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.getGenreIdRestriction(), this.isAdult(), newPlaylistNames,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.isSortByAlphabetical(), this.isSortByHighestRating(), this.isSortByLatestRelease());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Delete playlist."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public UserProfile deletePlaylist(String listName) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ArrayList\u003cString\u003e newPlaylistNames \u003d this.getPlaylistNames();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        newPlaylistNames.remove(listName);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return new UserProfile(this.getUserName(), this.getUserAge(), this.getGenreIdPreference(),"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.getGenreIdRestriction(), this.isAdult(), newPlaylistNames, this.isSortByAlphabetical(),"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.isSortByHighestRating(), this.isSortByLatestRelease());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Rename playlist."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public UserProfile renamePlaylist(String oldName, String newName) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ArrayList\u003cString\u003e newPlaylistNames \u003d this.getPlaylistNames();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        newPlaylistNames.remove((oldName));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        newPlaylistNames.add(newName);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return new UserProfile(this.getUserName(), this.getUserAge(), this.getGenreIdPreference(),"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.getGenreIdRestriction(), this.isAdult(), newPlaylistNames, this.isSortByAlphabetical(),"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.isSortByHighestRating(), this.isSortByLatestRelease());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Return username."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public String getUserName() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return userName;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Set username."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public UserProfile setUserName(String userName) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return new UserProfile(userName, this.getUserAge(), this.getGenreIdPreference(), this.getGenreIdRestriction(),"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.isAdult(), this.getPlaylistNames(), this.isSortByAlphabetical(),"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                this.isSortByHighestRating(), this.isSortByLatestRelease());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Return userage."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public int getUserAge() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return userAge;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * setting adult value to a default false when user is below 21 yrs old."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public UserProfile setUserAge(int userAge) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (userAge \u003c 21) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            return new UserProfile(this.getUserName(), userAge, this.getGenreIdPreference(),"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    this.getGenreIdRestriction(), false, this.getPlaylistNames(),"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    this.isSortByAlphabetical(), this.isSortByHighestRating(), this.isSortByLatestRelease());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            return new UserProfile(this.getUserName(), userAge, this.getGenreIdPreference(),"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    this.getGenreIdRestriction(), this.isAdult(), this.getPlaylistNames(),"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    this.isSortByAlphabetical(), this.isSortByHighestRating(), this.isSortByLatestRelease());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Riyas97": 110,
      "nwenhui": 113,
      "Pdotdeep": 54
    }
  },
  {
    "path": "src/main/java/entertainment/pro/storage/user/Blacklist.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//@@author pdotdeep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.storage.user;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.model.MovieInfoObject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.model.MovieModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.storage.utils.BlacklistStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " * Class Maintains Blacklisted items."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public class Blacklist {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static ArrayList\u003cString\u003e  blackListKeyWords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static ArrayList\u003cMovieModel\u003e  blackListMovies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static ArrayList\u003cString\u003e  blackListMoviesTitle \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Gets the blacklistkeywords arraylist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return the arraylist of blacklisted keywords"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static ArrayList\u003cString\u003e getBlackListKeyWords() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return (ArrayList\u003cString\u003e) blackListKeyWords;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Gets the blacklistMovieTitles arraylist."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return the arraylist of blacklisted Movie titles"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static ArrayList\u003cString\u003e getBlackListMoviesTitle() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return (ArrayList\u003cString\u003e) blackListMoviesTitle.clone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Gets the blacklistMovies arraylist."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return the arraylist of blacklisted movie objects"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static ArrayList\u003cMovieModel\u003e getBlackListMovies() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return (ArrayList\u003cMovieModel\u003e) blackListMovies.clone();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * initialises the blacklisted words from the file."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static void initialiseAll(ArrayList\u003cString\u003e keywords, ArrayList\u003cString\u003e movieTitles,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                                     ArrayList\u003cMovieModel\u003e movies) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        initialiseBlackListKey(keywords);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        initialiseBlackListMovieID(movies);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        initialiseBlackListMovieTitles(movieTitles);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Initialise keywords arraylist from file data."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static void initialiseBlackListKey(ArrayList\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        blackListKeyWords \u003d (ArrayList\u003cString\u003e) keywords.clone();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Initialise MovieTitles arraylist from file data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static void initialiseBlackListMovieTitles(ArrayList\u003cString\u003e movieTitles) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        blackListMoviesTitle \u003d (ArrayList\u003cString\u003e) movieTitles.clone();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Initialise MovieID arraylist from file data."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static void initialiseBlackListMovieID(ArrayList\u003cMovieModel\u003e movies) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (MovieModel m : movies) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            blackListMovies.add(m);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Adding keywords to blacklist."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param movie command that was entered by the user in split array form"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static void addToBlacklistKeyWord(String movie) throws DuplicateEntryException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (movie.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (blackListKeyWords.contains(movie.toLowerCase())) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            throw new DuplicateEntryException(\"blacklist\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        blackListKeyWords.add(movie.toLowerCase());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        saveBlackList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Adding Movies to blacklist."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param mo movie object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static void addToBlacklistMoviesID(MovieInfoObject mo) throws DuplicateEntryException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (mo \u003d\u003d null || mo.getTitle().equals(\"\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (MovieModel mm: blackListMovies) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (mm.getTitle().toLowerCase().trim().equals(mo.getTitle().toLowerCase().trim())) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                throw new DuplicateEntryException(\"blacklist\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        blackListMovies.add(new MovieModel(mo.getId(), mo.getTitle().toLowerCase()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        saveBlackList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Adding Movies to blacklist."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static void addToBlacklistMovie(String movie) throws DuplicateEntryException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (movie.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (blackListMoviesTitle.contains(movie.toLowerCase().trim())) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            throw new DuplicateEntryException(\"blacklist\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        blackListMoviesTitle.add(movie.toLowerCase());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        saveBlackList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Save blackilist to JSON File."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static void saveBlackList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            BlacklistStorage allbl \u003d new BlacklistStorage();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            allbl.updateBlacklistFile(blackListKeyWords, blackListMovies, blackListMoviesTitle);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            //TODO ADD exception handling"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * removes keyword from blacklist."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return true if keyword successfully removed"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static boolean removeFromBlacklistKeyWord(String keyword)  {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (keyword.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e newKeywords \u003d (ArrayList\u003cString\u003e) blackListKeyWords.clone();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (String mo : newKeywords) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (mo.toLowerCase().contains(keyword.toLowerCase()) \u0026\u0026 blackListKeyWords.contains(mo)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                blackListKeyWords.remove(mo);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        saveBlackList();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * removes movie from blacklist."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param movie movie title"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return true if keyword successfully removed"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static boolean removeFromBlacklistMovieTitle(String movie)  {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (movie.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        boolean statTitle \u003d removeMovieTitle(movie);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        boolean statObj \u003d removeMovieObj(movie);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        saveBlackList();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return statObj || statTitle;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * removes movie from blacklist."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param movie movie object"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return true if keyword successfully removed"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static boolean removeFromBlacklistMovies(MovieInfoObject movie)  {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (movie \u003d\u003d null) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        boolean statTitle \u003d removeMovieTitle(movie.getTitle());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        boolean statObj \u003d removeMovieObjById(movie);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        saveBlackList();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return statObj || statTitle;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * removes movie title from blacklistMovieTitle Arraylist."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param movie movie title"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return true if keyword successfully removed"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static boolean removeMovieTitle(String movie)  {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (blackListMoviesTitle.contains(movie.toLowerCase())) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            blackListMoviesTitle.remove(movie.toLowerCase());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * removes movie title from blacklistMovies Arraylist."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param movie movie title"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return true if keyword successfully removed"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static boolean removeMovieObj(String movie)  {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (MovieModel mo : blackListMovies) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (mo.getTitle().toLowerCase().equals(movie.toLowerCase())) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                blackListMovies.remove(mo);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * removes movie title from blacklistMovies Arraylist."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param movie movie object"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return true if keyword successfully removed"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static boolean removeMovieObjById(MovieInfoObject movie)  {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (MovieModel mo : blackListMovies) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (mo.getId() \u003d\u003d movie.getId()) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                blackListMovies.remove(mo);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Clears blacklist."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static void clearBlacklist() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        blackListMoviesTitle.clear();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        blackListMovies.clear();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        blackListKeyWords.clear();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        saveBlackList();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Function to print blacklist on screen."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return String crafted from blacklisted words"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static String printList() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String feedback \u003d \"Blacklisted Keywords: \\n\";"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        int i  \u003d 1;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (String e : blackListKeyWords) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            feedback +\u003d String.valueOf(i);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            feedback +\u003d \") \";"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            feedback +\u003d e;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            feedback +\u003d \"\\t\\t\";"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (i % 4 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                feedback +\u003d \"\\n\";"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        feedback +\u003d \"\\nBlacklisted Movies: \\n\";"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        i  \u003d 1;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (String e : blackListMoviesTitle) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            feedback +\u003d String.valueOf(i);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            feedback +\u003d \") \";"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            feedback +\u003d e;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            feedback +\u003d \"\\t\\t\";"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (i % 4 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                feedback +\u003d \"\\n\";"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (MovieModel e : blackListMovies) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            feedback +\u003d String.valueOf(i);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            feedback +\u003d \") \";"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            feedback +\u003d e.getTitle();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            feedback +\u003d \"\\t\\t\";"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (i % 4 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                feedback +\u003d \"\\n\";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return feedback;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * gets possible predictions from list of blacklisted items."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param keyword the keyword used for predictions."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static ArrayList\u003cString\u003e getBlackListHints(String keyword) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        keyword \u003d keyword.toLowerCase();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e hints \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (String a: blackListKeyWords) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (a.toLowerCase().startsWith(keyword)) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                hints.add(a);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (String a: blackListMoviesTitle) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (a.toLowerCase().startsWith(keyword)) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                hints.add(a);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (MovieModel a: blackListMovies) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (a.getTitle().toLowerCase().startsWith(keyword)) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                hints.add(a.getTitle());"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return hints;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Filters search results to exclude blacklisted items."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return filtered search results."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static ArrayList\u003cMovieInfoObject\u003e filter(ArrayList\u003cMovieInfoObject\u003e miMovies) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        miMovies \u003d filterByKeyword(miMovies);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        miMovies \u003d filterById(miMovies);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        miMovies \u003d filterByTitle(miMovies);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return miMovies;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Filter search results by blacklisted keywords."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return filtered search results."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static ArrayList\u003cMovieInfoObject\u003e filterByKeyword(ArrayList\u003cMovieInfoObject\u003e movies) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cMovieInfoObject\u003e filteredMovies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (MovieInfoObject o : movies) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            boolean isBlacklisted \u003d false;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            for (String e : blackListKeyWords) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                if (o.getTitle().toLowerCase().contains(e.toLowerCase())) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    isBlacklisted \u003d true;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (!isBlacklisted) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                filteredMovies.add(o);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return filteredMovies;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Filter search results by blacklisted movie Ids."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return filtered search results."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static ArrayList\u003cMovieInfoObject\u003e filterById(ArrayList\u003cMovieInfoObject\u003e movies) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cMovieInfoObject\u003e filteredMovies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (MovieInfoObject o : movies) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            boolean isBlacklisted \u003d false;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            for (MovieModel e : blackListMovies) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                if (o.getId() \u003d\u003d e.getId()) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    isBlacklisted \u003d true;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (!isBlacklisted) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                filteredMovies.add(o);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return filteredMovies;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Filter search results by blacklisted movie Titles."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return filtered search results."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static ArrayList\u003cMovieInfoObject\u003e filterByTitle(ArrayList\u003cMovieInfoObject\u003e movies) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cMovieInfoObject\u003e filteredMovies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (MovieInfoObject o : movies) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            boolean isBlacklisted \u003d false;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            for (String e : blackListMoviesTitle) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                if (o.getTitle().toLowerCase().equals(e.toLowerCase())) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    isBlacklisted \u003d true;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (!isBlacklisted) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                filteredMovies.add(o);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return filteredMovies;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Pdotdeep": 417
    }
  },
  {
    "path": "src/main/java/entertainment/pro/storage/user/PlaylistCommands.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.storage.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.model.MovieInfoObject;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.model.Playlist;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.model.PlaylistMovieInfoObject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.storage.utils.EditPlaylistJson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwenhui"
        },
        "content": " * class that contains all methods that deal with individual Playlist object and the list of Playlist objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "public class PlaylistCommands {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    String playlistName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private EditPlaylistJson editPlaylistJson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public PlaylistCommands(String name) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        playlistName \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        editPlaylistJson \u003d new EditPlaylistJson(name);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void create() throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        Playlist playlist \u003d new Playlist(playlistName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        editPlaylistJson.createPlaylist(playlist);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        editPlaylistJson.deletePlaylist();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to add movies to playlist."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public Playlist add(Playlist playlist, TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMap,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                        ArrayList\u003cMovieInfoObject\u003e movies) throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ArrayList\u003cMovieInfoObject\u003e playlistMovies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (String log : flagMap.get(\"-m\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            int index \u003d Integer.parseInt(log.trim()) - 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            playlistMovies.add(movies.get(index));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ArrayList\u003cPlaylistMovieInfoObject\u003e newPlaylistMovies \u003d convert(playlistMovies);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return playlist.add(newPlaylistMovies);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to remove movies from playlist."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public Playlist remove(Playlist playlist, TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMap) throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ArrayList\u003cPlaylistMovieInfoObject\u003e toDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (String log : flagMap.get(\"-m\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            int index \u003d Integer.parseInt(log.trim()) - 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            toDelete.add(playlist.getMovies().get(index));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return playlist.remove(toDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to clear all movies in playlist."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public Playlist clear(Playlist playlist) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return playlist.clear();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * set name/description to particular Playlist object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public Playlist setToPlaylist(Playlist playlist, TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMap) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (flagMap.containsKey(\"-n\") \u0026\u0026 !flagMap.containsKey(\"-d\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            return setPlaylistName(playlist, appendFlagMap(flagMap.get(\"-n\")));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } else if (flagMap.containsKey(\"-d\") \u0026\u0026 !flagMap.containsKey(\"-n\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            return setPlaylistDescription(playlist, appendFlagMap(flagMap.get(\"-d\")));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            return setAll(playlist, appendFlagMap(flagMap.get(\"-n\")), appendFlagMap(flagMap.get(\"-d\")));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * change name of particular Playlist object."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private Playlist setPlaylistName(Playlist playlist, String newName) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return playlist.setPlaylistName(newName);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * change description of particular Playlist object."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private Playlist setPlaylistDescription(Playlist playlist, String description) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return playlist.setDescription(description);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to allow setting of both name and description at the same time."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private Playlist setAll(Playlist playlist, String newName, String description) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return playlist.setBoth(newName, description);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private ArrayList\u003cPlaylistMovieInfoObject\u003e convert(ArrayList\u003cMovieInfoObject\u003e movies) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ArrayList\u003cPlaylistMovieInfoObject\u003e convertMovies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (MovieInfoObject log : movies) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            Date date \u003d log.getReleaseDateInfo();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            String string \u003d dateFormat.format(date);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            boolean fakeType \u003d false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            PlaylistMovieInfoObject testMovie \u003d new PlaylistMovieInfoObject(fakeType, log.getId(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    log.getTitle(), log.getReleaseDateInfo(), log.getSummaryInfo(), log.getRatingInfo(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    log.getGenreIdInfo(), log.getFullPosterPathInfo(), log.getFullBackdropPathInfo(),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    log.isAdultContent(), string);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            convertMovies.add(testMovie);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return convertMovies;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private String appendFlagMap(ArrayList\u003cString\u003e flagMapArrayList) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        String appends \u003d \"\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        boolean flag \u003d true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (String log : flagMapArrayList) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (!flag) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                appends +\u003d \", \";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            appends +\u003d log.trim();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            flag \u003d false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return appends;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 6,
      "nwenhui": 125,
      "Pdotdeep": 2
    }
  },
  {
    "path": "src/main/java/entertainment/pro/storage/user/ProfileCommands.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "package entertainment.pro.storage.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.DuplicateGenreException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.GenreDoesNotExistException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.commons.exceptions.InvalidFormatCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.InvalidGenreNameEnteredException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.model.UserProfile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import org.json.simple.JSONArray;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import org.json.simple.parser.JSONParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import org.json.simple.parser.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import org.json.simple.JSONObject;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * Class contains all methods that deal with Profile object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "public class ProfileCommands {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private UserProfile userProfile;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static final String GET_NEW_GENRE_PREF \u003d \"-g\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static final String GET_NEW_GENRE_RESTRICT \u003d \"-r\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static final String GET_NEW_SORT \u003d \"-s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static final String GET_NEW_ADULT_RATING \u003d \"-a\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Constructor for ProfileCommands."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public ProfileCommands(UserProfile userProfile) throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.userProfile \u003d userProfile;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for setting the name in the userProfile."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param name The name to be set in the UserProfile."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public UserProfile setName(String name) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return userProfile.setUserName(name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for setting the age in the userProfile."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param age The age to be set in the userProfile."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public UserProfile setAge(String age) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return userProfile.setUserAge(Integer.parseInt(age));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for adding new preference and sort options in the userProfile."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param flagMap The elements to be added under a particular category in the userProfile."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param getInput String that signifies a particular category in the userProfile."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public UserProfile addPreference(TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMap, String getInput) throws IOException,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            InvalidFormatCommandException, InvalidGenreNameEnteredException, DuplicateGenreException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ArrayList\u003cInteger\u003e genrePreferences \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ArrayList\u003cInteger\u003e genreRestrict \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        int sortOption \u003d 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e listForFlag \u003d flagMap.get(getInput);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (listForFlag.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throw new InvalidFormatCommandException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        for (String log : flagMap.get(getInput)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (log.isEmpty() || log.isBlank()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                throw new InvalidFormatCommandException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (getInput.equals(GET_NEW_GENRE_PREF)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                int genre \u003d findGenreID(log);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                if (genre \u003d\u003d 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    throw new InvalidGenreNameEnteredException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                if (isRepetitiveGenrePreference(genre) || isRepetitiveGenreRestrict(genre)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    throw new DuplicateGenreException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                genrePreferences.add(genre);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (getInput.equals(GET_NEW_GENRE_RESTRICT)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                int genre \u003d findGenreID(log);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                if (genre \u003d\u003d 0) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    throw new InvalidGenreNameEnteredException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                if (isRepetitiveGenrePreference(genre) || isRepetitiveGenreRestrict(genre)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    throw new DuplicateGenreException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                genreRestrict.add(genre);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (getInput.equals(GET_NEW_ADULT_RATING)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                if (listForFlag.size() !\u003d 1) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    throw new InvalidFormatCommandException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                if (log.equals(\"true\")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    userProfile \u003d userProfile.setAdult(true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                } else if (log.equals(\"false\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    userProfile \u003d userProfile.setAdult(false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    throw new InvalidFormatCommandException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (getInput.equals(GET_NEW_SORT)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                if (listForFlag.size() !\u003d 1) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    throw new InvalidFormatCommandException();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    sortOption \u003d Integer.parseInt(log);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    if (sortOption \u003c\u003d 0 || sortOption \u003e 3) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                        throw new InvalidFormatCommandException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    throw new InvalidFormatCommandException();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                userProfile \u003d getSortFromUserInput(sortOption);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        userProfile \u003d userProfile.addGenreIdPreference(genrePreferences);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        userProfile \u003d userProfile.addGenreIdRestriction(genreRestrict);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return userProfile;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for checking whether a genre exist under genre preference in the database."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param genreNumber The ID of the genre that needs to be checked."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return true if genre exist in the database and false otherwise."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private boolean isRepetitiveGenrePreference(int genreNumber) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cInteger\u003e genrePref \u003d userProfile.getGenreIdPreference();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        for (int i \u003d 0; i \u003c genrePref.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (genreNumber \u003d\u003d genrePref.get(i)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for checking whether a genre exist under genre restrictions in the database."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param genreNumber The ID of the genre that needs to be checked."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return true if genre exist in the database and false otherwise."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private boolean isRepetitiveGenreRestrict(int genreNumber) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cInteger\u003e genreRestrict \u003d userProfile.getGenreIdRestriction();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        for (int i \u003d 0; i \u003c genreRestrict.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (genreNumber \u003d\u003d genreRestrict.get(i)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for removing preference and sort options in the userProfile."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param flagMap The elements to be added under a particular category in the userProfile."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param getInput String that signifies a particular category in the userProfile"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public UserProfile removePreference(TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMap, String getInput) throws IOException,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            InvalidFormatCommandException, InvalidGenreNameEnteredException, GenreDoesNotExistException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ArrayList\u003cInteger\u003e removeGenrePreferences \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ArrayList\u003cInteger\u003e removeGenreRestrict \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        for (String log : flagMap.get(getInput)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            ArrayList\u003cString\u003e listForFlag \u003d flagMap.get(getInput);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (getInput.equals(GET_NEW_GENRE_PREF)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                if (listForFlag.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    throw new InvalidFormatCommandException();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                int genre \u003d findGenreID(log);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                if (genre \u003d\u003d 0) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    throw new InvalidGenreNameEnteredException();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                if (!isRepetitiveGenrePreference(genre)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    throw new GenreDoesNotExistException();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                removeGenrePreferences.add(genre);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (getInput.equals(GET_NEW_GENRE_RESTRICT)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                if (listForFlag.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    throw new InvalidFormatCommandException();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                int genre \u003d findGenreID(log);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                if (genre \u003d\u003d 0) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    throw new InvalidGenreNameEnteredException();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                if (!isRepetitiveGenreRestrict(genre)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    throw new GenreDoesNotExistException();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                removeGenreRestrict.add(genre);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (getInput.equals(GET_NEW_ADULT_RATING)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            ArrayList\u003cString\u003e getFlag \u003d flagMap.get(GET_NEW_ADULT_RATING);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (getFlag.isEmpty()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                if (userProfile.isAdult()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    userProfile \u003d userProfile.setAdult(false);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    userProfile \u003d userProfile.setAdult(true);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                throw new InvalidFormatCommandException();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (getInput.equals(GET_NEW_SORT)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            ArrayList\u003cString\u003e getFlag \u003d flagMap.get(GET_NEW_SORT);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (getFlag.isEmpty()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                clearSortPreference();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                throw new InvalidFormatCommandException();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        userProfile \u003d userProfile.removeGenreIdPreference(removeGenrePreferences);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        userProfile \u003d  userProfile.removeGenreIdRestriction(removeGenreRestrict);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return userProfile;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for clearing preference and sort options for a particular category in the userProfile."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param flagMap The elements to be added under a particular category in the userProfile."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param getInput String that signifies a particular category in the userProfile."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public UserProfile clearPreference(TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMap, String getInput) throws IOException,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            InvalidFormatCommandException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e getFlag \u003d flagMap.get(getInput);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (getFlag.isEmpty()) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (getInput.equals(GET_NEW_GENRE_PREF)) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                return clearGenrePreference();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (getInput.equals(GET_NEW_GENRE_RESTRICT)) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                return clearGenreRestrict();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (getInput.equals(GET_NEW_ADULT_RATING)) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                return clearAdultPreference();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            if (getInput.equals(GET_NEW_SORT)) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                return clearSortPreference();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            throw new InvalidFormatCommandException();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for clearing the sort options in the userProfile."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public UserProfile clearSortPreference() throws IOException {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return setSort(false, false, false);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for clearing all the genres set under gene restrictions in the userProfile."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public UserProfile clearGenreRestrict() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return userProfile.removeGenreIdRestriction(userProfile.getGenreIdRestriction());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for clearing all the genres set under gene preferences in the userProfile."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public UserProfile clearGenrePreference() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return userProfile.removeGenreIdPreference(userProfile.getGenreIdPreference());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Responsible for clearing whether to have search results that contain adult content in the userProfile."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public UserProfile clearAdultPreference() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return userProfile.setAdult(false);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for setting sort preferences based on user\u0027s input."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param sortOption A integer that corresponds to the user\u0027s input."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private UserProfile getSortFromUserInput(int sortOption) throws IOException {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (sortOption \u003d\u003d 1) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            return setSort(true, false, false);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } else if (sortOption \u003d\u003d 2) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            return setSort(false, true, false);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            return setSort(false, false, true);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Updates the components in the SortProfile accordingly."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param isAlphaOrder true when user have entered command to sort results in alphabetical"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *                     order and otherwise false."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param isLatDatesOrder true when user have entered command to sort results based on release"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *                        dates and otherwise false."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param isRatingsOrder  true when user have entered command to sort results based on ratings and otherwise false."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public UserProfile setSort(boolean isAlphaOrder, boolean isLatDatesOrder, boolean isRatingsOrder)"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        userProfile \u003d userProfile.setSortByAlphabetical(isAlphaOrder);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        userProfile \u003d userProfile.setSortByHighestRating(isRatingsOrder);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        userProfile \u003d userProfile.setSortByLatestRelease(isLatDatesOrder);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return userProfile;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for setting user preferences."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public UserProfile setPreference(TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMap) throws IOException {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (flagMap.containsKey(\"-g\") \u0026\u0026 !flagMap.containsKey(\"-a\")) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            return setGenrePreference(flagMap);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } else if (flagMap.containsKey(\"-a\") \u0026\u0026 !flagMap.containsKey(\"-g\")) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            return setAdultPreference(flagMap.get(\"-a\").get(0));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            return setAll(flagMap, flagMap.get(\"-a\").get(0));"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * set user preferences -- for genre."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private UserProfile setGenrePreference(TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMap) throws IOException {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ArrayList\u003cInteger\u003e genrePreferences \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (String log : flagMap.get(\"-g\")) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            int id \u003d findGenreID(log);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            genrePreferences.add(id);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return userProfile.setGenreIdPreference(genrePreferences);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * set user preferences -- for adult content restriction."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * yes \u003d allow adult content"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * no \u003d restrict adult content"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private UserProfile setAdultPreference(String value) throws IOException {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (value.equals(\"yes\")) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            return userProfile.setAdult(true);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            return userProfile.setAdult(false);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to allow setting of both genre and adult content restriction preferences at the same time."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private UserProfile setAll(TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMap, String value) throws IOException {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ArrayList\u003cInteger\u003e genrePreferences \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (String log : flagMap.get(\"-g\")) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            int id \u003d findGenreID(log);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            genrePreferences.add(id);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        userProfile \u003d userProfile.setGenreIdPreference(genrePreferences);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (value.equals(\"yes\")) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            userProfile \u003d userProfile.setAdult(true);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } else if (value.equals(\"no\")) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            userProfile \u003d userProfile.setAdult(false);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return userProfile;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * set user restrictions."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public UserProfile setRestriction(TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMap) throws IOException {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ArrayList\u003cInteger\u003e genreRestrictions \u003d new ArrayList\u003c\u003e(10);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (String log : flagMap.get(\"-g\")) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            int id \u003d findGenreID(log);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            genreRestrictions.add(id);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return userProfile.setGenreIdRestriction(genreRestrictions);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * add restriction to userprofile."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public UserProfile addRestriction(TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMap) throws IOException {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ArrayList\u003cInteger\u003e genreRestrictions \u003d new ArrayList\u003c\u003e(50);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (String log : flagMap.get(\"-g\")) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            genreRestrictions.add(findGenreID(log));"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return userProfile.addGenreIdRestriction(genreRestrictions);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * remove restriction from userprofile."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public UserProfile removeRestriction(TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMap) throws IOException {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ArrayList\u003cInteger\u003e genreRestrictions \u003d new ArrayList\u003c\u003e(50);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (String log : flagMap.get(\"-g\")) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            genreRestrictions.add(findGenreID(log));"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return userProfile.removeGenreIdRestriction(genreRestrictions);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public UserProfile clearRestriction() throws IOException {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return userProfile.removeGenreIdRestriction(userProfile.getGenreIdRestriction());"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for returning the genreId for corresponding genre name."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param genreName A string that correspondes to the genre name."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return GenreId of the genre name."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static Integer findGenreID(String genreName) throws IOException {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        InputStream inputStream \u003d ProfileCommands.class.getResourceAsStream(\"/data/GenreId.json\");"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        InputStreamReader inputStreamReader \u003d new InputStreamReader(inputStream);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        BufferedReader bufferedReader \u003d new BufferedReader(inputStreamReader);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        String genreListString \u003d \"\";"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            genreListString +\u003d line;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        bufferedReader.close();"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        inputStreamReader.close();"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        inputStream.close();"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        int genreId \u003d Integer.parseInt(parseToId(genreListString, genreName.trim()));"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return genreId;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for returning the genre name for corresponding genreId."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param id Integer that corresponds to a genreID."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return Genre name for corresponding genreId."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static String findGenreName(int id) throws IOException {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        InputStream inputStream \u003d ProfileCommands.class.getResourceAsStream(\"/data/GenreId.json\");"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        InputStreamReader inputStreamReader \u003d new InputStreamReader(inputStream);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        BufferedReader bufferedReader \u003d new BufferedReader(inputStreamReader);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        String genreListString \u003d \"\";"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            genreListString +\u003d line;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        bufferedReader.close();"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        inputStreamReader.close();"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        inputStream.close();"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return parseToName(genreListString, Integer.toString(id));"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for parsing and extracting genre name."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param genreListString String from which genre name needs to be extracted."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param id GenreId of the genre name."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return Genre name."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private static String parseToName(String genreListString, String id) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        JSONParser parser \u003d new JSONParser();"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        JSONArray jsonArray \u003d new JSONArray();"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            jsonArray \u003d (JSONArray) parser.parse(genreListString);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (int i \u003d 0; i \u003c jsonArray.size(); i++) {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            JSONObject jsonObject \u003d (JSONObject) jsonArray.get(i);"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            String genreId \u003d (String) jsonObject.get(\"id\");"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (genreId.equals(id)) {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                return (String) jsonObject.get(\"genre\");"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return \"0\";"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private static String parseToId(String genreListString, String name) {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        JSONParser parser \u003d new JSONParser();"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        JSONArray jsonArray \u003d new JSONArray();"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            jsonArray \u003d (JSONArray) parser.parse(genreListString);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (int i \u003d 0; i \u003c jsonArray.size(); i++) {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            JSONObject jsonObject \u003d (JSONObject) jsonArray.get(i);"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            String genreName \u003d (String) jsonObject.get(\"genre\");"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (genreName.equalsIgnoreCase(name)) {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                return (String) jsonObject.get(\"id\");"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return \"0\";"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to get Label text for genres."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public String convertToLabel(ArrayList\u003cInteger\u003e userList) throws IOException {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        String labelText \u003d \"\";"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (Integer log : userList) {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            labelText +\u003d findGenreName(log);"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            labelText +\u003d \"\\n\";"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return labelText;"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to get Label text for adult preferences."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public String getAdultLabel() {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (userProfile.isAdult()) {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            return \"allow\";"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            return \"restrict\";"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public UserProfile addPlaylist(String listName) throws IOException {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return userProfile.addPlaylist(listName);"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public UserProfile deletePlaylist(String listName) throws IOException {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return userProfile.deletePlaylist(listName);"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 193,
      "nwenhui": 309,
      "Pdotdeep": 17
    }
  },
  {
    "path": "src/main/java/entertainment/pro/storage/user/WatchlistHandler.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//@@ hotspur1997"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.storage.user;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.model.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.model.Tasks;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.model.Period;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.ui.MovieHandler;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " * Watchlist class."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "public class WatchlistHandler {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    private static ArrayList\u003cTasks\u003e watch \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    protected static String space \u003d  \"    \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * adds a duke.task to the watchlist."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param t the duke.task list to store the movies"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public static boolean add(Tasks t) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        for (Tasks i : watch) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            if (i.getDescription().equals(t.getDescription())) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        watch.add(t);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Collections.sort(watch, (d1, d2) -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            if (d1 instanceof Deadline \u0026\u0026 d2 instanceof Deadline) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                if (((Deadline)(d1)).getDate().getEndDate() \u003d\u003d null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                        || ((Deadline)(d2)).getDate().getEndDate() \u003d\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                    return 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                return ((Deadline)(d1)).getDate().getEndDate().compareTo(((Deadline)(d2)).getDate().getEndDate());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            } else if (d1 instanceof Period \u0026\u0026 d2 instanceof Period) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                if (((Period)(d1)).getDate().getEndDate() \u003d\u003d null || ((Period)(d2)).getDate().getEndDate() \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                    return 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                return ((Period)(d1)).getDate().getEndDate().compareTo(((Period)(d2)).getDate().getEndDate());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            } else if (d1 instanceof Period \u0026\u0026 d2 instanceof Deadline) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                if (((Period)(d1)).getDate().getEndDate() \u003d\u003d null || ((Deadline)(d2)).getDate().getEndDate() \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                    return 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                return ((Period)(d1)).getDate().getEndDate().compareTo(((Deadline)(d2)).getDate().getEndDate());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            } else if (d1 instanceof Deadline \u0026\u0026 d2 instanceof Period) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                if (((Deadline)(d1)).getDate().getEndDate() \u003d\u003d null || ((Period)(d2)).getDate().getEndDate() \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                    return 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                return ((Deadline)(d1)).getDate().getEndDate().compareTo(((Period)(d2)).getDate().getEndDate());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * prints the entire watchlist of the user."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param handle class to retrieve the duke.ui controller to display the list on the users view"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public static void print_list(MovieHandler handle) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        result +\u003d \"Here are the tasks in your list: \\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        for (Tasks i: watch) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            String message \u003d \"\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            switch (i.getType()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            case \"D\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                message \u003d ((Deadline)(i)).toMessage();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            case \"P\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                message \u003d ((Period)(i)).toMessage();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            result +\u003d space + index + \".[\" + i.getType()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                    + \"][\" + i.getStatusIcon() + \"] \" + message + \"\\n\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        handle.setGeneralFeedbackText(result);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * marks the required duke.task as done and feedbacks it to the user."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param index index of the movie to mark as done"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param handle moviehandler class to print out the completed duke.task on the users view"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public static void markIndexAsDone(int index, MovieHandler handle) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            String result \u003d \"I\u0027ve marked this duke.task as Done: \\n\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            index--;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            Tasks t \u003d watch.get(index);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            watch.get(index).setDone(true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            if (t.getType().equals(\"D\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                result +\u003d space + index + 1 + \".[\" + t.getType()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                        + \"][\" + t.getStatusIcon() + \"] \" + ((Deadline) t).toMessage();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                result +\u003d space + index + 1 + \".[\" + t.getType()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                        + \"][\" + t.getStatusIcon() + \"] \" + ((Period) t).toMessage();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            handle.setGeneralFeedbackText(result);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            handle.setGeneralFeedbackText(\"Please enter a valid index that is not \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    + \"greater than the size of the watchlist!\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * removes a particular duke.task from the watchlist by its name."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param movie name of the movie to be removed"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param handle moviehandler class to print out the completed duke.task on the users view"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * @return boolean: returns whether the movie was present in the watchlist or not"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public static boolean removeFromWatchlist(String movie, MovieHandler handle) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        movie \u003d movie.toLowerCase();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        for (int i \u003d 0; i \u003c watch.size(); i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            if (watch.get(i).getDescription().equals(movie)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                index \u003d i;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        if (index !\u003d -1) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            watch.remove(index);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * return a list of possible movie titles to remove from the watchlist."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @return ArrayList list of movie titles currently in the watchlist"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public static ArrayList\u003cString\u003e getTitles() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        ArrayList\u003cString\u003e names \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        for (Tasks i : watch) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            names.add(i.getDescription());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        return names;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * return a list of possible hints from watchlist for autocomplete."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param keyword incomplete command of the user"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return ArrayList list of movie titles currently in the watchlist that could potentially be user\u0027s intent"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static ArrayList\u003cString\u003e getWatchListHints(String keyword) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e hints \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (Tasks i : watch) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (i.getDescription().toLowerCase().contains(keyword.toLowerCase())) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                hints.add(i.getDescription());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return hints;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * searches for a movie in the watchlist to mark as its corresponding task as done."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param movie title of the movie to be searched"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param handle UI controller to print text to the UI textfield itself"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * @return: a boolean to determine if the movie was found or not"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public static boolean markMovieAsDone(String movie, MovieHandler handle) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        String result \u003d \"I have marked this task as done: \\n\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        for (Tasks task : watch) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            if (task.getDescription().equals(movie)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                task.setDone(true);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                if (task.getType().equals(\"D\")) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                    result +\u003d space + index + 1 + \".[\" + task.getType()"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                            + \"][\" + task.getStatusIcon() + \"] \" + ((Deadline) task).toMessage();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                    result +\u003d space + index + 1 + \".[\" + task.getType()"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                            + \"][\" + task.getStatusIcon() + \"] \" + ((Period) task).toMessage();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                handle.setGeneralFeedbackText(result);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * check if the watchlist class contains a movie."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param movie name of the movie title to be searched"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * @return a boolean representing if a movie is contained in the array list or not"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public static boolean contains(String movie) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        for (Tasks i : watch) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            if (i.getDescription().equals(movie)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * gets the size of the watchlist."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * @return an integer denoting the size of the watchlist"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public static int getSize() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        return watch.size();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * returns the watchlist for the user to view."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     * @return watchlist for the user to view"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public static ArrayList\u003cTasks\u003e getWatchlist() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        return watch;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hotspur1997": 159,
      "Riyas97": 9,
      "Pdotdeep": 34,
      "nwenhui": 18
    }
  },
  {
    "path": "src/main/java/entertainment/pro/storage/utils/BlacklistStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//@@author pdotdeep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.storage.utils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.model.MovieInfoObject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.storage.user.Blacklist;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.model.UserProfile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.storage.user.Blacklist;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import com.fasterxml.jackson.core.type.TypeReference;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import org.json.simple.JSONObject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import org.json.simple.parser.JSONParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.model.MovieModel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " * class that deals with editing the BlackList duke.storage file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public class BlacklistStorage {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private ObjectMapper mapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private InputStream inputStream;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private TypeReference\u003cUserProfile\u003e typeReference \u003d new TypeReference\u003cUserProfile\u003e() { };"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private enum BlacklistKeys {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        KEYS,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        MOVIES,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ID"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * checkstyle made me put javadoc here \u003e:( whoever made this function pls edit the the javadoc tqtq -wh."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public BlacklistStorage() throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        file \u003d new File(\"./BlacklistStorage.json\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (file.createNewFile()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            createNewBlacklistFile();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        this.inputStream \u003d new FileInputStream(file);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * load blacklisted movies and keywords from JSON duke.storage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void load() throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            File newFile \u003d new File(\"./BlacklistStorage.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (newFile.createNewFile()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                Blacklist.initialiseAll(new ArrayList\u003cString\u003e(), new ArrayList\u003cString\u003e(), new ArrayList\u003cMovieModel\u003e());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                FileReader reader \u003d new FileReader(newFile);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                JSONParser jsonParser \u003d new JSONParser();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                JSONObject jsonObject \u003d (JSONObject) jsonParser.parse(reader);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                System.out.println(\"jsonObject\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                System.out.println(jsonObject.get(BlacklistKeys.KEYS.toString()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                Gson gson \u003d new Gson();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                Type type \u003d new TypeToken\u003cArrayList\u003cString\u003e\u003e() { }.getType();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                ArrayList\u003cString\u003e keyList \u003d gson.fromJson(jsonObject.get(BlacklistKeys.KEYS.toString()).toString(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                        type);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                Type type2 \u003d new TypeToken\u003cArrayList\u003cMovieModel\u003e\u003e() { }.getType();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                ArrayList\u003cMovieModel\u003e movieList \u003d gson.fromJson(jsonObject.get(BlacklistKeys.ID.toString()).toString(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                        type2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                ArrayList\u003cString\u003e movieTitleList \u003d gson.fromJson(jsonObject.get(BlacklistKeys.MOVIES.toString())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                                .toString(), type);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                Blacklist.initialiseAll(keyList, movieTitleList, movieList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            //TODO add exception handling"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * update json file with any changes made blacklist."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void updateBlacklistFile(ArrayList\u003cString\u003e blackListKeyWords,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                                    ArrayList\u003cMovieModel\u003e blackListMovies,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                                     ArrayList\u003cString\u003e blackListMoviesTitle) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        JSONObject allblacklist \u003d new JSONObject();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        allblacklist.put(BlacklistKeys.KEYS, blackListKeyWords);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        allblacklist.put(BlacklistKeys.ID, blackListMovies);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        allblacklist.put(BlacklistKeys.MOVIES, blackListMoviesTitle);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        File oldFile \u003d file;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        File newFile \u003d new File(\"./tempBlacklist.json\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        mapper.writeValue(newFile, allblacklist);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        oldFile.delete();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        newFile.renameTo(new File(file.getAbsolutePath()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        System.out.println(\"Successfully DONE SAVING!\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * checkstyle made me put javadoc here \u003e:( whoever made this function pls edit the the javadoc tqtq -wh."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void createNewBlacklistFile() throws IOException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        JSONObject allblacklist \u003d new JSONObject();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        allblacklist.put(BlacklistKeys.KEYS, new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        allblacklist.put(BlacklistKeys.ID, new ArrayList\u003cMovieModel\u003e());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        allblacklist.put(BlacklistKeys.MOVIES, new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        File newFile \u003d new File(\"./BlacklistStorage.json\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        mapper.writeValue(newFile, allblacklist);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pdotdeep": 134
    }
  },
  {
    "path": "src/main/java/entertainment/pro/storage/utils/EditPlaylistJson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.storage.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.model.Playlist;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.model.PlaylistMovieInfoObject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import org.json.simple.JSONArray;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import org.json.simple.JSONObject;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import org.json.simple.parser.JSONParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import org.json.simple.parser.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwenhui"
        },
        "content": " * class that deals with editing the Playlist.json file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class EditPlaylistJson {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private ObjectMapper mapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private JSONParser parser \u003d new JSONParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public EditPlaylistJson(String playlistName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        String fileName \u003d \"./\" + playlistName + \".json\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        file \u003d new File(fileName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to load Playlist object from playlist json file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public Playlist load() throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (file.length() !\u003d 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                JSONObject playlist \u003d (JSONObject) parser.parse(new FileReader(file));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                String playlistName \u003d (String) playlist.get(\"playlistName\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                String description \u003d (String) playlist.get(\"description\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                JSONArray movies \u003d (JSONArray) playlist.get(\"movies\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                ArrayList\u003cPlaylistMovieInfoObject\u003e playlistMovies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                for (int i \u003d 0; i \u003c movies.size(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    JSONObject movie \u003d (JSONObject) movies.get(i);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    long movieID \u003d (long) movie.get(\"id\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    String movieTitle \u003d (String) movie.get(\"title\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    String movieReleaseDate \u003d (String) movie.get(\"stringDate\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    String movieSummary \u003d (String) movie.get(\"summaryInfo\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    String movieFullPosterPath \u003d (String) movie.get(\"fullPosterPath\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    String movieFullBackdropPath \u003d (String) movie.get(\"fullBackdropPath\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    double movieRating \u003d (double) movie.get(\"ratingInfo\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    JSONArray genreArray \u003d (JSONArray) movie.get(\"genreIdInfo\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    ArrayList\u003cLong\u003e movieGenreIDs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    for (int j \u003d 0; j \u003c genreArray.size(); j++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                        movieGenreIDs.add((long) genreArray.get(j));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    boolean adult \u003d (boolean) movie.get(\"adultContent\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    playlistMovies.add(new PlaylistMovieInfoObject(false, movieID, movieTitle, null,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                            movieSummary, movieRating, movieGenreIDs, movieFullPosterPath, movieFullBackdropPath,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                            false, movieReleaseDate));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                return new Playlist(playlistName, description, playlistMovies);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void createPlaylist(Playlist playlist) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        file.createNewFile();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        mapper.writeValue(file, playlist);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void deletePlaylist() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        file.delete();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void editPlaylist(Playlist playlist) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        mapper.writeValue(file, playlist);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to rename the corresponding json file to the new playlist name."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void renamePlaylist(Playlist playlist, String newName) throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        editPlaylist(playlist);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        String fileName \u003d \"./\" + newName + \".json\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        File newFile \u003d new File(fileName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        file.renameTo(newFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 26,
      "nwenhui": 64
    }
  },
  {
    "path": "src/main/java/entertainment/pro/storage/utils/EditProfileJson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.storage.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import com.fasterxml.jackson.core.type.TypeReference;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.model.UserProfile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import org.json.simple.JSONArray;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import org.json.simple.JSONObject;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import org.json.simple.parser.JSONParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import org.json.simple.parser.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwenhui"
        },
        "content": " * class that deals with editing the UserProfile.json file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class EditProfileJson {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private ObjectMapper mapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Constructor for EditProfileJson."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public EditProfileJson() throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        file \u003d new File(\"./userProfile.json\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            file.createNewFile();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            UserProfile userProfile \u003d new UserProfile();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            mapper.writeValue(file, userProfile);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for loading UserProfile object from userProfile.json."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public UserProfile load() throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        InputStream inputStream \u003d new FileInputStream(\"./userProfile.json\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        InputStreamReader inputStreamReader \u003d new InputStreamReader(inputStream);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        BufferedReader bufferedReader \u003d new BufferedReader(inputStreamReader);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        String userProfileString \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            userProfileString +\u003d line;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        bufferedReader.close();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        inputStreamReader.close();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        inputStream.close();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return parse(userProfileString);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private UserProfile parse(String userProfileString) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        JSONParser parser \u003d new JSONParser();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        JSONObject jsonObject \u003d new JSONObject();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            jsonObject \u003d (JSONObject) parser.parse(userProfileString);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        final String name \u003d (String) jsonObject.get(\"userName\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        final int age \u003d ((Long) jsonObject.get(\"userAge\")).intValue();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cInteger\u003e genrePreference \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cInteger\u003e genreRestriction \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        JSONArray jsonArray \u003d (JSONArray) jsonObject.get(\"genreIdPreference\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        JSONArray jsonArray1 \u003d (JSONArray) jsonObject.get(\"genreIdRestriction\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        for (int i \u003d 0; i \u003c jsonArray.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            Long num \u003d (Long) jsonArray.get(i);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            int num2 \u003d num.intValue();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            genrePreference.add(num2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        for (int i \u003d 0; i \u003c jsonArray1.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            Long num \u003d (Long) jsonArray1.get(i);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            int num2 \u003d num.intValue();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            genreRestriction.add(num2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        final boolean adult \u003d (boolean) jsonObject.get(\"adult\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        final ArrayList\u003cString\u003e playlistNames \u003d (ArrayList\u003cString\u003e) jsonObject.get(\"playlistNames\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        final boolean highestRating \u003d (boolean) jsonObject.get(\"sortByHighestRating\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        final boolean latestRelease \u003d (boolean) jsonObject.get(\"sortByLatestRelease\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        final boolean alphabeticalOrder \u003d (boolean) jsonObject.get(\"sortByAlphabetical\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        UserProfile userProfile \u003d new UserProfile();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        userProfile \u003d userProfile.setUserName(name);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        userProfile \u003d userProfile.setUserAge(age);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        userProfile \u003d userProfile.setGenreIdPreference(genrePreference);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        userProfile \u003d userProfile.setGenreIdRestriction(genreRestriction);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        userProfile \u003d userProfile.setPlaylistNames(playlistNames);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        userProfile \u003d userProfile.setAdult(adult);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        userProfile \u003d userProfile.setSortByAlphabetical(alphabeticalOrder);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        userProfile \u003d userProfile.setSortByHighestRating(highestRating);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        userProfile \u003d userProfile.setSortByLatestRelease(latestRelease);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return userProfile;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * update json file with any changes made to user profile."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void updateProfile(UserProfile userProfile) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        System.out.println(\"this is\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        mapper.writeValue(file, userProfile);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 48,
      "nwenhui": 56,
      "Pdotdeep": 2
    }
  },
  {
    "path": "src/main/java/entertainment/pro/storage/utils/HelpStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//@@author pdotdeep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.storage.utils;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.strings.PromptMessages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.enums.CommandKeys;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.parsers.CommandStructure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " * Retrieves Help information from help storage files."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public class HelpStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(HelpStorage.class.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static TreeMap\u003cCommandKeys, String\u003e cmdHelp \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * Initialises help for all root keywords."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static void initialiseAllHelp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for (CommandKeys root: CommandStructure.AllRoots) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                cmdHelp.put(root, getHelpInstructions(root.toString()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                logger.log(Level.SEVERE, PromptMessages.FILE_NOT_FOUND + e.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            cmdHelp.put(CommandKeys.ME, getHelpInstructions(CommandKeys.ME.toString()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            logger.log(Level.SEVERE, PromptMessages.FILE_NOT_FOUND + e.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static TreeMap\u003cCommandKeys, String\u003e getCmdHelp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return cmdHelp;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static String getHelpInstructions(String root) throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        InputStream configStream \u003d HelpStorage.class"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                .getResourceAsStream(String.format(\"/helpData/%s.txt\", root.toLowerCase()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if (configStream \u003d\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            logger.log(Level.SEVERE, PromptMessages.FILES_NOT_FOUND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            return PromptMessages.FILES_NOT_FOUND;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        BufferedReader br \u003d new BufferedReader(new InputStreamReader(configStream, \"UTF-8\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            String line \u003d br.readLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            while (line !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                sb.append(line);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                sb.append(\"\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                line \u003d br.readLine();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            return sb.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pdotdeep": 74
    }
  },
  {
    "path": "src/main/java/entertainment/pro/storage/utils/OfflineSearchStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.storage.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.strings.PromptMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.Exceptions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.ParseExceptionInExtraction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.movierequesterapi.RetrieveRequest;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import org.json.simple.JSONArray;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import org.json.simple.JSONObject;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import org.json.simple.parser.JSONParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import org.json.simple.parser.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * This class is responsible for fetching appropriate string data for search requests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * Called when there is no internet connection and data fetch has to be done offline."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class OfflineSearchStorage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final int MAX_FILE_NO_FOR_MOVIES \u003d 1055;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final int MAX_FILE_NO_FOR_TV \u003d 150;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String CURRENT_MOVIES_DATA_FILEPATH \u003d \"/data/CurrentMovies.json\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String POPULAR_MOVIES_DATA_FILEPATH \u003d \"/data/PopularMovies.json\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TRENDING_MOVIES_DATA_FILEPATH \u003d \"/data/TrendingMovies.json\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TOP_RATED_MOVIES_DATA_FILEPATH \u003d \"/data/RatedMovies.json\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String UPCOMING_MOVIES_DATA_FILEPATH \u003d \"/data/UpcomingMovies.json\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String CURRENT_TV_DATA_FILEPATH \u003d \"/data/CurrentTV.json\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String POPULAR_TV_DATA_FILEPATH \u003d \"/data/PopularTV.json\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TRENDING_TV_DATA_FILEPATH \u003d \"/data/TrendingTV.json\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TOP_RATED_TV_DATA_FILEPATH \u003d \"/data/RatedTV.json\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String MOVIES_DATABASE_FILEPATH \u003d \"/data/movieData/\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TV_DATABASE_FILEPATH \u003d \"/data/tvData/\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String KEYWORD_FOR_SEARCH_REQUESTS \u003d \"results\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(OfflineSearchStorage.class.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Load and fetch appropriate string data for search requests."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return JSONArray that consist of all the required data for the search request."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @throws Exceptions when encounter a failed/interrupted I/O operation."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static JSONArray load() throws Exceptions {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String datafromjson \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        JSONArray searchData \u003d new JSONArray();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        RetrieveRequest.MoviesRequestType type \u003d RetrieveRequest.getGetType();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String filename \u003d getFileName(type);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        if ((type.equals(RetrieveRequest.MoviesRequestType.SEARCH_MOVIES))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                || (type.equals(RetrieveRequest.MoviesRequestType.SEARCH_TV))) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            searchData \u003d getSearchData(type);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            return searchData;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        datafromjson \u003d getData(filename);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        System.out.println(filename);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        JSONParser jsonParser \u003d new JSONParser();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        JSONObject jsonObject \u003d new JSONObject();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            jsonObject \u003d (JSONObject) jsonParser.parse(datafromjson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            searchData \u003d (JSONArray) jsonObject.get(KEYWORD_FOR_SEARCH_REQUESTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.SEVERE, PromptMessages.PARSE_EXCEPTION_IN_EXTRACTION);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            throw new ParseExceptionInExtraction();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return searchData;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for fetching the data from the file."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param filename The name of the file that consists the data."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return String that consists all the data fetched from the file."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @throws Exceptions when encounter a failed/interrupted I/O operation."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static String getData(String filename) throws Exceptions {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        logger.log(Level.INFO, PromptMessages.EXTRACTING_FROM_FILE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        InputStream inputStream \u003d OfflineSearchStorage.class.getResourceAsStream(filename);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        InputStreamReader inputStreamReader \u003d new InputStreamReader(inputStream);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        BufferedReader bufferedReader \u003d new BufferedReader(inputStreamReader);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String line \u003d \"\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String datafromjson \u003d \"\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                datafromjson +\u003d line;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            inputStreamReader.close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            inputStream.close();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.EXTRACTED_FROM_FILE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.WARNING, PromptMessages.IO_EXCEPTION_IN_OFFLINE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            throw new Exceptions(PromptMessages.IO_EXCEPTION_IN_OFFLINE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return datafromjson;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for obtaining and returning the appropriate filename for the respective search requests."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param type Type to specify the respective search request."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return appropriate filename that contains data for the respective search requests."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static String getFileName(RetrieveRequest.MoviesRequestType type) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String filename \u003d \"\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        case CURRENT_MOVIES:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            filename \u003d CURRENT_MOVIES_DATA_FILEPATH;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            ;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        case UPCOMING_MOVIES:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            filename \u003d UPCOMING_MOVIES_DATA_FILEPATH;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        case TRENDING_MOVIES:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            filename \u003d TRENDING_MOVIES_DATA_FILEPATH;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        case TOP_RATED_MOVIES:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            filename \u003d TOP_RATED_MOVIES_DATA_FILEPATH;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        case POPULAR_MOVIES:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            filename \u003d POPULAR_MOVIES_DATA_FILEPATH;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        case CURRENT_TV:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            filename \u003d CURRENT_TV_DATA_FILEPATH;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        case TRENDING_TV:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            filename \u003d TRENDING_TV_DATA_FILEPATH;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        case TOP_RATED_TV:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            filename \u003d TOP_RATED_TV_DATA_FILEPATH;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        case POPULAR_TV:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            filename \u003d POPULAR_TV_DATA_FILEPATH;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            filename \u003d \"\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return filename;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for fetching data for search by name request."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return JSONArray that consist of all the required data for the search request."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @throws Exceptions when encounter a failed/interrupted I/O operation."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static JSONArray getSearchData(RetrieveRequest.MoviesRequestType type) throws Exceptions {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        JSONArray searchResults \u003d new JSONArray();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String fileType \u003d \"\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        int maxFileNo \u003d 0;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (type.equals(RetrieveRequest.MoviesRequestType.SEARCH_MOVIES)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            fileType \u003d MOVIES_DATABASE_FILEPATH;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            maxFileNo \u003d MAX_FILE_NO_FOR_MOVIES;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            fileType \u003d TV_DATABASE_FILEPATH;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            maxFileNo \u003d MAX_FILE_NO_FOR_TV;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        logger.log(Level.INFO, PromptMessages.EXTRACTING_FROM_FILE);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d maxFileNo; i +\u003d 1) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            String filename \u003d fileType;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            filename +\u003d i + \".json\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            System.out.println(filename);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            String datafromjson \u003d getData(filename);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            JSONParser jsonParser \u003d new JSONParser();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            JSONArray jsonArray \u003d new JSONArray();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                jsonArray \u003d (JSONArray) jsonParser.parse(datafromjson);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                logger.log(Level.SEVERE, PromptMessages.PARSE_EXCEPTION_IN_EXTRACTION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                throw new ParseExceptionInExtraction();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            System.out.println(filename);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            for (int j \u003d 0; j \u003c jsonArray.size(); j +\u003d 1) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                JSONObject jsonObject \u003d (JSONObject) jsonArray.get(j);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                searchResults.add(jsonObject);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        logger.log(Level.INFO, PromptMessages.EXTRACTED_FROM_FILE);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return searchResults;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Riyas97": 172,
      "Pdotdeep": 11
    }
  },
  {
    "path": "src/main/java/entertainment/pro/ui/Controller.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * Abstract class that contains the basic parameters for controllers which is the window and application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public abstract class Controller {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    protected Stage stageWindow;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    protected Main mainApplication;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for setting the window for this controller."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "      */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void setWindow(Stage window) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        stageWindow \u003d window;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for setting the main application for this controller."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param application The main application to be set for this controller."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void setMainApplication(Main application) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        mainApplication \u003d application;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Riyas97": 27,
      "Pdotdeep": 1
    }
  },
  {
    "path": "src/main/java/entertainment/pro/ui/InfoController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": " * ui controller class for info fxml."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class InfoController {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private Label movieTitleLabel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private Label movieGenresLabel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private Label movieReleaseDateLabel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private Label movieRatingLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private Label movieSummaryLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private ImageView movieBackdropImageView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private AnchorPane anchorPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private GridPane movieGridPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private Label movieCastLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private Label movieCertLabel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for returning the title label."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return the title label."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public Label getMovieTitleLabel() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return movieTitleLabel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for returning the genres label."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return the genres label."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public Label getMovieGenresLabel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return movieGenresLabel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for returning the release date label."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return the release date label."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public Label getMovieReleaseDateLabel() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return movieReleaseDateLabel;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for returning the rating label."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return the rating label."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public Label getMovieRatingLabel() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return movieRatingLabel;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for returning the summary label."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return the summary label."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public Label getMovieSummaryLabel() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return movieSummaryLabel;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for returning the backdrop poster image."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return the backdrop poster image."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public ImageView getMovieBackdropImageView() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return movieBackdropImageView;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for returning the cast label."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return the cast label."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public Label getMovieCastLabel() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return movieCastLabel;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for returning the certification label."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return the certification label."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public Label getMovieCertLabel() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return movieCertLabel;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 102,
      "Pdotdeep": 1
    }
  },
  {
    "path": "src/main/java/entertainment/pro/ui/MovieHandler.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.strings.PromptMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.Exceptions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.EmptyCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.MissingInfoException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.InvalidFormatCommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.cinemarequesterapi.CinemaRetrieveRequest;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.contexts.CommandContext;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.contexts.ContextHelper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.contexts.SearchResultContext;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.execution.CommandStack;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.movierequesterapi.RequestListener;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.movierequesterapi.RetrieveRequest;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.model.MovieInfoObject;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.model.PageTracker;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.model.UserProfile;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.model.SearchProfile;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.model.Playlist;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.model.PlaylistMovieInfoObject;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.storage.user.Blacklist;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.storage.user.ProfileCommands;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.storage.utils.EditProfileJson;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.storage.utils.EditPlaylistJson;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.storage.utils.BlacklistStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.storage.utils.HelpStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import javafx.geometry.Orientation;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.parsers.CommandParser;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * This is main page of GUI."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class MovieHandler extends Controller implements RequestListener {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public ScrollPane moviesScrollPane;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    Label userAdultLabel2;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    Label sortAlphaOrderLabel;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    Label sortLatestDateLabel;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    Label sortHighestRatingLabel;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    Label userNameLabel;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    Label userAgeLabel;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private Label statusLabel;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private Label userPlaylistsLabel;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public Text autoCompleteText \u003d new Text();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public Text generalFeedbackText \u003d new Text();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private TextFlow genreListText;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public TextField searchTextField;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private ProgressBar progressBar;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(MovieHandler.class.getName());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private boolean isViewMoreInfoPage \u003d false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    UserProfile userProfile;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private ArrayList\u003cString\u003e playlists;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private String playlistName \u003d \"\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private PageTracker pageTracker \u003d new PageTracker();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public FlowPane moviesFlowPane \u003d new FlowPane();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private VBox playlistVBox \u003d new VBox();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static ArrayList\u003cMovieInfoObject\u003e mMovies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private double[] imagesLoadingProgress;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static RetrieveRequest mMovieRequest;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    private static CinemaRetrieveRequest mCinemaRequest;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private int index \u003d 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    static String command \u003d \"\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    ArrayList\u003cInteger\u003e genrePreference \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    ArrayList\u003cInteger\u003e genreRestriction \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    ArrayList\u003cString\u003e playlist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    boolean isAdultEnabled \u003d false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    boolean sortByAlphaOrder \u003d false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    boolean sortByRating \u003d false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    boolean sortByReleaseDate \u003d false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    boolean isMovie \u003d true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    String searchEntryName \u003d \"\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    String name \u003d \"\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    int age \u003d 0;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Initializes the Search Profile."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public SearchProfile searchProfile \u003d new SearchProfile(name, age, genrePreference, genreRestriction, isAdultEnabled,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            playlist, sortByAlphaOrder, sortByRating, sortByReleaseDate, searchEntryName, isMovie);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * Responsible for retrieving the Search Profile."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return Search Profile"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public SearchProfile getSearchProfile() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return searchProfile;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for returning the boolean status of isViewMoreInfo."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return The boolean status of isViewMoreInfo."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public boolean isViewMoreInfoPage() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return isViewMoreInfoPage;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * This function is called when JavaFx runtime when view is loaded."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for setting the components in the UI."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void setLabels() throws IOException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        logger.log(Level.INFO, PromptMessages.SETTING_LABELS_UI);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        EditProfileJson editProfileJson \u003d new EditProfileJson();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        userProfile \u003d editProfileJson.load();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        userNameLabel.setText(userProfile.getUserName());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        userAgeLabel.setText(Integer.toString(userProfile.getUserAge()));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        playlists \u003d userProfile.getPlaylistNames();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ProfileCommands command \u003d new ProfileCommands(userProfile);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        userPlaylistsLabel.setText(Integer.toString(userProfile.getPlaylistNames().size()));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        //setting adult label"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (command.getAdultLabel().equals(\"allow\")) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            userAdultLabel2.setStyle(\"-fx-text-fill: \\\"#48C9B0\\\";\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (command.getAdultLabel().equals(\"restrict\")) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            userAdultLabel2.setStyle(\"-fx-text-fill: \\\"#EC7063\\\";\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        userAdultLabel2.setText(command.getAdultLabel());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        //setting text for preference \u0026 restrictions"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        Text preferences \u003d new Text(command.convertToLabel(userProfile.getGenreIdPreference()));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        preferences.setFill(Paint.valueOf(\"#48C9B0\"));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        Text restrictions \u003d new Text(command.convertToLabel(userProfile.getGenreIdRestriction()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        restrictions.setFill(Paint.valueOf(\"#EC7063\"));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        genreListText.getChildren().clear();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        genreListText.getChildren().addAll(preferences, restrictions);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        genreListText.setLineSpacing(4);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        updateSortInterface(userProfile);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for calling JavaFX runtime when view is loaded."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void initialize() throws IOException, Exceptions {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        setLabels();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        mMovieRequest \u003d new RetrieveRequest(this);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        mMovieRequest.setSearchProfile(searchProfile);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        mCinemaRequest \u003d new CinemaRetrieveRequest(this);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        logger.setLevel(Level.ALL);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        logger.log(Level.INFO, \"MAIN UI INITIALISED\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        CommandContext.initialiseContext();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        BlacklistStorage bp \u003d new BlacklistStorage();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        bp.load();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        HelpStorage.initialiseAllHelp();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        setUpEventSearchField();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        mMovieRequest.beginSearchRequest(RetrieveRequest.MoviesRequestType.CURRENT_MOVIES);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        setEventsScrollPane();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for setting up the keypad events for search text field."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private void setUpEventSearchField() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        searchTextField.addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if (event.getCode() \u003d\u003d KeyCode.TAB) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                setAutoCompleteText(ContextHelper.getAllHints(searchTextField.getText(), this));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            } else if (event.getCode().equals(KeyCode.ALT_GRAPH) || event.getCode().equals(KeyCode.ALT)) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                searchTextField.clear();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                String cmd \u003d CommandStack.nextCommand();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                if (cmd \u003d\u003d null) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    setAutoCompleteText(\"You don\u0027t have any commands in history!\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    searchTextField.clear();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    searchTextField.setText(cmd);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                searchTextField.positionCaret(searchTextField.getText().length());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            } else if (event.getCode() \u003d\u003d KeyCode.ENTER) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                clearAutoCompleteFeedbackText();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                setGeneralFeedbackText(PromptMessages.WAIT_FOR_APP_TO_PROCESS);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                command \u003d searchTextField.getText();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    CommandParser.parseCommands(command, this);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                } catch (IOException | Exceptions e) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    logger.log(Level.SEVERE, \"Exception in parsing command\" + e);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                } catch (EmptyCommandException e) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    logger.log(Level.SEVERE, PromptMessages.MISSING_COMMAND + e);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    setGeneralFeedbackText(PromptMessages.MISSING_COMMAND);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                } catch (MissingInfoException e) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    setGeneralFeedbackText(PromptMessages.MISSING_ARGUMENTS);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                clearSearchTextField();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            } else if (event.getCode().equals(KeyCode.DOWN)) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                moviesScrollPane.requestFocus();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                moviesFlowPane.getChildren().get(0).setStyle(\"-fx-border-color: white\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        });"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        //Real time changes to text field"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        searchTextField.textProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            System.out.println(\"textfield changed from \" + oldValue + \" to \" + newValue);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        });"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        System.out.println(generalFeedbackText.getText());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for setting up keypad events for scrollpane."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void setEventsScrollPane() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        moviesScrollPane.setOnKeyPressed(new EventHandler\u003cKeyEvent\u003e() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            public void handle(KeyEvent event) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                if (event.getCode().equals(KeyCode.UP)) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    double num \u003d (double) moviesScrollPane.getVvalue();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    num *\u003d 10;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    if (num \u003d\u003d 0) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                        searchTextField.requestFocus();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    moviesFlowPane.getChildren().get(index).setStyle(\"-fx-border-color: black\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    index \u003d 0;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                } else if (event.getCode().equals(KeyCode.RIGHT)) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    if (pageTracker.getCurrentPage().equals(\"playlistList\")) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                        int size \u003d playlistVBox.getChildren().size();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                        if ((index + 1) !\u003d size) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                            playlistVBox.getChildren().get(index).requestFocus();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                            index +\u003d 1;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                            if (index !\u003d 0) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                                playlistVBox.getChildren().get(index - 1).setStyle(\"-fx-border-color: black\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                            playlistVBox.getChildren().get(index).setStyle(\"-fx-border-color: white\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                            if (index % 3 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                                moviesScrollPane.setVvalue((double) (index + 1) / size);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                        int size \u003d moviesFlowPane.getChildren().size();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                        if ((index + 1) !\u003d size) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                            moviesFlowPane.getChildren().get(index).requestFocus();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                            index +\u003d 1;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                            if (index !\u003d 0) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                                moviesFlowPane.getChildren().get(index - 1).setStyle(\"-fx-border-color: black\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                            moviesFlowPane.getChildren().get(index).setStyle(\"-fx-border-color: white\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                            if (index % 4 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                                moviesScrollPane.setVvalue((double) (index + 1) / size);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                } else if (event.getCode().equals(KeyCode.LEFT)) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    if (pageTracker.getCurrentPage().equals(\"playlistList\")) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                        if (index !\u003d 0) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                            playlistVBox.getChildren().get(index - 1).requestFocus();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                            index -\u003d 1;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                            playlistVBox.getChildren().get(index + 1).setStyle(\"-fx-border-color: black\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                            playlistVBox.getChildren().get(index).setStyle(\"-fx-border-color: white\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                            double size \u003d playlistVBox.getChildren().size();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                            if (index % 3 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                                moviesScrollPane.setVvalue((index + 1) / size);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                            searchTextField.requestFocus();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                            playlistVBox.getChildren().get(index).setStyle(\"-fx-border-color: black\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                        if (index !\u003d 0) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                            moviesFlowPane.getChildren().get(index - 1).requestFocus();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                            index -\u003d 1;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                            moviesFlowPane.getChildren().get(index + 1).setStyle(\"-fx-border-color: black\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                            moviesFlowPane.getChildren().get(index).setStyle(\"-fx-border-color: white\");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                            double size \u003d moviesFlowPane.getChildren().size();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                            if (index % 4 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                                moviesScrollPane.setVvalue((index + 1) / size);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                            searchTextField.requestFocus();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                            moviesFlowPane.getChildren().get(index).setStyle(\"-fx-border-color: black\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                } else if (event.getCode().equals(KeyCode.ENTER)) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                        switch (pageTracker.getCurrentPage()) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                            case \"mainPage\":"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                                showMovie(index);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                            case \"playlistInfo\":"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                                Playlist playlist1 \u003d new EditPlaylistJson(playlistName).load();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                                playlistMoviePosterClicked(playlist1.getMovies().get(index));"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                            case \"playlistList\":"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                                Playlist playlist2 \u003d new EditPlaylistJson(playlists.get(index)).load();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                                playlistPaneClicked(playlist2);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                            default:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    } catch (Exceptions | IOException exceptions) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                        exceptions.printStackTrace();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    index \u003d 0;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * This function is called to print message in UI when data for the movies/tv shows has been fetched from the API."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param message String to be printed."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void requestCompleted(String message) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        setGeneralFeedbackText(message);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * This function is called to print message in UI when data for the"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * movies/tv shows has been fetched from the local files."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param message String to be printed."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void requestTimedOut(String message) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        setGeneralFeedbackText(message);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * This function is called to print message in UI when no results is found."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void emptyResults() {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        setGeneralFeedbackText(PromptMessages.NO_RESULTS_FOUND);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for filtering the search results to remove blacklist items."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param moviesInfo ArrayList containing all the seacrh results."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void obtainedResultsData(ArrayList\u003cMovieInfoObject\u003e moviesInfo) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        isViewMoreInfoPage \u003d false;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        logger.log(Level.INFO, PromptMessages.REMOVE_BLACLISTED_ITEMS_FROM_SEARCH);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ArrayList\u003cMovieInfoObject\u003e filteredMovies \u003d Blacklist.filter(moviesInfo);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        final ArrayList\u003cMovieInfoObject\u003e MoviesFinal \u003d filteredMovies;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        mMovies.clear();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        System.out.println(\"cleared\");"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        SearchResultContext.addResults(MoviesFinal);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        mMovies \u003d MoviesFinal;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            displayItems();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (Exceptions exceptions) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            exceptions.printStackTrace();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for displaying the search results in the UI."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @throws Exceptions when there is nothing to show."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void displayItems() throws Exceptions {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (mMovies.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            setGeneralFeedbackText(PromptMessages.VIEW_BACK_FAILURE);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            throw new Exceptions(PromptMessages.VIEW_BACK_FAILURE);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (isViewMoreInfoPage) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            setGeneralFeedbackText(PromptMessages.VIEW_BACK_SUCCESS);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            isViewMoreInfoPage \u003d false;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        imagesLoadingProgress \u003d new double[mMovies.size()];"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                buildMoviesFlowPane(mMovies);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                pageTracker.setToMainPage();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            } catch (Exceptions exceptions) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                exceptions.printStackTrace();"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * This function initalizes the progress bar and extracts movie posters fro every movie."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param movies is a array containing details about every movie/tv show that is being displayed."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private void buildMoviesFlowPane(ArrayList\u003cMovieInfoObject\u003e movies) throws Exceptions {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        // Setup progress bar and status label"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        progressBar.setProgress(0.0);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        progressBar.setVisible(true);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        statusLabel.setText(\"Loading..\");"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        moviesFlowPane \u003d new FlowPane(Orientation.HORIZONTAL);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        moviesFlowPane.setHgap(4);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        moviesFlowPane.setVgap(10);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        moviesFlowPane.setPadding(new Insets(10, 8, 4, 8));"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        moviesFlowPane.prefWrapLengthProperty().bind(moviesScrollPane.widthProperty());   // bind to scroll pane width"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        //mMoviesFlowPane.getChildren().add(generalFeedbackLabel);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        for (int i \u003d 0; i \u003c movies.size(); i++) {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            AnchorPane posterPane \u003d buildMoviePosterPane(movies.get(i), i + 1);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            moviesFlowPane.getChildren().add(posterPane);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        moviesScrollPane.setFitToWidth(true);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        moviesScrollPane.setContent(moviesFlowPane);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        moviesScrollPane.setVvalue(0);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Reponsible for building the movie posters in the UI."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param movie a object that contains information about a movie"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param index a unique number assigned to every movie/tv show that is being displayed."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @return Anchorpane consisting of the movie poster, name and the unique id."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private AnchorPane buildMoviePosterPane(MovieInfoObject movie, int index) throws Exceptions {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            FXMLLoader loader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            loader.setLocation(getClass().getClassLoader().getResource(\"MoviePoster.fxml\"));"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            AnchorPane posterView \u003d loader.load();"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            //posterView.setOnScroll();"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            posterView.setOnMouseClicked((mouseEvent) -\u003e {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    moviePosterClicked(movie);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                } catch (Exceptions exceptions) {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    exceptions.printStackTrace();"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            });"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            // set the movie info"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            MoviePosterController controller \u003d loader.getController();"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                if (movie.getFullPosterPathInfo() !\u003d null) {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    Image posterImage \u003d new Image(movie.getFullPosterPathInfo(), true);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    posterImage.progressProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                            updateProgressBar(movie, newValue.doubleValue());"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                        } catch (Exceptions exceptions) {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                            exceptions.printStackTrace();"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    });"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    controller.getPosterImageView().setImage(posterImage);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    File fakePoster \u003d new File(\"./data/FakeMoviePoster.png\");"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    Image posterImage \u003d new Image(fakePoster.toURI().toString());"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    posterImage.progressProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                        try {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                            updateProgressBar(movie, newValue.doubleValue());"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                        } catch (Exceptions exceptions) {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                            exceptions.printStackTrace();"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    });"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    controller.getPosterImageView().setImage(posterImage);"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            } catch (NullPointerException ex) {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                ex.printStackTrace();"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            controller.getMovieTitleLabel().setText(movie.getTitle());"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            controller.getMovieNumberLabel().setText(Integer.toString(index));"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            return posterView;"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            //Ui.printLine();"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * This function updates the progress bar as the movie poster is being displayed."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param movie    Object that contains all the information about a particular movie."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param progress contains the progress value."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private void updateProgressBar(MovieInfoObject movie, double progress) throws Exceptions {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        // update the progress for that movie in the array"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        int index \u003d mMovies.indexOf(movie);"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (index \u003e\u003d 0) {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            imagesLoadingProgress[index] \u003d progress;"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        double currentTotalProgress \u003d 0.0;"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        for (double value : imagesLoadingProgress) {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            currentTotalProgress +\u003d value;"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        progressBar.setProgress((currentTotalProgress / mMovies.size()));"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (currentTotalProgress \u003e\u003d mMovies.size()) {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            progressBar.setVisible(false);"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            statusLabel.setText(\"\");"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Responsible for displaying more information about a movie/TV show item."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @param num the movie/TV show item that user want to know mpre information about."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * @throws Exceptions when user enter an invalid command."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void showMovie(int num) throws Exceptions {"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            MovieInfoObject movie \u003d mMovies.get(num - 1);"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            moviePosterClicked(movie);"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            logger.log(Level.WARNING, PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            setGeneralFeedbackText(PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            throw new InvalidFormatCommandException(PromptMessages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private void buildPlaylistVBox(ArrayList\u003cString\u003e playlists) throws IOException {"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        // Setup progress bar and status label"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        progressBar.setProgress(0.0);"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        progressBar.setVisible(true);"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        statusLabel.setText(\"Loading..\");"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        playlistVBox.getChildren().clear();"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        moviesScrollPane.setHvalue(0.5);"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        moviesScrollPane.setVvalue(0.5);"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        if (playlists.isEmpty()) {"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            Label emptyLabel \u003d new Label(\"u do not have any playlist currently :( \""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    + \"\\n try making some using command: playlist create \u003cplaylist name\u003e\");"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            playlistVBox.getChildren().add(emptyLabel);"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            for (String log : playlists) {"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                Playlist playlist \u003d new EditPlaylistJson(log).load();"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                AnchorPane playlistPane \u003d buildPlaylistPane(playlist, count);"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                playlistVBox.getChildren().add(playlistPane);"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        moviesScrollPane.setContent(playlistVBox);"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        moviesScrollPane.setVvalue(0);"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        pageTracker.setToPlaylistList();"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private AnchorPane buildPlaylistPane(Playlist playlist, int i) {"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            FXMLLoader loader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            loader.setLocation(getClass().getClassLoader().getResource(\"PlaylistPane.fxml\"));"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            AnchorPane playlistPane \u003d loader.load();"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            playlistPane.setOnMouseClicked((mouseEvent) -\u003e {"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                playlistPaneClicked(playlist);"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            });"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            // set the movie info"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            PlaylistController controller \u003d loader.getController();"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            controller.setVBoxColour(i);"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            controller.setTextColour();"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            controller.getPlaylistNameLabel().setText(playlist.getPlaylistName());"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (playlist.getDescription().trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                controller.getPlaylistDescriptionLabel().setText(\"*this playlist does not have a description :(*\");"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                controller.getPlaylistDescriptionLabel().setText(playlist.getDescription());"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            controller.getPlaylistMoviesLabel()"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    .setText(\"No. of movies: \" + Integer.toString(playlist.getMovies().size()));"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            return playlistPane;"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            ex.printStackTrace();"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private void playlistPaneClicked(Playlist playlist) {"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        buildPlaylistInfo(playlist);"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        playlistName \u003d playlist.getPlaylistName();"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        mMovies \u003d convert(playlist.getMovies());"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private void buildPlaylistInfo(Playlist playlist) {"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            FXMLLoader loader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            loader.setLocation(getClass().getClassLoader().getResource(\"PlaylistInfo.fxml\"));"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            AnchorPane playlistPane \u003d loader.load();"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            PlaylistInfoController controller \u003d loader.getController();"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            controller.getPlaylistNameLabel().setText(playlist.getPlaylistName());"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (playlist.getDescription().trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                controller.getPlaylistDescriptionLabel().setStyle(\"-fx-font-style: italic\");"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                controller.getPlaylistDescriptionLabel().setText(\"*this playlist does not have a description :(*\");"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                controller.getPlaylistDescriptionLabel().setText(playlist.getDescription());"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (playlist.getMovies().size() !\u003d 0) {"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                controller.getPlaylistInfoVBox().getChildren().add(buildPlaylistMoviesFlowPane(playlist.getMovies()));"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                Label emptyMoviesLabel \u003d new Label(playlist.getPlaylistName() + \" does not contain any movies :(\");"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                controller.getPlaylistInfoVBox().getChildren().add(2, emptyMoviesLabel);"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            moviesScrollPane.setContent(controller.getPlaylistInfoVBox());"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            pageTracker.setToPlaylistInfo();"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private FlowPane buildPlaylistMoviesFlowPane(ArrayList\u003cPlaylistMovieInfoObject\u003e movies) {"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        // Setup progress bar and status label"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        progressBar.setProgress(0.0);"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        progressBar.setVisible(true);"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        statusLabel.setText(\"Loading..\");"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        mMovies \u003d convert(movies);"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        moviesFlowPane \u003d new FlowPane(Orientation.HORIZONTAL);"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        moviesFlowPane.setHgap(4);"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        moviesFlowPane.setVgap(10);"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        moviesFlowPane.setPadding(new Insets(10, 8, 4, 8));"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        moviesFlowPane.prefWrapLengthProperty().bind(moviesScrollPane.widthProperty());   // bind to scroll pane width"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (int i \u003d 0; i \u003c movies.size(); i++) {"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            AnchorPane posterPane \u003d buildPlaylistMoviePosterPane(movies.get(i), i + 1);"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            moviesFlowPane.getChildren().add(posterPane);"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return moviesFlowPane;"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private AnchorPane buildPlaylistMoviePosterPane(MovieInfoObject movie, int index) {"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            FXMLLoader loader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            loader.setLocation(getClass().getClassLoader().getResource(\"MoviePoster.fxml\"));"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            AnchorPane posterView \u003d loader.load();"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            //posterView.setOnScroll();"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            posterView.setOnMouseClicked((mouseEvent) -\u003e {"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    playlistMoviePosterClicked(movie);"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                } catch (Exceptions exceptions) {"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    exceptions.printStackTrace();"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            });"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            // set the movie info"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            MoviePosterController controller \u003d loader.getController();"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                Image posterImage \u003d new Image(\"/images/FakeMoviePoster.png\");"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                posterImage.progressProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                        updateProgressBar(movie, newValue.doubleValue());"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    } catch (Exceptions exceptions) {"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                        exceptions.printStackTrace();"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                });"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                controller.getPosterImageView().setImage(posterImage);"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            } catch (NullPointerException ex) {"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                ex.printStackTrace();"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            controller.getMovieTitleLabel().setText(movie.getTitle());"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            controller.getMovieNumberLabel().setText(Integer.toString(index));"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            return posterView;"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            //Ui.printLine();"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Shows playlists."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @@author nwenhui"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void showPlaylistList() throws IOException {"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        playlist \u003d userProfile.getPlaylistNames();"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        buildPlaylistVBox(playlists);"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private ArrayList\u003cMovieInfoObject\u003e convert(ArrayList\u003cPlaylistMovieInfoObject\u003e toConvert) {"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ArrayList\u003cMovieInfoObject\u003e converted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        boolean isMovie \u003d false;"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (PlaylistMovieInfoObject log : toConvert) {"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            converted.add(new MovieInfoObject(log.getId(), log.getTitle(),"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    isMovie, log.getReleaseDateInfo(), log.getSummaryInfo(), log.getFullPosterPathInfo(),"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    log.getFullBackdropPathInfo(), log.getRatingInfo(), log.getGenreIdInfo(),"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    log.isAdultContent()));"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return converted;"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * This function is called when the user wants to see more information about a movie."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param movie Object that contains all the informations about a movie/TV show."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void moviePosterClicked(MovieInfoObject movie) throws Exceptions {"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            //mMainApplication.transitToMovieInfoController(movie);"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            logger.log(Level.INFO, PromptMessages.DISPLAYING_MORE_INFO);"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            moviesFlowPane.getChildren().clear();"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            moviesFlowPane \u003d new FlowPane(Orientation.HORIZONTAL);"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            moviesFlowPane.setHgap(4);"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            moviesFlowPane.setVgap(10);"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            moviesFlowPane.setPadding(new Insets(10, 8, 4, 8));"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            moviesFlowPane.prefWrapLengthProperty().bind(moviesScrollPane.widthProperty());"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            FXMLLoader loader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            loader.setLocation(getClass().getClassLoader().getResource(\"MoreInfo.fxml\"));"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            //AnchorPane posterView \u003d loader.load();"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            InfoController controller \u003d loader.getController();"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            controller.getMovieTitleLabel().setText(movie.getTitle());"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            controller.getMovieRatingLabel().setText(String.format(\"%.2f\", movie.getRatingInfo()));"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (movie.getReleaseDateInfo() !\u003d null) {"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                Date date \u003d movie.getReleaseDateInfo();"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                calendar.setTime(date);"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                String printDate \u003d new SimpleDateFormat(\"dd/MM/yyyy\").format(date);"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                controller.getMovieReleaseDateLabel().setText(printDate);"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                controller.getMovieReleaseDateLabel().setText(\"N/A\");"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                Image posterImage \u003d new Image(movie.getFullBackdropPathInfo(), true);"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                controller.getMovieBackdropImageView().setImage(posterImage);"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            } catch (NullPointerException ex) {"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                ex.printStackTrace();"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            controller.getMovieSummaryLabel().setText(movie.getSummaryInfo());"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            mMovieRequest.beginMoreInfoRequest(movie);"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ArrayList\u003cString\u003e castStrings \u003d movie.getCastInfo();"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            String cast \u003d \"\";"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            for (int i \u003d 0; i \u003c castStrings.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                cast +\u003d castStrings.get(i);"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                cast +\u003d \", \";"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            controller.getMovieCastLabel().setText(cast);"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            controller.getMovieCertLabel().setText(movie.getCertInfo());"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ArrayList\u003cLong\u003e genres \u003d movie.getGenreIdInfo();"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            String genreText \u003d \"\";"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            for (int i \u003d 0; i \u003c genres.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                Long getGenre \u003d genres.get(i);"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                int convertGenre \u003d getGenre.intValue();"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                String genreAdd \u003d ProfileCommands.findGenreName(convertGenre);"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                if (!genreAdd.equals(\"0\")) {"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    genreText +\u003d ProfileCommands.findGenreName(convertGenre);"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                if (i !\u003d genres.size() - 1) {"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    genreText +\u003d \", \";"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            AnchorPane posterView \u003d loader.load();"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            controller.getMovieGenresLabel().setText(genreText);"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            moviesFlowPane.getChildren().add(posterView);"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            moviesScrollPane.setContent(moviesFlowPane);"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            moviesScrollPane.setVvalue(0);"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            setGeneralFeedbackText(PromptMessages.TO_VIEW_BACK_SEARCHES);"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            isViewMoreInfoPage \u003d true;"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            clearAutoCompleteFeedbackText();"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * This function is called when the user wants to see more information about a movie."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void playlistMoviePosterClicked(MovieInfoObject movie) throws Exceptions {"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            FXMLLoader loader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            loader.setLocation(getClass().getClassLoader().getResource(\"PlaylistMoreInfo.fxml\"));"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            AnchorPane posterView \u003d loader.load();"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            PlaylistMovieController controller \u003d loader.getController();"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            controller.getMovieTitleLabel().setText(movie.getTitle());"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            controller.getMovieRatingLabel().setText(String.format(\"%.2f\", movie.getRatingInfo()));"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (movie.getReleaseDateInfo() !\u003d null) {"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                Date date \u003d movie.getReleaseDateInfo();"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                calendar.setTime(date);"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                String printDate \u003d new SimpleDateFormat(\"dd/MM/yyyy\").format(date);"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                controller.getMovieDateLabel().setText(printDate);"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                controller.getMovieDateLabel().setText(\"N/A\");"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            Text summaryText \u003d new Text(movie.getSummaryInfo());"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            controller.getMovieSummaryLabel().setText(movie.getSummaryInfo());"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ArrayList\u003cLong\u003e genreList \u003d movie.getGenreIdInfo();"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            String genres \u003d \"\";"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            for (int i \u003d 0; i \u003c genreList.size(); i++) {"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                if (genreList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    genres \u003d \"no genres\";"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                if (i !\u003d genreList.size() - 1) {"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    genres +\u003d ProfileCommands.findGenreName(genreList.get(i).intValue());"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    genres +\u003d \" , \";"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    genres +\u003d ProfileCommands.findGenreName(genreList.get(i).intValue());"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            controller.getMovieGenresLabel().setText(genres);"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            moviesScrollPane.setContent(controller.getPlaylistMovieInfoAnchorPane());"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            //mMoviesFlowPane.getChildren().add(posterView);"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            // mMoviesScrollPane.setContent(mMoviesFlowPane);"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            moviesScrollPane.setVvalue(0);"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            pageTracker.setToPlaylistMovieInfo();"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * This function clears the search text field when called."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void clearSearchTextField() {"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        searchTextField.setText(\"\");"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * This function is called to update the search text field."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param updateStr The string to be written in the search text field."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void updateTextField(String updateStr) {"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        searchTextField.setText(searchTextField.getText() + updateStr);"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        searchTextField.positionCaret(searchTextField.getText().length());"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * Sets text in the UI under generalFeedbackText."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param txt The text to be printed."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void setGeneralFeedbackText(String txt) {"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        generalFeedbackText.setText(txt + \"\\n\");"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * Clears the text displayed under the generalFeedbackText."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void clearGeneralFeedbackText() {"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        generalFeedbackText.setText(\"\");"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * CLears the text stored under the autoCompleteText."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void clearAutoCompleteFeedbackText() {"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        autoCompleteText.setText(\"Press \u0027tab\u0027 to enable/view auto-complete options available for you...\");"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void setAutoCompleteText(String text) {"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        autoCompleteText.setText(text);"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * Updates the text in the autoCompleteText component in the UI."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param txtArr The text to be writen in the autoCompleteText."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void setAutoCompleteText(ArrayList\u003cString\u003e txtArr) {"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        Set\u003cString\u003e hashSet \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (String s : txtArr) {"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            hashSet.add(s);"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (String s:hashSet) {"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            output +\u003d s;"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            output +\u003d \"\\n\";"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        autoCompleteText.setText(output);"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * Retrieves the RetrieveRequest class."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @return the RetrieveRequest class."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public RetrieveRequest getApiRequester() {"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return mMovieRequest;"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * Retrieves the cinemaRetrieveRequest class."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @return the cinemaRetrieveRequest class"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public CinemaRetrieveRequest getCinemaApiRequester() {"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return mCinemaRequest;"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * Retrieves the Command class."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @return the Command class"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public static String getCommands() {"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * Retrieves the UserProfile class."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @return the UserProfile class"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public UserProfile getUserProfile() {"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return userProfile;"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * Retrieves the Arraylist of the movie objects to be displayed in the UI."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @return The Arraylist of the movie objects to be displayed in the UI."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public ArrayList\u003cMovieInfoObject\u003e getmMovies() {"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return mMovies;"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * Called to set the search profile for a particular search request."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param searchProfile The search profile for a particular search request."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void setSearchProfile(SearchProfile searchProfile) {"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        mMovieRequest.setSearchProfile(searchProfile);"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * Called to update the user\u0027s preferred sort label."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private void updateSortInterface(UserProfile userProfile) {"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        logger.log(Level.INFO, PromptMessages.UPDATING_SORT_IN_UI);"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (userProfile.isSortByAlphabetical()) {"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            sortAlphaOrderLabel.setText(\"Y\");"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            sortLatestDateLabel.setText(\"N\");"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            sortHighestRatingLabel.setText(\"N\");"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } else if (userProfile.isSortByLatestRelease()) {"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            sortAlphaOrderLabel.setText(\"N\");"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            sortLatestDateLabel.setText(\"Y\");"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            sortHighestRatingLabel.setText(\"N\");"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } else if (userProfile.isSortByHighestRating()) {"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            sortAlphaOrderLabel.setText(\"N\");"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            sortLatestDateLabel.setText(\"N\");"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            sortHighestRatingLabel.setText(\"Y\");"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            sortAlphaOrderLabel.setText(\"N\");"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            sortLatestDateLabel.setText(\"N\");"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            sortHighestRatingLabel.setText(\"N\");"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void setPlaylistName(String name) {"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        playlistName \u003d name;"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public String getPlaylistName() {"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return playlistName;"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * Called to refresh the gui page so it reflects user\u0027s changes."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void refresh() throws IOException {"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        userProfile \u003d new EditProfileJson().load();"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        playlists \u003d userProfile.getPlaylistNames();"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        switch (pageTracker.getCurrentPage()) {"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        case \"playlistList\":"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            EditProfileJson editProfileJson \u003d new EditProfileJson();"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            buildPlaylistVBox(editProfileJson.load().getPlaylistNames());"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        case \"playlistInfo\":"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            EditPlaylistJson editPlaylistJson \u003d new EditPlaylistJson(playlistName);"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            buildPlaylistInfo(editPlaylistJson.load());"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public PageTracker getPageTracker() {"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return pageTracker;"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to go back to playlist info page from playlistmovieinfo page."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void backToPlaylistInfo() throws IOException {"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (pageTracker.isPlaylistMovieInfo()) {"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            pageTracker.setToPlaylistInfo();"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            refresh();"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hotspur1997": 2,
      "Riyas97": 461,
      "Pdotdeep": 37,
      "nwenhui": 518
    }
  },
  {
    "path": "src/main/java/entertainment/pro/ui/MoviePosterController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " * Controller to get and set parameters in the MoviePoster View."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class MoviePosterController {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private Label movieTitleLabel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private ImageView moviePosterImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private Label movieNumberLabel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public Label getMovieTitleLabel() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return movieTitleLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void setMovieTitleLabel(Label movieTitleLabel) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        movieTitleLabel \u003d movieTitleLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public ImageView getPosterImageView() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return moviePosterImageView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void setPosterImageView(ImageView posterImageView) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        posterImageView \u003d posterImageView;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public Label getMovieNumberLabel() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return movieNumberLabel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 39
    }
  },
  {
    "path": "src/main/java/entertainment/pro/ui/PlaylistController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "package entertainment.pro.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "public class PlaylistController {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private Label playlistNameLabel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private Label playlistDescriptionLabel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private Label playlistMoviesLabel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private VBox individualPlaylistVBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private final String colour1 \u003d \"#B0E0E6\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private final String colour2 \u003d \"#D8BFD8\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public Label getPlaylistNameLabel() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return playlistNameLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void setPlaylistNameLabel(Label playlistNameLabel) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.playlistNameLabel \u003d playlistNameLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public Label getPlaylistDescriptionLabel() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return playlistDescriptionLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void setPlaylistDescriptionLabel(Label playlistDescriptionLabel) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.playlistDescriptionLabel \u003d playlistDescriptionLabel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public Label getPlaylistMoviesLabel() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return playlistMoviesLabel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void setPlaylistMoviesLabel(Label playlistMoviesLabel) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.playlistMoviesLabel \u003d playlistMoviesLabel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to set the VBox background colour."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void setVBoxColour(int i) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (i % 2 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            individualPlaylistVBox.setStyle(\"-fx-background-color: \" + colour1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            individualPlaylistVBox.setStyle(\"-fx-background-color: \" + colour2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * to set the text colour in VBox."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void setTextColour() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        playlistNameLabel.setStyle(\"-fx-text-fill: #000000; -fx-font-weight: bold; -fx-font-size: 15\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        playlistDescriptionLabel.setStyle(\"-fx-text-fill: #000000\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        playlistMoviesLabel.setStyle(\"-fx-text-fill: #000000\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwenhui": 66
    }
  },
  {
    "path": "src/main/java/entertainment/pro/ui/PlaylistInfoController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "package entertainment.pro.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "public class PlaylistInfoController {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private Label playlistNameLabel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private Label playlistDescriptionLabel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private VBox playlistInfoVBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public Label getPlaylistNameLabel() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return playlistNameLabel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void setPlaylistNameLabel(Label playlistNameLabel) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.playlistNameLabel \u003d playlistNameLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public Label getPlaylistDescriptionLabel() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return playlistDescriptionLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void setPlaylistDescriptionLabel(Label playlistDescriptionLabel) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.playlistDescriptionLabel \u003d playlistDescriptionLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public VBox getPlaylistInfoVBox() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return playlistInfoVBox;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void setPlaylistInfoVBox(VBox playlistInfoVBox) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.playlistInfoVBox \u003d playlistInfoVBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwenhui": 39
    }
  },
  {
    "path": "src/main/java/entertainment/pro/ui/PlaylistMovieController.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "package entertainment.pro.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "public class PlaylistMovieController {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private Label movieTitleLabel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private Label movieGenresLabel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private Label movieDateLabel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private Label movieRatingLabel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private Label movieSummaryLabel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private AnchorPane playlistMovieInfoAnchorPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public Label getMovieTitleLabel() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return movieTitleLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void setMovieTitleLabel(Label movieTitleLabel) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.movieTitleLabel \u003d movieTitleLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public Label getMovieGenresLabel() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return movieGenresLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void setMovieGenresLabel(Label movieGenresLabel) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.movieGenresLabel \u003d movieGenresLabel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public Label getMovieDateLabel() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return movieDateLabel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void setMovieDateLabel(Label movieDateLabel) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.movieDateLabel \u003d movieDateLabel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public Label getMovieRatingLabel() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return movieRatingLabel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void setMovieRatingLabel(Label movieRatingLabel) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.movieRatingLabel \u003d movieRatingLabel;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public Label getMovieSummaryLabel() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return movieSummaryLabel;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void setMovieSummaryLabel(Label movieSummaryLabel) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.movieSummaryLabel \u003d movieSummaryLabel;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public AnchorPane getPlaylistMovieInfoAnchorPane() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return playlistMovieInfoAnchorPane;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void setPlaylistMovieInfoAnchorPane(AnchorPane playlistMovieInfoAnchorPane) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.playlistMovieInfoAnchorPane \u003d playlistMovieInfoAnchorPane;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwenhui": 68
    }
  },
  {
    "path": "src/main/java/entertainment/pro/ui/PlaylistUi.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "package entertainment.pro.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.commons.exceptions.Exceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.model.MovieInfoObject;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.model.Playlist;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.model.PlaylistMovieInfoObject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.storage.utils.EditPlaylistJson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.storage.user.ProfileCommands;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import javafx.geometry.Orientation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "public class PlaylistUi {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private String playlistName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private ArrayList\u003cString\u003e playlists;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public PlaylistUi(String playlistName, ArrayList\u003cString\u003e playlists) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.playlistName \u003d playlistName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        this.playlists \u003d playlists;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public Node getPlaylistScrollPaneContent() throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return buildPlaylistVBox(playlists);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private VBox buildPlaylistVBox(ArrayList\u003cString\u003e playlists) throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        VBox playlistVBox \u003d new VBox();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (playlists.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            Label emptyLabel \u003d new Label(\"u do not have any playlist currently :( \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    + \"\\n try making some using command: playlist create \u003cplaylist name\u003e\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            playlistVBox.getChildren().add(emptyLabel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            for (String log : playlists) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                Playlist playlist \u003d new EditPlaylistJson(log).load();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                System.out.println(playlist.getPlaylistName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                System.out.println(playlist.getMovies().size());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                AnchorPane playlistPane \u003d buildPlaylistPane(playlist, count);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                playlistVBox.getChildren().add(playlistPane);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                count++;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return playlistVBox;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private AnchorPane buildPlaylistPane(Playlist playlist, int i) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            FXMLLoader loader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            loader.setLocation(getClass().getClassLoader().getResource(\"PlaylistPane.fxml\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            AnchorPane playlistPane \u003d loader.load();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            playlistPane.setOnMouseClicked((mouseEvent) -\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                playlistPaneClicked(playlist);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            });"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            // set the movie info"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            PlaylistController controller \u003d loader.getController();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            controller.setVBoxColour(i);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            controller.setTextColour();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            controller.getPlaylistNameLabel().setText(playlist.getPlaylistName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (playlist.getDescription().trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                controller.getPlaylistDescriptionLabel().setText(\"*this playlist does not have a description :(*\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                controller.getPlaylistDescriptionLabel().setText(playlist.getDescription());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            controller.getPlaylistMoviesLabel()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    .setText(\"No. of movies: \" + Integer.toString(playlist.getMovies().size()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            System.out.println(\"no lei here\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            return playlistPane;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            //Ui.printLine();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        System.out.println(\"fk lah here\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private VBox playlistPaneClicked(Playlist playlist) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        playlistName \u003d playlist.getPlaylistName();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return buildPlaylistInfo(playlist);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * builds playlist info."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @param playlist playlist to be built"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     * @return Vbox"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public VBox buildPlaylistInfo(Playlist playlist) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            FXMLLoader loader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            loader.setLocation(getClass().getClassLoader().getResource(\"PlaylistInfo.fxml\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            AnchorPane playlistPane \u003d loader.load();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            PlaylistInfoController controller \u003d loader.getController();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            controller.getPlaylistNameLabel().setText(playlist.getPlaylistName());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (playlist.getDescription().trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                controller.getPlaylistDescriptionLabel().setStyle(\"-fx-font-style: italic\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                controller.getPlaylistDescriptionLabel().setText(\"*this playlist does not have a description :(*\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                controller.getPlaylistDescriptionLabel().setText(playlist.getDescription());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (playlist.getMovies().size() !\u003d 0) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                controller.getPlaylistInfoVBox().getChildren().add(buildPlaylistMoviesFlowPane(playlist.getMovies()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                Label emptyMoviesLabel \u003d new Label(playlist.getPlaylistName() + \" does not contain any movies :(\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                controller.getPlaylistInfoVBox().getChildren().add(2, emptyMoviesLabel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            return controller.getPlaylistInfoVBox();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private FlowPane buildPlaylistMoviesFlowPane(ArrayList\u003cPlaylistMovieInfoObject\u003e movies) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        //Setup progress bar and status label"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        //mProgressBar.setProgress(0.0);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        //mProgressBar.setVisible(true);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        //mStatusLabel.setText(\"Loading..\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        //mMovies \u003d convert(movies);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        FlowPane flowPane \u003d new FlowPane(Orientation.HORIZONTAL);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        flowPane.setHgap(4);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        flowPane.setVgap(10);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        flowPane.setPadding(new Insets(10, 8, 4, 8));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        flowPane.setPrefWidth(510);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (int i \u003d 0; i \u003c movies.size(); i++) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            AnchorPane posterPane \u003d buildPlaylistMoviePosterPane(movies.get(i), i + 1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            flowPane.getChildren().add(posterPane);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return flowPane;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private AnchorPane buildPlaylistMoviePosterPane(MovieInfoObject movie, int index) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            FXMLLoader loader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            loader.setLocation(getClass().getClassLoader().getResource(\"MoviePoster.fxml\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            AnchorPane posterView \u003d loader.load();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            //posterView.setOnScroll();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            posterView.setOnMouseClicked((mouseEvent) -\u003e {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    playlistMoviePosterClicked(movie);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                } catch (Exceptions exceptions) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    exceptions.printStackTrace();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            });"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            // set the movie info"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            MoviePosterController controller \u003d loader.getController();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                Image posterImage \u003d new Image(\"/images/FakeMoviePoster.png\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                //posterImage.progressProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                //updateProgressBar(index, size);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                //updateProgressLabel(index, size);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                //});"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                controller.getPosterImageView().setImage(posterImage);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            } catch (NullPointerException ex) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                System.out.print(ex.toString());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            controller.getMovieTitleLabel().setText(movie.getTitle());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            controller.getMovieNumberLabel().setText(Integer.toString(index));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            return posterView;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            //Ui.printLine();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * Tis function is called when the user wants to see more information about a movie."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private AnchorPane playlistMoviePosterClicked(MovieInfoObject movie) throws Exceptions {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            FXMLLoader loader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            loader.setLocation(getClass().getClassLoader().getResource(\"PlaylistMoreInfo.fxml\"));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            AnchorPane posterView \u003d loader.load();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            PlaylistMovieController controller \u003d loader.getController();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            controller.getMovieTitleLabel().setText(movie.getTitle());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            controller.getMovieRatingLabel().setText(String.format(\"%.2f\", movie.getRatingInfo()));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            if (movie.getReleaseDateInfo() !\u003d null) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                Date date \u003d movie.getReleaseDateInfo();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                calendar.setTime(date);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                String printDate \u003d new SimpleDateFormat(\"dd/MM/yyyy\").format(date);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                controller.getMovieDateLabel().setText(printDate);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                controller.getMovieDateLabel().setText(\"N/A\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            controller.getMovieSummaryLabel().setText(movie.getSummaryInfo());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ArrayList\u003cLong\u003e genreList \u003d movie.getGenreIdInfo();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            String genres \u003d \"\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            for (int i \u003d 0; i \u003c genreList.size(); i++) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                if (genreList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    genres \u003d \"no genres\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                if (i !\u003d genreList.size() - 1) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    genres +\u003d ProfileCommands.findGenreName(genreList.get(i).intValue());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    genres +\u003d \" , \";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    genres +\u003d ProfileCommands.findGenreName(genreList.get(i).intValue());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            controller.getMovieGenresLabel().setText(genres);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            //            mMoviesScrollPane.setContent(controller.getPlaylistMovieInfoAnchorPane());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            //            mMoviesScrollPane.setVvalue(0);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            //            pageTracker.setToPlaylistMovieInfo();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            return controller.getPlaylistMovieInfoAnchorPane();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private ArrayList\u003cMovieInfoObject\u003e convert(ArrayList\u003cPlaylistMovieInfoObject\u003e toConvert) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ArrayList\u003cMovieInfoObject\u003e converted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        boolean isMovie \u003d false;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (PlaylistMovieInfoObject log : toConvert) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            converted.add(new MovieInfoObject(log.getId(), log.getTitle(), isMovie,log.getReleaseDateInfo(),"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                    log.getSummaryInfo(), log.getFullPosterPathInfo(), log.getFullBackdropPathInfo(),"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    log.getRatingInfo(), log.getGenreIdInfo(), log.isAdultContent()));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return converted;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * This funcion updates the progress bar as the movie poster is being displayed."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param movie    Object that contains all the information about a particular movie."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param progress contains the progress value."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private ProgressBar updateProgressBar(int index, int size) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ProgressBar progressBar \u003d new ProgressBar();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        progressBar.setVisible(true);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        progressBar.setProgress(((double) index) / size);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (index \u003d\u003d size) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            progressBar.setVisible(false);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return progressBar;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * This funcion updates the progress bar as the movie poster is being displayed."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param movie    Object that contains all the information about a particular movie."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     * @param progress contains the progress value."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private Label updateProgressLabel(int index, int size) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        Label progressLabel \u003d new Label(\"Loading..\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        if (index \u003d\u003d size) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            progressLabel.setText(\"\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return progressLabel;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwenhui": 260,
      "Pdotdeep": 11
    }
  },
  {
    "path": "src/main/resources/MainPage.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c?import javafx.scene.control.ProgressBar?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003c?import javafx.scene.text.*?\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003cBorderPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"670.0\" prefWidth\u003d\"1200.0\" stylesheets\u003d\"Main_Styles.css\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/2.2\" fx:controller\u003d\"entertainment.pro.ui.MovieHandler\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "  \u003cbottom\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    \u003cHBox alignment\u003d\"BOTTOM_LEFT\" spacing\u003d\"10.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003cLabel fx:id\u003d\"statusLabel\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003cProgressBar fx:id\u003d\"progressBar\" prefWidth\u003d\"200.0\" progress\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003cInsets bottom\u003d\"4.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"4.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "  \u003c/bottom\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "  \u003ccenter\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    \u003cAnchorPane fx:id\u003d\"mainAnchorPane\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"-Infinity\" prefHeight\u003d\"337.0\" prefWidth\u003d\"510.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "  \u003c/center\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "  \u003cleft\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    \u003cVBox id\u003d\"mMovieTypeVBox\" fx:id\u003d\"vBox3\" alignment\u003d\"TOP_CENTER\" minWidth\u003d\"152.0\" prefHeight\u003d\"340.0\" prefWidth\u003d\"163.00009999999747\" spacing\u003d\"8.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        \u003cVBox fx:id\u003d\"vBox1\" minHeight\u003d\"95.0\" prefHeight\u003d\"147.0\" prefWidth\u003d\"130.0\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \u003cLabel fx:id\u003d\"userPreferenceLabel\" styleClass\u003d\"userPreferenceLabel\" text\u003d\"My Preferences\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003cfont\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003cFont name\u003d\"System Bold\" size\u003d\"13.0\" fx:id\u003d\"x15\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003c/font\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \u003cHBox fx:id\u003d\"nameHBox\" prefHeight\u003d\"8.0\" prefWidth\u003d\"125.0\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003cText fx:id\u003d\"userNameText\" fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Name: \" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003cLabel fx:id\u003d\"userNameLabel\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    \u003cInsets left\u003d\"3.0\" fx:id\u003d\"x1\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003cInsets top\u003d\"5.0\" fx:id\u003d\"x2\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \u003cHBox fx:id\u003d\"ageHBox\" prefHeight\u003d\"13.0\" prefWidth\u003d\"125.0\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003cText id\u003d\"ageText\" fx:id\u003d\"userAgeText\" fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Age:\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003cLabel fx:id\u003d\"userAgeLabel\" text\u003d\"Label\" HBox.margin\u003d\"$x1\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003cInsets top\u003d\"5.0\" fx:id\u003d\"x17\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \u003cHBox fx:id\u003d\"adultHBox\" prefHeight\u003d\"32.0\" prefWidth\u003d\"125.0\" VBox.margin\u003d\"$x2\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003cLabel id\u003d\"adultText\" fx:id\u003d\"userAdultLabel1\" text\u003d\"Adult Content:\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003cLabel id\u003d\"adultLabel\" fx:id\u003d\"userAdultLabel2\" text\u003d\"Label\" HBox.margin\u003d\"$x1\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \u003cHBox prefHeight\u003d\"28.0\" prefWidth\u003d\"130.0\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003cText fx:id\u003d\"userPlaylistsText\" fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Playlists: \"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    \u003cInsets fx:id\u003d\"x3\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003c/Text\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                \u003cLabel fx:id\u003d\"userPlaylistsLabel\" text\u003d\"Label\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003cInsets top\u003d\"5.0\" fx:id\u003d\"x2\" /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \u003cVBox fx:id\u003d\"genresVBox\" prefHeight\u003d\"89.0\" prefWidth\u003d\"125.0\"\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003cLabel fx:id\u003d\"userGenreLabel\" text\u003d\"Genres:\"\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                  \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                  \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003cScrollPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                  \u003ccontent\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    \u003cTextFlow fx:id\u003d\"genreListText\" prefHeight\u003d\"34.0\" prefWidth\u003d\"109.0\" /\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                  \u003c/content\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003cInsets top\u003d\"5.0\" fx:id\u003d\"x18\" /\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003cVBox id\u003d\"vBox1\" fx:id\u003d\"vBox2\" minHeight\u003d\"83.0\" prefHeight\u003d\"91.0\" prefWidth\u003d\"191.0\"\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \u003cLabel id\u003d\"userSortLabel\" font\u003d\"$x15\" styleClass\u003d\"userSortLabel\" text\u003d\"Sort By:\"\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003cInsets top\u003d\"5.0\" fx:id\u003d\"x2\" /\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \u003cHBox fx:id\u003d\"alphaSortHBox\" prefHeight\u003d\"8.0\" prefWidth\u003d\"125.0\"\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003cText id\u003d\"langText\" fx:id\u003d\"sortAlphaOrderText\" fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Alphabetical Order:\" /\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003cLabel id\u003d\"userNameLabel\" fx:id\u003d\"sortAlphaOrderLabel\" text\u003d\"N\"\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    \u003cInsets left\u003d\"3.0\" fx:id\u003d\"x19\" /\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003cInsets top\u003d\"5.0\" fx:id\u003d\"x5\" /\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \u003cHBox fx:id\u003d\"latestDatesHBox\" prefHeight\u003d\"13.0\" prefWidth\u003d\"125.0\"\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003cText id\u003d\"ageText\" fx:id\u003d\"sortLatestDateText\" fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Latest Release Dates:\" /\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003cLabel id\u003d\"userAgeLabel\" fx:id\u003d\"sortLatestDateLabel\" text\u003d\"N\"\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    \u003cInsets left\u003d\"3.0\" fx:id\u003d\"x6\" /\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003cInsets top\u003d\"5.0\" fx:id\u003d\"x7\" /\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \u003cHBox fx:id\u003d\"highestRatingHBox\" prefHeight\u003d\"32.0\" prefWidth\u003d\"125.0\"\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003cLabel id\u003d\"adultText\" fx:id\u003d\"sortHighestRatingText\" text\u003d\"Highest Rating:\" /\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003cLabel id\u003d\"adultLabel\" fx:id\u003d\"sortHighestRatingLabel\" text\u003d\"N\"\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    \u003cInsets left\u003d\"3.0\" fx:id\u003d\"x8\" /\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003cInsets top\u003d\"5.0\" fx:id\u003d\"x9\" /\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "          \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \u003cInsets top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "          \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "  \u003c/left\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "  \u003cright\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    \u003cScrollPane fx:id\u003d\"moviesScrollPane\" hbarPolicy\u003d\"NEVER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"525.0\" prefWidth\u003d\"1027.0\" vbarPolicy\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003cAnchorPane fx:id\u003d\"movieAnchorPane\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"210.0\" prefWidth\u003d\"115.0\" /\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "  \u003c/right\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "  \u003ctop\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    \u003cVBox fx:id\u003d\"mainVBox\" maxHeight\u003d\"1.7976931348623157E308\" prefHeight\u003d\"113.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003cVBox id\u003d\"vbox0\" fx:id\u003d\"searchCommandVBox\" maxHeight\u003d\"1.7976931348623157E308\" prefHeight\u003d\"93.0\" prefWidth\u003d\"676.0\" VBox.vgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \u003cTextField fx:id\u003d\"searchTextField\" prefHeight\u003d\"28.0\" prefWidth\u003d\"656.0\" promptText\u003d\"Enter a command here...\"\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003cInsets bottom\u003d\"2.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \u003c/TextField\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \u003cVBox fx:id\u003d\"autoCompleteVBox\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-1.0\" prefHeight\u003d\"40.0\" prefWidth\u003d\"666.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003cchildren\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003cText fx:id\u003d\"autoCompleteText\" fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Welcome to Entertainment-Pro! Start exploring now...\" wrappingWidth\u003d\"1100.0\" VBox.vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003cText fx:id\u003d\"generalFeedbackText\" fill\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"\" wrappingWidth\u003d\"1100.0\" VBox.vgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                  \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    \u003cInsets top\u003d\"7.0\" /\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                  \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003c/Text\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003c/children\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003cInsets fx:id\u003d\"x3\" /\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" top\u003d\"5.0\" fx:id\u003d\"x20\" /\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "              \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "          \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "          \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "  \u003c/top\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 186,
      "nwenhui": 24
    }
  },
  {
    "path": "src/main/resources/Main_Styles.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "BorderPane, ScrollPane, HBox, VBox, FlowPane {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-background: #1d1d1d;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "ProgressBar .track{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-background-radius: 2em;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-border-radius: 2em;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-background-color: #403F3F;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "ProgressBar .bar{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-background-radius: 2em;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-border-radius: 2em;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "ScrollPane .scroll-bar:vertical{"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-background-color: #292727;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "ScrollPane .increment-button, ScrollPane .decrement-button{"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-background-radius: 2em;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "ScrollPane .increment-button:hover, ScrollPane .decrement-button:hover{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "ScrollPane .scroll-bar:vertical .thumb {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-background-color: #7d7d7d;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-background-radius: 2em;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "ScrollPane .scroll-bar:vertical .track{"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-background-radius: 2em;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-border-radius: 2em;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "ScrollPane .scroll-bar:vertical .thumb:hover{"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "Label{"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "#movieIDLabel {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " -fx-font-size: 8pt;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Riyas97"
        },
        "content": " -fx-font-family: Verdana;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ".subtitle{"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-font-size: 8pt;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-font-family: Tahoma;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "ToolBar{"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-background-radius: 2em;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-border-color: transparent transparent #403F3F transparent;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "MenuBar{"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-background: #1d1d1d;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-border-color: transparent transparent #403F3F transparent;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "MenuBar .label{"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "MenuBar .label{"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "MenuBar .menu-item, MenuBar .context-menu{"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "MenuBar .menu-item:hover, MenuBar .context-menu:hover, MenuBar .menu:hover{"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-background-color: #403F3F;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "MenuBar .context-menu{"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-border-color: #403F3F;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "MenuBar .context-menu{"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "#text{"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "-fx-padding: 6, 6, 6, 6;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "TextField{"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-background-color: #403F3F;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-background-radius: 2em;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-border-radius: 2em;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "TextField:focused, TextField:hover{"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ".posterPane:hover{"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-scale-x: 1.2;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    -fx-scale-y: 1.2;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 119
    }
  },
  {
    "path": "src/main/resources/MoreInfo.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003c?import javafx.scene.image.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003c?import javafx.scene.text.*?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"-1.0\" prefWidth\u003d\"1000.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/2.2\" fx:controller\u003d\"entertainment.pro.ui.InfoController\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    \u003cLabel fx:id\u003d\"movieTitleLabel\" alignment\u003d\"CENTER\" layoutX\u003d\"0.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"1027.0\" text\u003d\"MovieName\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\" AnchorPane.topAnchor\u003d\"-1.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "      \u003cfont\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003cFont name\u003d\"System Bold\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "      \u003c/font\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    \u003cImageView fx:id\u003d\"movieBackdropImageView\" fitHeight\u003d\"134.25\" fitWidth\u003d\"179.0\" layoutX\u003d\"27.0\" layoutY\u003d\"41.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    \u003cGridPane fx:id\u003d\"movieGridPane\" layoutX\u003d\"13.0\" layoutY\u003d\"168.0\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"1000.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003cLabel text\u003d\"Plot Summary:\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "          \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \u003cInsets top\u003d\"5.0\" fx:id\u003d\"x1\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "          \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003cLabel id\u003d\"movieCastLabel\" fx:id\u003d\"movieSummaryLabel\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"-Infinity\" prefWidth\u003d\"700.0\" text\u003d\"Label\" textAlignment\u003d\"JUSTIFY\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\" GridPane.margin\u003d\"$x1\" GridPane.rowIndex\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003cLabel fx:id\u003d\"movieGenresLabel\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"-Infinity\" prefWidth\u003d\"700.0\" text\u003d\"Label\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\" GridPane.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "          \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \u003cInsets top\u003d\"15.0\" fx:id\u003d\"x2\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "          \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003cLabel text\u003d\"Genre(s):\" GridPane.columnIndex\u003d\"0\" GridPane.margin\u003d\"$x2\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003cLabel text\u003d\"Cast \u0026amp; Crew:\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "          \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \u003cInsets top\u003d\"15.0\" fx:id\u003d\"x3\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "          \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003cLabel id\u003d\"movieSummaryLabel\" fx:id\u003d\"movieCastLabel\" alignment\u003d\"CENTER_LEFT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"-Infinity\" prefWidth\u003d\"700.0\" text\u003d\"Label\" textAlignment\u003d\"JUSTIFY\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.rowIndex\u003d\"2\" GridPane.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "          \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \u003cInsets top\u003d\"15.0\" fx:id\u003d\"x4\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "          \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "      \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"244.0\" minWidth\u003d\"10.0\" prefWidth\u003d\"138.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"700.0\" minWidth\u003d\"10.0\" prefWidth\u003d\"700.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "      \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003cRowConstraints maxHeight\u003d\"1.7976931348623157E308\" prefHeight\u003d\"-1.0\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003cRowConstraints maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"10.0\" prefHeight\u003d\"-1.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003cRowConstraints maxHeight\u003d\"1.7976931348623157E308\" prefHeight\u003d\"-1.0\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    \u003cHBox layoutX\u003d\"215.0\" layoutY\u003d\"41.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"800.0\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003cLabel text\u003d\"Rating:\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003cLabel fx:id\u003d\"movieRatingLabel\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "          \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \u003cInsets left\u003d\"5.0\" fx:id\u003d\"x5\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "          \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    \u003cHBox layoutX\u003d\"215.0\" layoutY\u003d\"78.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"800.0\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003cLabel fx:id\u003d\"releaseDateLabel\" text\u003d\"Original Release Date:\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003cLabel id\u003d\"movieRatingLabel\" fx:id\u003d\"movieReleaseDateLabel\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "          \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \u003cInsets left\u003d\"5.0\" fx:id\u003d\"x5\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "          \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    \u003cHBox layoutX\u003d\"215.0\" layoutY\u003d\"121.0\" maxHeight\u003d\"-1.0\" maxWidth\u003d\"-1.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"800.0\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003cLabel text\u003d\"Certificate:\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003cLabel id\u003d\"movieRatingLabel\" fx:id\u003d\"movieCertLabel\" maxHeight\u003d\"-1.0\" maxWidth\u003d\"-1.0\" text\u003d\"Label\" wrapText\u003d\"true\" HBox.margin\u003d\"$x5\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 82
    }
  },
  {
    "path": "src/main/resources/MoviePoster.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003c?import javafx.scene.image.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"210.0\" prefWidth\u003d\"115.0\" styleClass\u003d\"posterPane\" stylesheets\u003d\"Main_Styles.css\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/2.2\" fx:controller\u003d\"entertainment.pro.ui.MoviePosterController\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    \u003cVBox alignment\u003d\"TOP_CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"210.0\" prefWidth\u003d\"115.0\" spacing\u003d\"4.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003cImageView fx:id\u003d\"moviePosterImageView\" fitHeight\u003d\"161.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003cLabel fx:id\u003d\"movieTitleLabel\" alignment\u003d\"BASELINE_CENTER\" contentDisplay\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" styleClass\u003d\"subtitle\" text\u003d\"Label\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003cLabel fx:id\u003d\"movieNumberLabel\" styleClass\u003d\"subtitle\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "          \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            \u003cInsets top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "          \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 27
    }
  },
  {
    "path": "src/main/resources/PlaylistInfo.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"-1.0\" prefWidth\u003d\"480.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"entertainment.pro.ui.PlaylistInfoController\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "      \u003cVBox fx:id\u003d\"playlistInfoVBox\" alignment\u003d\"CENTER\" prefHeight\u003d\"254.0\" prefWidth\u003d\"480.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "          \u003cLabel fx:id\u003d\"playlistNameLabel\" alignment\u003d\"CENTER\" prefHeight\u003d\"30.0\" prefWidth\u003d\"503.0\" text\u003d\"PlaylistName\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "              \u003cFont name\u003d\"System Bold\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "          \u003c/Label\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \u003cLabel fx:id\u003d\"playlistDescriptionLabel\" text\u003d\"PlaylistDescription\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \u003cAnchorPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "nwenhui": 22
    }
  },
  {
    "path": "src/main/resources/PlaylistMoreInfo.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"playlistMovieInfoAnchorPane\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"-1.0\" prefWidth\u003d\"510.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"entertainment.pro.ui.PlaylistMovieController\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    \u003cLabel fx:id\u003d\"movieTitleLabel\" alignment\u003d\"CENTER\" layoutX\u003d\"0.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"503.0\" text\u003d\"MovieName\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\" AnchorPane.topAnchor\u003d\"-1.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "      \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        \u003cFont name\u003d\"System Bold\" size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "      \u003c/font\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    \u003cGridPane fx:id\u003d\"movieGridPane\" layoutX\u003d\"24.0\" layoutY\u003d\"40.0\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"-Infinity\" prefWidth\u003d\"439.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        \u003cLabel text\u003d\"Plot Summary:\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "          \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \u003cInsets top\u003d\"5.0\" fx:id\u003d\"x1\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "          \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        \u003cLabel id\u003d\"movieCastLabel\" fx:id\u003d\"movieSummaryLabel\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"300.0\" text\u003d\"Label\" textAlignment\u003d\"JUSTIFY\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\" GridPane.margin\u003d\"$x1\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        \u003cLabel fx:id\u003d\"movieGenresLabel\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"300.0\" text\u003d\"Label\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\" GridPane.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "          \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \u003cInsets top\u003d\"15.0\" fx:id\u003d\"x2\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "          \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        \u003cLabel text\u003d\"Genre(s):\" GridPane.margin\u003d\"$x2\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        \u003cLabel text\u003d\"Rating:\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "          \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \u003cInsets top\u003d\"15.0\" fx:id\u003d\"x3\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "          \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        \u003cLabel id\u003d\"movieSummaryLabel\" fx:id\u003d\"movieRatingLabel\" alignment\u003d\"CENTER_LEFT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"Label\" textAlignment\u003d\"JUSTIFY\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\" GridPane.hgrow\u003d\"ALWAYS\" GridPane.rowIndex\u003d\"2\" GridPane.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "          \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \u003cInsets top\u003d\"15.0\" fx:id\u003d\"x4\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "          \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        \u003cLabel text\u003d\"Release Date:\" GridPane.rowIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        \u003cLabel fx:id\u003d\"movieDateLabel\" text\u003d\"Label\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "      \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"244.0\" minWidth\u003d\"10.0\" prefWidth\u003d\"138.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"424.0\" minWidth\u003d\"10.0\" prefWidth\u003d\"352.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "      \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \u003cRowConstraints maxHeight\u003d\"1.7976931348623157E308\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        \u003cRowConstraints maxHeight\u003d\"1.7976931348623157E308\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        \u003cRowConstraints maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"10.0\" prefHeight\u003d\"33.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        \u003cRowConstraints maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"17.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "nwenhui": 57
    }
  },
  {
    "path": "src/main/resources/PlaylistPane.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"87.0\" prefWidth\u003d\"414.0\" style\u003d\"-fx-padding: 5;\" styleClass\u003d\"posterPane\" stylesheets\u003d\"Main_Styles.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"entertainment.pro.ui.PlaylistController\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        \u003cVBox fx:id\u003d\"individualPlaylistVBox\" prefHeight\u003d\"160.0\" prefWidth\u003d\"517.0\" spacing\u003d\"4.0\" style\u003d\"-fx-padding: 5;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                \u003cLabel fx:id\u003d\"playlistNameLabel\" alignment\u003d\"CENTER\" prefHeight\u003d\"36.0\" prefWidth\u003d\"517.0\" style\u003d\"-fx-font-size: 15; -fx-font-weight: bold;\" styleClass\u003d\"subtitle\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                  \u003cFont size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \u003cLabel fx:id\u003d\"playlistDescriptionLabel\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" prefHeight\u003d\"36.0\" prefWidth\u003d\"517.0\" style\u003d\"-fx-font-size: 13;\" styleClass\u003d\"subtitle\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                  \u003cFont size\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \u003cLabel fx:id\u003d\"playlistMoviesLabel\" alignment\u003d\"CENTER\" prefHeight\u003d\"36.0\" prefWidth\u003d\"517.0\" style\u003d\"-fx-font-size: 13;\" styleClass\u003d\"subtitle\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                  \u003cFont size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "      \u003cInsets bottom\u003d\"1.0\" left\u003d\"1.0\" right\u003d\"1.0\" top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 1,
      "nwenhui": 33
    }
  },
  {
    "path": "src/test/java/entertainment/pro/logic/cinemaRequesterAPI/cinemaRetrieveRequestTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "package entertainment.pro.logic.cinemaRequesterAPI;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import entertainment.pro.commons.exceptions.Exceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import entertainment.pro.commons.strings.PromptMessages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import entertainment.pro.logic.cinemarequesterapi.CinemaRetrieveRequest;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import entertainment.pro.storage.utils.OfflineSearchStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import entertainment.pro.ui.MovieHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "public class cinemaRetrieveRequestTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    private String VALID_CINEMA_FILE_PATH \u003d \"/data/ValidCinema.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    private String INVALID_CINEMA_FILE_PATH \u003d \"/data/InvalidCinema.json\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public void searchNearestCinemasTestSuccess() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        CinemaRetrieveRequest retrieveRequest \u003d new CinemaRetrieveRequest(new MovieHandler());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        retrieveRequest.searchNearestCinemas(\"Clementi\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(1, retrieveRequest.getParsedCinemas().size());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"WE Cinemas\", retrieveRequest.getParsedCinemas().get(0).getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        retrieveRequest.searchNearestCinemas(\"Bukit Timah\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(3, retrieveRequest.getParsedCinemas().size());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"EagleWings Cinematics\", retrieveRequest.getParsedCinemas().get(0).getName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        retrieveRequest.searchNearestCinemas(\"Choa Chu kang\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(1, retrieveRequest.getParsedCinemas().size());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"Shaw Theatres\", retrieveRequest.getParsedCinemas().get(0).getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public void searchNearestCinemasTestFailure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        CinemaRetrieveRequest retrieveRequest \u003d new CinemaRetrieveRequest(new MovieHandler());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        retrieveRequest.searchNearestCinemas(\"null\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(0, retrieveRequest.getParsedCinemas().size());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        retrieveRequest.searchNearestCinemas(\"n n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(0, retrieveRequest.getParsedCinemas().size());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        retrieveRequest.searchNearestCinemas(\"n n n\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(0, retrieveRequest.getParsedCinemas().size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public void searchCinemasJsonTestSuccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        CinemaRetrieveRequest retrieveRequest \u003d new CinemaRetrieveRequest(new MovieHandler());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            retrieveRequest.fetchedCinemasJson(getString(VALID_CINEMA_FILE_PATH));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        } catch (Exceptions e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(1, retrieveRequest.getParsedCinemas().size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"WE Cinemas\", retrieveRequest.getParsedCinemas().get(0).getName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public void searchCinemasJsonTestFailure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        CinemaRetrieveRequest retrieveRequest \u003d new CinemaRetrieveRequest(new MovieHandler());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            retrieveRequest.fetchedCinemasJson(getString(INVALID_CINEMA_FILE_PATH));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        } catch (Exceptions e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(0, retrieveRequest.getParsedCinemas().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public static String getString(String filename) throws Exceptions {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        InputStream inputStream \u003d OfflineSearchStorage.class.getResourceAsStream(filename);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        InputStreamReader inputStreamReader \u003d new InputStreamReader(inputStream);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        BufferedReader bufferedReader \u003d new BufferedReader(inputStreamReader);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        String line \u003d \"\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        String dataFromJSON \u003d \"\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                dataFromJSON +\u003d line;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            inputStreamReader.close();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            inputStream.close();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "            throw new Exceptions(PromptMessages.IO_EXCEPTION_IN_OFFLINE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        return dataFromJSON;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hotspur1997": 87
    }
  },
  {
    "path": "src/test/java/entertainment/pro/logic/contexts/CommandContextTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//@@author pdotdeep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.logic.contexts;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.enums.CommandKeys;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.parsers.CommandStructure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public class CommandContextTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    void getPossibilitiesForRoot_validInputs_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e possibleRoots \u003d CommandContext.getPossibilitiesForRoot(\"searc\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e possibleRoots2 \u003d CommandContext.getPossibilitiesForRoot(\"black\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e possibleRoots3 \u003d CommandContext.getPossibilitiesForRoot(\"watch\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"search\" , possibleRoots.get(0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"blacklist\" , possibleRoots2.get(0));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"watchlist\" , possibleRoots3.get(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    void getPossibilitiesForRoot_invalidInputs_failure() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        CommandContext.initialiseContext();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e possibleRoots4 \u003d CommandContext.getPossibilitiesForRoot(\"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e possibleRoots5 \u003d CommandContext.getPossibilitiesForRoot(\"somerubbish\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(12 , possibleRoots4.size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals( 0 , possibleRoots5.size());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void getRoot_validInputs_success(){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        CommandContext.initialiseContext();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cCommandKeys\u003e a \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Collections.addAll(a, CommandStructure.AllRoots);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        a.sort(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cCommandKeys\u003e b \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for(String s :CommandContext.getRoot()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            b.add(CommandKeys.valueOf(s.toUpperCase()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        b.sort(null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(true , a.equals(b));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void getPossibilitiesSubRoot_validInputs_success(){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        CommandContext.initialiseContext();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e possible \u003d CommandContext.getPossibilitiesSubRoot(\"movie\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"movies\" , possible.get(0));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e possible1 \u003d CommandContext.getPossibilitiesSubRoot(\"\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"movies\" , possible1.get(0));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e possible2 \u003d CommandContext.getPossibilitiesSubRoot(\"prof\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"profile\" , possible2.get(0));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e possible4 \u003d CommandContext.getPossibilitiesSubRoot(\"prefer\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"preference\" , possible4.get(0));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e possible6 \u003d CommandContext.getPossibilitiesSubRoot(\"view\" , \"black\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"blacklist\", possible6.get(0));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e possible7 \u003d CommandContext.getPossibilitiesSubRoot(\"help\" , \"playl\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"playlist\" , possible7.get(0));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void getPossibilitiesSubRoot_invalidInputs_success(){"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        CommandContext.initialiseContext();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e possible5 \u003d CommandContext.getPossibilitiesSubRoot(\"prefdcwecweer\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(0, possible5.size());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e possible8 \u003d CommandContext.getPossibilitiesSubRoot(\"search\" , \"black\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(0 , possible8.size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void getPossibilitiesSubRootGivenRoot_validInputs_success(){"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        CommandContext.initialiseContext();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for(CommandKeys ck: CommandStructure.AllRoots){"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            ArrayList\u003cString\u003e possible \u003d CommandContext.getPossibilitiesSubRootGivenRoot(ck.toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            possible.sort(null);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            ArrayList\u003cString\u003e actual \u003d  new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            for (CommandKeys c : CommandStructure.cmdStructure.get(ck)){"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                actual.add(c.toString().toLowerCase());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            actual.sort(null);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(true , possible.equals(actual));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void getPossibilitiesSubRootGivenRoot_invalidInputs_failure(){"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        CommandContext.initialiseContext();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String [] invalidTest \u003d {\"Qwerty\" , \"polygon\" , \"name\" , \"value\" , \"jupiter\" };"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for(String ck: invalidTest){"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            ArrayList\u003cString\u003e possible \u003d CommandContext.getPossibilitiesSubRootGivenRoot(ck);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(0 , possible.size());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Pdotdeep": 114
    }
  },
  {
    "path": "src/test/java/entertainment/pro/logic/contexts/ContextHelperTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//@@author pdotdeep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.logic.contexts;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.ui.MovieHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public class ContextHelperTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void isRootCommandComplete_validInputs_success(){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(true , ContextHelper.testisRootCommandComplete(\"blacklist\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(true , ContextHelper.testisRootCommandComplete(\"search\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(true , ContextHelper.testisRootCommandComplete(\"view\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(true , ContextHelper.testisRootCommandComplete(\"yes\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(false , ContextHelper.testisRootCommandComplete(\"blacklis\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(false , ContextHelper.testisRootCommandComplete(\"watchlis\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(true , ContextHelper.testisRootCommandComplete(\"watchlist\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void isRootCommandComplete_invalidInputs_failure(){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(false , ContextHelper.testisRootCommandComplete(\"qwerty\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(false , ContextHelper.testisRootCommandComplete(\"polygon\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(false , ContextHelper.testisRootCommandComplete(\"jupiter\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(false , ContextHelper.testisRootCommandComplete(\"saturn\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(false , ContextHelper.testisRootCommandComplete(\"moon\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void isSubRootCommandComplete_validInputs_success(){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(true , ContextHelper.testisSubRootCommandComplete(\"movies\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(true , ContextHelper.testisSubRootCommandComplete(\"tvshows\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(true , ContextHelper.testisSubRootCommandComplete(\"blacklist\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(true , ContextHelper.testisSubRootCommandComplete(\"remove\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(false , ContextHelper.testisSubRootCommandComplete(\"tvshow\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(false , ContextHelper.testisSubRootCommandComplete(\"ad\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(true , ContextHelper.testisSubRootCommandComplete(\"name\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void isSubRootCommandComplete_invalidInputs_failure(){"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(false , ContextHelper.testisSubRootCommandComplete(\"qwerty\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(false , ContextHelper.testisSubRootCommandComplete(\"polygon\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(false , ContextHelper.testisSubRootCommandComplete(\"jupiter\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(false , ContextHelper.testisSubRootCommandComplete(\"saturn\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(false , ContextHelper.testisSubRootCommandComplete(\"moon\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void getLastIncompleteWords_validInputs_success(){"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String incomplete \u003d ContextHelper.getLastIncompleteWords(\"search movies Harry potter and the order\" , new MovieHandler());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"Harry potter and the order\", incomplete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String incomplete1 \u003d ContextHelper.getLastIncompleteWords(\"search movies\" , new MovieHandler());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"movies\", incomplete1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String incomplete2 \u003d ContextHelper.getLastIncompleteWords(\"blacklist remov\" , new MovieHandler());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"remov\", incomplete2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void getLastIncompleteWords_invalidInputs_failure(){"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String incomplete \u003d ContextHelper.getLastIncompleteWords(\"\" , new MovieHandler());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"\", incomplete);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String incomplete1 \u003d ContextHelper.getLastIncompleteWords(\"jupiter saturn\" , new MovieHandler());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"saturn\", incomplete1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String incomplete2 \u003d ContextHelper.getLastIncompleteWords(\"no idea what this is\" , new MovieHandler());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"what this is\", incomplete2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void subStringIndex_validIndex_success(){"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals( 5, ContextHelper.subStringIndex(\"hello\" , \"hello world\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals( 10, ContextHelper.subStringIndex(\"batman and\" , \"batman and robbin\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals( 14, ContextHelper.subStringIndex(\"the art of not\" , \"the art of not\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void subStringIndex_invalidIndex_failure(){"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals( 0, ContextHelper.subStringIndex(\"batman\" , \"hello world\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals( 0, ContextHelper.subStringIndex(\"jupiter\" , \"hello world\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals( 0, ContextHelper.subStringIndex(\"modern day problems\" , \"hello world\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void completeCommand_validIndex_success(){"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e possibilities \u003d new ArrayList\u003cString\u003e(Arrays.asList(\"hello world\", \"hello guys\", \"hello girls\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"ello\" , ContextHelper.completeCommand(possibilities , \"h\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e possibilities1 \u003d new ArrayList\u003cString\u003e(Arrays.asList(\"batman and jobbin\" , \"batman and joker\" , \"batman and jennifer\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"man and j\" , ContextHelper.completeCommand(possibilities1 , \"bat\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e possibilities2 \u003d new ArrayList\u003cString\u003e(Arrays.asList(\"rabbit\" , \"rabbies\" , \"rabb\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"abb\" , ContextHelper.completeCommand(possibilities2 , \"r\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void completeCommand_invalidIndex_failure(){"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e possibilities \u003d new ArrayList\u003cString\u003e(Arrays.asList(\"\", \"Japan\", \"Korea\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"\" , ContextHelper.completeCommand(possibilities , \"h\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e possibilities1 \u003d new ArrayList\u003cString\u003e(Arrays.asList(\"jobbin\" , \"mobbin\" , \"batman and jennifer\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"\" , ContextHelper.completeCommand(possibilities1 , \"bat\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e possibilities2 \u003d new ArrayList\u003cString\u003e(Arrays.asList(\"jupiter\" , \"saturn\" , \"uranus\"));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"\" , ContextHelper.completeCommand(possibilities2 , \"r\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Pdotdeep": 134
    }
  },
  {
    "path": "src/test/java/entertainment/pro/logic/contexts/SearchResultContextTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//@@author pdotdeep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.logic.contexts;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.model.MovieInfoObject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.ui.MovieHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public class SearchResultContextTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void addResults_validInputs_success(){"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cMovieInfoObject\u003e searchresults \u003d new ArrayList\u003cMovieInfoObject\u003e(Arrays.asList("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                new MovieInfoObject(12,\"title 1\" ,true),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                new MovieInfoObject(15,\"title 2\" ,true) ,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                new MovieInfoObject(18,\"title 3\" ,true)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e possibilities \u003d new ArrayList\u003cString\u003e(Arrays.asList(\"title 1\" , \"title 2\" , \"title 3\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        SearchResultContext.addResults(searchresults);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e possible \u003d SearchResultContext.getPossibilities(\"tit\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        possible.sort(null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        possibilities.sort(null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(true ,  possibilities.equals(possible));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void addResults_invalidInputs_failure(){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cMovieInfoObject\u003e searchresults \u003d new ArrayList\u003cMovieInfoObject\u003e(Arrays.asList("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                new MovieInfoObject(12,\"title 1\" ,true),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                new MovieInfoObject(15,\"title 2\" ,true) ,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                new MovieInfoObject(18,\"title 3\" ,true)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        SearchResultContext.addResults(searchresults);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e possible \u003d SearchResultContext.getPossibilities(\"japan\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(0 ,  possible.size());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Pdotdeep": 58
    }
  },
  {
    "path": "src/test/java/entertainment/pro/logic/execution/CommandStacktest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//@@author pdotdeep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.logic.execution;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.enums.CommandKeys;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.exceptions.Exceptions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.parsers.commands.BlacklistCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.parsers.commands.SearchCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.parsers.commands.WatchlistCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public class CommandStacktest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void CommandStack_validInputs_success(){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            CommandStack.pushCmd(new SearchCommand(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(1 , CommandStack.getSize());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(CommandKeys.SEARCH,CommandStack.topCmd().getRoot());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            CommandStack.pushCmd(new BlacklistCommand(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(2 , CommandStack.getSize());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(CommandKeys.BLACKLIST,CommandStack.topCmd().getRoot());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            CommandStack.pushCmd(new WatchlistCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(3 , CommandStack.getSize());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(CommandKeys.WATCHLIST,CommandStack.topCmd().getRoot());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }catch (IOException e){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }catch (Exceptions e){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void CommandStack_invalidInputs_failure(){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(0 ,CommandStack.getSize());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(null,CommandStack.nextCommand());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(null,CommandStack.topCmd());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pdotdeep": 50
    }
  },
  {
    "path": "src/test/java/entertainment/pro/logic/movierequesterapi/RetrieveRequestTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.logic.movierequesterapi;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.strings.PromptMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import entertainment.pro.logic.movierequesterapi.RequestListener;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.Exceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.movierequesterapi.RetrieveRequest;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.model.MovieInfoObject;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.model.SearchProfile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import entertainment.pro.ui.MovieHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.storage.utils.OfflineSearchStorage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import org.json.simple.JSONArray;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import org.json.simple.JSONObject;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import org.json.simple.parser.JSONParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import org.json.simple.parser.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class RetrieveRequestTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    ArrayList\u003cInteger\u003e genrePreference \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    ArrayList\u003cInteger\u003e genreRestriction \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    ArrayList\u003cString\u003e playlist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    boolean isAdultEnabled \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    boolean sortByAlphaOrder \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    boolean sortByRating \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    boolean sortByReleaseDate \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    boolean isMovie \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    String searchEntryName \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    String name \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    int age \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TO_SPECIFY_RESULTS \u003d \"results\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String VALID_MOVIE_CERT_FILENAME1 \u003d \"/data/ValidMovieCertFile1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String VALID_MOVIE_CERT_FILENAME2 \u003d \"/data/ValidMovieCertFile2\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String VALID_TV_CERT_FILENAME1 \u003d \"/data/ValidTVCertFile1.json\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String VALID_TV_CERT_FILENAME2 \u003d \"/data/ValidTVCertFile2.json\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String INVALID_MOVIE_CERT_FILENAME1 \u003d \"/data/InvalidMovieCertFile1\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    private static final String INVALID_TV_CERT_FILENAME1 \u003d \"/data/InvalidTVCertFile1\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static String MOVIES_DATABASE_FILEPATH \u003d \"/data/movieData/\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static String SEARCH_PROFILE_FILEPATH \u003d \"/data/SearchProfileTest/\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    ArrayList\u003cInteger\u003e genrePref1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    ArrayList\u003cInteger\u003e genreRestrict1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    MovieInfoObject movieInfoObject1 \u003d new MovieInfoObject(1, \"Ad Astra\", true, getDate(\"01/01/2018\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            null, null, null, 8.0, null, true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    MovieInfoObject movieInfoObject2 \u003d new MovieInfoObject(18, \"Joker\", true, getDate(\"01/01/2017\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            null, null, null, 9.0, null, false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    MovieInfoObject movieInfoObject3 \u003d new MovieInfoObject(10202, \"Spiderman\", true, getDate(\"01/01/2019\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            null, null, null, 7.0, null, false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    MovieInfoObject movieInfoObject4 \u003d new MovieInfoObject(25506, \"\", false, getDate(\"2019/01/01\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            null, null, null, 0.0, null, true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    MovieInfoObject movieInfoObject5 \u003d new MovieInfoObject(100, \"\", false, getDate(\"2019/01/01\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            null, null, null, 0.0, null, false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    List\u003cMovieInfoObject\u003e testObjectsList \u003d Arrays.asList(movieInfoObject4, movieInfoObject1, movieInfoObject2, movieInfoObject3);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public static String getString(String filename) throws Exceptions {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        InputStream inputStream \u003d OfflineSearchStorage.class.getResourceAsStream(filename);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        InputStreamReader inputStreamReader \u003d new InputStreamReader(inputStream);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        BufferedReader bufferedReader \u003d new BufferedReader(inputStreamReader);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String line \u003d \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String dataFromJSON \u003d \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                dataFromJSON +\u003d line;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            inputStreamReader.close();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            inputStream.close();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            throw new Exceptions(PromptMessages.IO_EXCEPTION_IN_OFFLINE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return dataFromJSON;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public JSONArray getValidData(String dataFromJSON) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        JSONParser jsonParser \u003d new JSONParser();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        JSONObject jsonObject1 \u003d new JSONObject();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        JSONArray searchData1 \u003d new JSONArray();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            jsonObject1 \u003d (JSONObject) jsonParser.parse(dataFromJSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            searchData1 \u003d (JSONArray) jsonObject1.get(TO_SPECIFY_RESULTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return searchData1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void getTVCertFromJSONTest_valid_result() throws Exceptions {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String data1 \u003d getString(VALID_TV_CERT_FILENAME1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String data2 \u003d getString(VALID_TV_CERT_FILENAME2);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        JSONArray searchData1 \u003d getValidData(data1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        JSONArray searchData2 \u003d getValidData(data2);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String cert1 \u003d \"Unavailable\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            cert1 \u003d RetrieveRequest.getTvCertFromJson(searchData1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            assertEquals(\"Unavailable\", cert1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String expected1 \u003d \"Suitable for 12 years \u0026 above\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String cert2 \u003d null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            cert2 \u003d RetrieveRequest.getMovieCertFromJson(searchData2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String expected2 \u003d \"Unavailable\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(expected1, cert1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(expected2, cert2);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void getTVCertFromJSONTest_empty_result() throws Exceptions {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String data \u003d getString(INVALID_TV_CERT_FILENAME1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        JSONArray searchData1 \u003d getValidData(data);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String cert1 \u003d null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            cert1 \u003d RetrieveRequest.getMovieCertFromJson(searchData1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String expected1 \u003d \"Unavailable\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(expected1, cert1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void getMovieCertFromJSONTest_valid_result() throws Exceptions {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String data1 \u003d getString(VALID_MOVIE_CERT_FILENAME1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String data2 \u003d getString(VALID_MOVIE_CERT_FILENAME2);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        JSONArray searchData1 \u003d getValidData(data1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        JSONArray searchData2 \u003d getValidData(data2);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String cert1 \u003d \"Unavailable\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            cert1 \u003d RetrieveRequest.getMovieCertFromJson(searchData1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (NullPointerException | ParseException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            assertEquals(\"Unavailable\", cert1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String expected1 \u003d \"\\\"R\\\"\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String cert2 \u003d null;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            cert2 \u003d RetrieveRequest.getMovieCertFromJson(searchData2);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String expected2 \u003d \"Unavailable\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(expected1, cert1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(expected2, cert2);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void getMovieCertFromJSONTest_empty_result() throws Exceptions {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String data \u003d getString(INVALID_MOVIE_CERT_FILENAME1);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        JSONArray searchData1 \u003d getValidData(data);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String cert1 \u003d null;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            cert1 \u003d RetrieveRequest.getMovieCertFromJson(searchData1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String expected1 \u003d \"Unavailable\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(expected1, cert1);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public JSONArray getOffline() throws Exceptions {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        //String filename \u003d MOVIES_DATABASE_FILEPATH;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        // filename +\u003d i + \".json\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String filename \u003d \"/data/movieData/1.json\";"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String dataFromJSON \u003d getString(filename);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        JSONParser jsonParser \u003d new JSONParser();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        JSONArray jsonArray \u003d new JSONArray();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            jsonArray \u003d (JSONArray) jsonParser.parse(dataFromJSON);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return jsonArray;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public Date getDate(String releaseDateString) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        Date releaseDate \u003d new Date();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        SimpleDateFormat formatter1 \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            releaseDate \u003d formatter1.parse(releaseDateString);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (java.text.ParseException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            releaseDate \u003d new Date();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return releaseDate;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void sortByAlphaOrderTest() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cMovieInfoObject\u003e testArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        testArrayList.addAll(testObjectsList);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cMovieInfoObject\u003e expectedArrayList1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        expectedArrayList1.addAll(testObjectsList);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        RetrieveRequest.finalSearchResults \u003d testArrayList;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        RetrieveRequest.sortByAlphaOrder();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        testArrayList \u003d RetrieveRequest.finalSearchResults;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(expectedArrayList1, testArrayList);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void sortByLatestReleaseTest() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cMovieInfoObject\u003e testArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        testArrayList.addAll(testObjectsList);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cMovieInfoObject\u003e expectedArrayList1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        List\u003cMovieInfoObject\u003e expectedObjectsList \u003d Arrays.asList(movieInfoObject3, movieInfoObject1,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                movieInfoObject2, movieInfoObject4);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        expectedArrayList1.addAll(expectedObjectsList);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        RetrieveRequest.finalSearchResults \u003d testArrayList;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        RetrieveRequest.sortByLatestRelease();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        testArrayList \u003d RetrieveRequest.finalSearchResults;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(expectedArrayList1, testArrayList);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void sortByHighestRatingTest() throws Exceptions {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cMovieInfoObject\u003e testArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        testArrayList.addAll(testObjectsList);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cMovieInfoObject\u003e expectedArrayList1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        List\u003cMovieInfoObject\u003e expectedObjectsList \u003d Arrays.asList(movieInfoObject2, movieInfoObject1,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                movieInfoObject3, movieInfoObject4);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        expectedArrayList1.addAll(expectedObjectsList);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        RetrieveRequest.finalSearchResults \u003d testArrayList;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        RetrieveRequest.sortByHighestRating();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        testArrayList \u003d RetrieveRequest.finalSearchResults;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(expectedArrayList1, testArrayList);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void checkConditionTest_returns_true() throws Exceptions {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String searchProfileData \u003d getString(SEARCH_PROFILE_FILEPATH);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        JSONArray jsonArray \u003d getValidData(searchProfileData);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        int d \u003d 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        for (int i \u003d 0; i \u003c jsonArray.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            SearchProfile searchProfile \u003d new SearchProfile(name, age, genrePreference, genreRestriction, isAdultEnabled,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    playlist, sortByAlphaOrder, sortByRating, sortByReleaseDate, searchEntryName, isMovie);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            ;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            ArrayList\u003cInteger\u003e genrePref \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            ArrayList\u003cInteger\u003e genreRestrict \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            JSONObject jsonObject \u003d (JSONObject) jsonArray.get(i);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            JSONArray jsonArray1 \u003d (JSONArray) jsonObject.get(\"genreIdPreference\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            for (int j \u003d 0; j \u003c jsonArray1.size(); j +\u003d 1) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                long num \u003d (long) jsonArray1.get(j);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                int genreNo \u003d Math.toIntExact(num);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "                System.out.println(genreNo);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                genrePref.add(genreNo);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            JSONArray jsonArray2 \u003d (JSONArray) jsonObject.get(\"genreIdRestriction\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            for (int j \u003d 0; j \u003c jsonArray2.size(); j +\u003d 1) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                long num \u003d (long) jsonArray2.get(j);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                int genreNo \u003d Math.toIntExact(num);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                genreRestrict.add(genreNo);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            searchProfile \u003d searchProfile.setGenreIdPreference(genrePref);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            searchProfile \u003d searchProfile.setGenreIdRestriction(genreRestrict);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            searchProfile \u003d searchProfile.setAdult((Boolean) jsonObject.get(\"adult\"));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            searchProfile \u003d searchProfile.setSortByAlphabetical((Boolean) jsonObject.get(\"sortByAlphabetical\"));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            searchProfile \u003d searchProfile.setSortByHighestRating((Boolean) jsonObject.get(\"sortByHighestRating\"));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            searchProfile \u003d searchProfile.setSortByHighestRating((Boolean) jsonObject.get(\"sortByLatestRelease\"));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            searchProfile \u003d searchProfile.setMovie((Boolean) jsonObject.get(\"isMovie\"));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            searchProfile \u003d searchProfile.setName((String) jsonObject.get(\"name\"));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            RetrieveRequest.searchProfile \u003d searchProfile;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            JSONArray jsonArray3 \u003d getOffline();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            ArrayList\u003cString\u003e getResults \u003d getResultsData();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            for (int a \u003d 1; a \u003c jsonArray3.size(); a +\u003d 1) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                JSONObject jsonObject1 \u003d (JSONObject) jsonArray3.get(a);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                if (RetrieveRequest.checkCondition(jsonObject1)) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    //    System.out.println(\"true\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    //} else {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                     // System.out.println(\"false\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    //}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    assertEquals(\"true\", getResults.get(d));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    d +\u003d 1;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    assertEquals(\"false\", getResults.get(d));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                    d +\u003d 1;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                //System.out.println(j);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public ArrayList\u003cString\u003e getResultsData() throws Exceptions {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e arrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        InputStream inputStream \u003d OfflineSearchStorage.class.getResourceAsStream(\"/data/movieData/results.txt\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        InputStreamReader inputStreamReader \u003d new InputStreamReader(inputStream);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        BufferedReader bufferedReader \u003d new BufferedReader(inputStreamReader);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String line \u003d \"\";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String dataFromJSON \u003d \"\";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            while ((line \u003d bufferedReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                dataFromJSON +\u003d line;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                arrayList.add(line);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            bufferedReader.close();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            inputStreamReader.close();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            inputStream.close();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            throw new Exceptions(PromptMessages.IO_EXCEPTION_IN_OFFLINE);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        return arrayList;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void getCertStrings_return_unavailable() throws Exceptions {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(\"Unavailable\", RetrieveRequest.getCertStrings(movieInfoObject1));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(\"Unavailable\", RetrieveRequest.getCertStrings(movieInfoObject4));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void getCastStrings_returns_empty() throws Exceptions {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e castList1 \u003d RetrieveRequest.getCastStrings(movieInfoObject1);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e castList5 \u003d RetrieveRequest.getCastStrings(movieInfoObject5);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e expectedCastList1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(expectedCastList1, castList1);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Hotspur1997": 4,
      "Riyas97": 324,
      "Pdotdeep": 3
    }
  },
  {
    "path": "src/test/java/entertainment/pro/logic/parsers/CommandDebuggerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//@@author pdotdeep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.logic.parsers;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.exceptions.MissingInfoException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.enums.CommandKeys;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.model.CommandPair;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.ui.MovieHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public class CommandDebuggerTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void commandSpellChecker_validInputs_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            CommandPair cp \u003d CommandDebugger.commandSpellChecker(new String[]{\"seatch\" , \"moves\" , \"batman\" } , CommandKeys.NONE, new MovieHandler());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(CommandKeys.SEARCH, cp.getRootCommand());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(CommandKeys.MOVIES, cp.getSubRootCommand());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            CommandPair cp1 \u003d CommandDebugger.commandSpellChecker(new String[]{\"bucklist\" , \"addu\" , \"batman\" } , CommandKeys.NONE, new MovieHandler());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(CommandKeys.BLACKLIST, cp1.getRootCommand());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(CommandKeys.ADD, cp1.getSubRootCommand());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            CommandPair cp2 \u003d CommandDebugger.commandSpellChecker(new String[]{\"wtchlist\" , \"dlelte\" , \"batman\" } , CommandKeys.NONE, new MovieHandler());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(CommandKeys.WATCHLIST, cp2.getRootCommand());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(CommandKeys.DELETE, cp2.getSubRootCommand());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            CommandPair cp3 \u003d CommandDebugger.commandSpellChecker(new String[]{\"prefrerences\" , \"add\" , \"batman\" } , CommandKeys.NONE, new MovieHandler());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(CommandKeys.PREFERENCE, cp3.getRootCommand());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(CommandKeys.ADD, cp3.getSubRootCommand());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            CommandPair cp4 \u003d CommandDebugger.commandSpellChecker(new String[]{\"playllist\" , \"creatte\" , \"batman\" } , CommandKeys.NONE, new MovieHandler());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(CommandKeys.PLAYLIST, cp4.getRootCommand());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(CommandKeys.CREATE, cp4.getSubRootCommand());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        } catch (MissingInfoException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void commandSpellChecker_invalidInputs_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        CommandPair cp \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            cp \u003d CommandDebugger.commandSpellChecker(new String[]{\"\"} , CommandKeys.NONE, new MovieHandler());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(CommandKeys.PLAYLIST, cp.getRootCommand());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(CommandKeys.CREATE, cp.getSubRootCommand());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        } catch (MissingInfoException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(null , cp);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pdotdeep": 76
    }
  },
  {
    "path": "src/test/java/entertainment/pro/logic/parsers/CommandSuperTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//@@author pdotdeep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.logic.parsers;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.enums.CommandKeys;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.exceptions.InvalidFormatCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.exceptions.MissingInfoException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.parsers.commands.SearchCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.ui.MovieHandler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public class CommandSuperTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void subCommand_validInputs_success(){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        SearchCommand sc \u003d new SearchCommand(null);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(true , sc.subCommand(new String[]{\"search\" , \"movies\" , \"testing\"}));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals( CommandKeys.MOVIES, sc.getSubRootCommand());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(true, sc.subCommand(new String[]{\"search\" , \"tvshows\" , \"testing\"}));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(  CommandKeys.TVSHOWS, sc.getSubRootCommand());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(true, sc.subCommand(new String[]{\"search\" , \"mioivies\" , \"testing\"}));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(  CommandKeys.MOVIES, sc.getSubRootCommand());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(true, sc.subCommand(new String[]{\"search\" , \"telvshows\" , \"testing\"}));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(  CommandKeys.TVSHOWS, sc.getSubRootCommand());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(false , sc.subCommand(new String[]{\"search\"}));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals( CommandKeys.NONE, sc.getSubRootCommand());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }catch (Exception e){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void subCommand_invalidInputs_throws_MissingInfoException(){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        SearchCommand sc \u003d new SearchCommand(new MovieHandler());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertThrows(MissingInfoException.class, () -\u003e {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            sc.subCommand(new String[]{\"search\"});"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertThrows(MissingInfoException.class, () -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            sc.subCommand(new String[]{});"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void subCommand_invalidInputs_failure(){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        SearchCommand sc \u003d new SearchCommand(new MovieHandler());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(false , sc.subCommand(new String[]{}));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals( CommandKeys.NONE, sc.getSubRootCommand());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(false , sc.subCommand(new String[]{\"Jupiter is a planet\"}));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals( CommandKeys.NONE, sc.getSubRootCommand());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals(false , sc.subCommand(new String[]{\"search\"}));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals( CommandKeys.NONE, sc.getSubRootCommand());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }catch (MissingInfoException e){"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void processFlags_validInputs_success() throws InvalidFormatCommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        SearchCommand sc \u003d new SearchCommand(null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String command \u003d \"search movies joker -A albert -a alex , ashley , alan -b benny -c\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        sc.processFlags(command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(true , sc.getFlagMap().containsKey(\"-A\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(true , sc.getFlagMap().containsKey(\"-a\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(true , sc.getFlagMap().containsKey(\"-b\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e AFlag \u003d sc.getFlagMap().get(\"-A\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        AFlag.sort(null);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e aFlag \u003d sc.getFlagMap().get(\"-a\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        aFlag.sort(null);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e bFlag \u003d sc.getFlagMap().get(\"-b\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        bFlag.sort(null);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e cFlag \u003d sc.getFlagMap().get(\"-c\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        ArrayList\u003cString\u003e dFlag \u003d sc.getFlagMap().get(\"-d\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(true , AFlag.equals(new ArrayList\u003cString\u003e("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            Arrays.asList(\"albert\"))));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(true , aFlag.equals(new ArrayList\u003cString\u003e("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                Arrays.asList(\"alan\" , \"alex\" , \"ashley\"))));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(true , bFlag.equals(new ArrayList\u003cString\u003e("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                Arrays.asList(\"benny\"))));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(0 , cFlag.size());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(null , dFlag);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        SearchCommand sc2 \u003d new SearchCommand(null);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String command2 \u003d \"search movies joker\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        sc2.processFlags(command2);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(0 , sc2.getFlagMap().keySet().size());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void processFlags_validInputs_failure() throws InvalidFormatCommandException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        SearchCommand sc2 \u003d new SearchCommand(null);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String command2 \u003d \"search movies joker\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        sc2.processFlags(command2);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(0 , sc2.getFlagMap().keySet().size());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String command3 \u003d \"\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        sc2.processFlags(command3);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(0 , sc2.getFlagMap().keySet().size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void processPayload_validInputs_success() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        SearchCommand sc \u003d new SearchCommand(null);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String command \u003d \"search movies joker -A albert -a alex , ashley , alan -b benny -c\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        sc.processPayload(command.split(\" \"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"joker\" , sc.getPayload());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String command2 \u003d \"search movies batman and robbin\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        sc.processPayload(command2.split(\" \"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"batman and robbin\" , sc.getPayload());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String command3 \u003d \"search movies Atlantis\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        sc.processPayload(command3.split(\" \"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"Atlantis\" , sc.getPayload());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String command4 \u003d \"search movies\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        sc.processPayload(command4.split(\" \"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"\" , sc.getPayload());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String command5 \u003d \"search movies \";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        sc.processPayload(command5.split(\" \"));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"\" , sc.getPayload());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void processPayload_invalidInputs() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        SearchCommand sc \u003d new SearchCommand(null);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String command4 \u003d \"search movies\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        sc.processPayload(command4.split(\" \"));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"\" , sc.getPayload());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String command5 \u003d \"search movies \";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        sc.processPayload(command5.split(\" \"));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"\" , sc.getPayload());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String command6 \u003d \"\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        sc.processPayload(command6.split(\" \"));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"\" , sc.getPayload());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        String command7 \u003d \"blreacjlist adu joker\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        sc.processPayload(command7.split(\" \"));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"joker\" , sc.getPayload());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Pdotdeep": 185
    }
  },
  {
    "path": "src/test/java/entertainment/pro/logic/parsers/commands/PreferenceCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.logic.parsers.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.EmptyCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.Exceptions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.InvalidFormatCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.MissingInfoException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.parsers.CommandParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.ui.Controller;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.ui.MovieHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.sql.Array;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class PreferenceCommandTest extends MovieHandler{"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void executeCommands_add_throws_exception()  {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command1 \u003d \"preference add -h action\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command2 \u003d \"preference add -a true, false -t horror\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command3 \u003d \"preference add -a true -s 1 2 -t horror\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command4 \u003d \"preference add -a true, -s 1 2, -t horror\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command5 \u003d \"preference add -a action -t horror\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command6 \u003d \"preference add -at true\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command7 \u003d \"preference add\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        List\u003cString\u003e commandList \u003d Arrays.asList(command1, command2, command3, command4, command5,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                command6, command7);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        for (int i \u003d 0; i \u003c commandList.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            String[] commandParse \u003d commandList.get(i).split(\" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            String testCommand \u003d commandList.get(i);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            assertThrows(InvalidFormatCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                CommandParser.rootCommand(commandParse , testCommand, this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void executeCommands_remove_throws_exception()  {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command1 \u003d \"preference remove -h action\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command2 \u003d \"preference remove -a true, false -t horror\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command3 \u003d \"preference remove -a true -s 1 2 -t horror\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command4 \u003d \"preference remove -a true, -s 1 2, -t horror\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command5 \u003d \"preference remove -a action -t horror\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command6 \u003d \"preference remove -at true\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command7 \u003d \"preference remove\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        List\u003cString\u003e commandList \u003d Arrays.asList(command1, command2, command3, command4, command5,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                command6, command7);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        for (int i \u003d 0; i \u003c commandList.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            String[] commandParse \u003d commandList.get(i).split(\" \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            String testCommand \u003d commandList.get(i);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            assertThrows(InvalidFormatCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                CommandParser.rootCommand(commandParse , testCommand, this);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            });"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void executeCommands_clear_throws_exception()  {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command1 \u003d \"preference clear -h action\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command2 \u003d \"preference clear -a true, false -t horror\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command3 \u003d \"preference clear -a true -s 1 2 -t horror\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command4 \u003d \"preference clear -a true, -s 1 2, -t horror\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command5 \u003d \"preference clear -a action -t horror\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command6 \u003d \"preference clear -at true\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command7 \u003d \"preference clear\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        List\u003cString\u003e commandList \u003d Arrays.asList(command1, command2, command3, command4, command5,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                command6, command7);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        for (int i \u003d 0; i \u003c commandList.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            String[] commandParse \u003d commandList.get(i).split(\" \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            String testCommand \u003d commandList.get(i);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            assertThrows(InvalidFormatCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                CommandParser.rootCommand(commandParse , testCommand, this);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 79
    }
  },
  {
    "path": "src/test/java/entertainment/pro/logic/parsers/commands/SearchCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.logic.parsers.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.movierequesterapi.RetrieveRequest;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.parsers.CommandParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.model.SearchProfile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.ui.MovieHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class SearchCommandTest extends MovieHandler{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    ArrayList\u003cInteger\u003e genrePreference \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    ArrayList\u003cInteger\u003e genreRestriction \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    ArrayList\u003cString\u003e playlist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    boolean isAdultEnabled \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    boolean sortByAlphaOrder \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    boolean sortByRating \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    boolean sortByReleaseDate \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    boolean isMovie \u003d true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    String searchEntryName \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    String name \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    int age \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public SearchProfile searchProfile \u003d new SearchProfile(name, age, genrePreference, genreRestriction, isAdultEnabled,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            playlist, sortByAlphaOrder, sortByRating, sortByReleaseDate, searchEntryName, isMovie);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void executeCommands_returns_empty_param() throws Exceptions {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command1 \u003d \"search movies\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command2 \u003d \"search tvshows\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        MovieHandler movieHandler \u003d new MovieHandler();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        RetrieveRequest retrieveRequest \u003d new RetrieveRequest(movieHandler);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        mMovieRequest \u003d retrieveRequest;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        movieHandler.setSearchProfile(searchProfile);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertThrows(Exceptions.class, () -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            CommandParser.parseCommands(command1, this);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertThrows(Exceptions.class, () -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            CommandParser.parseCommands(command2, this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void executeCommands_returns_invalid_format() throws Exceptions {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command1 \u003d \"search movies /current -g \";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command2 \u003d \"search tvshows /trend -g action -r  \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        MovieHandler movieHandler \u003d new MovieHandler();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        RetrieveRequest retrieveRequest \u003d new RetrieveRequest(movieHandler);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        mMovieRequest \u003d retrieveRequest;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        movieHandler.setSearchProfile(searchProfile);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertThrows(InvalidFormatCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            CommandParser.parseCommands(command1, this);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertThrows(InvalidFormatCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            CommandParser.parseCommands(command2, this);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void executeCommands_returns_invalid_genre() throws Exceptions {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command1 \u003d \"search movies /current -g actio \";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command2 \u003d \"search tvshows /trend -g action -r advent \";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command3 \u003d \"search tvshows /trend -a true -s 1 -g action -r adventure horror \";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        MovieHandler movieHandler \u003d new MovieHandler();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        RetrieveRequest retrieveRequest \u003d new RetrieveRequest(movieHandler);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        mMovieRequest \u003d retrieveRequest;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        movieHandler.setSearchProfile(searchProfile);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertThrows(InvalidGenreNameEnteredException.class, () -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            CommandParser.parseCommands(command1, this);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertThrows(InvalidGenreNameEnteredException.class, () -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            CommandParser.parseCommands(command2, this);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertThrows(InvalidGenreNameEnteredException.class, () -\u003e {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            CommandParser.parseCommands(command3, this);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void executeCommands_returns_repetitve_genre() throws Exceptions {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command1 \u003d \"search movies /current -g action, action\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command2 \u003d \"search tvshows /trend -g action,adventure -r adventure, horror \";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command3 \u003d \"search tvshows /trend -g action, adventure -r horror -g horror \";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        MovieHandler movieHandler \u003d new MovieHandler();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        RetrieveRequest retrieveRequest \u003d new RetrieveRequest(movieHandler);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        mMovieRequest \u003d retrieveRequest;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        movieHandler.setSearchProfile(searchProfile);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertThrows(DuplicateGenreException.class, () -\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            CommandParser.parseCommands(command1, this);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertThrows(DuplicateGenreException.class, () -\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            CommandParser.parseCommands(command2, this);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertThrows(DuplicateGenreException.class, () -\u003e {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            CommandParser.parseCommands(command3, this);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void executeCommands_returns_invalid_adult() throws Exceptions {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command1 \u003d \"search movies /current -g action -a yes\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command2 \u003d \"search tvshows /popular -g action, adventure -r horror -a true false \";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command3 \u003d \"search tvshows /current -a true, false \";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command4 \u003d \"search tvshows /current -a true -g action -a true \";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        MovieHandler movieHandler \u003d new MovieHandler();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        RetrieveRequest retrieveRequest \u003d new RetrieveRequest(movieHandler);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        mMovieRequest \u003d retrieveRequest;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        movieHandler.setSearchProfile(searchProfile);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertThrows(InvalidFormatCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            CommandParser.parseCommands(command1, this);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertThrows(InvalidFormatCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            CommandParser.parseCommands(command2, this);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertThrows(InvalidFormatCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            CommandParser.parseCommands(command3, this);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertThrows(InvalidFormatCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            CommandParser.parseCommands(command4, this);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void executeCommands_returns_empty_adult() throws Exceptions {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command1 \u003d \"search movies /current -g action -a \";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        MovieHandler movieHandler \u003d new MovieHandler();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        RetrieveRequest retrieveRequest \u003d new RetrieveRequest(movieHandler);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        mMovieRequest \u003d retrieveRequest;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        movieHandler.setSearchProfile(searchProfile);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertThrows(InvalidFormatCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            CommandParser.parseCommands(command1, this);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void executeCommands_returns_invalid_sort() throws Exceptions {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command1 \u003d \"search movies /current -g action -a true -s 12\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command2 \u003d \"search tvshows /popular -g action, adventure -r horror -a false -s 0 \";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command3 \u003d \"search tvshows /current -a true -s 1, 2\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command4 \u003d \"search tvshows /current -a true -s 2 -g action -s 3\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        MovieHandler movieHandler \u003d new MovieHandler();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        RetrieveRequest retrieveRequest \u003d new RetrieveRequest(movieHandler);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        mMovieRequest \u003d retrieveRequest;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        movieHandler.setSearchProfile(searchProfile);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertThrows(InvalidFormatCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            CommandParser.parseCommands(command1, this);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertThrows(InvalidFormatCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            CommandParser.parseCommands(command2, this);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertThrows(InvalidFormatCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            CommandParser.parseCommands(command3, this);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertThrows(InvalidFormatCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            CommandParser.parseCommands(command4, this);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void executeCommands_returns_empty_sort() throws Exceptions {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String command1 \u003d \"search movies /current -g action -a true -s \";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        MovieHandler movieHandler \u003d new MovieHandler();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        RetrieveRequest retrieveRequest \u003d new RetrieveRequest(movieHandler);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        mMovieRequest \u003d retrieveRequest;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        movieHandler.setSearchProfile(searchProfile);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertThrows(InvalidFormatCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            CommandParser.parseCommands(command1, this);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Riyas97": 172,
      "Pdotdeep": 1
    }
  },
  {
    "path": "src/test/java/entertainment/pro/logic/parsers/commands/ViewCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.logic.parsers.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.Exceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.InvalidFormatCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.MissingInfoException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.movierequesterapi.RequestListener;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.movierequesterapi.RetrieveRequest;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.movierequesterapi.RetrieveRequest;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.logic.movierequesterapi.RetrieveRequestTest;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.parsers.CommandParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.model.MovieInfoObject;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.model.SearchProfile;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.ui.MovieHandler;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import org.json.simple.JSONArray;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import org.json.simple.JSONObject;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import org.json.simple.parser.JSONParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import org.json.simple.parser.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class ViewCommandTest extends MovieHandler{"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    ArrayList\u003cInteger\u003e genrePreference \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    ArrayList\u003cInteger\u003e genreRestriction \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    ArrayList\u003cString\u003e playlist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    boolean isAdultEnabled \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    boolean sortByAlphaOrder \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    boolean sortByRating \u003d false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    boolean sortByReleaseDate \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    boolean isMovie \u003d true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    String searchEntryName \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    String name \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    int age \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     * Initializes the Search Profile."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public SearchProfile searchProfile \u003d new SearchProfile(name, age, genrePreference, genreRestriction, isAdultEnabled,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            playlist, sortByAlphaOrder, sortByRating, sortByReleaseDate, searchEntryName, isMovie);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void executeEntryCommandsTest_returns_exceptions() throws Exceptions, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        MovieHandler movieHandler \u003d new MovieHandler();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        RetrieveRequest retrieveRequest \u003d new RetrieveRequest(movieHandler);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        mMovieRequest \u003d retrieveRequest;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertThrows(InvalidFormatCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            movieHandler.showMovie(1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String filename \u003d \"/data/movieData/1.json\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String dataFromJSON \u003d RetrieveRequestTest.getString(filename);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        JSONParser jsonParser \u003d new JSONParser();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        JSONArray jsonArray \u003d new JSONArray();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            jsonArray \u003d (JSONArray) jsonParser.parse(dataFromJSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        movieHandler.setSearchProfile(searchProfile);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        for (int i \u003d 0; i \u003c jsonArray.size(); i +\u003d 1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            JSONObject jsonObject \u003d (JSONObject) jsonArray.get(i);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            MovieInfoObject movieInfoObject \u003d RetrieveRequest.parseMovieJson(jsonObject);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            movieHandler.mMovies.add(movieInfoObject);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertThrows(InvalidFormatCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            movieHandler.showMovie(-1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        int num \u003d mMovies.size() + 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertThrows(InvalidFormatCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            movieHandler.showMovie(num);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void executeBackCommandsTest_returns_exceptions() throws MissingInfoException, Exceptions, IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String testCommand \u003d \"view back\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String[] commandParse \u003d testCommand.split(\" \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertThrows(Exceptions.class, () -\u003e {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            CommandParser.rootCommand(commandParse, testCommand, this);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String testCommand1 \u003d \"search movies /current\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        String[] commandParse1 \u003d testCommand1.split(\" \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        CommandParser.rootCommand(commandParse1, testCommand1, this);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertThrows(Exceptions.class, () -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            CommandParser.rootCommand(commandParse, testCommand, this);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 90,
      "Pdotdeep": 2
    }
  },
  {
    "path": "src/test/java/entertainment/pro/model/DeadlineTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "package entertainment.pro.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public void getDateSuccess() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Deadline d_event \u003d new Deadline(\"Joker\", \"D\", \"20/09/2019 22:00\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"20th of September 2019, 10:00 PM\", d_event.getDate().toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        d_event \u003d new Deadline(\"Joker\", \"D\", \"20/09/2019\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"20th of September 2019, 12:00 AM\", d_event.getDate().toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        d_event \u003d new Deadline(\"Joker\", \"D\", \"20/09/2019 2200\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"20th of September 2019, 10:00 PM\", d_event.getDate().toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        d_event \u003d new Deadline(\"Joker\", \"D\", \"20/09/2019 1000\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"20th of September 2019, 10:00 AM\", d_event.getDate().toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        d_event \u003d new Deadline(\"Joker\", \"D\", \"20-SEP-2019 1000\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"20th of September 2019, 10:00 AM\", d_event.getDate().toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public void getDateFailure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Deadline d_event \u003d new Deadline(\"Joker\", \"D\", \"20-09-2019 22:00\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(false, d_event.getDate().toString().equals(\"20th of September 2019, 10:00 PM\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        d_event \u003d new Deadline(\"Joker\", \"D\", \"20/SEP/2019\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(false, d_event.getDate().toString().equals(\"20th of September 2019, 12:00 AM\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        d_event \u003d new Deadline(\"Joker\", \"D\", \"2019/09/20 2200\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(false, d_event.getDate().toString().equals(\"20th of September 2019, 10:00 PM\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        d_event \u003d new Deadline(\"Joker\", \"D\", \"20/09/2019 2200AM\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(false, d_event.getDate().toString().equals(\"20th of September 2019, 10:00 AM\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        d_event \u003d new Deadline(\"Joker\", \"D\", \"2019-09-20 1000PM\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(false, d_event.getDate().toString().equals(\"20th of September 2019, 10:00 AM\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public void setTimeSuccess() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Deadline d_event \u003d new Deadline(\"Joker\", \"D\", \"20/09/2019 22:00\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"20th of September 2019, 10:00 PM\", d_event.getDate().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        d_event.setTime(\"20/09/2019 16:00\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"20th of September 2019, 04:00 PM\", d_event.getDate().toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Deadline d_event2 \u003d new Deadline(\"Joker\", \"D\", \"20/09/2019 2200\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"20th of September 2019, 10:00 PM\", d_event2.getDate().toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        d_event2.setTime(\"20/09/2019 1600\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"20th of September 2019, 04:00 PM\", d_event2.getDate().toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Deadline d_event3 \u003d new Deadline(\"Joker\", \"D\", \"20-SEP-2019 2200\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"20th of September 2019, 10:00 PM\", d_event3.getDate().toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        d_event3.setTime(\"20-SEP-2019 1600\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"20th of September 2019, 04:00 PM\", d_event3.getDate().toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public void setTimeFailure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Deadline d_event \u003d new Deadline(\"Joker\", \"D\", \"20/09/2019 22:00\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"20th of September 2019, 10:00 PM\", d_event.getDate().toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        d_event.setTime(\"20/09/2019 16:00\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"20th of September 2019, 04:00 PM\", d_event.getDate().toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Deadline d_event2 \u003d new Deadline(\"Joker\", \"D\", \"20/09/2019 2200\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"20th of September 2019, 10:00 PM\", d_event2.getDate().toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        d_event2.setTime(\"20/09/2019 1600\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"20th of September 2019, 04:00 PM\", d_event2.getDate().toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Deadline d_event3 \u003d new Deadline(\"Joker\", \"D\", \"20-SEP-2019 2200\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"20th of September 2019, 10:00 PM\", d_event3.getDate().toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        d_event3.setTime(\"20-SEP-2019 1600\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"20th of September 2019, 04:00 PM\", d_event3.getDate().toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public void toMessageSuccess() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Deadline d_event \u003d new Deadline(\"Joker\", \"D\", \"20/09/2019 22:00\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"Joker (by: 20th of September 2019, 10:00 PM)\", d_event.toMessage());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Deadline d_event2 \u003d new Deadline(\"Batman Begins\", \"D\", \"20/09/2019 16:00\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"Batman Begins (by: 20th of September 2019, 04:00 PM)\", d_event2.toMessage());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Deadline d_event3 \u003d new Deadline(\"Superman\", \"D\", \"20/09/2019\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"Superman (by: 20th of September 2019, 12:00 AM)\", d_event3.toMessage());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public void toMessageFailure() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Deadline d_event \u003d new Deadline(\"Batman\", \"D\", \"20/09/2019 22:00\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(false, d_event.toMessage().equals(\"Joker (by: 20th of September 2019, 10:00 PM)\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Deadline d_event2 \u003d new Deadline(\"Joker\", \"D\", \"2019/09/20 16:00\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(false, d_event2.toMessage().equals(\"Joker (by: 20th of September 2019, 04:00 PM)\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Deadline d_event3 \u003d new Deadline(\"Superman\", \"D\", \"20-09-2019\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(false, d_event3.toMessage().equals(\"Superman (by: 20th of September 2019, 12:00 AM)\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hotspur1997": 106
    }
  },
  {
    "path": "src/test/java/entertainment/pro/model/PeriodTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "package entertainment.pro.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "public class PeriodTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public void getPeriodSuccess() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Period p_event \u003d new Period(\"Joker\", \"P\", \"20/09/2019 22:00\", \"20/09/2019 00:00\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"20th of September 2019, 10:00 PM to 20th of September 2019, 12:00 AM\", p_event.getPeriod());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Period p_event2 \u003d new Period(\"Batman\", \"P\", \"20/09/2019 22:00\", \"01/10/2019 00:00\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"20th of September 2019, 10:00 PM to 01st of October 2019, 12:00 AM\", p_event2.getPeriod());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Period p_event3 \u003d new Period(\"Batman\", \"P\", \"20/09/2019 1000\", \"01/10/2019 1400\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"20th of September 2019, 10:00 AM to 01st of October 2019, 02:00 PM\", p_event3.getPeriod());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Period p_event4 \u003d new Period(\"Superman\", \"P\", \"20/09/2019 1000\", \"01-OCT-2019 1400\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"20th of September 2019, 10:00 AM to 01st of October 2019, 02:00 PM\", p_event4.getPeriod());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Period p_event5 \u003d new Period(\"Superman\", \"P\", \"20-SEP-2019 1000\", \"01-OCT-2019 1400\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"20th of September 2019, 10:00 AM to 01st of October 2019, 02:00 PM\", p_event5.getPeriod());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public void getPeriodFailure() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Period p_event \u003d new Period(\"Joker\", \"P\", \"20/09/2019 2200\", \"20/09/2020 00:00\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(false, p_event.getPeriod().equals(\"20th of September 2019, 10:00 PM to 20th of September 2019, 12:00 AM\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Period p_event2 \u003d new Period(\"Joker\", \"P\", \"20/10/2019 2200\", \"20/09/2019 00:00\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(false, p_event2.getPeriod().equals(\"20th of September 2019, 10:00 PM to 20th of September 2019, 12:00 AM\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Period p_event3 \u003d new Period(\"Joker\", \"P\", \"20/10/2019 2200\", \"20/09/2019 8 PM\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(false, p_event3.getPeriod().equals(\"20th of September 2019, 10:00 PM to 20th of September 2019, 8:00 PM\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Period p_event4 \u003d new Period(\"Joker\", \"P\", \"20/10/2019 2200\", \"20-09-2019 12:00\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(false, p_event4.getPeriod().equals(\"20th of September 2019, 10:00 PM to 20th of September 2019, 12:00 AM\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Period p_event5 \u003d new Period(\"Superman\", \"P\", \"20-08-2019 1000\", \"01-09-2019 1400\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(false, p_event5.getPeriod().equals(\"20th of August 2019, 10:00 PM to 01st of September 2019, 12:00 AM\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public void toMessageSuccess() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Period p_event \u003d new Period(\"Joker\", \"P\", \"20/09/2019 22:00\", \"20/09/2019 00:00\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(true, p_event.toMessage().equals(\"Joker (Period: 20th of September 2019, 10:00 PM to 20th of September 2019, 12:00 AM)\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Period p_event2 \u003d new Period(\"Joker\", \"P\", \"20/09/2019 16:00\", \"20/09/2019 20:00\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(true, p_event2.toMessage().equals(\"Joker (Period: 20th of September 2019, 04:00 PM to 20th of September 2019, 08:00 PM)\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Period p_event3 \u003d new Period(\"Joker\", \"P\", \"20/09/2019 2000\", \"20/09/2019 2300\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(true, p_event3.toMessage().equals(\"Joker (Period: 20th of September 2019, 08:00 PM to 20th of September 2019, 11:00 PM)\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Period p_event4 \u003d new Period(\"Joker\", \"P\", \"20-SEP-2019 20:00\", \"20-OCT-2019 23:00\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(true, p_event4.toMessage().equals(\"Joker (Period: 20th of September 2019, 08:00 PM to 20th of October 2019, 11:00 PM)\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Period p_event5 \u003d new Period(\"Joker\", \"P\", \"20-SEP-2019 2100\", \"20-OCT-2019 2350\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(true, p_event5.toMessage().equals(\"Joker (Period: 20th of September 2019, 09:00 PM to 20th of October 2019, 11:50 PM)\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public void toMessageFailure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Period p_event \u003d new Period(\"Joker\", \"P\", \"20/09/2019 10 PM\", \"20/09/2019 12 AM\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(false, p_event.toMessage().equals(\"Joker (Period: 20th of September 2019, 10:00 PM to 20th of September 2019, 12:00 AM)\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Period p_event2 \u003d new Period(\"Joker\", \"P\", \"20/SEP/2019 16:00\", \"20/09/2019 8PM\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(false, p_event2.toMessage().equals(\"Joker (Period: 20th of September 2019, 04:00 PM to 20th of September 2019, 08:00 PM)\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Period p_event3 \u003d new Period(\"Joker\", \"P\", \"20/09/2019 PM8\", \"20/09/2019 PM11\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(false, p_event3.toMessage().equals(\"Joker (Period: 20th of September 2019, 08:00 PM to 20th of September 2019, 11:00 PM)\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Period p_event4 \u003d new Period(\"Joker\", \"P\", \"20-SEP-2019 8PM\", \"20-OCT-2019 11PM\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(false, p_event4.toMessage().equals(\"Joker (Period: 20th of September 2019, 08:00 PM to 20th of October 2019, 11:00 PM)\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Period p_event5 \u003d new Period(\"Joker\", \"P\", \"20-SEP-2019 900PM\", \"20-OCT-2019 1150PM\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(false, p_event5.toMessage().equals(\"Joker (Period: 20th of September 2019, 09:00 PM to 20th of October 2019, 11:50 PM)\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hotspur1997": 86
    }
  },
  {
    "path": "src/test/java/entertainment/pro/storage/user/BlacklistTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//@@author pdotdeep"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "package entertainment.pro.storage.user;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.commons.exceptions.MissingInfoException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.model.MovieInfoObject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.model.MovieModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import entertainment.pro.storage.utils.BlacklistStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.rmi.UnexpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "public class BlacklistTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void addToBlacklistKeyWord_validInputs_success() throws DuplicateEntryException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistKeyWord(\"joker\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistKeyWord(\"washington DC\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistKeyWord(\"harry\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(true , Blacklist.getBlackListKeyWords().contains(\"joker\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(true , Blacklist.getBlackListKeyWords().contains(\"washington dc\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(true , Blacklist.getBlackListKeyWords().contains(\"harry\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void addToBlacklistKeyWord_invalidInputs_throws_DuplicateEntryException(){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertThrows(DuplicateEntryException.class, () -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            Blacklist.addToBlacklistKeyWord(\"batman\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            Blacklist.addToBlacklistKeyWord(\"batman\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertThrows(DuplicateEntryException.class, () -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            Blacklist.addToBlacklistKeyWord(\"joker\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            Blacklist.addToBlacklistKeyWord(\"joker\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void addToBlacklistKeyWord_invalidInputs() throws DuplicateEntryException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistKeyWord(\" \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEmptyAll();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void addToBlacklistMoviesID_validInputs_success() throws DuplicateEntryException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistMoviesID(new MovieInfoObject(1234 , \"movie 1\" , true));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistMoviesID(new MovieInfoObject(2345 , \"movie 2\" , true));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistMoviesID(new MovieInfoObject(3456 , \"movie 3\" , true));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(true , BlackListMoviesContains(\"movie 1\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(true , BlackListMoviesContains(\"movie 2\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(true , BlackListMoviesContains(\"movie 3\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void addToBlacklistMoviesID_invalidInputs_failure() throws DuplicateEntryException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistMoviesID(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEmptyAll();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistMoviesID(new MovieInfoObject(-1 , \"\" , true));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEmptyAll();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void addToBlacklistMoviesID_invalidInputs_throws_DuplicateEntryException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertThrows(DuplicateEntryException.class, () -\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            Blacklist.addToBlacklistMoviesID(new MovieInfoObject(10, \"test\" , true));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            Blacklist.addToBlacklistMoviesID(new MovieInfoObject(10, \"test\" , true));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        });"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(1 , Blacklist.getBlackListMovies().size());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public boolean BlackListMoviesContains(String key) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        for( MovieModel m : Blacklist.getBlackListMovies() ) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            if(m.getTitle().toLowerCase().equals(key)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void addToBlacklistMovie_validInputs_success() throws DuplicateEntryException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistMovie(\"joker\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistMovie(\"washington DC\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistMovie(\"harry\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(true , Blacklist.getBlackListMoviesTitle().contains(\"joker\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(true , Blacklist.getBlackListMoviesTitle().contains(\"washington dc\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(true , Blacklist.getBlackListMoviesTitle().contains(\"harry\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void addToBlacklistMovie_invalidInputs_failure() throws DuplicateEntryException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistMovie(\" \");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEmptyAll();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void addToBlacklistMovie_invalidInputs_failure_throws_DuplicateEntryException(){"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertThrows(DuplicateEntryException.class, () -\u003e {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            Blacklist.addToBlacklistMovie(\"joker\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            Blacklist.addToBlacklistMovie(\"joker\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            Blacklist.addToBlacklistMovie(\"joker\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "            assertEquals( 1 , Blacklist.getBlackListMovies().size());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        });"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void assertEmptyAll() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(0 , Blacklist.getBlackListKeyWords().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(0 , Blacklist.getBlackListMovies().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(0 , Blacklist.getBlackListMoviesTitle().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void removeFromBlacklistKeyWord_validInputs_success() throws DuplicateEntryException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistKeyWord(\"joker\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistKeyWord(\"washington DC\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistKeyWord(\"harry\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(true , Blacklist.getBlackListKeyWords().contains(\"joker\"));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(true , Blacklist.getBlackListKeyWords().contains(\"washington dc\"));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(true , Blacklist.getBlackListKeyWords().contains(\"harry\"));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.removeFromBlacklistKeyWord(\"joker\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(false , Blacklist.getBlackListKeyWords().contains(\"joker\"));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.removeFromBlacklistKeyWord(\"washington DC\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(false , Blacklist.getBlackListKeyWords().contains(\"washington dc\"));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.removeFromBlacklistKeyWord(\"HArry\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(false , Blacklist.getBlackListKeyWords().contains(\"harry\"));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void removeFromBlacklistKeyWord_invalidInputs_failure(){"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(false , Blacklist.removeFromBlacklistKeyWord(\"joker\"));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(false , Blacklist.removeFromBlacklistKeyWord(\"\"));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void removeFromBlacklistMovieTitle_validInputs_success() throws DuplicateEntryException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistMovie(\"joker\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistMovie(\"washington DC\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistMoviesID(new MovieInfoObject(1234 , \"movie 1\" , true));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistMoviesID(new MovieInfoObject(2345 , \"movie 2\" , true));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        System.out.println(Blacklist.printList());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.removeFromBlacklistMovieTitle(\"movie 1\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.removeFromBlacklistMovieTitle(\"joker\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.removeFromBlacklistMovieTitle(\"washington dc\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.removeFromBlacklistMovieTitle(\"movie 2\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(false , Blacklist.getBlackListMoviesTitle().contains(\"joker\"));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(false , Blacklist.getBlackListMoviesTitle().contains(\"washington dc\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(false , BlackListMoviesContains(\"movie 1\"));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(false , BlackListMoviesContains(\"movie 2\"));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        System.out.println(Blacklist.printList());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void removeFromBlacklistMovieTitle_invalidInputs_failure(){"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(false , Blacklist.removeFromBlacklistMovieTitle(\"joker\"));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(false , Blacklist.removeFromBlacklistMovieTitle(\"\"));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void removeFromBlacklistMovies_validInputs_success() throws DuplicateEntryException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistMovie(\"joker\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistMovie(\"washington DC\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistMoviesID(new MovieInfoObject(1234 , \"movie 1\" , true));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistMoviesID(new MovieInfoObject(2345 , \"movie 2\" , true));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        System.out.println(Blacklist.printList());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.removeFromBlacklistMovies(new MovieInfoObject(1234 , \"movie 1\" , true));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.removeFromBlacklistMovies(new MovieInfoObject(2345 , \"movie 2\" , true));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.removeFromBlacklistMovies(new MovieInfoObject(9999 , \"joker\" , true));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.removeFromBlacklistMovies(new MovieInfoObject(6666 , \"washington DC\" , true));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        System.out.println(Blacklist.printList());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(false , Blacklist.getBlackListMoviesTitle().contains(\"joker\"));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(false , Blacklist.getBlackListMoviesTitle().contains(\"washington dc\"));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(false , BlackListMoviesContains(\"movie 1\"));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(false , BlackListMoviesContains(\"movie 2\"));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void removeFromBlacklistMovies_invalidInputs_failure(){"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(false , Blacklist.removeFromBlacklistMovies(new MovieInfoObject(10, \"test\" , true)));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(false , Blacklist.removeFromBlacklistMovies(new MovieInfoObject(-1, \"\" , true)));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void getBlackListHints_validInputs_success() throws DuplicateEntryException {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistKeyWord(\"batman\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistKeyWord(\"harry potter\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistMovie(\"joker\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistMovie(\"washington DC\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistMoviesID(new MovieInfoObject(1234 , \"movie 1\" , true));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistMoviesID(new MovieInfoObject(2345 , \"movie 2\" , true));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"joker\" , Blacklist.getBlackListHints(\"jok\").get(0));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"harry potter\" , Blacklist.getBlackListHints(\"Har\").get(0));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(\"movie 1\" , Blacklist.getBlackListHints(\"mov\").get(0));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(2 , Blacklist.getBlackListHints(\"mov\").size());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void getBlackListHints_invalidInputs_failure() throws DuplicateEntryException {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistKeyWord(\"batman\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistKeyWord(\"harry potter\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistMovie(\"joker\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistMovie(\"washington DC\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistMoviesID(new MovieInfoObject(1234 , \"movie 1\" , true));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.addToBlacklistMoviesID(new MovieInfoObject(2345 , \"movie 2\" , true));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(0 , Blacklist.getBlackListHints(\"obama\").size());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEquals(6 , Blacklist.getBlackListHints(\"\").size());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void clearBlacklist_test(){"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.clearBlacklist();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        assertEmptyAll();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public void clearBlackList(){"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        Blacklist.clearBlacklist();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    public static void deleteBlackListFile() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "        //TODO delete FILE"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Pdotdeep": 295
    }
  },
  {
    "path": "src/test/java/entertainment/pro/storage/user/PlaylistTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "package entertainment.pro.storage.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.commons.exceptions.InvalidParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.commons.exceptions.logic.PlaylistExceptions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.model.MovieInfoObject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.model.Playlist;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.model.PlaylistMovieInfoObject;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.model.UserProfile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.storage.utils.EditProfileJson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "public class PlaylistTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private final String playlistName \u003d \"testName\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private Playlist testPlaylist \u003d new Playlist(playlistName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private final String playlistDescription \u003d \"testDescription\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private final MovieInfoObject testMovieInfoObject1 \u003d new MovieInfoObject(1234, \"title1\", true, new Date(), \"summary1\", \"posterpath\", \"backdroppath\", 1.2, new ArrayList\u003c\u003e(), false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private final MovieInfoObject testMovieInfoObject2 \u003d new MovieInfoObject(4321, \"title2\", true, new Date(), \"summary2\", \"posterpath\", \"backdroppath\", 1.2, new ArrayList\u003c\u003e(), false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private ArrayList\u003cMovieInfoObject\u003e movies \u003d new ArrayList\u003c\u003e(); {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        movies.add(testMovieInfoObject1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        movies.add(testMovieInfoObject2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    void addToPlaylistTest() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            PlaylistCommands playlistCommands \u003d new PlaylistCommands(playlistName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMapTest \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ArrayList\u003cString\u003e arrayListTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            arrayListTest.add(\"1\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            arrayListTest.add(\"2\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            flagMapTest.put(\"-m\", arrayListTest);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            Playlist actual \u003d playlistCommands.add(testPlaylist, flagMapTest, movies);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            Playlist expected \u003d new Playlist(playlistName, \"\", convert(movies));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            assertEqualPlaylist(expected, actual);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    void removeFromPlaylistTest() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            testPlaylist \u003d testPlaylist.add(convert(movies));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            PlaylistCommands playlistCommands \u003d new PlaylistCommands(playlistName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMapTest \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ArrayList\u003cString\u003e arrayListTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            arrayListTest.add(\"1\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            flagMapTest.put(\"-m\", arrayListTest);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ArrayList\u003cMovieInfoObject\u003e playlistMovies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            playlistMovies.add(testMovieInfoObject2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            Playlist actual \u003d playlistCommands.remove(testPlaylist, flagMapTest);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            Playlist expected \u003d new Playlist(playlistName, \"\", convert(playlistMovies));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            assertEqualPlaylist(expected, actual);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    void clearPlaylistTest() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            testPlaylist \u003d testPlaylist.add(convert(movies));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            PlaylistCommands playlistCommands \u003d new PlaylistCommands(playlistName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            Playlist actual \u003d playlistCommands.clear(testPlaylist);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            Playlist expected \u003d new Playlist(playlistName, \"\", new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            assertEqualPlaylist(expected, actual);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    void setNameTest() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            PlaylistCommands playlistCommands \u003d new PlaylistCommands(playlistName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMapTest \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ArrayList\u003cString\u003e arrayListTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            arrayListTest.add(\"new title\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            flagMapTest.put(\"-n\", arrayListTest);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            Playlist actual \u003d playlistCommands.setToPlaylist(testPlaylist, flagMapTest);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            Playlist expected \u003d new Playlist(\"new title\", \"\", new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            assertEqualPlaylist(expected, actual);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    void setDescriptionTest() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            PlaylistCommands playlistCommands \u003d new PlaylistCommands(playlistName);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMapTest \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ArrayList\u003cString\u003e arrayListTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            arrayListTest.add(playlistDescription);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            flagMapTest.put(\"-d\", arrayListTest);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            Playlist actual \u003d playlistCommands.setToPlaylist(testPlaylist, flagMapTest);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            Playlist expected \u003d new Playlist(playlistName, playlistDescription, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            assertEqualPlaylist(expected, actual);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    void setBothTest() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            PlaylistCommands playlistCommands \u003d new PlaylistCommands(playlistName);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMapTest \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ArrayList\u003cString\u003e arrayListDescription \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            arrayListDescription.add(playlistDescription);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            flagMapTest.put(\"-d\", arrayListDescription);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ArrayList\u003cString\u003e arrayListName \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            arrayListName.add(\"new title\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            flagMapTest.put(\"-n\", arrayListName);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            Playlist actual \u003d playlistCommands.setToPlaylist(testPlaylist, flagMapTest);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            Playlist expected \u003d new Playlist(\"new title\", playlistDescription, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            assertEqualPlaylist(expected, actual);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    void duplicateAddTest() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        Assertions.assertThrows(InvalidParameterException.class, () -\u003e {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            UserProfile userProfile \u003d new EditProfileJson().load();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            testPlaylist \u003d testPlaylist.add(convert(movies));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMapTest \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ArrayList\u003cString\u003e arrayListTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            arrayListTest.add(\"1\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            arrayListTest.add(\"2\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            flagMapTest.put(\"-m\", arrayListTest);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            PlaylistExceptions.checkAddCommand(playlistName, flagMapTest, userProfile, movies);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        });"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    void nonExistentRemoveTest() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        Assertions.assertThrows(InvalidParameterException.class, () -\u003e {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            UserProfile userProfile \u003d new EditProfileJson().load();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMapTest \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ArrayList\u003cString\u003e arrayListTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            arrayListTest.add(\"1\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            arrayListTest.add(\"2\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            flagMapTest.put(\"-m\", arrayListTest);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            PlaylistExceptions.checkRemoveCommand(playlistName, flagMapTest, userProfile, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        });"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    static void clear() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        PlaylistCommands playlistCommands \u003d new PlaylistCommands(\"testName\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        playlistCommands.delete();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        assertFalse(new File(\"./testName.json\").exists());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private ArrayList\u003cPlaylistMovieInfoObject\u003e convert(ArrayList\u003cMovieInfoObject\u003e movies) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        ArrayList\u003cPlaylistMovieInfoObject\u003e convertMovies \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        for (MovieInfoObject log : movies) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            Date date \u003d log.getReleaseDateInfo();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            String string \u003d dateFormat.format(date);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            System.out.println(\"help \" + log.getTitle() + \" \" + log.getFullPosterPathInfo());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            boolean fakeType \u003d false;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            PlaylistMovieInfoObject testMovie \u003d new PlaylistMovieInfoObject(fakeType, log.getId(),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    log.getTitle(), log.getReleaseDateInfo(), log.getSummaryInfo(), log.getRatingInfo(),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    log.getGenreIdInfo(), log.getFullPosterPathInfo(), log.getFullBackdropPathInfo(),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "                    log.isAdultContent(), string);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            convertMovies.add(testMovie);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        return convertMovies;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private void assertEqualPlaylist(Playlist expected, Playlist actual) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        assertEquals(expected.getPlaylistName(), actual.getPlaylistName());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        assertEquals(expected.getDescription(), actual.getDescription());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        assertEquals(expected.getMovies(), actual.getMovies());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwenhui": 191
    }
  },
  {
    "path": "src/test/java/entertainment/pro/storage/user/UserProfileTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "package entertainment.pro.storage.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.commons.exceptions.InvalidParameterException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.commons.exceptions.NoPermissionException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.commons.exceptions.logic.SetExceptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.model.UserProfile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nwenhui"
        },
        "content": " * test codes for setting of user profile."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nwenhui"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "public class UserProfileTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private UserProfile testUserProfile \u003d new UserProfile();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private ProfileCommands profileCommands \u003d new ProfileCommands(testUserProfile);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    UserProfileTest() throws IOException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    void setNameTest() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            UserProfile actual \u003d profileCommands.setName(\"test\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            UserProfile expected \u003d new UserProfile(\"test\", -1, new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), true, new ArrayList\u003c\u003e(), false, false, false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            assertEqualProfile(expected, actual);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    void setAgeTest() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            UserProfile actual \u003d profileCommands.setAge(\"10\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            UserProfile expected \u003d new UserProfile(\"\", 10, new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), false, new ArrayList\u003c\u003e(), false, false, false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            assertEqualProfile(expected, actual);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    void setGenrePreferenceTest() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMapTest \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ArrayList\u003cString\u003e genreListTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            genreListTest.add(\"comedy\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            flagMapTest.put(\"-g\", genreListTest);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            UserProfile actual \u003d profileCommands.setPreference(flagMapTest);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ArrayList\u003cInteger\u003e genreIdListTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            genreIdListTest.add(35);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            UserProfile expected \u003d new UserProfile(\"\", -1, genreIdListTest, new ArrayList\u003c\u003e(), true, new ArrayList\u003c\u003e(), false, false, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            assertEqualProfile(expected, actual);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    void setGenreRestrictionTest() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMapTest \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ArrayList\u003cString\u003e genreListTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            genreListTest.add(\"comedy\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            flagMapTest.put(\"-g\", genreListTest);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            UserProfile actual \u003d profileCommands.setRestriction(flagMapTest);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ArrayList\u003cInteger\u003e genreIdListTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            genreIdListTest.add(35);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            UserProfile expected \u003d new UserProfile(\"\", -1, new ArrayList\u003c\u003e(), genreIdListTest, true, new ArrayList\u003c\u003e(), false, false, false);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            assertEqualProfile(expected, actual);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    void setAdultTest() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMapTest \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ArrayList\u003cString\u003e genreListTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            genreListTest.add(\"no\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            flagMapTest.put(\"-a\", genreListTest);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            UserProfile actual \u003d profileCommands.setPreference(flagMapTest);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            UserProfile expected \u003d new UserProfile(\"\", -1, new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), false, new ArrayList\u003c\u003e(), false, false, false);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            assertEqualProfile(expected, actual);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    void setSortTest() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            UserProfile actual \u003d profileCommands.setSort(true, false, false);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            UserProfile expected \u003d new UserProfile(\"\", -1, new ArrayList\u003c\u003e(), new ArrayList\u003c\u003e(), true, new ArrayList\u003c\u003e(), true, false, false);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            assertEqualProfile(expected, actual);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    void setRestrictionFailTest() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        Assertions.assertThrows(InvalidParameterException.class, () -\u003e {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMapTest \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ArrayList\u003cString\u003e genreListTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            genreListTest.add(\"comedy\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            flagMapTest.put(\"-g\", genreListTest);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ArrayList\u003cInteger\u003e genreIdListTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            genreIdListTest.add(35);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            testUserProfile \u003d testUserProfile.setGenreIdPreference(genreIdListTest);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            SetExceptions.checkRestrictionCommand(flagMapTest, testUserProfile);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        });"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    void setInvalidRestrictionFailTest() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        Assertions.assertThrows(InvalidParameterException.class, () -\u003e {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMapTest \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ArrayList\u003cString\u003e genreListTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            genreListTest.add(\"fake genre\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            flagMapTest.put(\"-g\", genreListTest);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            SetExceptions.checkRestrictionCommand(flagMapTest, testUserProfile);        });"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    void setPreferenceFailTest() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        Assertions.assertThrows(InvalidParameterException.class, () -\u003e {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMapTest \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ArrayList\u003cString\u003e genreListTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            genreListTest.add(\"comedy\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            flagMapTest.put(\"-g\", genreListTest);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ArrayList\u003cInteger\u003e genreIdListTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            genreIdListTest.add(35);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            testUserProfile \u003d testUserProfile.setGenreIdRestriction(genreIdListTest);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            SetExceptions.checkPreferenceCommand(flagMapTest, testUserProfile);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        });"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    void setInvalidPreferenceFailTest() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        Assertions.assertThrows(InvalidParameterException.class, () -\u003e {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMapTest \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ArrayList\u003cString\u003e genreListTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            genreListTest.add(\"fake genre\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            flagMapTest.put(\"-g\", genreListTest);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            SetExceptions.checkPreferenceCommand(flagMapTest, testUserProfile);        });"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    void setSortFailTest() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        Assertions.assertThrows(InvalidParameterException.class, () -\u003e {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            SetExceptions.checkSortCommand(\"4\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        });"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    void setAgeFailTest() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        Assertions.assertThrows(InvalidParameterException.class, () -\u003e {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            SetExceptions.checkAgeCommand(\"four\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        });"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    void setAdultFailTest() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        Assertions.assertThrows(NoPermissionException.class, () -\u003e {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "           testUserProfile \u003d profileCommands.setAge(\"10\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMapTest \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            ArrayList\u003cString\u003e genreListTest \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            genreListTest.add(\"yes\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            flagMapTest.put(\"-a\", genreListTest);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            SetExceptions.checkPreferenceCommand(flagMapTest, testUserProfile);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        });"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    private void assertEqualProfile(UserProfile expected, UserProfile actual) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        assertEquals(expected.getUserName(), actual.getUserName());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        assertEquals(expected.getUserAge(), actual.getUserAge());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        assertEquals(expected.getGenreIdPreference(), actual.getGenreIdPreference());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        assertEquals(expected.getGenreIdRestriction(), actual.getGenreIdRestriction());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        assertEquals(expected.getPlaylistNames(), actual.getPlaylistNames());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        assertEquals(expected.isAdult(), actual.isAdult());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        assertEquals(expected.isSortByAlphabetical(), actual.isSortByAlphabetical());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        assertEquals(expected.isSortByHighestRating(), actual.isSortByHighestRating());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        assertEquals(expected.isSortByLatestRelease(), actual.isSortByLatestRelease());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nwenhui"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nwenhui": 195
    }
  },
  {
    "path": "src/test/java/entertainment/pro/storage/user/WatchlistTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "package entertainment.pro.storage.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import entertainment.pro.commons.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import entertainment.pro.model.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import entertainment.pro.model.MovieInfoObject;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import entertainment.pro.model.MovieModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import entertainment.pro.model.Period;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import entertainment.pro.storage.utils.BlacklistStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import entertainment.pro.storage.user.WatchlistHandler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import entertainment.pro.ui.MovieHandler;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "public class WatchlistTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public void addToWatchlist_deadline_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        WatchlistHandler.getWatchlist().clear();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Deadline movie_d \u003d new Deadline(\"joker\", \"D\", \"20/09/1997 14:00\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        WatchlistHandler.add(movie_d);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(true, WatchlistHandler.contains(\"joker\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(1, WatchlistHandler.getSize());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"D\", WatchlistHandler.getWatchlist().get(0).getType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Deadline movie_d2 \u003d new Deadline(\"spiderman\", \"D\", \"20/09/1997 14:00\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        WatchlistHandler.add(movie_d2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(true, WatchlistHandler.contains(\"spiderman\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(2, WatchlistHandler.getSize());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"D\", WatchlistHandler.getWatchlist().get(1).getType());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public void addToWatchlist_period_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        WatchlistHandler.getWatchlist().clear();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Period movie_d \u003d new Period(\"joker\", \"P\", \"20/09/1997 14:00\", \"08/10/2019 15:00\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        WatchlistHandler.add(movie_d);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(true, WatchlistHandler.contains(\"joker\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(1, WatchlistHandler.getSize());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"P\", WatchlistHandler.getWatchlist().get(0).getType());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Period movie_d2 \u003d new Period(\"superman\", \"P\", \"20/09/1997 14:00\", \"10/10/2019 15:00\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        WatchlistHandler.add(movie_d2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(true, WatchlistHandler.contains(\"superman\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(2, WatchlistHandler.getSize());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(\"P\", WatchlistHandler.getWatchlist().get(1).getType());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public void addToWatchlist_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        WatchlistHandler.getWatchlist().clear();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(false, WatchlistHandler.contains(\"joker\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(0, WatchlistHandler.getSize());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public void mark_as_Done_Success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        WatchlistHandler.getWatchlist().clear();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Deadline movie_d \u003d new Deadline(\"joker\", \"D\", \"20/09/1997 14:00\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Period movie_d2 \u003d new Period(\"spiderman\", \"P\", \"20/09/1997 14:00\", \"10/10/2019 15:00\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        WatchlistHandler.add(movie_d);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        WatchlistHandler.add(movie_d2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        WatchlistHandler.getWatchlist().get(0).setDone(true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(true, WatchlistHandler.getWatchlist().get(0).isDone());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        WatchlistHandler.getWatchlist().get(1).setDone(true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(true, WatchlistHandler.getWatchlist().get(1).isDone());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public void mark_as_Done_Failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        WatchlistHandler.getWatchlist().clear();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Deadline movie_d \u003d new Deadline(\"joker\", \"D\", \"20/09/1997 14:00\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Period movie_d2 \u003d new Period(\"spiderman\", \"P\", \"20/09/1997 14:00\", \"10/10/2019 15:00\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        WatchlistHandler.add(movie_d);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        WatchlistHandler.add(movie_d2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(false, WatchlistHandler.getWatchlist().get(0).isDone());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(false, WatchlistHandler.getWatchlist().get(1).isDone());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public void watchlist_Remove_Success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        WatchlistHandler.getWatchlist().clear();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Deadline movie_d \u003d new Deadline(\"joker\", \"D\", \"20/09/1997 14:00\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Period movie_d2 \u003d new Period(\"spiderman\", \"P\", \"20/09/1997 14:00\", \"10/10/2019 15:00\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        WatchlistHandler.add(movie_d);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        WatchlistHandler.add(movie_d2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(true, WatchlistHandler.removeFromWatchlist(\"joker\", new MovieHandler()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(true, WatchlistHandler.removeFromWatchlist(\"spiderman\", new MovieHandler()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public void watchlist_Remove_Failure() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        WatchlistHandler.getWatchlist().clear();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Deadline movie_d \u003d new Deadline(\"batman\", \"D\", \"20/09/1997 14:00\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Period movie_d2 \u003d new Period(\"spiderman\", \"P\", \"20/09/1997 14:00\", \"10/10/2019 15:00\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        WatchlistHandler.add(movie_d);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        WatchlistHandler.add(movie_d2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(false, WatchlistHandler.removeFromWatchlist(\"joker\", new MovieHandler()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(false, WatchlistHandler.removeFromWatchlist(\"superman\", new MovieHandler()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public void duplicate_detection_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        WatchlistHandler.getWatchlist().clear();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Deadline movie_d \u003d new Deadline(\"joker\", \"D\", \"20/09/1997 14:00\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Deadline movie_d2 \u003d new Deadline(\"joker\", \"D\", \"20/09/1997 14:00\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        WatchlistHandler.add(movie_d);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(false, WatchlistHandler.add(movie_d2));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Period movie_e \u003d new Period(\"spiderman\", \"P\", \"20/09/1997 14:00\", \"10/10/2019 15:00\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Period movie_e2 \u003d new Period(\"spiderman\", \"P\", \"20/09/1997 14:00\", \"10/10/2019 15:00\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        WatchlistHandler.add(movie_e);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(false, WatchlistHandler.add(movie_e2));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    public void duplicate_detection_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        WatchlistHandler.getWatchlist().clear();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Deadline movie_d \u003d new Deadline(\"joker\", \"D\", \"20/09/1997 14:00\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Deadline movie_d2 \u003d new Deadline(\"batman\", \"D\", \"20/09/1997 14:00\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        WatchlistHandler.add(movie_d);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(true, WatchlistHandler.add(movie_d2));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Period movie_e \u003d new Period(\"spiderman\", \"P\", \"20/09/1997 14:00\", \"10/10/2019 15:00\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        Period movie_e2 \u003d new Period(\"superman\", \"P\", \"20/09/1997 14:00\", \"10/10/2019 15:00\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        WatchlistHandler.add(movie_e);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "        assertEquals(true, WatchlistHandler.add(movie_e2));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hotspur1997": 130
    }
  },
  {
    "path": "src/test/java/entertainment/pro/storage/utils/OfflineSearchStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.storage.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.Exceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.logic.movierequesterapi.RetrieveRequest;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import org.json.simple.JSONArray;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import org.json.simple.JSONObject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import org.json.simple.parser.JSONParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import org.json.simple.parser.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class OfflineSearchStorageTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String CURRENT_MOVIES_DATA_FILEPATH \u003d \"/data/CurrentMovies.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TRENDING_MOVIES_DATA_FILEPATH \u003d \"/data/TrendingMovies.json\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String CURRENT_TV_DATA_FILEPATH \u003d \"/data/CurrentTV.json\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private static final String TRENDING_TV_DATA_FILEPATH \u003d \"/data/TrendingTV.json\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private RetrieveRequest.MoviesRequestType currentMovieType \u003d RetrieveRequest.MoviesRequestType.CURRENT_MOVIES;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private RetrieveRequest.MoviesRequestType trendingMovieType \u003d RetrieveRequest.MoviesRequestType.TRENDING_MOVIES;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private RetrieveRequest.MoviesRequestType searchMovieType \u003d RetrieveRequest.MoviesRequestType.SEARCH_MOVIES;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private RetrieveRequest.MoviesRequestType currentTVType \u003d RetrieveRequest.MoviesRequestType.CURRENT_TV;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    private RetrieveRequest.MoviesRequestType trendTVType \u003d RetrieveRequest.MoviesRequestType.TRENDING_TV;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void getFileNameTest() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(CURRENT_MOVIES_DATA_FILEPATH, OfflineSearchStorage.getFileName(currentMovieType));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(TRENDING_MOVIES_DATA_FILEPATH, OfflineSearchStorage.getFileName(trendingMovieType));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(\"\", OfflineSearchStorage.getFileName(searchMovieType));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(CURRENT_TV_DATA_FILEPATH, OfflineSearchStorage.getFileName(currentTVType));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(TRENDING_TV_DATA_FILEPATH, OfflineSearchStorage.getFileName(trendTVType));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Riyas97": 34
    }
  },
  {
    "path": "src/test/java/entertainment/pro/storage/utils/ProfileCommandsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "package entertainment.pro.storage.utils;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.DuplicateGenreException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.GenreDoesNotExistException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.commons.exceptions.InvalidFormatCommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.commons.exceptions.InvalidGenreNameEnteredException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import entertainment.pro.model.UserProfile;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "import entertainment.pro.storage.user.ProfileCommands;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "public class ProfileCommandsTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    static ProfileCommands profileCommands;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    static UserProfile userProfile;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "            userProfile \u003d new EditProfileJson().load();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands \u003d new ProfileCommands(userProfile);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void addPreferenceTest_valid_genre_pref() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        profileCommands.clearGenrePreference();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        profileCommands.clearGenreRestrict();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e genreOption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        genreOption.add(\"action\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        flagMap.put(\"-g\", genreOption);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands.addPreference(flagMap, \"-g\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (IOException | InvalidFormatCommandException | InvalidGenreNameEnteredException | DuplicateGenreException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cInteger\u003e getUserProfileGenre \u003d userProfile.getGenreIdPreference();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(1, getUserProfileGenre.size());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(28, getUserProfileGenre.get(0));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e newFlagMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e newGenreOption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        newGenreOption.add(\"horror\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        newGenreOption.add(\"comedy\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        newFlagMap.put(\"-g\", newGenreOption);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands.addPreference(newFlagMap, \"-g\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (IOException | InvalidFormatCommandException | InvalidGenreNameEnteredException | DuplicateGenreException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cInteger\u003e getNewUserProfileGenre \u003d userProfile.getGenreIdPreference();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(3, getNewUserProfileGenre.size());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(28, getNewUserProfileGenre.get(0));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(27, getNewUserProfileGenre.get(1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(35, getNewUserProfileGenre.get(2));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        profileCommands.clearGenreRestrict();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void addPreferenceTest_genrePref_return_invalid() throws InvalidFormatCommandException, IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        profileCommands.clearGenrePreference();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        profileCommands.clearGenreRestrict();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e genreOption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        genreOption.add(\"actio\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        flagMap.put(\"-g\", genreOption);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertThrows(InvalidGenreNameEnteredException.class, () -\u003e {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands.addPreference(flagMap, \"-g\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void addPreferenceTest_genrePref_return_dup() throws InvalidFormatCommandException, IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        profileCommands.clearGenrePreference();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        profileCommands.clearGenreRestrict();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e genreOption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        genreOption.add(\"action\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        flagMap.put(\"-r\", genreOption);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands.addPreference(flagMap, \"-r\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (IOException | InvalidFormatCommandException | InvalidGenreNameEnteredException | DuplicateGenreException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e newFlagMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e newGenreOption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        newGenreOption.add(\"action\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        newGenreOption.add(\"comedy\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        newFlagMap.put(\"-g\", newGenreOption);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertThrows(DuplicateGenreException.class, () -\u003e {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands.addPreference(newFlagMap, \"-g\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void addPreferenceTest_valid_genre_restrict() throws InvalidFormatCommandException, IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        profileCommands.clearGenrePreference();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        profileCommands.clearGenreRestrict();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e genreOption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        genreOption.add(\"action\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        flagMap.put(\"-r\", genreOption);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands.addPreference(flagMap, \"-r\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (IOException | InvalidFormatCommandException | InvalidGenreNameEnteredException | DuplicateGenreException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cInteger\u003e getUserProfileGenre \u003d userProfile.getGenreIdRestriction();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(1, getUserProfileGenre.size());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(28, getUserProfileGenre.get(0));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e newFlagMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e newGenreOption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        newGenreOption.add(\"horror\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        newGenreOption.add(\"comedy\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        newFlagMap.put(\"-r\", newGenreOption);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands.addPreference(newFlagMap, \"-r\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (IOException | InvalidFormatCommandException | InvalidGenreNameEnteredException | DuplicateGenreException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cInteger\u003e getNewUserProfileGenre \u003d userProfile.getGenreIdRestriction();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(3, getNewUserProfileGenre.size());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(28, getNewUserProfileGenre.get(0));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(27, getNewUserProfileGenre.get(1));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(35, getNewUserProfileGenre.get(2));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        profileCommands.clearGenreRestrict();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void addPreferenceTest_genreRestrict_return_invalid() throws InvalidFormatCommandException, IOException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        profileCommands.clearGenrePreference();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        profileCommands.clearGenreRestrict();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e genreOption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        genreOption.add(\"actio\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        flagMap.put(\"-r\", genreOption);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertThrows(InvalidGenreNameEnteredException.class, () -\u003e {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands.addPreference(flagMap, \"-r\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void addPreferenceTest_genreRestrict_return_dup() throws InvalidFormatCommandException, IOException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        profileCommands.clearGenrePreference();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        profileCommands.clearGenreRestrict();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e genreOption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        genreOption.add(\"action\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        flagMap.put(\"-g\", genreOption);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands.addPreference(flagMap, \"-g\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (IOException | InvalidFormatCommandException | InvalidGenreNameEnteredException | DuplicateGenreException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e newFlagMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e newGenreOption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        newGenreOption.add(\"action\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        newGenreOption.add(\"comedy\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        newFlagMap.put(\"-r\", newGenreOption);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertThrows(DuplicateGenreException.class, () -\u003e {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands.addPreference(newFlagMap, \"-r\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void addPreferenceTest_valid_sort_input() throws IOException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e sortOption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        sortOption.add(\"1\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        flagMap.put(\"-s\", sortOption);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            UserProfile newUserProfile \u003d profileCommands.addPreference(flagMap, \"-s\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            assertTrue(newUserProfile.isSortByAlphabetical(), \"Test failed\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            assertFalse(newUserProfile.isSortByHighestRating(), \"Test failed\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            assertFalse(newUserProfile.isSortByLatestRelease(), \"Test failed\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (IOException | InvalidFormatCommandException | InvalidGenreNameEnteredException | DuplicateGenreException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        profileCommands.clearSortPreference();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void addPreferenceTest_invalid_sort_input() throws IOException, InvalidFormatCommandException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e testFlagMap1 \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e testFlagMap2 \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e sortOption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        sortOption.add(\"4\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        testFlagMap1.put(\"-s\", sortOption);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        assertThrows(InvalidFormatCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands.addPreference(testFlagMap1, \"-s\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        testFlagMap1.get(\"-s\").add(\"4\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        assertThrows(InvalidFormatCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands.addPreference(testFlagMap1, \"-s\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        sortOption.clear();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        sortOption.add(\"0\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        testFlagMap2.put(\"-s\", sortOption);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        assertThrows(InvalidFormatCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands.addPreference(testFlagMap2, \"-s\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void addPreferenceTest_valid_adult_input() throws InvalidFormatCommandException, IOException, InvalidGenreNameEnteredException, DuplicateGenreException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e adultOption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        adultOption.add(\"true\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        flagMap.put(\"-a\", adultOption);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            UserProfile newUserProfile \u003d profileCommands.addPreference(flagMap, \"-a\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            assertTrue(newUserProfile.isAdult(), \"Test has failed\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        profileCommands.clearAdultPreference();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void addPreferenceTest_invalid_adult_input() throws IOException, InvalidFormatCommandException {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e testFlagMap1 \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e testFlagMap2 \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e adultOption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        adultOption.add(\"yes\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        testFlagMap1.put(\"-a\", adultOption);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        assertThrows(InvalidFormatCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands.addPreference(testFlagMap1, \"-a\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        testFlagMap1.get(\"-a\").add(\"true\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        assertThrows(InvalidFormatCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands.addPreference(testFlagMap1, \"-a\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        adultOption.clear();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        adultOption.add(\"allow\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        testFlagMap2.put(\"-a\", adultOption);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        assertThrows(InvalidFormatCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands.addPreference(testFlagMap2, \"-a\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void clearPreferenceTest_valid_sort_input() throws InvalidFormatCommandException, IOException {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e sortOption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        flagMap.put(\"-s\", sortOption);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands.clearPreference(flagMap, \"-s\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        UserProfile newUserProfile \u003d new EditProfileJson().load();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertFalse(newUserProfile.isSortByAlphabetical(), \"Test failed\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertFalse(newUserProfile.isSortByHighestRating(), \"Test failed\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertFalse(newUserProfile.isSortByLatestRelease(), \"Test failed\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        profileCommands.clearSortPreference();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void clearPreferenceTest_valid_adult_content() throws InvalidFormatCommandException, IOException {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e adultOption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        flagMap.put(\"-a\", adultOption);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            UserProfile newUserProfile \u003d profileCommands.clearPreference(flagMap, \"-a\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            assertFalse(newUserProfile.isAdult(), \"Test failed\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void clearPreferenceTest_valid_genre_pref() throws InvalidFormatCommandException, IOException {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        profileCommands.clearGenrePreference();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        profileCommands.clearGenreRestrict();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e clearFlagMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e genreOption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e newGenreOption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        genreOption.add(\"action\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        genreOption.add(\"adventure\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        flagMap.put(\"-g\", genreOption);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        clearFlagMap.put(\"-g\", newGenreOption);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands.addPreference(flagMap, \"-g\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands.clearPreference(clearFlagMap, \"-g\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (IOException | InvalidFormatCommandException | InvalidGenreNameEnteredException | DuplicateGenreException e) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(0, userProfile.getGenreIdPreference().size());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void clearPreferenceTest_valid_genre_restrict() throws InvalidFormatCommandException, IOException {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        profileCommands.clearGenrePreference();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        profileCommands.clearGenreRestrict();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e clearFlagMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e genreOption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e newGenreOption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        genreOption.add(\"action\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        genreOption.add(\"adventure\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        flagMap.put(\"-r\", genreOption);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        clearFlagMap.put(\"-r\", newGenreOption);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands.addPreference(flagMap, \"-r\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands.clearPreference(clearFlagMap, \"-r\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (IOException | InvalidFormatCommandException | InvalidGenreNameEnteredException | DuplicateGenreException e) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(0, userProfile.getGenreIdPreference().size());"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "    public void clearPreferenceTest_invalid_sort_input() throws IOException, InvalidFormatCommandException {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e testFlagMap1 \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e testFlagMap2 \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e sortOption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        sortOption.add(\"4\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        testFlagMap1.put(\"-s\", sortOption);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        assertThrows(InvalidFormatCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands.clearPreference(testFlagMap1, \"-s\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        testFlagMap1.get(\"-s\").add(\"0\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        assertThrows(InvalidFormatCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands.clearPreference(testFlagMap1, \"-s\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        sortOption.clear();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        sortOption.add(\"0\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        testFlagMap2.put(\"-s\", sortOption);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "nwenhui"
        },
        "content": "        assertThrows(InvalidFormatCommandException.class, () -\u003e {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands.clearPreference(testFlagMap2, \"-s\");"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void removePreferenceTest_valid_genre_pref() throws InvalidFormatCommandException, IOException {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        profileCommands.clearGenrePreference();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        profileCommands.clearGenreRestrict();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e genreOption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        genreOption.add(\"action\");"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        genreOption.add(\"horror\");"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        flagMap.put(\"-g\", genreOption);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e removeFlagMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e removeGenreOption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        removeGenreOption.add(\"action\");"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        removeFlagMap.put(\"-g\", removeGenreOption);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands.addPreference(flagMap, \"-g\");"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands.removePreference(removeFlagMap, \"-g\");"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (IOException | InvalidFormatCommandException | InvalidGenreNameEnteredException | DuplicateGenreException | GenreDoesNotExistException e) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cInteger\u003e getUserProfileGenre \u003d userProfile.getGenreIdPreference();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(1, getUserProfileGenre.size());"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(27, getUserProfileGenre.get(0));"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void removePreferenceTest_valid_genre_restrict() throws InvalidFormatCommandException, IOException {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        profileCommands.clearGenrePreference();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        profileCommands.clearGenreRestrict();"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e genreOption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        genreOption.add(\"action\");"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        genreOption.add(\"horror\");"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        flagMap.put(\"-r\", genreOption);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e removeFlagMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e removeGenreOption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        removeGenreOption.add(\"action\");"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        removeFlagMap.put(\"-r\", removeGenreOption);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands.addPreference(flagMap, \"-r\");"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands.removePreference(removeFlagMap, \"-r\");"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (IOException | InvalidFormatCommandException | InvalidGenreNameEnteredException | DuplicateGenreException | GenreDoesNotExistException e) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cInteger\u003e getUserProfileGenre \u003d userProfile.getGenreIdRestriction();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(1, getUserProfileGenre.size());"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        assertEquals(27, getUserProfileGenre.get(0));"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void removePreferenceTest_genre_pref_returns_invalid() throws InvalidFormatCommandException, IOException {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        profileCommands.clearGenrePreference();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        profileCommands.clearGenreRestrict();"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e genreOption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        genreOption.add(\"action\");"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        genreOption.add(\"horror\");"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        flagMap.put(\"-g\", genreOption);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e removeFlagMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e removeGenreOption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        removeGenreOption.add(\"actio\");"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        removeFlagMap.put(\"-g\", removeGenreOption);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands.addPreference(flagMap, \"-g\");"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            assertThrows(InvalidGenreNameEnteredException.class, () -\u003e {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                profileCommands.removePreference(removeFlagMap, \"-g\");"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            });"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (IOException | InvalidFormatCommandException | InvalidGenreNameEnteredException | DuplicateGenreException e) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void removePreferenceTest_genre_pref_returns_does_not_exists() throws InvalidFormatCommandException, IOException {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        profileCommands.clearGenrePreference();"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        profileCommands.clearGenreRestrict();"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e genreOption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        genreOption.add(\"action\");"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        genreOption.add(\"horror\");"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        flagMap.put(\"-g\", genreOption);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e removeFlagMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e removeGenreOption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        removeGenreOption.add(\"comedy\");"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        removeFlagMap.put(\"-g\", removeGenreOption);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands.addPreference(flagMap, \"-g\");"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            assertThrows(GenreDoesNotExistException.class, () -\u003e {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                profileCommands.removePreference(removeFlagMap, \"-g\");"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            });"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (IOException | InvalidFormatCommandException | InvalidGenreNameEnteredException | DuplicateGenreException e) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Riyas97"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    public void removePreferenceTest_genre_restrict_returns_does_not_exists() throws InvalidFormatCommandException, IOException {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        profileCommands.clearGenrePreference();"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        profileCommands.clearGenreRestrict();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e flagMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e genreOption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        genreOption.add(\"action\");"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        genreOption.add(\"horror\");"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        flagMap.put(\"-g\", genreOption);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        TreeMap\u003cString, ArrayList\u003cString\u003e\u003e removeFlagMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        ArrayList\u003cString\u003e removeGenreOption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        removeGenreOption.add(\"horror\");"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        removeFlagMap.put(\"-r\", removeGenreOption);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            profileCommands.addPreference(flagMap, \"-g\");"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            assertThrows(GenreDoesNotExistException.class, () -\u003e {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "                profileCommands.removePreference(removeFlagMap, \"-r\");"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            });"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        } catch (IOException | InvalidFormatCommandException | InvalidGenreNameEnteredException | DuplicateGenreException e) {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Riyas97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hotspur1997": 1,
      "Riyas97": 447,
      "nwenhui": 16
    }
  },
  {
    "path": "src/test/java/parser/ParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//import duke.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//public class ParserTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//        public void verifyCheckValue() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//        assertEquals(1, Parser.handleCommand(\"bye\", \"bye\"));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//        assertEquals(0, Parser.handleCommand(\"fixx\", \"fixx 2\"));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//        assertEquals(0, Parser.handleCommand(\"event\", \"event add /at tenta\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "Pdotdeep": 14
    }
  },
  {
    "path": "src/test/java/parser/TimeParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "import entertainment.pro.logic.parsers.TimeParser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class TimeParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testDateConversion() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "       String str \u003d TimeParser.convertDateToLine(TimeParser.convertStringToDate(\"20/09/2019\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "       String str2 \u003d TimeParser.convertDateToLine(TimeParser.convertStringToDate(\"20/09/2019 1800\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "       String str3 \u003d TimeParser.convertDateToLine(TimeParser.convertStringToDate(\"20/09/2019 1800\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "       String str4 \u003d TimeParser.convertDateToLine(TimeParser.convertStringToDate(\"20-SEP-2019 1800\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "       assertEquals(\"20th of September 2019, 12:00 AM\", str);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "       assertEquals(\"20th of September 2019, 06:00 PM\", str2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "       assertEquals(\"20th of September 2019, 06:00 PM\", str3);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "       assertEquals(\"20th of September 2019, 06:00 PM\", str4);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "       String str5 \u003d TimeParser.convertDateToLine(TimeParser.convertStringToDate(\"20/09/2019\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "       String str6 \u003d TimeParser.convertDateToLine(TimeParser.convertStringToDate(\"20/09/2019 18:00\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "       String str7 \u003d TimeParser.convertDateToLine(TimeParser.convertStringToDate(\"20/09/2019 18:00\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "       String str8 \u003d TimeParser.convertDateToLine(TimeParser.convertStringToDate(\"20-SEP-2019 18:00\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "       assertEquals(\"20th of September 2019, 12:00 AM\", str5);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "       assertEquals(\"20th of September 2019, 06:00 PM\", str6);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "       assertEquals(\"20th of September 2019, 06:00 PM\", str7);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "       assertEquals(\"20th of September 2019, 06:00 PM\", str8);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hotspur1997"
        },
        "content": "   }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hotspur1997": 18,
      "-": 11
    }
  },
  {
    "path": "src/test/java/wrapper/MyDatetest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//package wrapper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//import entertainment.pro.model.MyDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//public class MyDatetest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//    public void dummyTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//        MyDate temp \u003d new MyDate(\"12/12/2019 12:30\", \"14/12/2019 19:30\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//        assertEquals(\"12th of December 2019, 12:30 PM\", temp.getStartDateStr());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//        assertEquals(\"14th of December 2019, 07:30 PM\", temp.getEndDateStr());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Pdotdeep"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "Pdotdeep": 19
    }
  }
]
